{
  "sourceLanguage" : "en",
  "strings" : {
    "common_programming_concepts" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Common Program Concept"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Концепт"
          }
        }
      }
    },
    "delete" : {
      "comment" : "A button that deletes all sources.",
      "isCommentAutoGenerated" : true
    },
    "MainScreenView" : {
      "comment" : "The title of the main screen view.",
      "isCommentAutoGenerated" : true
    },
    "No sources" : {
      "comment" : "A message displayed when there are no sources available.",
      "isCommentAutoGenerated" : true
    },
    "OnBoardingScreenView" : {
      "comment" : "The title of the OnBoardingScreenView view.",
      "isCommentAutoGenerated" : true
    },
    "QuizScreenView" : {
      "comment" : "The title of the view.",
      "isCommentAutoGenerated" : true
    },
    "refresh" : {
      "comment" : "A button to refresh the view.",
      "isCommentAutoGenerated" : true
    },
    "SettingsScreenView" : {
      "comment" : "The name of the view that appears when the settings screen is displayed.",
      "isCommentAutoGenerated" : true
    },
    "the_book" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "The Book"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Книга"
          }
        }
      }
    },
    "update" : {
      "comment" : "A button that updates the list of sources.",
      "isCommentAutoGenerated" : true
    },
    "how_are_variables_declared_by_default_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How are variables declared by default in Rust?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как переменные объявляются по умолчанию в Rust?"
          }
        }
      }
    },
    "to_make_a_variable_mutable_you_need" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To make a variable mutable you need"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чтобы сделать переменную изменяемой, вам нужно"
          }
        }
      }
    },
    "what_will_happen_let_x_5_x_10" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet x = 5\nx = 10;"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet x = 5\nx = 10;"
          }
        }
      }
    },
    "how_does_const_differ_from_let" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does const differ from let?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем const отличается от let?"
          }
        }
      }
    },
    "valid_constant_declaration" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Valid constant declaration:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Правильное объявление константы:"
          }
        }
      }
    },
    "what_is_shadowing" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is shadowing?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое shadowing (затенение)?"
          }
        }
      }
    },
    "what_can_you_do_with_shadowing_but_not_mut" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What can you do with shadowing but not with mut?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что можно делать с shadowing, но нельзя с mut?"
          }
        }
      }
    },
    "what_will_this_print_shadowing_example" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet x = 5;\nlet x = x + 2;\nlet x = x * 3;\nprintln!(\"{x}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet x = 5;\nlet x = x + 2;\nlet x = x * 3;\nprintln!(\"{x}\");"
          }
        }
      }
    },
    "what_will_happen_let_mut_s_hi_s_s_len" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet mut s = \"hi\";\ns = s.len();"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet mut s = \"hi\";\ns = s.len();"
          }
        }
      }
    },
    "default_integer_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Default integer type:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип целого числа по умолчанию:"
          }
        }
      }
    },
    "range_of_u8" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Range of u8:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Диапазон u8:"
          }
        }
      }
    },
    "what_about_let_x_u8_256_debug" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What about let x: u8 = 256; (debug)?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что насчет let x: u8 = 256; (debug)?"
          }
        }
      }
    },
    "type_of_57u8" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Type of 57u8:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип 57u8:"
          }
        }
      }
    },
    "what_does_0b1111_0000_mean" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does 0b1111_0000 mean?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что означает 0b1111_0000?"
          }
        }
      }
    },
    "default_float_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Default float type:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип числа с плавающей точкой по умолчанию:"
          }
        }
      }
    },
    "result_integers_5_divided_by_3" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Result (integers): -5 / 3"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Результат (целые числа): -5 / 3"
          }
        }
      }
    },
    "boolean_literal" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Boolean literal:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Булевый литерал:"
          }
        }
      }
    },
    "char_in_rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "char in Rust:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "char в Rust:"
          }
        }
      }
    },
    "about_tuples" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About tuples:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О кортежах:"
          }
        }
      }
    },
    "what_will_this_print_tuple_index" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet t = (1, 2.0, 'c');\nprintln!(\"{}\", t.1);"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet t = (1, 2.0, 'c');\nprintln!(\"{}\", t.1);"
          }
        }
      }
    },
    "about_i32_5_array" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About [i32; 5]:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О [i32; 5]:"
          }
        }
      }
    },
    "what_does_let_a_3_4_create" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does let a = [3; 4]; create?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что создает let a = [3; 4];?"
          }
        }
      }
    },
    "accessing_a_10_when_length_is_5" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Accessing a[10] when length is 5:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Обращение к a[10] когда длина равна 5:"
          }
        }
      }
    },
    "function_declaration" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function declaration:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Объявление функции:"
          }
        }
      }
    },
    "function_parameters" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function parameters:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Параметры функции:"
          }
        }
      }
    },
    "default_return" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Default return:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Возврат по умолчанию:"
          }
        }
      }
    },
    "if_you_put_semicolon_after_x_plus_1_in_function" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "If you put ; after x + 1 in function with -> i32:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Если вы поставите ; после x + 1 в функции с -> i32:"
          }
        }
      }
    },
    "statement_vs_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Statement vs expression:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Оператор против выражения:"
          }
        }
      }
    },
    "what_happens_let_x_let_y_6" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens?\n\nlet x = (let y = 6);"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet x = (let y = 6);"
          }
        }
      }
    },
    "type_of_if_condition" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Type of if condition:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип условия if:"
          }
        }
      }
    },
    "about_if_else_as_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About if/else as an expression:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Об if/else как выражении:"
          }
        }
      }
    },
    "what_will_this_print_if_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet n = if true { 1 } else { 2 };\nprintln!(\"{n}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet n = if true { 1 } else { 2 };\nprintln!(\"{n}\");"
          }
        }
      }
    },
    "infinite_loop_until_break" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Infinite loop until break:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Бесконечный цикл до break:"
          }
        }
      }
    },
    "break_value_in_loop" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "break value; in loop:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "break value; в цикле:"
          }
        }
      }
    },
    "loop_labels_label" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Loop labels 'label:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Метки циклов 'label:"
          }
        }
      }
    },
    "about_while" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About while:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О while:"
          }
        }
      }
    },
    "about_for" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About for:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О for:"
          }
        }
      }
    },
    "countdown_3_to_1" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Countdown 3..1:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Обратный отсчет 3..1:"
          }
        }
      }
    },
    "comments" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Comments:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Комментарии:"
          }
        }
      }
    },
    "valid_comment" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Valid comment:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Правильный комментарий:"
          }
        }
      }
    },
    "about_usize" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About usize:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О usize:"
          }
        }
      }
    },
    "tuple_of_three_elements" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tuple of three elements:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Кортеж из трех элементов:"
          }
        }
      }
    },
    "what_does_b_A_mean" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does b'A' mean?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что означает b'A'?"
          }
        }
      }
    },
    "range_of_i16" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Range of i16:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Диапазон i16:"
          }
        }
      }
    },
    "unit_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Unit type ()…"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Единичный тип ()…"
          }
        }
      }
    },
    "valid_function_with_parameter" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Valid function with parameter:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Правильная функция с параметром:"
          }
        }
      }
    },
    "what_will_this_print_block_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nfn main() {\n    let x = {\n        let y = 2;\n        y + 3\n    };\n    println!(\"{x}\");\n}"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nfn main() {\n    let x = {\n        let y = 2;\n        y + 3\n    };\n    println!(\"{x}\");\n}"
          }
        }
      }
    },
    "what_will_happen_if_false_10_else_ten" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet number = if false { 10 } else { \"ten\" };"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet number = if false { 10 } else { \"ten\" };"
          }
        }
      }
    },
    "how_to_exit_infinite_loop_properly" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to exit an infinite loop properly?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как правильно выйти из бесконечного цикла?"
          }
        }
      }
    },
    "about_keywords" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About keywords:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О ключевых словах:"
          }
        }
      }
    },
    "what_about_let_guess_u32_42_parse_unwrap" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What about let guess: u32 = \"42\".parse().unwrap();?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что насчет let guess: u32 = \"42\".parse().unwrap();?"
          }
        }
      }
    },
    "what_does_len_do_on_i32_5" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does .len() do on [i32; 5]?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает .len() на [i32; 5]?"
          }
        }
      }
    },
    "overflow_of_u8_in_release" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Overflow of u8 in release:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Переполнение u8 в release:"
          }
        }
      }
    },
    "modulo_operator" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Modulo operator:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Оператор модуло:"
          }
        }
      }
    },
    "function_with_return_value" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function with return value:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Функция с возвращаемым значением:"
          }
        }
      }
    },
    "about_for_in_rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About for in Rust:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О for в Rust:"
          }
        }
      }
    },
    "hex_literal" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Hex literal:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Шестнадцатеричный литерал:"
          }
        }
      }
    },
    "what_will_this_print_months_array" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet months = [\"Jan\", \"Feb\", \"Mar\"];\nprintln!(\"{}\", months[2]);"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet months = [\"Jan\", \"Feb\", \"Mar\"];\nprintln!(\"{}\", months[2]);"
          }
        }
      }
    },
    "about_continue" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About continue:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О continue:"
          }
        }
      }
    },
    "about_rev" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About rev():"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О rev():"
          }
        }
      }
    },
    "explicit_type_for_variable" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Explicit type for variable:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Явный тип для переменной:"
          }
        }
      }
    },
    "function_naming_style" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function naming style:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Стиль именования функций:"
          }
        }
      }
    },
    "what_will_happen_plus_function" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nfn plus(x: i32) -> i32 {\n    x + 1\n}\nprintln!(\"{}\", plus(4));"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nfn plus(x: i32) -> i32 {\n    x + 1\n}\nprintln!(\"{}\", plus(4));"
          }
        }
      }
    },
    "about_comments" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About comments:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О комментариях:"
          }
        }
      }
    },
    "result_of_43_modulo_5" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Result of 43 % 5:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Результат 43 % 5:"
          }
        }
      }
    },
    "what_is_ownership_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is ownership in Rust?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое владение в Rust?"
          }
        }
      }
    },
    "which_rule_about_values_owner_is_true" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which rule about a value's owner is true?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какое правило о владельце значения верно?"
          }
        }
      }
    },
    "what_happens_when_owner_goes_out_of_scope" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens when the owner goes out of scope?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит, когда владелец выходит из области видимости?"
          }
        }
      }
    },
    "where_do_fixed_size_types_live_entirely" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Where do fixed-size types (e.g., i32) live entirely?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Где полностью находятся типы фиксированного размера (например, i32)?"
          }
        }
      }
    },
    "how_does_str_differ_from_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does &str differ from String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем &str отличается от String?"
          }
        }
      }
    },
    "what_will_happen_string_move_example" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet s1 = String::from(\"hi\");\nlet s2 = s1;\nprintln!(\"{s1}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet s1 = String::from(\"hi\");\nlet s2 = s1;\nprintln!(\"{s1}\");"
          }
        }
      }
    },
    "what_is_name_of_ownership_transfer_in_let_s2_s1" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is the name of the ownership transfer in let s2 = s1;?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как называется передача владения в let s2 = s1;?"
          }
        }
      }
    },
    "what_is_copied_in_let_s2_s1_for_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is copied in let s2 = s1; for String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что копируется в let s2 = s1; для String?"
          }
        }
      }
    },
    "why_does_rust_invalidate_old_variable_after_move" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why does Rust invalidate the old variable after a move?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему Rust делает недействительной старую переменную после перемещения?"
          }
        }
      }
    },
    "what_does_clone_do_for_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does clone() do for String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает clone() для String?"
          }
        }
      }
    },
    "which_types_typically_implement_copy" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which types typically implement Copy?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какие типы обычно реализуют Copy?"
          }
        }
      }
    },
    "why_isnt_string_copy" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why isn't String Copy?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему String не Copy?"
          }
        }
      }
    },
    "passing_arguments_to_function_by_value" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Passing arguments to a function by value…"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Передача аргументов в функцию по значению…"
          }
        }
      }
    },
    "which_is_true_function_takes_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which is true?\n\nfn takes(s: String) {}\nlet x = String::from(\"hi\");\ntakes(x);\n// here x ..."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что верно?\n\nfn takes(s: String) {}\nlet x = String::from(\"hi\");\ntakes(x);\n// здесь x ..."
          }
        }
      }
    },
    "how_to_return_value_without_return" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to return a value without return?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как вернуть значение без return?"
          }
        }
      }
    },
    "why_use_references_t" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why use references &T?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Зачем использовать ссылки &T?"
          }
        }
      }
    },
    "what_is_true_about_string_reference" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is true about &String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что верно о &String?"
          }
        }
      }
    },
    "how_to_allow_modifying_borrowed_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to allow modifying a borrowed String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как разрешить изменение заимствованной String?"
          }
        }
      }
    },
    "constraint_on_references" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Constraint on references:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Ограничение на ссылки:"
          }
        }
      }
    },
    "what_happens_with_simultaneous_and_mut_to_same_object" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens with simultaneous & and &mut to the same object?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит при одновременных & и &mut к одному объекту?"
          }
        }
      }
    },
    "when_does_reference_lifetime_end_in_simple_cases_nll" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "When does a reference's lifetime end in simple cases (NLL)?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Когда заканчивается время жизни ссылки в простых случаях (NLL)?"
          }
        }
      }
    },
    "what_is_dangling_reference" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is a \"dangling\" reference?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое \"висячая\" ссылка?"
          }
        }
      }
    },
    "why_doesnt_dangle_function_compile" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why doesn't this compile:\nfn dangle() -> &String { let s = String::from(\"x\"); &s }?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему это не компилируется:\nfn dangle() -> &String { let s = String::from(\"x\"); &s }?"
          }
        }
      }
    },
    "how_to_fix_dangle" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to fix dangle?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как исправить dangle?"
          }
        }
      }
    },
    "what_is_slice_str_t" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is a slice (&str, &[T])?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое срез (&str, &[T])?"
          }
        }
      }
    },
    "why_is_returning_usize_index_from_first_word_risky" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why is returning a usize index from first_word risky?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему возврат usize индекса из first_word рискован?"
          }
        }
      }
    },
    "which_signature_is_more_general_first_word" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which signature is more general?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какая сигнатура более общая?"
          }
        }
      }
    },
    "what_does_slice_s_3_7_of_string_store" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does the slice &s[3..7] of a String store?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что хранит срез &s[3..7] строки String?"
          }
        }
      }
    },
    "what_slice_bounds_are_valid_for_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What slice bounds are valid for a string?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какие границы среза валидны для строки?"
          }
        }
      }
    },
    "what_will_happen_string_clear_borrow_conflict" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet mut s = String::from(\"hello world\");\nlet w = first_word(&s);\ns.clear();\nprintln!(\"{w}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet mut s = String::from(\"hello world\");\nlet w = first_word(&s);\ns.clear();\nprintln!(\"{w}\");"
          }
        }
      }
    },
    "how_is_a_struct_defined_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How is a struct defined in Rust?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как определяется структура в Rust?"
          }
        }
      }
    },
    "what_are_fields_in_a_struct" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What are fields in a struct?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое поля в структуре?"
          }
        }
      }
    },
    "what_must_be_specified_when_declaring_a_field" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What must be specified when declaring a field?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что должно быть указано при объявлении поля?"
          }
        }
      }
    },
    "how_do_you_create_a_struct_instance" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you create a struct instance?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как создать экземпляр структуры?"
          }
        }
      }
    },
    "can_you_change_the_fields_of_a_struct_instance" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Can you change the fields of a struct instance?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Можно ли изменять поля экземпляра структуры?"
          }
        }
      }
    },
    "how_do_you_access_a_struct_field" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you access a struct field?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как получить доступ к полю структуры?"
          }
        }
      }
    },
    "what_does_field_init_shorthand_do" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does \"field init shorthand\" do?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает \"сокращенная инициализация полей\"?"
          }
        }
      }
    },
    "what_does_the_shorthand_call_look_like" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does the shorthand call look like?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как выглядит сокращенный вызов?"
          }
        }
      }
    },
    "what_does_the_struct_update_syntax_do" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does the \"struct update syntax\" do?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает \"синтаксис обновления структуры\"?"
          }
        }
      }
    },
    "how_is_the_update_syntax_written" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How is the update syntax written?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как записывается синтаксис обновления?"
          }
        }
      }
    },
    "what_happens_to_user1_username_when_using_user1" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens to user1.username when using ..user1?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит с user1.username при использовании ..user1?"
          }
        }
      }
    },
    "what_happens_to_user1_active_if_its_a_bool" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens to user1.active if it's a bool?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит с user1.active если это bool?"
          }
        }
      }
    },
    "what_is_a_tuple_struct" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is a tuple struct?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое tuple struct?"
          }
        }
      }
    },
    "how_do_you_declare_a_tuple_struct" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you declare a tuple struct?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как объявить tuple struct?"
          }
        }
      }
    },
    "how_do_Color_and_Point_differ" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do Color and Point differ?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем отличаются Color и Point?"
          }
        }
      }
    },
    "what_is_a_unit_like_struct" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is a unit-like struct?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое unit-like struct?"
          }
        }
      }
    },
    "what_are_unit_like_structs_used_for" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What are unit-like structs used for?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Для чего используются unit-like structs?"
          }
        }
      }
    },
    "why_do_structs_usually_use_String_instead_of_str" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why do structs usually use String instead of &str?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему структуры обычно используют String вместо &str?"
          }
        }
      }
    },
    "what_happens_if_you_put_str_in_a_struct_without_a_lifetime" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens if you put &str in a struct without a lifetime?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит, если поместить &str в структуру без времени жизни?"
          }
        }
      }
    },
    "how_do_you_fix_a_struct_with_str" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you fix a struct with &str?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как исправить структуру с &str?"
          }
        }
      }
    },
    "why_is_area_width_height_inconvenient" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why is area(width, height) inconvenient?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему area(width, height) неудобно?"
          }
        }
      }
    },
    "why_is_a_tuple_inconvenient_for_a_rectangle" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why is a tuple inconvenient for a rectangle?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему кортеж неудобен для прямоугольника?"
          }
        }
      }
    },
    "why_is_struct_Rectangle_better_than_a_tuple" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why is struct Rectangle better than a tuple?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему struct Rectangle лучше кортежа?"
          }
        }
      }
    },
    "what_happens_with_println_rect1" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens with println!(\"{rect1}\")?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит с println!(\"{rect1}\")?"
          }
        }
      }
    },
    "whats_needed_for_debug_formatting" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What's needed for debug formatting?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что нужно для отладочного форматирования?"
          }
        }
      }
    },
    "how_does_dbg_differ_from_println" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does dbg! differ from println!?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем dbg! отличается от println!?"
          }
        }
      }
    },
    "how_do_you_declare_a_method_for_a_struct" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you declare a method for a struct?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как объявить метод для структуры?"
          }
        }
      }
    },
    "how_does_a_function_differ_from_a_method" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does a function differ from a method?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем функция отличается от метода?"
          }
        }
      }
    },
    "what_does_self_mean" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does &self mean?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что означает &self?"
          }
        }
      }
    },
    "how_do_you_declare_a_method_that_changes_fields" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you declare a method that changes fields?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как объявить метод, который изменяет поля?"
          }
        }
      }
    },
    "what_does_the_can_hold_method_do" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does the can_hold() method do?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает метод can_hold()?"
          }
        }
      }
    },
    "how_do_you_call_a_method" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you call a method?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как вызвать метод?"
          }
        }
      }
    },
    "what_is_an_associated_function" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is an associated function?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое ассоциированная функция?"
          }
        }
      }
    },
    "how_do_you_call_an_associated_function" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you call an associated function?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как вызвать ассоциированную функцию?"
          }
        }
      }
    },
    "what_does_Self_refer_to_in_an_impl" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does Self refer to in an impl?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "На что ссылается Self в impl?"
          }
        }
      }
    },
    "can_you_have_multiple_impl_blocks_for_one_struct" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Can you have multiple impl blocks for one struct?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Можно ли иметь несколько impl блоков для одной структуры?"
          }
        }
      }
    },
    "what_happens_if_a_method_and_a_field_share_a_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens if a method and a field share a name?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит, если метод и поле имеют одинаковое имя?"
          }
        }
      }
    },
    "what_is_a_getter_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is a getter in Rust?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое getter в Rust?"
          }
        }
      }
    },
    "how_does_Rust_replace_from_C" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does Rust replace -> from C++?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как Rust заменяет -> из C++?"
          }
        }
      }
    },
    "what_does_dbg_print_for_dbg_30_2" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does dbg! print for dbg!(30 * 2)?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что выводит dbg! для dbg!(30 * 2)?"
          }
        }
      }
    },
    "what_is_the_pretty_debug_syntax" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is the pretty debug syntax?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какой синтаксис для красивого отладочного вывода?"
          }
        }
      }
    },
    "what_does_impl_Rectangle_fn_new_Self_do" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does impl Rectangle { fn new() -> Self { … } } do?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает impl Rectangle { fn new() -> Self { … } }?"
          }
        }
      }
    },
    "bottom_line_why_use_structs" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Bottom line: why use structs?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "В итоге: зачем использовать структуры?"
          }
        }
      }
    },
    "use_the_struct_keyword_with_braces_Rust_has_no_Java_Kotlin_style_class_or_object" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Use the struct keyword with braces. Rust has no Java/Kotlin style class or object."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Используйте ключевое слово struct с фигурными скобками. В Rust нет классов или объектов в стиле Java/Kotlin."
          }
        }
      }
    },
    "fields_are_the_components_of_a_struct_each_with_its_own_name_and_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fields are the components of a struct, each with its own name and type."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Поля - это компоненты структуры, каждый со своим именем и типом."
          }
        }
      }
    },
    "struct_fields_always_specify_both_name_and_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Struct fields always specify both name and type."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Поля структуры всегда указывают и имя, и тип."
          }
        }
      }
    },
    "a_struct_instance_is_created_with_key_value" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A struct instance is created with { key: value }."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Экземпляр структуры создается с помощью { ключ: значение }."
          }
        }
      }
    },
    "in_Rust_mutability_is_set_for_the_whole_instance" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "In Rust, mutability is set for the whole instance."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "В Rust изменяемость устанавливается для всего экземпляра."
          }
        }
      }
    },
    "use_dot_notation" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Use dot notation."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Используйте точечную нотацию."
          }
        }
      }
    },
    "if_a_parameter_and_field_share_a_name_you_can_write_it_once" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "If a parameter and field share a name, you can write it once."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Если параметр и поле имеют одинаковое имя, можно написать его один раз."
          }
        }
      }
    },
    "Rust_expands_email_to_email_email" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust expands email to email: email."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust разворачивает email в email: email."
          }
        }
      }
    },
    "use_other_struct" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Use ..other_struct."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Используйте ..other_struct."
          }
        }
      }
    },
    "user1_copies_the_remaining_fields" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "..user1 copies the remaining fields."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "..user1 копирует оставшиеся поля."
          }
        }
      }
    },
    "String_fields_are_moved" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "String fields are moved."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Поля String перемещаются."
          }
        }
      }
    },
    "bool_implements_Copy" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "bool implements Copy."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "bool реализует Copy."
          }
        }
      }
    },
    "fields_are_specified_only_by_types" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fields are specified only by types."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Поля указываются только типами."
          }
        }
      }
    },
    "provide_the_name_and_types_in_parentheses" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Provide the name and types in parentheses."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Укажите имя и типы в скобках."
          }
        }
      }
    },
    "each_struct_is_a_distinct_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Each struct is a distinct type."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Каждая структура - это отдельный тип."
          }
        }
      }
    },
    "written_as_struct_Name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Written as struct Name;"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Записывается как struct Name;"
          }
        }
      }
    },
    "used_for_behavior_not_data" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Used for behavior, not data."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Используется для поведения, а не данных."
          }
        }
      }
    },
    "String_owns_data_str_requires_a_lifetime" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "String owns data; &str requires a lifetime."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "String владеет данными; &str требует время жизни."
          }
        }
      }
    },
    "Rust_requires_lifetime_parameters_for_references" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust requires lifetime parameters for references."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust требует параметры времени жизни для ссылок."
          }
        }
      }
    },
    "references_need_a_lifetime" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "References need a lifetime."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Ссылкам нужно время жизни."
          }
        }
      }
    },
    "width_and_height_arent_tied_together" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "width and height aren't tied together."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "width и height не связаны между собой."
          }
        }
      }
    },
    "with_tuples_you_must_remember_indices" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "With tuples you must remember indices."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "С кортежами нужно помнить индексы."
          }
        }
      }
    },
    "a_struct_adds_semantics" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A struct adds semantics."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Структура добавляет семантику."
          }
        }
      }
    },
    "structs_dont_have_Display_by_default" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Structs don't have Display by default."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Структуры не имеют Display по умолчанию."
          }
        }
      }
    },
    "Debug_must_be_explicitly_enabled" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Debug must be explicitly enabled."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Debug должен быть явно включен."
          }
        }
      }
    },
    "dbg_is_handy_for_debugging" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "dbg! is handy for debugging."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "dbg! удобен для отладки."
          }
        }
      }
    },
    "methods_live_inside_impl_blocks" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Methods live inside impl blocks."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Методы находятся внутри impl блоков."
          }
        }
      }
    },
    "a_method_is_a_function_bound_to_a_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A method is a function bound to a type."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Метод - это функция, привязанная к типу."
          }
        }
      }
    },
    "self_is_sugar_for_self_Self" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "&self is sugar for self: &Self."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "&self - это сахар для self: &Self."
          }
        }
      }
    },
    "you_need_mut_self" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You need &mut self."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Нужен &mut self."
          }
        }
      }
    },
    "compares_width_and_height" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Compares width and height."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Сравнивает ширину и высоту."
          }
        }
      }
    },
    "use_instance_method" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Use instance.method()."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Используйте instance.method()."
          }
        }
      }
    },
    "an_associated_function_doesnt_take_self" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "An associated function doesn't take self."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Ассоциированная функция не принимает self."
          }
        }
      }
    },
    "use_Type_func" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Use Type::func()."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Используйте Type::func()."
          }
        }
      }
    },
    "Self_equals_the_type_being_implemented" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Self equals the type being implemented."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Self равен типу, который реализуется."
          }
        }
      }
    },
    "you_can_split_impls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You can split impls."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Можно разделить impl блоки."
          }
        }
      }
    },
    "parentheses_indicate_a_method_call" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Parentheses indicate a method call."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Скобки указывают на вызов метода."
          }
        }
      }
    },
    "Rust_doesnt_auto_generate_getters" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust doesn't auto-generate getters."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust не генерирует getter'ы автоматически."
          }
        }
      }
    },
    "Rust_auto_references_as_needed" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust auto-references as needed."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rust автоматически создает ссылки по необходимости."
          }
        }
      }
    },
    "dbg_prints_context_value" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "dbg! prints context + value."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "dbg! выводит контекст + значение."
          }
        }
      }
    },
    "pretty_print_is_pretty" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Pretty-print is {:#?}."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Красивый вывод - это {:#?}."
          }
        }
      }
    },
    "a_constructor_via_new" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A constructor via new."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Конструктор через new."
          }
        }
      }
    },
    "a_struct_groups_data_and_methods" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A struct groups data and methods."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Структура группирует данные и методы."
          }
        }
      }
    },
    "what_does_an_enum_do_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does an enum do in Rust?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает enum в Rust?"
          }
        }
      }
    },
    "how_do_you_declare_an_enum_IpAddrKind_with_variants_V4_and_V6" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you declare an enum IpAddrKind with variants V4 and V6?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как объявить enum IpAddrKind с вариантами V4 и V6?"
          }
        }
      }
    },
    "how_do_you_create_an_enum_instance" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you create an enum instance?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как создать экземпляр enum?"
          }
        }
      }
    },
    "can_variants_of_an_enum_hold_data" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Can variants of an enum hold data?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Могут ли варианты enum содержать данные?"
          }
        }
      }
    },
    "why_is_enum_IpAddr_better_than_struct_IpAddrKind_String" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why is enum IpAddr better than struct IpAddrKind + String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему enum IpAddr лучше чем struct IpAddrKind + String?"
          }
        }
      }
    },
    "can_different_enum_variants_have_different_amounts_and_types_of_data" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Can different enum variants have different amounts and types of data?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Могут ли разные варианты enum иметь разное количество и типы данных?"
          }
        }
      }
    },
    "how_do_Message_Quit_and_Message_Write_String_differ" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do Message::Quit and Message::Write(String) differ?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем отличаются Message::Quit и Message::Write(String)?"
          }
        }
      }
    },
    "can_you_add_methods_to_an_enum" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Can you add methods to an enum?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Можно ли добавить методы к enum?"
          }
        }
      }
    },
    "what_is_Option" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is Option?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое Option?"
          }
        }
      }
    },
    "what_is_true_about_Option" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is true about Option?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что верно об Option?"
          }
        }
      }
    },
    "why_doesnt_Rust_have_null" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why doesn't Rust have null?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему в Rust нет null?"
          }
        }
      }
    },
    "how_do_you_get_a_value_out_of_an_Option" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How do you get a value out of an Option?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как получить значение из Option?"
          }
        }
      }
    },
    "what_does_the_match_construct_do" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does the match construct do?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает конструкция match?"
          }
        }
      }
    },
    "how_does_match_differ_from_if" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does match differ from if?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем match отличается от if?"
          }
        }
      }
    },
    "what_does_the_arrow_mean_in_match" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does the arrow => mean in match?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что означает стрелка => в match?"
          }
        }
      }
    },
    "what_happens_if_you_dont_cover_all_enum_variants_in_a_match" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens if you don't cover all enum variants in a match?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит, если не покрыть все варианты enum в match?"
          }
        }
      }
    },
    "what_is_used_for_in_match" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is _ used for in match?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Для чего используется _ в match?"
          }
        }
      }
    },
    "what_does_match_x_Some_i_i_0_do" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does match x { Some(i) => i, _ => 0 } do?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает match x { Some(i) => i, _ => 0 }?"
          }
        }
      }
    },
    "whats_the_advantage_of_if_let_over_match" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What's the advantage of if let over match?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какое преимущество if let над match?"
          }
        }
      }
    },
    "what_do_you_lose_when_using_if_let_instead_of_match" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What do you lose when using if let instead of match?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что теряется при использовании if let вместо match?"
          }
        }
      }
    },
    "how_does_let_else_differ_from_if_let" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does let…else differ from if let?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем let…else отличается от if let?"
          }
        }
      }
    },
    "how_does_data_binding_work_in_match" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does data binding work in match?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как работает привязка данных в match?"
          }
        }
      }
    },
    "what_does_this_code_do_if_let_Some_x_y" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does this code do?\n\nif let Some(x) = y {\n    println!(\"{x}\");\n}"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает этот код?\n\nif let Some(x) = y {\n    println!(\"{x}\");\n}"
          }
        }
      }
    },
    "bottom_line_why_use_enum_match" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Bottom line: why use enum + match?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "В итоге: зачем использовать enum + match?"
          }
        }
      }
    },
    "an_enum_defines_a_type_that_can_be_one_of_several_variants" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "An enum defines a type that can be one of several variants."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enum определяет тип, который может быть одним из нескольких вариантов."
          }
        }
      }
    },
    "enums_use_braces_with_listed_variants" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enums use braces with listed variants."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enum'ы используют фигурные скобки со списком вариантов."
          }
        }
      }
    },
    "variants_are_accessed_with" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Variants are accessed with ::."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Варианты доступны через ::."
          }
        }
      }
    },
    "enums_can_contain_different_kinds_of_data" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enums can contain different kinds of data."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enum'ы могут содержать разные типы данных."
          }
        }
      }
    },
    "an_enum_stores_the_kind_and_the_data_together" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "An enum stores the kind and the data together."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enum хранит тип и данные вместе."
          }
        }
      }
    },
    "V4_u8_u8_u8_u8_and_V6_String_are_valid_together" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "V4(u8,u8,u8,u8) and V6(String) are valid together."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "V4(u8,u8,u8,u8) и V6(String) валидны вместе."
          }
        }
      }
    },
    "Quit_is_unit_like_Write_stores_a_String" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Quit is unit-like; Write stores a String."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Quit - unit-like; Write хранит String."
          }
        }
      }
    },
    "enums_support_impl_blocks" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enums support impl blocks."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enum'ы поддерживают impl блоки."
          }
        }
      }
    },
    "Option_is_Some_T_or_None" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Option is Some(T) or None."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Option - это Some(T) или None."
          }
        }
      }
    },
    "you_mustnt_confuse_Option_with_T" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You mustn't confuse Option with T."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Не путайте Option с T."
          }
        }
      }
    },
    "null_often_leads_to_bugs" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Null often leads to bugs."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Null часто приводит к ошибкам."
          }
        }
      }
    },
    "typically_use_match_if_let_or_methods" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Typically use match, if let, or methods."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Обычно используют match, if let или методы."
          }
        }
      }
    },
    "match_matches_a_value_to_patterns" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "match matches a value to patterns."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "match сопоставляет значение с паттернами."
          }
        }
      }
    },
    "match_works_with_many_types_not_just_bool" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "match works with many types, not just bool."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "match работает с многими типами, не только bool."
          }
        }
      }
    },
    "code_for_the_arm_goes_after" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Code for the arm goes after =>."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Код для ветки идет после =>."
          }
        }
      }
    },
    "match_must_be_exhaustive_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "match must be exhaustive in Rust."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "match должен быть исчерпывающим в Rust."
          }
        }
      }
    },
    "ignores_the_value_and_matches_anything" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "_ ignores the value and matches anything."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "_ игнорирует значение и совпадает с чем угодно."
          }
        }
      }
    },
    "covers_the_None_case" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "_ covers the None case."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "_ покрывает случай None."
          }
        }
      }
    },
    "if_let_is_handy_when_you_care_about_one_case" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "if let is handy when you care about one case."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "if let удобен, когда вас интересует один случай."
          }
        }
      }
    },
    "if_let_doesnt_require_handling_all_variants" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "if let doesn't require handling all variants."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "if let не требует обработки всех вариантов."
          }
        }
      }
    },
    "in_let_else_the_else_must_terminate_the_function" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "In let…else, the else must terminate the function."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "В let…else, else должен завершить функцию."
          }
        }
      }
    },
    "Coin_Quarter_state_println_state" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Coin::Quarter(state) => println!(\"{state:?}\")."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Coin::Quarter(state) => println!(\"{state:?}\")."
          }
        }
      }
    },
    "if_let_extracts_the_value_from_Some" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "if let extracts the value from Some."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "if let извлекает значение из Some."
          }
        }
      }
    },
    "enums_describe_variants_match_handles_them_reliably" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enums describe variants; match handles them reliably."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Enum'ы описывают варианты; match обрабатывает их надежно."
          }
        }
      }
    }
  },
  "version" : "1.1"
}