{
  "sourceLanguage" : "en",
  "strings" : {
    "common_programming_concepts" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Common Program Concept"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Концепт"
          }
        }
      }
    },
    "delete" : {
      "comment" : "A button that deletes all sources.",
      "isCommentAutoGenerated" : true
    },
    "MainScreenView" : {
      "comment" : "The title of the main screen view.",
      "isCommentAutoGenerated" : true
    },
    "No sources" : {
      "comment" : "A message displayed when there are no sources available.",
      "isCommentAutoGenerated" : true
    },
    "OnBoardingScreenView" : {
      "comment" : "The title of the OnBoardingScreenView view.",
      "isCommentAutoGenerated" : true
    },
    "QuizScreenView" : {
      "comment" : "The title of the view.",
      "isCommentAutoGenerated" : true
    },
    "refresh" : {
      "comment" : "A button to refresh the view.",
      "isCommentAutoGenerated" : true
    },
    "SettingsScreenView" : {
      "comment" : "The name of the view that appears when the settings screen is displayed.",
      "isCommentAutoGenerated" : true
    },
    "the_book" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "The Book"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Книга"
          }
        }
      }
    },
    "update" : {
      "comment" : "A button that updates the list of sources.",
      "isCommentAutoGenerated" : true
    },
    "how_are_variables_declared_by_default_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How are variables declared by default in Rust?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как переменные объявляются по умолчанию в Rust?"
          }
        }
      }
    },
    "to_make_a_variable_mutable_you_need" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To make a variable mutable you need"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чтобы сделать переменную изменяемой, вам нужно"
          }
        }
      }
    },
    "what_will_happen_let_x_5_x_10" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet x = 5\nx = 10;"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet x = 5\nx = 10;"
          }
        }
      }
    },
    "how_does_const_differ_from_let" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does const differ from let?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем const отличается от let?"
          }
        }
      }
    },
    "valid_constant_declaration" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Valid constant declaration:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Правильное объявление константы:"
          }
        }
      }
    },
    "what_is_shadowing" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is shadowing?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое shadowing (затенение)?"
          }
        }
      }
    },
    "what_can_you_do_with_shadowing_but_not_mut" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What can you do with shadowing but not with mut?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что можно делать с shadowing, но нельзя с mut?"
          }
        }
      }
    },
    "what_will_this_print_shadowing_example" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet x = 5;\nlet x = x + 2;\nlet x = x * 3;\nprintln!(\"{x}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet x = 5;\nlet x = x + 2;\nlet x = x * 3;\nprintln!(\"{x}\");"
          }
        }
      }
    },
    "what_will_happen_let_mut_s_hi_s_s_len" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet mut s = \"hi\";\ns = s.len();"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet mut s = \"hi\";\ns = s.len();"
          }
        }
      }
    },
    "default_integer_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Default integer type:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип целого числа по умолчанию:"
          }
        }
      }
    },
    "range_of_u8" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Range of u8:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Диапазон u8:"
          }
        }
      }
    },
    "what_about_let_x_u8_256_debug" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What about let x: u8 = 256; (debug)?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что насчет let x: u8 = 256; (debug)?"
          }
        }
      }
    },
    "type_of_57u8" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Type of 57u8:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип 57u8:"
          }
        }
      }
    },
    "what_does_0b1111_0000_mean" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does 0b1111_0000 mean?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что означает 0b1111_0000?"
          }
        }
      }
    },
    "default_float_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Default float type:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип числа с плавающей точкой по умолчанию:"
          }
        }
      }
    },
    "result_integers_5_divided_by_3" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Result (integers): -5 / 3"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Результат (целые числа): -5 / 3"
          }
        }
      }
    },
    "boolean_literal" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Boolean literal:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Булевый литерал:"
          }
        }
      }
    },
    "char_in_rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "char in Rust:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "char в Rust:"
          }
        }
      }
    },
    "about_tuples" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About tuples:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О кортежах:"
          }
        }
      }
    },
    "what_will_this_print_tuple_index" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet t = (1, 2.0, 'c');\nprintln!(\"{}\", t.1);"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet t = (1, 2.0, 'c');\nprintln!(\"{}\", t.1);"
          }
        }
      }
    },
    "about_i32_5_array" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About [i32; 5]:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О [i32; 5]:"
          }
        }
      }
    },
    "what_does_let_a_3_4_create" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does let a = [3; 4]; create?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что создает let a = [3; 4];?"
          }
        }
      }
    },
    "accessing_a_10_when_length_is_5" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Accessing a[10] when length is 5:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Обращение к a[10] когда длина равна 5:"
          }
        }
      }
    },
    "function_declaration" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function declaration:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Объявление функции:"
          }
        }
      }
    },
    "function_parameters" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function parameters:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Параметры функции:"
          }
        }
      }
    },
    "default_return" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Default return:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Возврат по умолчанию:"
          }
        }
      }
    },
    "if_you_put_semicolon_after_x_plus_1_in_function" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "If you put ; after x + 1 in function with -> i32:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Если вы поставите ; после x + 1 в функции с -> i32:"
          }
        }
      }
    },
    "statement_vs_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Statement vs expression:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Оператор против выражения:"
          }
        }
      }
    },
    "what_happens_let_x_let_y_6" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens?\n\nlet x = (let y = 6);"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet x = (let y = 6);"
          }
        }
      }
    },
    "type_of_if_condition" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Type of if condition:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Тип условия if:"
          }
        }
      }
    },
    "about_if_else_as_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About if/else as an expression:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Об if/else как выражении:"
          }
        }
      }
    },
    "what_will_this_print_if_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet n = if true { 1 } else { 2 };\nprintln!(\"{n}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet n = if true { 1 } else { 2 };\nprintln!(\"{n}\");"
          }
        }
      }
    },
    "infinite_loop_until_break" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Infinite loop until break:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Бесконечный цикл до break:"
          }
        }
      }
    },
    "break_value_in_loop" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "break value; in loop:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "break value; в цикле:"
          }
        }
      }
    },
    "loop_labels_label" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Loop labels 'label:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Метки циклов 'label:"
          }
        }
      }
    },
    "about_while" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About while:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О while:"
          }
        }
      }
    },
    "about_for" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About for:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О for:"
          }
        }
      }
    },
    "countdown_3_to_1" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Countdown 3..1:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Обратный отсчет 3..1:"
          }
        }
      }
    },
    "comments" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Comments:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Комментарии:"
          }
        }
      }
    },
    "valid_comment" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Valid comment:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Правильный комментарий:"
          }
        }
      }
    },
    "about_usize" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About usize:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О usize:"
          }
        }
      }
    },
    "tuple_of_three_elements" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tuple of three elements:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Кортеж из трех элементов:"
          }
        }
      }
    },
    "what_does_b_A_mean" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does b'A' mean?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что означает b'A'?"
          }
        }
      }
    },
    "range_of_i16" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Range of i16:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Диапазон i16:"
          }
        }
      }
    },
    "unit_type" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Unit type ()…"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Единичный тип ()…"
          }
        }
      }
    },
    "valid_function_with_parameter" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Valid function with parameter:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Правильная функция с параметром:"
          }
        }
      }
    },
    "what_will_this_print_block_expression" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nfn main() {\n    let x = {\n        let y = 2;\n        y + 3\n    };\n    println!(\"{x}\");\n}"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nfn main() {\n    let x = {\n        let y = 2;\n        y + 3\n    };\n    println!(\"{x}\");\n}"
          }
        }
      }
    },
    "what_will_happen_if_false_10_else_ten" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet number = if false { 10 } else { \"ten\" };"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet number = if false { 10 } else { \"ten\" };"
          }
        }
      }
    },
    "how_to_exit_infinite_loop_properly" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to exit an infinite loop properly?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как правильно выйти из бесконечного цикла?"
          }
        }
      }
    },
    "about_keywords" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About keywords:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О ключевых словах:"
          }
        }
      }
    },
    "what_about_let_guess_u32_42_parse_unwrap" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What about let guess: u32 = \"42\".parse().unwrap();?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что насчет let guess: u32 = \"42\".parse().unwrap();?"
          }
        }
      }
    },
    "what_does_len_do_on_i32_5" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does .len() do on [i32; 5]?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает .len() на [i32; 5]?"
          }
        }
      }
    },
    "overflow_of_u8_in_release" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Overflow of u8 in release:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Переполнение u8 в release:"
          }
        }
      }
    },
    "modulo_operator" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Modulo operator:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Оператор модуло:"
          }
        }
      }
    },
    "function_with_return_value" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function with return value:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Функция с возвращаемым значением:"
          }
        }
      }
    },
    "about_for_in_rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About for in Rust:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О for в Rust:"
          }
        }
      }
    },
    "hex_literal" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Hex literal:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Шестнадцатеричный литерал:"
          }
        }
      }
    },
    "what_will_this_print_months_array" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will this print?\n\nlet months = [\"Jan\", \"Feb\", \"Mar\"];\nprintln!(\"{}\", months[2]);"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что это выведет?\n\nlet months = [\"Jan\", \"Feb\", \"Mar\"];\nprintln!(\"{}\", months[2]);"
          }
        }
      }
    },
    "about_continue" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About continue:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О continue:"
          }
        }
      }
    },
    "about_rev" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About rev():"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О rev():"
          }
        }
      }
    },
    "explicit_type_for_variable" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Explicit type for variable:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Явный тип для переменной:"
          }
        }
      }
    },
    "function_naming_style" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Function naming style:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Стиль именования функций:"
          }
        }
      }
    },
    "what_will_happen_plus_function" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nfn plus(x: i32) -> i32 {\n    x + 1\n}\nprintln!(\"{}\", plus(4));"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nfn plus(x: i32) -> i32 {\n    x + 1\n}\nprintln!(\"{}\", plus(4));"
          }
        }
      }
    },
    "about_comments" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "About comments:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "О комментариях:"
          }
        }
      }
    },
    "result_of_43_modulo_5" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Result of 43 % 5:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Результат 43 % 5:"
          }
        }
      }
    },
    "what_is_ownership_in_Rust" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is ownership in Rust?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое владение в Rust?"
          }
        }
      }
    },
    "which_rule_about_values_owner_is_true" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which rule about a value's owner is true?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какое правило о владельце значения верно?"
          }
        }
      }
    },
    "what_happens_when_owner_goes_out_of_scope" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens when the owner goes out of scope?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит, когда владелец выходит из области видимости?"
          }
        }
      }
    },
    "where_do_fixed_size_types_live_entirely" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Where do fixed-size types (e.g., i32) live entirely?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Где полностью находятся типы фиксированного размера (например, i32)?"
          }
        }
      }
    },
    "how_does_str_differ_from_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How does &str differ from String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Чем &str отличается от String?"
          }
        }
      }
    },
    "what_will_happen_string_move_example" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet s1 = String::from(\"hi\");\nlet s2 = s1;\nprintln!(\"{s1}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet s1 = String::from(\"hi\");\nlet s2 = s1;\nprintln!(\"{s1}\");"
          }
        }
      }
    },
    "what_is_name_of_ownership_transfer_in_let_s2_s1" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is the name of the ownership transfer in let s2 = s1;?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как называется передача владения в let s2 = s1;?"
          }
        }
      }
    },
    "what_is_copied_in_let_s2_s1_for_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is copied in let s2 = s1; for String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что копируется в let s2 = s1; для String?"
          }
        }
      }
    },
    "why_does_rust_invalidate_old_variable_after_move" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why does Rust invalidate the old variable after a move?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему Rust делает недействительной старую переменную после перемещения?"
          }
        }
      }
    },
    "what_does_clone_do_for_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does clone() do for String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что делает clone() для String?"
          }
        }
      }
    },
    "which_types_typically_implement_copy" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which types typically implement Copy?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какие типы обычно реализуют Copy?"
          }
        }
      }
    },
    "why_isnt_string_copy" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why isn't String Copy?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему String не Copy?"
          }
        }
      }
    },
    "passing_arguments_to_function_by_value" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Passing arguments to a function by value…"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Передача аргументов в функцию по значению…"
          }
        }
      }
    },
    "which_is_true_function_takes_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which is true?\n\nfn takes(s: String) {}\nlet x = String::from(\"hi\");\ntakes(x);\n// here x ..."
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что верно?\n\nfn takes(s: String) {}\nlet x = String::from(\"hi\");\ntakes(x);\n// здесь x ..."
          }
        }
      }
    },
    "how_to_return_value_without_return" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to return a value without return?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как вернуть значение без return?"
          }
        }
      }
    },
    "why_use_references_t" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why use references &T?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Зачем использовать ссылки &T?"
          }
        }
      }
    },
    "what_is_true_about_string_reference" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is true about &String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что верно о &String?"
          }
        }
      }
    },
    "how_to_allow_modifying_borrowed_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to allow modifying a borrowed String?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как разрешить изменение заимствованной String?"
          }
        }
      }
    },
    "constraint_on_references" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Constraint on references:"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Ограничение на ссылки:"
          }
        }
      }
    },
    "what_happens_with_simultaneous_and_mut_to_same_object" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What happens with simultaneous & and &mut to the same object?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что происходит при одновременных & и &mut к одному объекту?"
          }
        }
      }
    },
    "when_does_reference_lifetime_end_in_simple_cases_nll" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "When does a reference's lifetime end in simple cases (NLL)?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Когда заканчивается время жизни ссылки в простых случаях (NLL)?"
          }
        }
      }
    },
    "what_is_dangling_reference" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is a \"dangling\" reference?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое \"висячая\" ссылка?"
          }
        }
      }
    },
    "why_doesnt_dangle_function_compile" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why doesn't this compile:\nfn dangle() -> &String { let s = String::from(\"x\"); &s }?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему это не компилируется:\nfn dangle() -> &String { let s = String::from(\"x\"); &s }?"
          }
        }
      }
    },
    "how_to_fix_dangle" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "How to fix dangle?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Как исправить dangle?"
          }
        }
      }
    },
    "what_is_slice_str_t" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What is a slice (&str, &[T])?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что такое срез (&str, &[T])?"
          }
        }
      }
    },
    "why_is_returning_usize_index_from_first_word_risky" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Why is returning a usize index from first_word risky?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Почему возврат usize индекса из first_word рискован?"
          }
        }
      }
    },
    "which_signature_is_more_general_first_word" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Which signature is more general?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какая сигнатура более общая?"
          }
        }
      }
    },
    "what_does_slice_s_3_7_of_string_store" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What does the slice &s[3..7] of a String store?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что хранит срез &s[3..7] строки String?"
          }
        }
      }
    },
    "what_slice_bounds_are_valid_for_string" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What slice bounds are valid for a string?"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Какие границы среза валидны для строки?"
          }
        }
      }
    },
    "what_will_happen_string_clear_borrow_conflict" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "What will happen?\n\nlet mut s = String::from(\"hello world\");\nlet w = first_word(&s);\ns.clear();\nprintln!(\"{w}\");"
          }
        },
        "ru" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Что произойдет?\n\nlet mut s = String::from(\"hello world\");\nlet w = first_word(&s);\ns.clear();\nprintln!(\"{w}\");"
          }
        }
      }
    }
  },
  "version" : "1.1"
}