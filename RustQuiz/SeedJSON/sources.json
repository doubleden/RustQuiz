[
  {
    "id": "565098a8-30b3-402d-aea4-790b9c60b154",
    "title": "The Book",
    "priority": 1,
    "quizzes": [
      {
        "id": "6baaf965-ccc3-475b-9894-84b554104bb8",
        "theme": "Common Programming Concepts",
        "priority": 1,
        "questions": [
          {
            "id": "ef966908-2da6-476d-a7ac-81054f2bbffb",
            "title": "How are variables declared by default in Rust?",
            "answers": [
              {
                "id": "aa8be281-46b3-44f4-8e5b-9a55ae10b050",
                "title": "Mutable",
                "isCorrect": false
              },
              {
                "id": "effaf184-839c-4bc3-9bbb-dc7b953e3958",
                "title": "Immutable",
                "isCorrect": true
              },
              {
                "id": "4d752818-04bc-4d27-a8d7-45b8ff980dcb",
                "title": "Dynamic",
                "isCorrect": false
              },
              {
                "id": "d7c625e2-29d5-4aef-a011-647376dc7728",
                "title": "By Reference",
                "isCorrect": false
              }
            ],
            "descriptionText": "let creates an immutable binding mutability is only via mut",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "afebe1bc-cb3d-4cc0-b3b6-01e9cf188e68",
            "title": "To make a variable mutable, you need:",
            "answers": [
              {
                "id": "757290ca-e329-4a51-8207-78896991ab75",
                "title": "var",
                "isCorrect": false
              },
              {
                "id": "79173940-cec0-4c28-bf9d-c2e05dd7ca54",
                "title": "mut",
                "isCorrect": true
              },
              {
                "id": "ae48ee59-fc89-42c0-8d99-901fb5f59ce2",
                "title": ":=",
                "isCorrect": false
              },
              {
                "id": "f68cf365-fd05-4d55-9600-59f7152e079c",
                "title": "Nothing",
                "isCorrect": false
              }
            ],
            "descriptionText": "let mut x = ... is the only syntax to allow mutation",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "201a15b1-3911-4a3b-9581-6d569dbdc965",
            "title": "What will happen?\n\nlet x = 5\nx = 10;",
            "answers": [
              {
                "id": "af78bb7b-dfec-44e8-b559-51489a884a8c",
                "title": "Compilation error because of missing semicolon after 5",
                "isCorrect": false
              },
              {
                "id": "c8c29ac9-b874-4fbb-8bd5-3c867c4e9b2a",
                "title": "Will print 10",
                "isCorrect": false
              },
              {
                "id": "3c201fa6-580b-45b8-8d6b-7208e4ed39b5",
                "title": "Compilation error: assignment to immutable variable",
                "isCorrect": true
              },
              {
                "id": "519f15df-51fa-420c-8336-de6835a1138b",
                "title": "Automatically becomes mut",
                "isCorrect": false
              }
            ],
            "descriptionText": "x without mut is immutable. Rust requires explicit mut; also, a ; after 5 is needed",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "23646fe4-3665-432c-945b-025f7bf35a5c",
            "title": "How does const differ from let?",
            "answers": [
              {
                "id": "e2fb5b5e-ff74-4e83-bec3-b16cb136ccb5",
                "title": "const requires explicit type annotation",
                "isCorrect": true
              },
              {
                "id": "c7e9e331-5862-4bf2-ae36-1bdccde7ee9f",
                "title": "const can only be declared inside functions",
                "isCorrect": false
              },
              {
                "id": "c6a7a668-5912-4e34-bca6-8a254df91f92",
                "title": "const can be made mut",
                "isCorrect": false
              },
              {
                "id": "00233d9c-8b40-4720-9b5e-d1200eda9ee6",
                "title": "let is evaluated only at compile-time",
                "isCorrect": false
              }
            ],
            "descriptionText": "const NAME: Type = expr; - constants always have an explicit type and a constexpr value",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ed5bfec9-727f-4fff-a879-e09f8df2739f",
            "title": "Valid constant declaration:",
            "answers": [
              {
                "id": "ef03e4f0-8b43-43da-b724-13ce5b41a0c0",
                "title": "const PI = 3.14;",
                "isCorrect": false
              },
              {
                "id": "7318c99c-191e-423e-b76a-988307145995",
                "title": "const PI: f64 = 3.14;",
                "isCorrect": true
              },
              {
                "id": "5e9d029e-8984-45c1-9322-eee7849da840",
                "title": "let const PI: f64 = 3.14;",
                "isCorrect": false
              },
              {
                "id": "7bd7e059-92f5-496a-92b9-15c4a437a0f7",
                "title": "constant PI = 3.14;",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type after : is required - that's the language syntax",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d701d230-94a0-4984-b8fb-737c36a92fdd",
            "title": "What is shadowing?",
            "answers": [
              {
                "id": "5a9be026-576e-442a-ad3d-7eb8bf6e921f",
                "title": "Assignment without mut",
                "isCorrect": false
              },
              {
                "id": "c9caa147-bdbf-46cb-90e6-50b83eda31b6",
                "title": "Re-declaring with let using the same name",
                "isCorrect": true
              },
              {
                "id": "0d6e3d1c-f68a-4676-a265-d475e3f531ac",
                "title": "Value erasure",
                "isCorrect": false
              },
              {
                "id": "583805a8-f674-459a-8523-d0c1fb8497db",
                "title": "Automatic type casting",
                "isCorrect": false
              }
            ],
            "descriptionText": "let x = ...; let x = ...; creates a new binding",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1862eaaf-3c1d-41ab-a1bc-0d269da54b5c",
            "title": "What can you do with shadowing but not with mut?",
            "answers": [
              {
                "id": "dc57e700-ad19-487c-8e14-ff22aa5d1450",
                "title": "Change type with the same name",
                "isCorrect": true
              },
              {
                "id": "a8a8595d-2ce6-42d9-9db2-6d054c569fc9",
                "title": "Change value",
                "isCorrect": false
              },
              {
                "id": "b0665be1-b4dd-48e6-8e24-69bf97af548a",
                "title": "Use in a loop",
                "isCorrect": false
              },
              {
                "id": "bb3e264d-52e3-45e8-a67f-e162fc0ba75d",
                "title": "Pass to a function",
                "isCorrect": false
              }
            ],
            "descriptionText": "A new let can have a different type - it's actually a new variable",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3ef3c72d-13ba-4260-9a85-9ba067bcc8fc",
            "title": "What will this print?\n\nlet x = 5;\nlet x = x + 2;\nlet x = x * 3;\nprintln!(\"{x}\");",
            "answers": [
              {
                "id": "fba5e855-a5f8-45f8-b5f6-11b5169e96e6",
                "title": "5",
                "isCorrect": false
              },
              {
                "id": "482153d5-4ada-4f34-b606-ef138b64c460",
                "title": "7",
                "isCorrect": false
              },
              {
                "id": "e7de0a25-a6c1-48e3-b3ff-a7ceb3cc5158",
                "title": "15",
                "isCorrect": false
              },
              {
                "id": "70ddfab6-dcf3-4066-95f3-d8ac146b7416",
                "title": "21",
                "isCorrect": true
              }
            ],
            "descriptionText": "7 → 21. Each line creates a new x",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d326c8c6-151f-43f4-ab23-cf10fe8b4009",
            "title": "What will happen?\n\nlet mut s = \"hi\";\ns = s.len();",
            "answers": [
              {
                "id": "f44361a8-21b6-42b2-9669-5a1309a68a66",
                "title": "Type error",
                "isCorrect": true
              },
              {
                "id": "85260d8e-a767-4457-95bf-bde304677096",
                "title": "Becomes 2",
                "isCorrect": false
              },
              {
                "id": "4b48cfac-924a-43b0-938c-8864e031d207",
                "title": "Becomes \"2\"",
                "isCorrect": false
              },
              {
                "id": "a5aba5c7-df9d-4c22-b8bd-5774ab5dbca6",
                "title": "Panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "&'static str → usize without shadowing is invalid. mut does not change type",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "37ec47f3-9236-40d7-ba2a-c7e493d4373d",
            "title": "Default integer type:",
            "answers": [
              {
                "id": "3d7481ef-0334-4edc-ba08-e15bc923804c",
                "title": "i32",
                "isCorrect": true
              },
              {
                "id": "a524e0d2-b0c9-4beb-b4aa-0e10066519ac",
                "title": "i64",
                "isCorrect": false
              },
              {
                "id": "4467f875-fdbd-4c2c-bb8b-e8e009cdfc7c",
                "title": "usize",
                "isCorrect": false
              },
              {
                "id": "819162a1-7648-44ce-8ca7-5a3b83389dc1",
                "title": "depends",
                "isCorrect": false
              }
            ],
            "descriptionText": "Default is i32",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "779e95c1-ff82-4ba7-ac36-e9ca13fd8c2a",
            "title": "Range of u8:",
            "answers": [
              {
                "id": "81d17a7c-f039-40fc-923e-e7a9260ecc5c",
                "title": "−128..127",
                "isCorrect": false
              },
              {
                "id": "a39c10b9-064d-4f96-a4eb-c0b19853d055",
                "title": "0..255",
                "isCorrect": true
              },
              {
                "id": "9b6e5cee-0bac-453c-af61-eef5c541e284",
                "title": "−255..255",
                "isCorrect": false
              },
              {
                "id": "2a321a23-9628-414f-ad26-b54e9481b6d5",
                "title": "depends",
                "isCorrect": false
              }
            ],
            "descriptionText": "8 bits unsigned",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f0db7dc6-6b54-455c-bb82-526a20fc9a4c",
            "title": "What about let x: u8 = 256; (debug)?",
            "answers": [
              {
                "id": "d7ee725f-9310-438c-9897-1c695bf10984",
                "title": "Becomes 0",
                "isCorrect": false
              },
              {
                "id": "f045e14a-4369-4325-bc87-a26f0c48357c",
                "title": "Compilation error",
                "isCorrect": true
              },
              {
                "id": "e9b60f1c-b46b-4b40-b4c9-7c9a91f7dbb9",
                "title": "Runtime panic",
                "isCorrect": false
              },
              {
                "id": "9edf4897-b4af-4fbb-80e3-8c99b746fcc2",
                "title": "Truncated to 255",
                "isCorrect": false
              }
            ],
            "descriptionText": "Constant out-of-range. 256 is outside u8 range",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fcf1bc95-d6aa-482b-8451-8bad9abac1a7",
            "title": "Type of 57u8:",
            "answers": [
              {
                "id": "a2d8e534-39b5-45f7-b954-72fcfa49e866",
                "title": "i32",
                "isCorrect": false
              },
              {
                "id": "07461f8a-3bb0-4cd9-8f82-b8fc6225c9c3",
                "title": "u32",
                "isCorrect": false
              },
              {
                "id": "395f45a2-9365-49d7-a8ea-26362d8db1d3",
                "title": "u8",
                "isCorrect": true
              },
              {
                "id": "17aa1906-fe92-42d6-9526-e5c4ab0bb114",
                "title": "usize",
                "isCorrect": false
              }
            ],
            "descriptionText": "Literal suffix sets type",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "792404ca-0833-45ee-bb1b-d0a84e79ee61",
            "title": "What does 0b1111_0000 mean?",
            "answers": [
              {
                "id": "cb390251-f313-4f34-8a25-eee620127395",
                "title": "Error",
                "isCorrect": false
              },
              {
                "id": "ca1380f1-6f04-4022-b04a-de817bdbdb2c",
                "title": "Binary literal",
                "isCorrect": true
              },
              {
                "id": "95868101-89dc-4756-a9fd-71bf37c6836d",
                "title": "String",
                "isCorrect": false
              },
              {
                "id": "1bb8369d-2cf9-493b-8bad-5aaae08054e1",
                "title": "Char",
                "isCorrect": false
              }
            ],
            "descriptionText": "Underscores allowed for readability",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2c2ea920-1857-400e-8ab2-e7e0270525f3",
            "title": "Default float type:",
            "answers": [
              {
                "id": "f7837baf-caa0-4c54-8884-7e7e57d9bc36",
                "title": "f32",
                "isCorrect": false
              },
              {
                "id": "381aaaf1-d629-4ea4-bef7-9d88db4e0cca",
                "title": "f64",
                "isCorrect": true
              },
              {
                "id": "7e53de59-49d9-41fb-b120-79263e65b65e",
                "title": "decimal",
                "isCorrect": false
              },
              {
                "id": "b57c1aa9-a6b0-4aa1-a0ed-1ca1aae4ee72",
                "title": "depends",
                "isCorrect": false
              }
            ],
            "descriptionText": "More precision at similar cost",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "17cd3e6f-1612-4cca-9d03-cec4bebe48dc",
            "title": "Result (integers): -5 / 3",
            "answers": [
              {
                "id": "7f9b62f4-e935-41c2-9aa9-3fd25266f976",
                "title": "−2",
                "isCorrect": false
              },
              {
                "id": "5149073f-f41e-4205-b2d1-6b2d0c6e0906",
                "title": "−1",
                "isCorrect": true
              },
              {
                "id": "ba6c2019-04fc-4706-8808-0048c6178d32",
                "title": "0",
                "isCorrect": false
              },
              {
                "id": "d235b24b-8909-4de8-a8a2-a7c74b09a006",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Division rounds toward zero",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c07d533d-9e04-4511-a9e3-18acfd1c8d9a",
            "title": "Boolean literal:",
            "answers": [
              {
                "id": "c2de9b79-720c-422d-94e1-557ff112b654",
                "title": "\"true\"",
                "isCorrect": false
              },
              {
                "id": "0d00b64d-ed2f-4e2d-80f9-1e134a682be5",
                "title": "True",
                "isCorrect": false
              },
              {
                "id": "465a9ff8-7515-4f7b-a0ac-f29b3879ae9d",
                "title": "false",
                "isCorrect": true
              },
              {
                "id": "b29f752a-d37b-483b-81dc-2563e21ed7ed",
                "title": "1",
                "isCorrect": false
              }
            ],
            "descriptionText": "Lowercase, not a string",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "32ea896f-9ce9-4065-91b3-07a15929a836",
            "title": "char in Rust:",
            "answers": [
              {
                "id": "b3ace430-ebc7-402e-9170-e842022758d0",
                "title": "1 byte ASCII",
                "isCorrect": false
              },
              {
                "id": "25ab44a9-6b4e-40ab-a62c-5ad606f8a21a",
                "title": "2 bytes UTF-16",
                "isCorrect": false
              },
              {
                "id": "a9d37f88-e4b9-416d-9bca-f07d3581dabd",
                "title": "4 bytes Unicode scalar value",
                "isCorrect": true
              },
              {
                "id": "9336fdc5-c940-4c85-a479-636eb7d9057c",
                "title": "Variable length",
                "isCorrect": false
              }
            ],
            "descriptionText": "One Unicode scalar",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "77dc4907-343e-400d-a07f-9ca45a4e107b",
            "title": "About tuples:",
            "answers": [
              {
                "id": "7e6ea35c-d8e5-47ee-878d-555aabcf254c",
                "title": "Fixed length",
                "isCorrect": false
              },
              {
                "id": "274e5b33-8a26-455e-9893-e2359cc2f2fa",
                "title": "Different types allowed",
                "isCorrect": false
              },
              {
                "id": "721151a6-dc60-4eca-bf71-aa1715c78764",
                "title": "Indexed by .0",
                "isCorrect": false
              },
              {
                "id": "07d21a4e-7f7d-4502-b106-bd2a9063c12e",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "All true",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b2c7cff3-0eff-4f92-84d0-5b1c8e3b607c",
            "title": "What will this print?\n\nlet t = (1, 2.0, 'c');\nprintln!(\"{}\", t.1);",
            "answers": [
              {
                "id": "8bdb1670-9e5c-4f83-b85d-6c751414c470",
                "title": "1",
                "isCorrect": false
              },
              {
                "id": "e91577ac-2159-4168-804c-ecabe582bd6b",
                "title": "2.0",
                "isCorrect": true
              },
              {
                "id": "312a4fbd-083f-4e39-b8ee-4bf4d02c4b31",
                "title": "c",
                "isCorrect": false
              },
              {
                "id": "d087173f-87bc-480b-9c5f-eda2a6570064",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Index 1 → second element",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f41dcbd6-8b81-43ef-9ca2-c845185751b4",
            "title": "About [i32; 5]:",
            "answers": [
              {
                "id": "0b6a97ad-1527-4e96-96b0-db3e0bd18301",
                "title": "Only i32",
                "isCorrect": false
              },
              {
                "id": "ab8b1384-3648-4960-bb06-3f45c87e6167",
                "title": "Fixed length",
                "isCorrect": false
              },
              {
                "id": "48feb7aa-7843-4e62-9014-cbb076049fdc",
                "title": "Length is part of type",
                "isCorrect": false
              },
              {
                "id": "cf20cd24-4541-4a44-b8ff-39e7bc32fff5",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "[T; N]",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8a6c6867-4534-4657-b460-df70e72d5c39",
            "title": "What does let a = [3; 4]; create?",
            "answers": [
              {
                "id": "1fdb1e6c-6dd7-4ade-8b75-991d59cf7c13",
                "title": "[3]",
                "isCorrect": false
              },
              {
                "id": "e360a4fc-5598-4613-a4e0-1a8c3e4e75c1",
                "title": "[3,3,3,3]",
                "isCorrect": true
              },
              {
                "id": "36a7bb86-3eb8-42c7-bfce-73c60960eba8",
                "title": "[4,4,4]",
                "isCorrect": false
              },
              {
                "id": "e3373d53-bf78-4462-809e-696fee318182",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Repetition syntax",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6a5fbbdd-7ead-49dd-b36c-5257de602c44",
            "title": "Accessing a[10] when length is 5:",
            "answers": [
              {
                "id": "6392bf7d-1f4d-4277-8d36-8c4c4fff5f8d",
                "title": "UB",
                "isCorrect": false
              },
              {
                "id": "ef8d8cec-0bfb-4f02-b7aa-7cfcaff06c00",
                "title": "Compilation error",
                "isCorrect": false
              },
              {
                "id": "fe841c32-76b4-4274-bc51-f539c1a01dd6",
                "title": "Runtime panic",
                "isCorrect": true
              },
              {
                "id": "f32d6b4a-59df-4532-a121-e5f911c9bb7b",
                "title": "None",
                "isCorrect": false
              }
            ],
            "descriptionText": "Bounds checked at runtime",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "62ea0eb0-73cb-4374-bc5c-685f6204df45",
            "title": "Function declaration:",
            "answers": [
              {
                "id": "a701f853-b679-48ae-a6d3-860432482952",
                "title": "func name() {}",
                "isCorrect": false
              },
              {
                "id": "845127c0-9153-4677-a20e-deae1ff50f15",
                "title": "fn name() {}",
                "isCorrect": true
              },
              {
                "id": "6e28cb9b-6602-4232-9a0b-590f5fc3c782",
                "title": "function name() {}",
                "isCorrect": false
              },
              {
                "id": "374c1e6a-b0be-491c-98e1-31f3ea4d4e9b",
                "title": "def name() {}",
                "isCorrect": false
              }
            ],
            "descriptionText": "Keyword fn",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dd9f7be4-76cd-4625-b0de-18861d55f577",
            "title": "Function parameters:",
            "answers": [
              {
                "id": "9167b486-9a0d-4438-98f9-c6803ff12586",
                "title": "Name only",
                "isCorrect": false
              },
              {
                "id": "9d9461e1-4ac4-41a7-8e2f-26359ba59f3e",
                "title": "Type only",
                "isCorrect": false
              },
              {
                "id": "2432e1d4-87d4-4be4-9c9c-bc5ab2374738",
                "title": "Name and type",
                "isCorrect": true
              },
              {
                "id": "3ea4125d-ac4f-4ff3-bc0c-56020d1715cf",
                "title": "Nothing",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type annotations are mandatory",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e13c0274-293a-4b53-9c85-1e6f52a1b712",
            "title": "Default return:",
            "answers": [
              {
                "id": "45ee0e40-8966-48f7-930b-2de278b97c66",
                "title": "Always return",
                "isCorrect": false
              },
              {
                "id": "1455079e-6718-4f7f-9ef7-92d766c64648",
                "title": "Last expression without ;",
                "isCorrect": true
              },
              {
                "id": "ffdc94d8-1132-4403-b671-094e42d5eb95",
                "title": "Last expression with ;",
                "isCorrect": false
              },
              {
                "id": "911a83ba-1734-4400-904d-04badddc8f41",
                "title": "Always ()",
                "isCorrect": false
              }
            ],
            "descriptionText": "Tail expression",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "714193b7-daec-4966-ba3b-9cf0131e820a",
            "title": "If you put ; after x + 1 in function with -> i32:",
            "answers": [
              {
                "id": "31faebfd-011f-436d-bf24-1197850591a9",
                "title": "Returns x+1",
                "isCorrect": false
              },
              {
                "id": "e0709677-dd27-45a0-9d3c-1b3b1dffa61f",
                "title": "Type error (())",
                "isCorrect": true
              },
              {
                "id": "2e1fd322-1c8b-4abe-b288-04e178a241c7",
                "title": "Auto-return",
                "isCorrect": false
              },
              {
                "id": "8c943e6c-4fc1-4f0a-b22e-0e8d5b05f143",
                "title": "Panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "; turns it into a statement",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c5ac48b2-3909-4e2b-adf4-16f2f86f42fc",
            "title": "Statement vs expression:",
            "answers": [
              {
                "id": "9f77481c-00ea-43c2-895f-be41efd0b37b",
                "title": "Statement returns a value",
                "isCorrect": false
              },
              {
                "id": "2e4b7b99-85bb-4a77-b3c9-cc3aab5d262c",
                "title": "Expression computes a value",
                "isCorrect": true
              },
              {
                "id": "befb78f8-8b8a-4c22-9d24-88f1707de988",
                "title": "Both return",
                "isCorrect": false
              },
              {
                "id": "dc0dae36-598b-4e96-9459-0658d6fc7284",
                "title": "No difference",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust is expression-oriented",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "437f3499-2ca2-4dfd-beeb-edc244e4cf09",
            "title": "What happens?\n\nlet x = (let y = 6);",
            "answers": [
              {
                "id": "e634493a-f7f6-437c-9b42-df918fa4f620",
                "title": "Compilation error",
                "isCorrect": true
              },
              {
                "id": "f4220fc3-2597-48a8-b8f6-cfbc3e0aaede",
                "title": "x and y are 6",
                "isCorrect": false
              },
              {
                "id": "a5cd765f-347d-4916-8891-4fb18eb0dc52",
                "title": "Panic",
                "isCorrect": false
              },
              {
                "id": "e216796a-125f-4a4e-b418-d0f0cdf39bed",
                "title": "UB",
                "isCorrect": false
              }
            ],
            "descriptionText": "let y = 6 is not an expression",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1011362d-837c-489f-87fc-637b11495aed",
            "title": "Type of if condition:",
            "answers": [
              {
                "id": "37775163-66b3-407a-b9d7-be3d7020341c",
                "title": "Any nonzero",
                "isCorrect": false
              },
              {
                "id": "265a1040-8153-4656-bf81-1fb4fbcb1c17",
                "title": "Only bool",
                "isCorrect": true
              },
              {
                "id": "ddc28135-4036-47c7-af27-7dfcf362f750",
                "title": "int or bool",
                "isCorrect": false
              },
              {
                "id": "7ae7bb04-a30e-4418-b4b6-14acabc7229b",
                "title": "Any scalar",
                "isCorrect": false
              }
            ],
            "descriptionText": "No implicit conversions",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c9f6d4ae-1d3e-4da9-88dd-fb6d1b6a0044",
            "title": "About if/else as an expression:",
            "answers": [
              {
                "id": "f53f7fa4-49f9-4010-8112-411fb323366d",
                "title": "Different types allowed",
                "isCorrect": false
              },
              {
                "id": "65ce2e2f-7991-465a-8dbc-585cf5153271",
                "title": "Branch types must match",
                "isCorrect": false
              },
              {
                "id": "6bc92431-ac61-4f73-a128-37c187df89d5",
                "title": "else is optional",
                "isCorrect": false
              },
              {
                "id": "222c6d9d-8a0c-4617-9033-c73a36e67e99",
                "title": "b and c",
                "isCorrect": true
              }
            ],
            "descriptionText": "if is an expression; else is optional",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "67ef28c5-09da-4622-a0d9-9905f58c92b7",
            "title": "What will this print?\n\nlet n = if true { 1 } else { 2 };\nprintln!(\"{n}\");",
            "answers": [
              {
                "id": "d11b7b9f-4a94-4dd4-914a-bf56633d7db7",
                "title": "1",
                "isCorrect": true
              },
              {
                "id": "9c4b777e-20fa-461a-81b2-123810d82c77",
                "title": "2",
                "isCorrect": false
              },
              {
                "id": "e2d122ff-e245-4965-9eb7-9eaa2eb2b861",
                "title": "true",
                "isCorrect": false
              },
              {
                "id": "f70927e9-e833-40f2-b3cb-159dfcf9b43c",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Took the value of true branch",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "84b74c72-53e7-4073-886a-3164af64c367",
            "title": "Infinite loop until break:",
            "answers": [
              {
                "id": "6254018c-3934-46aa-b1b9-7adbf8dacf87",
                "title": "loop",
                "isCorrect": true
              },
              {
                "id": "5ce46b38-f6b5-4921-8e6b-69613669dc5a",
                "title": "while",
                "isCorrect": false
              },
              {
                "id": "4770f56b-800a-45c1-9d04-00a9d79a7e87",
                "title": "for",
                "isCorrect": false
              },
              {
                "id": "954b8649-7ee1-4355-9ee9-660f5f7e144c",
                "title": "repeat",
                "isCorrect": false
              }
            ],
            "descriptionText": "loop has no condition",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a71907b4-7126-4f8a-85b9-24967ace10b9",
            "title": "break value; in loop:",
            "answers": [
              {
                "id": "f93495c0-1f58-4a88-aeb1-28399c05cdc2",
                "title": "Skip iteration",
                "isCorrect": false
              },
              {
                "id": "265bd83c-7c2c-42f8-8000-b466a8494d42",
                "title": "Exit loop and return value",
                "isCorrect": true
              },
              {
                "id": "bc8ea9a1-86b4-46be-afeb-cc88b5f4a350",
                "title": "Error",
                "isCorrect": false
              },
              {
                "id": "bafdae75-75ad-49ea-bdae-a82a6af622d9",
                "title": "Return ()",
                "isCorrect": false
              }
            ],
            "descriptionText": "loop is an expression",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6fe2d8c0-852e-406c-977e-499dc5e09faa",
            "title": "Loop labels 'label:",
            "answers": [
              {
                "id": "d15bf441-e5d6-4c7c-9996-821a509a183d",
                "title": "Comments",
                "isCorrect": false
              },
              {
                "id": "36e7a43d-23c2-4789-9979-a561b890bee3",
                "title": "Target for break/continue",
                "isCorrect": true
              },
              {
                "id": "fe5232c6-fb78-4cf5-bc0a-d1f449682f01",
                "title": "Optimization",
                "isCorrect": false
              },
              {
                "id": "1ebd89f5-18a8-4cda-af20-4f9ea66c57c8",
                "title": "Counter",
                "isCorrect": false
              }
            ],
            "descriptionText": "e.g. break 'outer;",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ba991a56-e9aa-4c42-9f43-f35efdb74b23",
            "title": "About while:",
            "answers": [
              {
                "id": "47e6ab0d-53ad-49b3-b0b1-0c7b05faefde",
                "title": "While condition is true",
                "isCorrect": false
              },
              {
                "id": "faf3b1bc-8381-4782-b8d9-e15ff868dfb0",
                "title": "Can be infinite",
                "isCorrect": false
              },
              {
                "id": "12051cd0-aff4-4123-9d4f-b4e5eafae7f4",
                "title": "Condition is bool",
                "isCorrect": false
              },
              {
                "id": "8d9c6db9-7ede-4c9f-869d-1132237014a6",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "Depends on condition",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "77924563-b83b-4b78-a7bd-28643c42f943",
            "title": "About for:",
            "answers": [
              {
                "id": "9f06de45-11de-472f-983c-ecafe022d47a",
                "title": "Iterates IntoIterator",
                "isCorrect": false
              },
              {
                "id": "9d428ca1-9098-4bed-b055-ea7db9276fb4",
                "title": "Works with ranges",
                "isCorrect": false
              },
              {
                "id": "845fa452-f09b-48ce-9449-cec134232500",
                "title": "Safer than manual indexing",
                "isCorrect": false
              },
              {
                "id": "94ae8d4a-ae69-407a-b955-48e05c577d61",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "Idiomatic iteration",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "077c1d5e-ed56-4c88-a113-939b4c2779f6",
            "title": "Countdown 3..1:",
            "answers": [
              {
                "id": "fd53f7f1-1c91-45a5-bba5-dd8f55e4ba8d",
                "title": "for n in (1..=3).rev()",
                "isCorrect": true
              },
              {
                "id": "48b966e3-07f6-4e6a-aac6-983492ee7c41",
                "title": "for n in (3..=1).rev()",
                "isCorrect": false
              },
              {
                "id": "cab565a0-9bba-48a5-b0d7-620e491bb962",
                "title": "for n in 1..3",
                "isCorrect": false
              },
              {
                "id": "462b6336-c9bc-44a7-91db-13d3f0012cfb",
                "title": "for n in (0..3).rev()",
                "isCorrect": false
              }
            ],
            "descriptionText": "1..=3 gives 1..3, rev() → 3..1",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "40732429-3ec9-4d18-9f58-5db40c5996f7",
            "title": "Comments:",
            "answers": [
              {
                "id": "2169906a-c012-4e1c-a5ed-f4bec90e9136",
                "title": "#",
                "isCorrect": false
              },
              {
                "id": "e3a66f42-c332-45b7-9e07-b2ae4f90c2ce",
                "title": "//",
                "isCorrect": false
              },
              {
                "id": "029be819-a238-4de2-a019-7dd4e28e5aea",
                "title": "/* */",
                "isCorrect": false
              },
              {
                "id": "a73cb324-c0ab-4758-aecb-dca3db957ca5",
                "title": "b and c",
                "isCorrect": true
              }
            ],
            "descriptionText": "Rust supports both",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "72232986-6fee-481f-bba7-ccafadf6df27",
            "title": "Valid comment:",
            "answers": [
              {
                "id": "e446f474-1049-43fc-b23d-061dab2ba061",
                "title": "// this is a comment",
                "isCorrect": true
              },
              {
                "id": "7ba0efae-a117-4a54-ac5e-b470d9e12553",
                "title": "– this is a comment",
                "isCorrect": false
              },
              {
                "id": "270c1db3-5aae-43d1-b6c0-5870d3f5a63a",
                "title": "%% this is a comment",
                "isCorrect": false
              },
              {
                "id": "5daeff06-5843-4613-a67c-7d035ccc6818",
                "title": "# this is a comment",
                "isCorrect": false
              }
            ],
            "descriptionText": "# is not for comments (used for attributes)",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9515b1f8-82cd-4b32-9e58-65c2f237bb55",
            "title": "About usize:",
            "answers": [
              {
                "id": "cf506085-f61b-43db-97dd-811544d66f11",
                "title": "Size depends on architecture",
                "isCorrect": false
              },
              {
                "id": "e257da1e-6066-49b7-a764-06006b53a826",
                "title": "Used for indices/sizes",
                "isCorrect": false
              },
              {
                "id": "ac269c8e-83d0-4230-becb-49f0e8d3763a",
                "title": "Unsigned",
                "isCorrect": false
              },
              {
                "id": "04f98507-da34-4b92-8cac-56c862f3a2c2",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "Platform-dependent index type",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9a80ef69-d237-4731-8f02-e8d1a88e30ed",
            "title": "Tuple of three elements:",
            "answers": [
              {
                "id": "14860059-a173-4aa8-993e-5e28a39cbe4a",
                "title": "(1, \"a\", true)",
                "isCorrect": true
              },
              {
                "id": "e9986cd7-05fa-4d06-bab3-532855524812",
                "title": "{1, \"a\", true}",
                "isCorrect": false
              },
              {
                "id": "b0f7b4ed-dd76-403a-b514-315fa9bb9688",
                "title": "[1, \"a\", true]",
                "isCorrect": false
              },
              {
                "id": "9084504a-b3b3-42ec-b033-8b4184ac1c6b",
                "title": "<1, \"a\", true>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Parentheses → tuple",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4dbd482d-979f-41d4-8176-263937774faa",
            "title": "What does b'A' mean?",
            "answers": [
              {
                "id": "db62fb4f-e2f4-4fd4-90c3-57d1da97bcbd",
                "title": "char 'A'",
                "isCorrect": false
              },
              {
                "id": "a155fefe-7984-4de8-8a44-42346265ab3d",
                "title": "u8 with ASCII value",
                "isCorrect": true
              },
              {
                "id": "74c2308d-9b29-4cd4-a90f-457564ba4652",
                "title": "\"A\"",
                "isCorrect": false
              },
              {
                "id": "8ebb126f-76fc-4e45-8ebb-d4c6a3923bbb",
                "title": "bool",
                "isCorrect": false
              }
            ],
            "descriptionText": "Prefix b → byte literal",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "55ba781b-f834-4873-a136-6b3a32fa3867",
            "title": "Range of i16:",
            "answers": [
              {
                "id": "4c03f141-b6b2-4c91-a50a-29e823bef7f6",
                "title": "−32768..32767",
                "isCorrect": true
              },
              {
                "id": "0d3e4fe1-b2bd-4096-a288-01a1a5270330",
                "title": "−65536..65535",
                "isCorrect": false
              },
              {
                "id": "fbd6596a-1d81-419b-8d99-f532268f133f",
                "title": "0..32767",
                "isCorrect": false
              },
              {
                "id": "ce7f88a6-6e5e-4c07-a424-78fcd65e0809",
                "title": "0..65535",
                "isCorrect": false
              }
            ],
            "descriptionText": "16-bit signed",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "17d02040-a7a4-4ef2-bb05-1e8fa5d54d88",
            "title": "Unit type ()…",
            "answers": [
              {
                "id": "7d2c0e4d-dc2f-452b-8226-7eb72f97ac56",
                "title": "Empty value",
                "isCorrect": false
              },
              {
                "id": "bddab7d4-6a44-4b7e-a41d-ff7f04248beb",
                "title": "Empty tuple",
                "isCorrect": false
              },
              {
                "id": "72bcf716-473d-4fd0-80f4-948fc2f9e1dd",
                "title": "Functions without return type return it",
                "isCorrect": false
              },
              {
                "id": "bb7505ba-14a4-4910-a494-cc357b9c61d0",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "All properties of ()",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "504c0fe6-3f0f-4979-9f1c-25cb44939693",
            "title": "Valid function with parameter:",
            "answers": [
              {
                "id": "239568d5-dfac-42ec-ad68-595b43d4ede9",
                "title": "fn f(x) { }",
                "isCorrect": false
              },
              {
                "id": "7f061211-830a-4380-9ff7-d6610889dc2e",
                "title": "fn f(x: i32) { }",
                "isCorrect": true
              },
              {
                "id": "7a2a262f-7bba-46fb-a053-7008a25ed489",
                "title": "fn f(i32 x) { }",
                "isCorrect": false
              },
              {
                "id": "48001e3a-38f5-4af0-9506-a9fdefa15203",
                "title": "function f(x: i32) { }",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type required after :",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2681be0a-0f97-4cea-bf18-b32b8eb87a67",
            "title": "What will this print?\n\nfn main() {\n    let x = {\n        let y = 2;\n        y + 3\n    };\n    println!(\"{x}\");\n}",
            "answers": [
              {
                "id": "a7c9499f-fc32-414f-a710-22255fac59d8",
                "title": "2",
                "isCorrect": false
              },
              {
                "id": "ae70f3f6-a7b5-46b5-8f4e-7384eef19699",
                "title": "3",
                "isCorrect": false
              },
              {
                "id": "33ff059e-8a30-4cee-84c4-15fd8b91b20f",
                "title": "5",
                "isCorrect": true
              },
              {
                "id": "a41a1ffa-736c-471b-bcc8-003c64eb22b2",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Block is an expression, returns y+3",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f71bf061-632b-4b8e-a9b1-8e6102fedae3",
            "title": "What will happen?\n\nlet number = if false { 10 } else { \"ten\" };",
            "answers": [
              {
                "id": "fd6f6d0e-3256-4d43-92b9-3bb7e25ed3b4",
                "title": "Becomes a string",
                "isCorrect": false
              },
              {
                "id": "19a09132-63a1-47d1-ab02-2e6feba73087",
                "title": "Compilation error (different branch types)",
                "isCorrect": true
              },
              {
                "id": "daa85e81-2e28-4576-bf5e-ffb4af2af2fc",
                "title": "Becomes Option",
                "isCorrect": false
              },
              {
                "id": "7435e5a3-6d81-400d-9c05-5c68623a15fd",
                "title": "Panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "if-expression must have a single type",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5d59efe7-aa85-4023-ab0e-44bbe0c9407b",
            "title": "How to exit an infinite loop properly?",
            "answers": [
              {
                "id": "3b04fdc7-6a08-4bea-a284-d7bfb5841770",
                "title": "break",
                "isCorrect": false
              },
              {
                "id": "45de1002-f968-4819-b6d4-f5b82d35f440",
                "title": "return",
                "isCorrect": false
              },
              {
                "id": "750db802-6e03-43b9-9a15-50f4154058ce",
                "title": "exit()",
                "isCorrect": false
              },
              {
                "id": "61430808-5bee-4aed-a88d-19e3bb692e1d",
                "title": "All of the above possible",
                "isCorrect": true
              }
            ],
            "descriptionText": "All terminate (loop/function/process), but idiomatic is break",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2f094fc5-d48f-431d-b817-cbd937871c4e",
            "title": "About keywords:",
            "answers": [
              {
                "id": "1c538da2-c21b-48e6-b473-006b56714a5a",
                "title": "Can be used as names",
                "isCorrect": false
              },
              {
                "id": "61a19603-763f-4c5e-aace-38644a31be24",
                "title": "Reserved",
                "isCorrect": true
              },
              {
                "id": "f1490720-023b-404c-84d5-a051b10dcb7a",
                "title": "Ignored",
                "isCorrect": false
              },
              {
                "id": "338a1742-62ee-4c30-9e33-2b80e7747a6f",
                "title": "Usable with @",
                "isCorrect": false
              }
            ],
            "descriptionText": "See Appendix A",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bb6a64b0-3d9c-4a02-8354-842a58bfe43c",
            "title": "What about let guess: u32 = \"42\".parse().unwrap();?",
            "answers": [
              {
                "id": "75d94bab-c238-47bb-81b3-7ccf2a94370d",
                "title": "String",
                "isCorrect": false
              },
              {
                "id": "c86fd5a0-444c-481f-a33c-6f8a48d4ba72",
                "title": "u32 = 42",
                "isCorrect": true
              },
              {
                "id": "a3c98255-642f-4e18-81c5-d09ea72eea89",
                "title": "Compilation error",
                "isCorrect": false
              },
              {
                "id": "dd015682-905f-408f-aa45-68de0971a271",
                "title": "bool",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type annotation directs parse()",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e4aa50a5-4e5f-4572-8e8c-f57931825f35",
            "title": "What does .len() do on [i32; 5]?",
            "answers": [
              {
                "id": "ef223b88-ceb8-4ca8-bcf7-0395d5821135",
                "title": "5",
                "isCorrect": true
              },
              {
                "id": "1a1e9f2a-4bab-4130-bc87-917e3b891c4c",
                "title": "Last element",
                "isCorrect": false
              },
              {
                "id": "258d8951-01a0-4791-803c-f2faf022b3bd",
                "title": "Option",
                "isCorrect": false
              },
              {
                "id": "9b3c66b3-aca3-4470-9c6c-841ea9976388",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Array length",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3fbc86b6-f1b5-4519-9fe8-2384b9e456ce",
            "title": "Overflow of u8 in release:",
            "answers": [
              {
                "id": "6ee439c2-a094-4b6f-8c53-779f5b9fa118",
                "title": "Panic",
                "isCorrect": false
              },
              {
                "id": "6d665480-2456-428e-a621-c0639e1d07d2",
                "title": "Compilation error",
                "isCorrect": false
              },
              {
                "id": "b2b4b27d-bc5a-4635-908a-1669e75f598f",
                "title": "Wrapping",
                "isCorrect": true
              },
              {
                "id": "54835867-5f8b-4cdc-a517-c5475f85887e",
                "title": "Auto type promotion",
                "isCorrect": false
              }
            ],
            "descriptionText": "Two's complement wrapping",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e0ec8cfe-6016-4d41-8e95-bf54081ae2f4",
            "title": "Modulo operator:",
            "answers": [
              {
                "id": "6491568f-2e5c-4b02-b168-e21509d7d3bf",
                "title": "mod",
                "isCorrect": false
              },
              {
                "id": "fff61763-0dfa-4073-aca3-92dd848acc19",
                "title": "%",
                "isCorrect": true
              },
              {
                "id": "a20b6b82-8e66-481e-943d-42453ea08f24",
                "title": "rem",
                "isCorrect": false
              },
              {
                "id": "f3939a30-fcc7-4ed3-a94b-6c072f4e6dd0",
                "title": "div",
                "isCorrect": false
              }
            ],
            "descriptionText": "Standard syntax",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c676d2eb-41ce-41fd-ab0a-079b6df7363f",
            "title": "Function with return value:",
            "answers": [
              {
                "id": "ad74d641-62dd-4677-9f1b-af2695f9f2e4",
                "title": "fn f() { return 5 }",
                "isCorrect": false
              },
              {
                "id": "115e2f39-1395-404a-9dab-4eef17a807f1",
                "title": "fn f() -> i32 { 5 }",
                "isCorrect": true
              },
              {
                "id": "f1afcf19-160a-4511-9604-d26757d5803a",
                "title": "fn f() => i32 { 5 }",
                "isCorrect": false
              },
              {
                "id": "f996921a-8b0d-4c3b-8c8b-ed7cee5ee7e5",
                "title": "fn f() = 5;",
                "isCorrect": false
              }
            ],
            "descriptionText": "-> Type + tail expression",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b03a4313-dc30-43df-b452-4b76ce7b81de",
            "title": "About for in Rust:",
            "answers": [
              {
                "id": "ff091d58-d7fe-4fbc-b0bd-70b7ca7cac6c",
                "title": "Can iterate chars of string (for ch in \"ab\".chars())",
                "isCorrect": false
              },
              {
                "id": "d533706c-a76e-4170-8ce9-00a16fb7b21f",
                "title": "Can iterate ranges",
                "isCorrect": false
              },
              {
                "id": "a8195883-242d-41de-b64c-c873d7aac6c0",
                "title": "Safer than manual indexing",
                "isCorrect": false
              },
              {
                "id": "63f58699-b371-4d7b-ada7-a7c2866db1ac",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "Works with any IntoIterator",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7a6bdcb7-8daf-4ba3-a33d-f1c97080457b",
            "title": "Hex literal:",
            "answers": [
              {
                "id": "b893e952-cc38-40ae-818b-f9daed7f99b2",
                "title": "0xFF",
                "isCorrect": true
              },
              {
                "id": "094ff3ed-e55b-4208-baa7-4aacb1b4442e",
                "title": "#FF",
                "isCorrect": false
              },
              {
                "id": "c5263b6d-f89e-45cc-a1e8-e701e812f8d2",
                "title": "$FF",
                "isCorrect": false
              },
              {
                "id": "04536737-ef93-4c49-b17a-21fb262f96ba",
                "title": "xFF",
                "isCorrect": false
              }
            ],
            "descriptionText": "0x is valid prefix",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1a183d99-ad4d-4777-ac1b-29cbfc2a93ac",
            "title": "What will this print?\n\nlet months = [\"Jan\", \"Feb\", \"Mar\"];\nprintln!(\"{}\", months[2]);",
            "answers": [
              {
                "id": "70ebfa81-8533-4065-8fef-0313eb67f5cf",
                "title": "Jan",
                "isCorrect": false
              },
              {
                "id": "9d2d45e4-3444-47ab-8227-93aa281b4943",
                "title": "Feb",
                "isCorrect": false
              },
              {
                "id": "01620a20-ea36-4f4e-93d1-a208a44d4c48",
                "title": "Mar",
                "isCorrect": true
              },
              {
                "id": "4aeea0f5-f15d-4d68-845a-4e61f58eedcb",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Index 2",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1227a807-41eb-46f0-a8d2-cd9a56e264ac",
            "title": "About continue:",
            "answers": [
              {
                "id": "41515794-882a-4118-badb-6d5ada0fa22f",
                "title": "Breaks the whole loop",
                "isCorrect": false
              },
              {
                "id": "0b64539b-833b-48f6-9d38-f17bc5fa1470",
                "title": "Skips current iteration",
                "isCorrect": true
              },
              {
                "id": "92b9e85e-ba23-440d-879c-b1cb15a4af6e",
                "title": "Panic",
                "isCorrect": false
              },
              {
                "id": "d29999b8-26c1-4066-883f-9544c6257a85",
                "title": "Only in while",
                "isCorrect": false
              }
            ],
            "descriptionText": "Moves to next iteration",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6f44eac8-9d2b-4497-859a-12059fbc044a",
            "title": "About rev():",
            "answers": [
              {
                "id": "60256c73-2b2d-4976-9872-eecd769401ab",
                "title": "Applies to ranges",
                "isCorrect": false
              },
              {
                "id": "08b78f14-f39d-44f0-824f-7388a2edd00f",
                "title": "Reverses iteration order",
                "isCorrect": false
              },
              {
                "id": "eb36ab95-3b00-4f2e-86a1-deea9e910ec7",
                "title": "Works with for",
                "isCorrect": false
              },
              {
                "id": "4414253b-8542-4f59-8b0e-7f40fcd6f4d4",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "It's an iterator adapter",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ac29da27-b0c4-40a6-a9ba-ffd2e177b464",
            "title": "Explicit type for variable:",
            "answers": [
              {
                "id": "8b497f32-485b-42b2-bfde-eec74d43d614",
                "title": "let x = 5;",
                "isCorrect": false
              },
              {
                "id": "aa18a935-dc57-496c-9824-88bcc3fcdc14",
                "title": "let x: i32 = 5;",
                "isCorrect": true
              },
              {
                "id": "0c155342-1dcc-4160-a6ac-005d9deafd55",
                "title": "var x: i32 = 5;",
                "isCorrect": false
              },
              {
                "id": "7d4b2b33-c1db-4457-9f71-88c4c031354f",
                "title": "def x: i32 = 5;",
                "isCorrect": false
              }
            ],
            "descriptionText": "let name: Type = expr;",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6ed05638-466e-46db-835e-d5770a7979ab",
            "title": "Function naming style:",
            "answers": [
              {
                "id": "ede7ed9c-7cfd-4b86-945b-9da6d44d7350",
                "title": "CamelCase",
                "isCorrect": false
              },
              {
                "id": "82493594-e14d-4fe6-8f14-59c94ff23a2e",
                "title": "snake_case",
                "isCorrect": true
              },
              {
                "id": "f48af60c-6ece-49de-af44-82f28c1db219",
                "title": "PascalCase",
                "isCorrect": false
              },
              {
                "id": "a0c5d054-34f4-4cb1-8070-109c1a90273e",
                "title": "kebab-case",
                "isCorrect": false
              }
            ],
            "descriptionText": "Idiomatic Rust style",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2f5c9e61-425f-4aec-b72a-c5d4784ec0db",
            "title": "What will happen?\n\nfn plus(x: i32) -> i32 {\n    x + 1\n}\nprintln!(\"{}\", plus(4));",
            "answers": [
              {
                "id": "cf343270-0461-4099-8d16-c5e9ac93b7de",
                "title": "4",
                "isCorrect": false
              },
              {
                "id": "583571ba-7d3d-4b82-9ad8-cb38914f4708",
                "title": "5",
                "isCorrect": true
              },
              {
                "id": "342b1238-20f4-467f-bcfe-a5a4e0f1ddd3",
                "title": "Error",
                "isCorrect": false
              },
              {
                "id": "19f7ca91-0eb8-4fac-9f86-d2201d4c1722",
                "title": "()",
                "isCorrect": false
              }
            ],
            "descriptionText": "Returns 5 as tail expression",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "88a4a139-d381-421b-a139-083d5ab1d117",
            "title": "About comments:",
            "answers": [
              {
                "id": "cf6d3578-6c40-40c6-bd59-df280bd35d87",
                "title": "// — single line",
                "isCorrect": false
              },
              {
                "id": "b6d5ad48-e304-4cde-a2a2-ce7e4e3683b3",
                "title": "/* */ — multi-line (including nested)",
                "isCorrect": false
              },
              {
                "id": "05b4c9eb-7aa3-4536-93eb-7536287fdd96",
                "title": "Ignored by compiler",
                "isCorrect": false
              },
              {
                "id": "3b33621c-49ce-4a01-b297-0561ce824874",
                "title": "All of the above",
                "isCorrect": true
              }
            ],
            "descriptionText": "Both syntaxes valid; block comments nest",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1923de98-4187-482e-97f4-2ae83520c355",
            "title": "Result of 43 % 5:",
            "answers": [
              {
                "id": "0bda4441-1e7f-4c04-8700-0cddd262aba3",
                "title": "3",
                "isCorrect": true
              },
              {
                "id": "136ace50-8a9b-4824-935b-e93a91459bad",
                "title": "4",
                "isCorrect": false
              },
              {
                "id": "72453391-df5d-4643-8855-d3c3eeb0bf13",
                "title": "5",
                "isCorrect": false
              },
              {
                "id": "40421296-1882-46ad-b33f-1c920047a128",
                "title": "8",
                "isCorrect": false
              }
            ],
            "descriptionText": "43 = 5×8 + 3",
            "descriptionLink": "common_programming_concepts_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "e5687df0-75f0-4128-95ed-a206bc112e1e",
        "theme": "Understanding Ownership",
        "priority": 2,
        "questions": [
          {
            "id": "36605fe1-6fac-4d86-baeb-f7edb3f3dfdd",
            "title": "What is ownership in Rust?",
            "answers": [
              {
                "id": "0c041f3a-071e-4f7f-9019-8f2210ce8ef7",
                "title": "Background GC",
                "isCorrect": false
              },
              {
                "id": "a7e3ff86-8169-4c42-b83d-52d3baec215d",
                "title": "A set of compiler-checked rules for memory management",
                "isCorrect": true
              },
              {
                "id": "4afb2913-4e7f-4281-944c-048aad30f9a9",
                "title": "Manual freeing via free()",
                "isCorrect": false
              },
              {
                "id": "dbf3beee-191f-4f61-9864-6338917bd7d7",
                "title": "A compile-time optimization",
                "isCorrect": false
              }
            ],
            "descriptionText": "Ownership is rules the compiler checks - it provides safety without a GC",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "04a16845-5a4e-4d28-891e-fd493f477f7b",
            "title": "Which rule about a value's owner is true?",
            "answers": [
              {
                "id": "5cc799de-2181-4afd-98c3-49cfca64f114",
                "title": "A value can have many owners",
                "isCorrect": false
              },
              {
                "id": "172a809b-2b1a-40c8-b06a-6cd5f06feb82",
                "title": "A value may have no owner",
                "isCorrect": false
              },
              {
                "id": "d406b791-cf29-4e19-b3c3-3a4dde6baf7d",
                "title": "At any moment there is exactly one owner",
                "isCorrect": true
              },
              {
                "id": "cd135b44-9c2d-4a76-be5d-c0c3e0169387",
                "title": "Owners exist only for heap data",
                "isCorrect": false
              }
            ],
            "descriptionText": "One owner at a time - prevents double drop",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "944046dd-1230-4983-a11c-1424bbd778d2",
            "title": "What happens when the owner goes out of scope?",
            "answers": [
              {
                "id": "d6a57ddd-86a1-47a2-bb29-0beb0e731fa9",
                "title": "Nothing",
                "isCorrect": false
              },
              {
                "id": "9c74bd63-af27-4dc1-9770-92756bc5bdad",
                "title": "Memory leaks",
                "isCorrect": false
              },
              {
                "id": "d3f4ff0d-d912-4cd0-9e69-6bb5ee86eafe",
                "title": "drop is called and the resource is released",
                "isCorrect": true
              },
              {
                "id": "6931791a-5ff3-4b56-9b9f-30436049e51c",
                "title": "The value becomes 'static",
                "isCorrect": false
              }
            ],
            "descriptionText": "Automatic drop - Rust uses RAII",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "db36375a-d271-4f45-be11-c27f089dbd40",
            "title": "Where do fixed-size types (e.g., i32) live entirely?",
            "answers": [
              {
                "id": "8c380e88-432f-42d2-b0ca-3401711663a1",
                "title": "On the heap",
                "isCorrect": false
              },
              {
                "id": "184b21a6-6189-480b-a2f4-f7b1be070f88",
                "title": "On the stack",
                "isCorrect": true
              },
              {
                "id": "9fedad0c-ea90-4513-9490-3c4a253201d6",
                "title": "Always in static memory",
                "isCorrect": false
              },
              {
                "id": "b0924537-f95d-4ddb-ad7d-784ff8fba90f",
                "title": "In the binary file",
                "isCorrect": false
              }
            ],
            "descriptionText": "Scalars are on the stack - size known at compile time",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b34250c4-8641-4314-9463-037d5965c490",
            "title": "How does &str differ from String?",
            "answers": [
              {
                "id": "3623016b-fcbf-49a1-9f2f-3cf0b68c3ac0",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "ca10930a-1ddc-4bd8-8027-ce54a9c42e8a",
                "title": "&str is an immutable slice; String owns and mutably manages heap data",
                "isCorrect": true
              },
              {
                "id": "e53929c7-eb60-47d1-8640-e40334f9b02f",
                "title": "&str is always on the heap",
                "isCorrect": false
              },
              {
                "id": "1092b6ab-8936-4a89-871d-f612b997b99a",
                "title": "String is always on the stack",
                "isCorrect": false
              }
            ],
            "descriptionText": "&str is a slice, String is an owning buffer - different memory models",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a12a1d90-59ea-41c3-9d84-b1abbcb59588",
            "title": "What will happen?\n\nlet s1 = String::from(\"hi\");\nlet s2 = s1;\nprintln!(\"{s1}\");",
            "answers": [
              {
                "id": "48b56cca-2cab-4d73-90fc-215f8b697e74",
                "title": "Prints \"hi\"",
                "isCorrect": false
              },
              {
                "id": "0a389b99-57d5-47fb-ba6a-9aa36347c88a",
                "title": "Compile error: use of moved value",
                "isCorrect": true
              },
              {
                "id": "2b8167dd-8065-4590-a67f-284cc991139a",
                "title": "Runtime panic",
                "isCorrect": false
              },
              {
                "id": "32a7c23c-04b1-4a57-ae7a-693002ad5739",
                "title": "s1 is automatically cloned",
                "isCorrect": false
              }
            ],
            "descriptionText": "s1 was moved - String is not Copy",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "285a8cd7-7f22-4fdc-a194-48f6fe36fb1f",
            "title": "What is the name of the ownership transfer in let s2 = s1;?",
            "answers": [
              {
                "id": "1c2df2d0-b864-409f-87cf-875d263c4d93",
                "title": "Borrowing",
                "isCorrect": false
              },
              {
                "id": "df816bde-6972-48bf-a570-5523994267ab",
                "title": "Moving",
                "isCorrect": true
              },
              {
                "id": "9fdbdd5e-c3fe-4e2b-ba1a-01cca76efcd6",
                "title": "Cloning",
                "isCorrect": false
              },
              {
                "id": "d13b71dd-0ca0-419b-82d4-e1206ded3c38",
                "title": "Aliasing",
                "isCorrect": false
              }
            ],
            "descriptionText": "That's a move - ownership is transferred to the new name",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "239fe9c2-53a4-4173-b999-cd8b8b3a8ef0",
            "title": "What is copied in let s2 = s1; for String?",
            "answers": [
              {
                "id": "734f56a1-9695-45f4-986b-7f45429ace80",
                "title": "Heap data",
                "isCorrect": false
              },
              {
                "id": "b88e2dc6-1668-4cf6-bcfd-870afb700459",
                "title": "Only the length",
                "isCorrect": false
              },
              {
                "id": "73e77587-134e-4c4e-8b84-f8772af609cd",
                "title": "Pointer, length, and capacity (stack part)",
                "isCorrect": true
              },
              {
                "id": "598360fb-e41f-4cd6-92e4-14d0100d35d2",
                "title": "Nothing",
                "isCorrect": false
              }
            ],
            "descriptionText": "Stack metadata - no deep copy is performed",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "29234d85-4abb-4365-9125-cfe86173af66",
            "title": "Why does Rust invalidate the old variable after a move?",
            "answers": [
              {
                "id": "084ed2aa-76e7-464f-bcce-39e99bb08055",
                "title": "To speed up compilation",
                "isCorrect": false
              },
              {
                "id": "13229146-3dbd-4af8-ad9d-1a257258e591",
                "title": "To avoid double free",
                "isCorrect": true
              },
              {
                "id": "5c618130-ee1e-46e3-9db0-16a8b896bd15",
                "title": "To make debugging easier",
                "isCorrect": false
              },
              {
                "id": "3c97523b-5aad-46d8-aff4-da00965022b6",
                "title": "To speed up memory access",
                "isCorrect": false
              }
            ],
            "descriptionText": "No two owners of one buffer - memory safety",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e539ba83-3548-469c-b91c-a93245a85b41",
            "title": "What does clone() do for String?",
            "answers": [
              {
                "id": "3955bbc9-70cc-413f-8f41-1ed600950494",
                "title": "Copies only the pointer",
                "isCorrect": false
              },
              {
                "id": "579be593-287e-42ae-9ff0-1ef99c30719f",
                "title": "Moves ownership",
                "isCorrect": false
              },
              {
                "id": "af1b9da0-45b4-4a06-bd77-7bde715cc9a1",
                "title": "Performs a deep copy of heap data",
                "isCorrect": true
              },
              {
                "id": "b4d07eda-6016-42ed-ba50-27cbc71613d0",
                "title": "Frees the original",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deep copy - duplicates the bytes",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e0589d02-ce59-48a0-987f-b0e95524d54b",
            "title": "Which types typically implement Copy?",
            "answers": [
              {
                "id": "f39cb80a-18e7-4f72-87be-e5dcf4b6aa38",
                "title": "All heap types",
                "isCorrect": false
              },
              {
                "id": "78714f12-2c51-48e7-b414-a82d775aa14c",
                "title": "Scalars and tuples composed entirely of Copy types",
                "isCorrect": true
              },
              {
                "id": "bdb986f4-53b7-4893-b21e-487d3491eedb",
                "title": "Only String",
                "isCorrect": false
              },
              {
                "id": "2a7d367c-a3f9-4f51-95d1-6137d7f66b27",
                "title": "Any structs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Simple stack types - copying is trivial",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "274336aa-7288-47b9-8e64-1963c2a20d1c",
            "title": "Why isn't String Copy?",
            "answers": [
              {
                "id": "89ac81c5-0b82-4dd4-ab16-390529157afe",
                "title": "It's &str",
                "isCorrect": false
              },
              {
                "id": "9f6831ce-1ad1-4f22-9c18-cda610bbcc33",
                "title": "It manages a heap resource (Drop)",
                "isCorrect": true
              },
              {
                "id": "f5fd2920-3d50-4bb0-ba9d-112cbdf961ca",
                "title": "It's too long",
                "isCorrect": false
              },
              {
                "id": "b4f3acba-e4e4-4ebe-89e0-448ffd704529",
                "title": "It requires 'static",
                "isCorrect": false
              }
            ],
            "descriptionText": "Has a resource and Drop - copying would be unsafe",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "818c2072-c972-47d1-8b8f-d595b48010a5",
            "title": "Passing arguments to a function by value…",
            "answers": [
              {
                "id": "34702115-a733-44e6-86fd-543d9434b57d",
                "title": "Is always a deep copy",
                "isCorrect": false
              },
              {
                "id": "ddf7c1ea-9105-47a7-b73b-ed465dd5e979",
                "title": "Behaves like assignment: move or copy",
                "isCorrect": true
              },
              {
                "id": "34fe7e68-7983-417e-9fc1-6af72eb426a5",
                "title": "Is always by reference",
                "isCorrect": false
              },
              {
                "id": "a38241db-102e-4b7c-a7f7-113aef680335",
                "title": "Never moves",
                "isCorrect": false
              }
            ],
            "descriptionText": "Same rules - unified ownership model",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "854f183d-e14b-4598-99f9-e510530951ca",
            "title": "Which is true?\n\nfn takes(s: String) {}\nlet x = String::from(\"hi\");\ntakes(x);\n// here x ...",
            "answers": [
              {
                "id": "1982688f-1a79-4dc0-bce3-50732b884a5b",
                "title": "x is available",
                "isCorrect": false
              },
              {
                "id": "2ce593a4-ad98-4b78-af78-a9aeca261911",
                "title": "x is unavailable (moved)",
                "isCorrect": true
              },
              {
                "id": "3f69d13c-df46-4122-b0c3-b1cb9e0aae2a",
                "title": "x is Copy",
                "isCorrect": false
              },
              {
                "id": "65d29a99-4140-45e4-8e3f-61b6cf8ce943",
                "title": "There will be a panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "Move into the function - String passed by ownership",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d58d3dfa-2ca6-43d1-80a6-8493762e2fbd",
            "title": "How to return a value without return?",
            "answers": [
              {
                "id": "8d8bcf59-164d-4d9a-8613-802a6bc87800",
                "title": "You can't",
                "isCorrect": false
              },
              {
                "id": "4b5e8231-e042-4424-b2bc-6bd66f5237ad",
                "title": "Make it the last expression without ;",
                "isCorrect": true
              },
              {
                "id": "8d6d8b84-53b8-4e20-9331-07f2a41e2110",
                "title": "Use yield",
                "isCorrect": false
              },
              {
                "id": "688f050a-4e7f-4d66-b542-c9d0734a11f6",
                "title": "Use give_back",
                "isCorrect": false
              }
            ],
            "descriptionText": "Tail expression - expressions return values",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "93c01250-91ab-44da-85c9-af8d5054216b",
            "title": "Why use references &T?",
            "answers": [
              {
                "id": "9f01dd8c-19dc-44fa-be37-23db12a9dc7d",
                "title": "To speed up compilation",
                "isCorrect": false
              },
              {
                "id": "a38b54a4-81c8-4d5c-adeb-0d5db63355b4",
                "title": "To temporarily \"borrow\" a value without transferring ownership",
                "isCorrect": true
              },
              {
                "id": "fa644f16-b8ab-4d7f-83e4-04eedc8d91a8",
                "title": "For deep copy",
                "isCorrect": false
              },
              {
                "id": "2a5d8e3f-7871-47d3-b227-8de48b85a8df",
                "title": "To make it 'static",
                "isCorrect": false
              }
            ],
            "descriptionText": "Use without move - borrowing",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d1441c89-3f8e-4c49-85fe-885cda239fcf",
            "title": "What is true about &String?",
            "answers": [
              {
                "id": "f112aeda-8939-44d1-b923-fbf862628c87",
                "title": "Allows modifying the string",
                "isCorrect": false
              },
              {
                "id": "f3a38627-19a9-4f0e-8428-f53aabb021fc",
                "title": "Immutable reference; read without owning",
                "isCorrect": true
              },
              {
                "id": "9d4fcab4-e5cb-4e89-a1bc-92a43ac55aab",
                "title": "Extends the owner's lifetime",
                "isCorrect": false
              },
              {
                "id": "0448c685-bb9e-483a-831e-4dc7c37421b4",
                "title": "Calls drop on the owner",
                "isCorrect": false
              }
            ],
            "descriptionText": "Read-only - need &mut for mutation",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6e816a77-3674-4045-9395-bce2a963419d",
            "title": "How to allow modifying a borrowed String?",
            "answers": [
              {
                "id": "55565ec7-5c12-4b91-9d45-8edec02a46b8",
                "title": "Accept &mut String and pass &mut s",
                "isCorrect": true
              },
              {
                "id": "b5ed7461-7d3b-45b8-a488-1e481a89af0f",
                "title": "Accept &&String",
                "isCorrect": false
              },
              {
                "id": "8fbe3268-e281-47bd-9dc7-d5767a118b51",
                "title": "Accept String",
                "isCorrect": false
              },
              {
                "id": "6ce07d32-c7ab-44f8-b225-642bcdaaf72b",
                "title": "Accept &Box<String>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Need a mutable reference - explicit write permission",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "00a40915-61e7-4c98-9089-6688b6e5a0cc",
            "title": "Constraint on references:",
            "answers": [
              {
                "id": "248640a4-827a-45af-ae0c-2aa96ad4876f",
                "title": "Many &mut at the same time are allowed",
                "isCorrect": false
              },
              {
                "id": "965cf0f0-590b-4aa6-89bc-67a3009ef89c",
                "title": "Either one &mut or any number of &, but not both simultaneously",
                "isCorrect": true
              },
              {
                "id": "0b37bf58-6fc1-4fb7-87db-ec0b5a2dc250",
                "title": "One &mut and one & are allowed together",
                "isCorrect": false
              },
              {
                "id": "64e880f2-6c9e-4c05-9432-62dc53957bc4",
                "title": "No constraints",
                "isCorrect": false
              }
            ],
            "descriptionText": "Anti–data race rule - prevents races",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4e310a85-2325-40c1-91a4-2cff46da2e2f",
            "title": "What happens with simultaneous & and &mut to the same object?",
            "answers": [
              {
                "id": "bb8784df-54ae-4f5a-91d9-bcbf5b81829e",
                "title": "Compiles",
                "isCorrect": false
              },
              {
                "id": "bec51544-45b8-49ac-a9f2-0aa1045704ce",
                "title": "Compile error (E0502)",
                "isCorrect": true
              },
              {
                "id": "a174fa8c-4a8d-40bc-b13b-6608d089d86f",
                "title": "Runtime panic",
                "isCorrect": false
              },
              {
                "id": "c37b3f73-9afc-4a5e-a28d-faf7677946b6",
                "title": "UB",
                "isCorrect": false
              }
            ],
            "descriptionText": "Borrowing conflict - violates rules",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "69ed31bd-1c29-4d44-a1e9-6cf0032589ee",
            "title": "When does a reference's lifetime end in simple cases (NLL)?",
            "answers": [
              {
                "id": "9015d77b-e1ba-431a-ad7e-173b3075f5d1",
                "title": "Always at the end of the block",
                "isCorrect": false
              },
              {
                "id": "fc213125-be38-4241-aebd-06571cb12764",
                "title": "When the owner is dropped",
                "isCorrect": false
              },
              {
                "id": "a30bc410-55d3-401c-bb5a-bae962cfe568",
                "title": "After its last use",
                "isCorrect": true
              },
              {
                "id": "7583f7be-18c1-407d-9110-0611a9b71d3b",
                "title": "Never",
                "isCorrect": false
              }
            ],
            "descriptionText": "Non-lexical lifetimes shorten it - safer and more flexible",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "83a91f02-ef74-4099-ba2e-5cd40ecf615d",
            "title": "What is a \"dangling\" reference?",
            "answers": [
              {
                "id": "adcb92b0-caea-49c8-93ed-202e5cac55cd",
                "title": "A reference to another type",
                "isCorrect": false
              },
              {
                "id": "ce8687e9-c70d-4f5f-89a2-16cbe96ea126",
                "title": "A reference to already freed memory",
                "isCorrect": true
              },
              {
                "id": "c62728b8-4dcc-4ef5-9bb3-dbf5405ba030",
                "title": "A reference always on the stack",
                "isCorrect": false
              },
              {
                "id": "ce03b8f4-55f4-462c-8480-e44bbe8e9cfd",
                "title": "A reference to an empty array",
                "isCorrect": false
              }
            ],
            "descriptionText": "Dangling reference - object already dropped",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3aa84eeb-49e5-4155-9aba-4ce9e326aed2",
            "title": "Why doesn't this compile:\nfn dangle() -> &String { let s = String::from(\"x\"); &s }?",
            "answers": [
              {
                "id": "91e6eb8c-4b30-4db2-b545-74b748ad0127",
                "title": "You can't return references",
                "isCorrect": false
              },
              {
                "id": "80cc0c73-80aa-494d-bc33-57f870623c76",
                "title": "s will be dropped; the reference becomes invalid",
                "isCorrect": true
              },
              {
                "id": "f46da158-83a8-4ceb-a539-130d27cc202a",
                "title": "You can't allocate in a function",
                "isCorrect": false
              },
              {
                "id": "6eb805c2-3c6c-467f-b18e-bebf4220b6a2",
                "title": "You need a GC",
                "isCorrect": false
              }
            ],
            "descriptionText": "Returning a reference to a local - dangling references are forbidden",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ab77c7c1-1611-4f42-9ecd-37d88a76d693",
            "title": "How to fix dangle?",
            "answers": [
              {
                "id": "1b0d017c-7304-47bc-b668-6dc6229e824c",
                "title": "Return String by ownership",
                "isCorrect": true
              },
              {
                "id": "92c0de30-d8be-47a9-bf57-cd2526147eb7",
                "title": "Always return &'static String",
                "isCorrect": false
              },
              {
                "id": "f6d9d596-e461-4dd2-ab88-d2f1999d40bf",
                "title": "Return &&String",
                "isCorrect": false
              },
              {
                "id": "d526ce2e-7b34-4abf-8344-67dc52ecb292",
                "title": "Use unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Move the value out - the owner lives outside",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3184bf30-db8f-42bc-a758-77b50eb2b521",
            "title": "What is a slice (&str, &[T])?",
            "answers": [
              {
                "id": "96e9d005-ed65-4d29-aed7-64a055edf758",
                "title": "Ownership of part of a collection",
                "isCorrect": false
              },
              {
                "id": "d1d42338-8236-4746-92fe-4c4f529095a9",
                "title": "A non-owning reference to a contiguous region of data",
                "isCorrect": true
              },
              {
                "id": "5f253230-f69a-46ae-99d8-6d26022df46f",
                "title": "A copied range",
                "isCorrect": false
              },
              {
                "id": "0ea9970c-6782-449f-ad47-0cf73de3fb73",
                "title": "A smart pointer with auto-drop",
                "isCorrect": false
              }
            ],
            "descriptionText": "Slice = pointer + length - no ownership",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c752be73-5de0-4d12-9fc3-b8df85f41aa3",
            "title": "Why is returning a usize index from first_word risky?",
            "answers": [
              {
                "id": "a50d87cb-ced9-434d-a840-96e756fef7a3",
                "title": "The index can be negative",
                "isCorrect": false
              },
              {
                "id": "bf31a9d7-b216-415a-9ede-c3ed927c3ef1",
                "title": "The index isn't tied to the data and becomes stale after modifications",
                "isCorrect": true
              },
              {
                "id": "7097ac5b-3cf0-4578-831f-6a63410c6758",
                "title": "usize is too small",
                "isCorrect": false
              },
              {
                "id": "50900847-179b-436d-96cd-3fd480e70a6a",
                "title": "You can't compute string length",
                "isCorrect": false
              }
            ],
            "descriptionText": "Detached index breaks after clear() - no coupling to data",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "071b4d46-8f1f-40b6-b1ad-c12ae5446f74",
            "title": "Which signature is more general?",
            "answers": [
              {
                "id": "359175e2-7d06-4c28-8172-84ac8f1f3ab1",
                "title": "fn first_word(s: &String) -> &str",
                "isCorrect": false
              },
              {
                "id": "95aa54b8-b187-40bc-9353-98adda67ef74",
                "title": "fn first_word(s: &str) -> &str",
                "isCorrect": true
              },
              {
                "id": "3bb15cd2-d99a-474e-a0fe-59fd4a61697a",
                "title": "fn first_word(s: String) -> &str",
                "isCorrect": false
              },
              {
                "id": "5fc93b5c-9e17-4858-8748-9d079c67de71",
                "title": "fn first_word<T>(s: T) -> &str",
                "isCorrect": false
              }
            ],
            "descriptionText": "Works with &String and literals - more general slice",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a00aef35-c6e3-4541-91a8-aacaddd7166b",
            "title": "What does the slice &s[3..7] of a String store?",
            "answers": [
              {
                "id": "ac982809-6316-4313-8438-c6db8b7db6a5",
                "title": "A copy of the bytes",
                "isCorrect": false
              },
              {
                "id": "72064474-5f3b-47ac-ae5c-3f63a7d1c891",
                "title": "A pointer to the start and a length",
                "isCorrect": true
              },
              {
                "id": "de190d19-d7eb-409b-b284-61a1b03463da",
                "title": "A new String",
                "isCorrect": false
              },
              {
                "id": "b24c53dc-e929-4da0-a246-366059953b2d",
                "title": "'static data",
                "isCorrect": false
              }
            ],
            "descriptionText": "Pointer + len - no copying",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f762e335-bd10-431f-8088-c6661185f541",
            "title": "What slice bounds are valid for a string?",
            "answers": [
              {
                "id": "824cea63-2ba8-4e26-8b4d-5048e4786967",
                "title": "Any byte offsets",
                "isCorrect": false
              },
              {
                "id": "327ae681-6980-4384-bd4c-6c90af10f384",
                "title": "Only at valid UTF-8 boundaries",
                "isCorrect": true
              },
              {
                "id": "b8ec4c3a-1cbd-4971-b810-67470c20cc27",
                "title": "Only on Unicode (grapheme) boundaries",
                "isCorrect": false
              },
              {
                "id": "538d5c66-dd37-41e7-898b-b7abf89bc2d5",
                "title": "Only multiples of 4",
                "isCorrect": false
              }
            ],
            "descriptionText": "By Unicode scalar boundaries - otherwise runtime error",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c1ffe295-caee-4bd7-8115-bf39969925a2",
            "title": "What will happen?\n\nlet mut s = String::from(\"hello world\");\nlet w = first_word(&s);\ns.clear();\nprintln!(\"{w}\");",
            "answers": [
              {
                "id": "caebe944-0bcb-4fe8-91f7-e30592c23d2c",
                "title": "Prints empty",
                "isCorrect": false
              },
              {
                "id": "521cade4-b715-4210-8a55-b652ab9943bb",
                "title": "Compiles and crashes",
                "isCorrect": false
              },
              {
                "id": "0f1545f9-b4cb-40e4-bab1-1d57c03ace11",
                "title": "Compile error (borrow conflict)",
                "isCorrect": true
              },
              {
                "id": "0f3da8c9-9709-4377-a47b-6a1beab08136",
                "title": "It's fine; w isn't tied to s",
                "isCorrect": false
              }
            ],
            "descriptionText": "Cannot have & and &mut simultaneously - clear() needs &mut while w is alive",
            "descriptionLink": "understanding_ownership_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "c594ae4c-a551-4937-b7a4-6040c6376999",
        "theme": "Using Structs to Structure Related Data",
        "priority": 3,
        "questions": [
          {
            "id": "6c785c42-5f32-40cb-8314-a6bfecaefadd",
            "title": "How is a struct defined in Rust?",
            "answers": [
              {
                "id": "c59bb41c-28f8-456a-b2cc-5f42d50814cb",
                "title": "class User { … }",
                "isCorrect": false
              },
              {
                "id": "8dffb925-dd62-4aca-9f88-e6a427f50f94",
                "title": "struct User { … }",
                "isCorrect": true
              },
              {
                "id": "22f407e3-d795-4bef-a65b-01090c885cbe",
                "title": "object User { … }",
                "isCorrect": false
              },
              {
                "id": "69267dea-361a-4007-9754-de8c8617eb8a",
                "title": "data User { … }",
                "isCorrect": false
              }
            ],
            "descriptionText": "Use the struct keyword with braces. Rust has no Java/Kotlin-style class or object",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f798590a-4e1b-4e01-9fc1-b64510ca45da",
            "title": "What are fields in a struct?",
            "answers": [
              {
                "id": "1ca63724-c444-4b77-a5da-24077d87d786",
                "title": "Default values",
                "isCorrect": false
              },
              {
                "id": "c2f8483f-5f1c-4b03-9eeb-111274cd5ba0",
                "title": "Variables inside a function",
                "isCorrect": false
              },
              {
                "id": "0a9264c2-5eb0-42e6-b904-59ed88c7ad3f",
                "title": "Named data inside a struct",
                "isCorrect": true
              },
              {
                "id": "29649d6f-ba10-4085-baac-c51d563975b3",
                "title": "Separate methods of the struct",
                "isCorrect": false
              }
            ],
            "descriptionText": "Fields are the components of a struct, each with its own name and type. Unlike tuples, a struct gives names to data",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "322f3690-7f19-4fce-9ee0-a42bbb1ce6a5",
            "title": "What must be specified when declaring a field?",
            "answers": [
              {
                "id": "b2a89ed5-6d21-45db-a998-5efe3cfcc079",
                "title": "Only the name",
                "isCorrect": false
              },
              {
                "id": "a7514afc-ca64-43ef-81dc-ed5661ec46b5",
                "title": "Only the type",
                "isCorrect": false
              },
              {
                "id": "27ef2d80-77ff-427f-a4ca-96db43e8d0f6",
                "title": "Name and type",
                "isCorrect": true
              },
              {
                "id": "e29859c4-06fa-4cb8-a80b-fcd787ebf412",
                "title": "Nothing; Rust infers it",
                "isCorrect": false
              }
            ],
            "descriptionText": "Struct fields always specify both name and type. A struct defines a data schema",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6eeac506-2f86-44a4-bdfb-eb4343a0261e",
            "title": "How do you create a struct instance?",
            "answers": [
              {
                "id": "056afc88-1032-446b-a27b-95268d96c0c0",
                "title": "User(true, \"name\", \"email\", 1)",
                "isCorrect": false
              },
              {
                "id": "d19b739f-c380-41f9-bff7-32ea9eee4f5d",
                "title": "User { active: true, username: ..., email: ..., sign_in_count: 1 }",
                "isCorrect": true
              },
              {
                "id": "f3963a6b-e421-44b0-990c-4eea2be66d29",
                "title": "new User(...)",
                "isCorrect": false
              },
              {
                "id": "f250c491-b5a5-4330-a995-e07b29759114",
                "title": "User::new(...) — always",
                "isCorrect": false
              }
            ],
            "descriptionText": "A struct instance is created with { key: value }. There's no default constructor",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d901f32f-fc85-431f-8eb5-b31db9e0554e",
            "title": "Can you change the fields of a struct instance?",
            "answers": [
              {
                "id": "0bc74f62-75dc-469f-a426-1df93305a40a",
                "title": "Always",
                "isCorrect": false
              },
              {
                "id": "c2d4e2d0-d213-4b3c-97bc-3fa4171c79c3",
                "title": "Only if the field itself is mut",
                "isCorrect": false
              },
              {
                "id": "f07e8b8a-2450-4f20-b25a-e040a3732fe1",
                "title": "Only if the binding (the whole variable) is mut",
                "isCorrect": true
              },
              {
                "id": "3f7ca4a7-6149-4814-ae3b-c5b71b7d434d",
                "title": "Never",
                "isCorrect": false
              }
            ],
            "descriptionText": "In Rust, mutability is set for the whole instance. Individual fields can't be declared mut",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "35d424a8-10da-4378-b5c6-63fdbc40fe9f",
            "title": "How do you access a struct field?",
            "answers": [
              {
                "id": "5c4bada1-5efe-45ba-916f-92acdb886889",
                "title": "user[\"email\"]",
                "isCorrect": false
              },
              {
                "id": "16e3b7e7-6279-44e7-b228-8c16812deb73",
                "title": "user->email",
                "isCorrect": false
              },
              {
                "id": "ea5479dd-30ae-48bd-a04a-7a62e5469269",
                "title": "user.email",
                "isCorrect": true
              },
              {
                "id": "b0a54f70-9740-4f5d-8592-218a2a0c6b10",
                "title": "email(user)",
                "isCorrect": false
              }
            ],
            "descriptionText": "Use dot notation. Similar to C/Java in this respect",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9af9382a-0b76-4243-9090-4aed762cc6ef",
            "title": "What does \"field init shorthand\" do?",
            "answers": [
              {
                "id": "c3b6303b-a973-4b83-906c-5c59b80b4572",
                "title": "Automatically creates getters",
                "isCorrect": false
              },
              {
                "id": "0ca2cf10-0ac3-4280-85a2-dc6eb0687134",
                "title": "Lets you omit the field name if it matches the parameter name",
                "isCorrect": true
              },
              {
                "id": "fcdb3edf-7004-485f-a57c-b4cfd3d294fd",
                "title": "Automatically makes all fields mut",
                "isCorrect": false
              },
              {
                "id": "acbbf03c-b3cc-45eb-bca5-f2d68a096060",
                "title": "Duplicates all fields",
                "isCorrect": false
              }
            ],
            "descriptionText": "If a parameter and a field share a name, you can write it once. Reduces duplication",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ced831de-da5f-4215-8c86-671325076ac8",
            "title": "What does the shorthand call look like?",
            "answers": [
              {
                "id": "3f932264-4d98-4dfd-9df2-d6cb920d9672",
                "title": "User { email: email, username: username }",
                "isCorrect": false
              },
              {
                "id": "4737b972-de5b-46af-a0b5-77a5e7b4834b",
                "title": "User { email, username }",
                "isCorrect": true
              },
              {
                "id": "b14e696b-e0fa-4fed-bfe2-671cffe04686",
                "title": "User(email, username)",
                "isCorrect": false
              },
              {
                "id": "d7deb6a9-8b40-4016-949b-2a536eae9589",
                "title": "User::from(email, username)",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust expands email to email: email. It's syntactic sugar",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7b6df1c6-3a22-42e1-83b6-8451d39a804b",
            "title": "What does the \"struct update syntax\" do?",
            "answers": [
              {
                "id": "870f3fad-6ce9-42c7-aa6e-de654fed6d8e",
                "title": "Clones a struct",
                "isCorrect": false
              },
              {
                "id": "9bd2e7ce-7a20-404d-84f0-8c6d1e07a80e",
                "title": "Creates a new instance by changing some fields and copying the rest from another instance",
                "isCorrect": true
              },
              {
                "id": "611a1cb1-5364-41c8-b73a-85e57bc4ea82",
                "title": "Mutates the struct in place",
                "isCorrect": false
              },
              {
                "id": "79ed518d-7355-464b-8f0b-70394298774d",
                "title": "Deletes fields",
                "isCorrect": false
              }
            ],
            "descriptionText": "Use ..other_struct. Saves code when creating new instances",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3a7e2526-9237-408a-b5a5-be906e0dd856",
            "title": "How is the update syntax written?",
            "answers": [
              {
                "id": "834cb574-8719-4bfe-9a6a-09463b862f70",
                "title": "User { email: \"x\", user1 }",
                "isCorrect": false
              },
              {
                "id": "ca46e9f7-a352-4fbb-8911-afa8aafec926",
                "title": "User { email: \"x\", ..user1 }",
                "isCorrect": true
              },
              {
                "id": "ceb47605-c854-4d49-82b2-4f2117a90200",
                "title": "User::update(user1, \"x\")",
                "isCorrect": false
              },
              {
                "id": "9fe3e34c-3f71-4f39-bbb8-a06d3a134849",
                "title": "User(..user1, email=\"x\")",
                "isCorrect": false
              }
            ],
            "descriptionText": "..user1 copies the remaining fields. Built-in Rust syntax",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b4f815c5-d6ac-45ad-8e35-4296338c2921",
            "title": "What happens to user1.username when using ..user1?",
            "answers": [
              {
                "id": "30c5c42f-8230-4d07-97ec-0cfd8ff9daca",
                "title": "It's cloned",
                "isCorrect": false
              },
              {
                "id": "a2dcd3e6-0e98-42a2-ac24-d29167359ae4",
                "title": "It's moved",
                "isCorrect": true
              },
              {
                "id": "95f4e41e-326c-4020-8e73-8da57000e2e5",
                "title": "It remains accessible",
                "isCorrect": false
              },
              {
                "id": "7a676dd7-4694-4c9e-a985-a4ec21d5afed",
                "title": "It's always copied, even if it's a String",
                "isCorrect": false
              }
            ],
            "descriptionText": "String fields are moved. String is not Copy",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f2d9077f-d1c5-440a-aea3-0cdc2d226a5a",
            "title": "What happens to user1.active if it's a bool?",
            "answers": [
              {
                "id": "d6655b1c-8d99-41f6-bb0e-5646b90f8858",
                "title": "It's moved",
                "isCorrect": false
              },
              {
                "id": "9c76f0fd-1321-4d21-88d0-694e52955c79",
                "title": "It's copied",
                "isCorrect": true
              },
              {
                "id": "cc18c137-0693-4e5c-b08d-09c5c32c8465",
                "title": "Compile error",
                "isCorrect": false
              },
              {
                "id": "1394b283-e257-40ea-93ba-592026126651",
                "title": "Dropped",
                "isCorrect": false
              }
            ],
            "descriptionText": "bool implements Copy. Simple types are copied",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "186644e8-9dbc-4257-89ed-8768c37ce841",
            "title": "What is a tuple struct?",
            "answers": [
              {
                "id": "b1e7ff75-04d4-45db-bedd-45979a141978",
                "title": "A struct without fields",
                "isCorrect": false
              },
              {
                "id": "ec91390d-f130-4f13-a97b-32b9b766caf8",
                "title": "A struct with a name but without field names",
                "isCorrect": true
              },
              {
                "id": "654e9665-d836-462b-921d-a3a8a1483e8c",
                "title": "A struct of only bools",
                "isCorrect": false
              },
              {
                "id": "b5d14e2b-ec13-4823-9dc0-4bc95fa6c740",
                "title": "A struct with dynamic fields",
                "isCorrect": false
              }
            ],
            "descriptionText": "Fields are specified only by types. It's a mix of tuple and struct",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d506afd5-b7f6-42a0-af5a-513a51b3c0e8",
            "title": "How do you declare a tuple struct?",
            "answers": [
              {
                "id": "1b93ce93-8131-4d39-ad6b-f0e875453816",
                "title": "struct Color { i32, i32, i32 }",
                "isCorrect": false
              },
              {
                "id": "ea482052-9451-4812-ab2d-4fae1206df85",
                "title": "struct Color(i32, i32, i32);",
                "isCorrect": true
              },
              {
                "id": "3f055b67-56ea-4dea-998f-ec374ca21fb1",
                "title": "tuple Color(i32, i32, i32);",
                "isCorrect": false
              },
              {
                "id": "77be05e5-30cd-423e-99fc-76eefb24860b",
                "title": "struct Color: (i32, i32, i32);",
                "isCorrect": false
              }
            ],
            "descriptionText": "Provide the name and types in parentheses. That's Rust syntax",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "12644aa3-45b7-408f-bdfc-4d2ca0159dd9",
            "title": "How do Color and Point differ?",
            "answers": [
              {
                "id": "cc8a1fde-1d27-4415-9a7c-a06c0824f421",
                "title": "No difference; they're aliases",
                "isCorrect": false
              },
              {
                "id": "fb7e879b-ee8b-4809-8321-d03e3fd589e6",
                "title": "They're different types even if they have identical fields",
                "isCorrect": true
              },
              {
                "id": "c5d13a3d-91cf-45c2-9577-7eb48646c799",
                "title": "The only difference is variable names",
                "isCorrect": false
              },
              {
                "id": "537cefa9-33ea-4660-b053-3342bd42bf15",
                "title": "Point can be used in place of Color",
                "isCorrect": false
              }
            ],
            "descriptionText": "Each struct is a distinct type. Rust is strongly typed",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c2d2c35d-c643-4065-a16b-f358ffcc13d6",
            "title": "What is a unit-like struct?",
            "answers": [
              {
                "id": "db7d6aba-66d5-41e9-bb23-185242c5a42f",
                "title": "A struct with one field",
                "isCorrect": false
              },
              {
                "id": "6899bdc6-b958-4aa9-8210-66922bcf425f",
                "title": "A struct with no fields",
                "isCorrect": true
              },
              {
                "id": "b960da79-ae90-4a69-b29c-c42544fa9ef9",
                "title": "A struct with &str",
                "isCorrect": false
              },
              {
                "id": "f4eb6fbe-d87c-484b-af07-4ec399bf79bb",
                "title": "A struct that's always mut",
                "isCorrect": false
              }
            ],
            "descriptionText": "Written as struct Name;. It's analogous to the unit ()",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e3f79185-c754-4dd9-a7f5-1b0a421ba698",
            "title": "What are unit-like structs used for?",
            "answers": [
              {
                "id": "d3128044-bb37-4712-b90b-9d6719d6013c",
                "title": "Storing an empty string",
                "isCorrect": false
              },
              {
                "id": "b1d141e0-a8bd-4fa8-921c-f8dc65d2525e",
                "title": "Implementing traits without storing data",
                "isCorrect": true
              },
              {
                "id": "6ba0a11f-673a-48fa-a8dc-4609524045c7",
                "title": "Saving memory",
                "isCorrect": false
              },
              {
                "id": "16a58906-f5cc-4805-827a-6aad16357401",
                "title": "Replacing enums",
                "isCorrect": false
              }
            ],
            "descriptionText": "Used for behavior, not data. Handy when implementing a trait",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a232b701-d0a0-4570-82b2-bbe0ff08e718",
            "title": "Why do structs usually use String instead of &str?",
            "answers": [
              {
                "id": "b8cc461c-a6d5-466b-8338-caa217eb6468",
                "title": "String is faster",
                "isCorrect": false
              },
              {
                "id": "5b837677-30bb-4e54-9521-d5a6ec97b345",
                "title": "String is always smaller in memory",
                "isCorrect": false
              },
              {
                "id": "8ea5720a-ab89-4a0e-b6e9-de7d02d2d395",
                "title": "So the struct owns its data",
                "isCorrect": true
              },
              {
                "id": "41759357-ce14-40db-8d04-714294c77f6d",
                "title": "To avoid writing lifetimes",
                "isCorrect": false
              }
            ],
            "descriptionText": "String owns data; &str requires a lifetime. Simplifies lifetime management",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "128f8941-a311-4327-8c92-dfae84843e8e",
            "title": "What happens if you put &str in a struct without a lifetime?",
            "answers": [
              {
                "id": "e7692a9d-1e51-4fe2-a0cb-363bd3f4d0b8",
                "title": "Compiles",
                "isCorrect": false
              },
              {
                "id": "e63c7b45-f009-407c-8190-d7a6182d6a15",
                "title": "Error: missing lifetime specifier",
                "isCorrect": true
              },
              {
                "id": "ae3a7e3d-6356-4db7-8edc-928e52ced885",
                "title": "Always works",
                "isCorrect": false
              },
              {
                "id": "114b4531-75b2-4d2a-99fb-44d442f5118b",
                "title": "Automatically becomes String",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust requires lifetime parameters for references. Prevents dangling references",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f7367907-7c69-4802-8dde-d8621a0ac4bc",
            "title": "How do you fix a struct with &str?",
            "answers": [
              {
                "id": "201972da-e996-4cfb-8a23-071979041a76",
                "title": "struct User { username: &str }",
                "isCorrect": false
              },
              {
                "id": "1ddfcc01-d7f2-4857-8844-43b8607bc117",
                "title": "struct User<'a> { username: &'a str }",
                "isCorrect": true
              },
              {
                "id": "0c75c758-51b0-4150-b86a-8f59c91452b7",
                "title": "struct User(username: str)",
                "isCorrect": false
              },
              {
                "id": "0c43d570-cfa9-4a37-b596-bcb6c827acd6",
                "title": "struct User { &'static str }",
                "isCorrect": false
              }
            ],
            "descriptionText": "References need a lifetime. The compiler requires 'a",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f465f18f-c4fc-42bf-ae3d-8a78fccceb4a",
            "title": "Why is area(width, height) inconvenient?",
            "answers": [
              {
                "id": "0cc12225-bf03-4624-97d5-c69883fe3d51",
                "title": "The call is too long",
                "isCorrect": false
              },
              {
                "id": "41f35c90-63e5-45af-816e-329b1107bf06",
                "title": "There's no relationship between the parameters",
                "isCorrect": true
              },
              {
                "id": "ca35c59a-1c9e-4e8b-9c76-20625d67ac14",
                "title": "Rust doesn't support two-parameter functions",
                "isCorrect": false
              },
              {
                "id": "238434cc-a8dd-47df-aca9-6e1eac85f0d4",
                "title": "It's slower",
                "isCorrect": false
              }
            ],
            "descriptionText": "width and height aren't tied together. Better to group them in a struct",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4f663ea1-bfa4-4e3d-b5eb-69c5662a3c04",
            "title": "Why is a tuple inconvenient for a rectangle?",
            "answers": [
              {
                "id": "3c8ce800-ae00-47f7-9755-7bb8c384716a",
                "title": "No field names, only indices",
                "isCorrect": true
              },
              {
                "id": "ead1690d-238b-4341-9481-aa4f55e792ef",
                "title": "Doesn't support multiplication",
                "isCorrect": false
              },
              {
                "id": "2ec9fb4e-bc0e-42d5-9be7-a4cf7056cd08",
                "title": "Slower than a struct",
                "isCorrect": false
              },
              {
                "id": "82a1a34f-cf9f-4329-9375-3a58ac9399f1",
                "title": "Doesn't store numbers",
                "isCorrect": false
              }
            ],
            "descriptionText": "With tuples you must remember indices. Hurts readability",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "53ab547f-9da2-46a4-9c85-48967f800303",
            "title": "Why is struct Rectangle better than a tuple?",
            "answers": [
              {
                "id": "52e49ca5-9974-4d40-ab58-294e75b9e02e",
                "title": "Stores data on the heap",
                "isCorrect": false
              },
              {
                "id": "f0a6a059-eda6-4835-8faa-54f0a9fe4bde",
                "title": "Gives field names width and height",
                "isCorrect": true
              },
              {
                "id": "807d12ff-d928-42b8-aef0-f2d2730c5d68",
                "title": "Can only be used in main",
                "isCorrect": false
              },
              {
                "id": "ba5730a7-6f29-4270-8db4-31e98db4d15a",
                "title": "Always gets copied",
                "isCorrect": false
              }
            ],
            "descriptionText": "A struct adds semantics. Code becomes clearer",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "12f05026-4e73-404e-afe8-99ab6c999c5b",
            "title": "What happens with println!(\"{rect1}\")?",
            "answers": [
              {
                "id": "1c4c6eb7-372a-4035-8266-1d37308b0978",
                "title": "It prints the struct",
                "isCorrect": false
              },
              {
                "id": "eb00dbc6-5504-46e7-a608-5ed4552fc9eb",
                "title": "Error: no Display",
                "isCorrect": true
              },
              {
                "id": "5a06f9e7-c5b3-43b3-81c1-1741229afcc1",
                "title": "Panic",
                "isCorrect": false
              },
              {
                "id": "3c58925a-0b90-4a85-be9f-9e52df4a449a",
                "title": "Always works",
                "isCorrect": false
              }
            ],
            "descriptionText": "Structs don't have Display by default. Rust can't guess how to print it",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e076869f-5f92-4a56-a6b4-9f36bbf92e60",
            "title": "What's needed for debug formatting?",
            "answers": [
              {
                "id": "06cf1ce3-0ddf-4013-8b30-8ede7ea69280",
                "title": "Implement Display",
                "isCorrect": false
              },
              {
                "id": "548773e6-a106-4216-bc01-4b9f45ac635c",
                "title": "Use {:?} and #[derive(Debug)]",
                "isCorrect": true
              },
              {
                "id": "9949cb5e-88bc-4f1b-ba2d-0294cd90fc1b",
                "title": "Just println!(\"{:?}\")",
                "isCorrect": false
              },
              {
                "id": "1dcccdbb-c4dc-4e10-bf1b-f93bbfbb855d",
                "title": "dbg! is enough",
                "isCorrect": false
              }
            ],
            "descriptionText": "Debug must be explicitly enabled. Without derive there's no debug output",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8c6414f5-7882-4057-8f42-e1f270770821",
            "title": "How does dbg! differ from println!?",
            "answers": [
              {
                "id": "892a00d6-ab69-47af-8c50-b64a400e5f96",
                "title": "dbg! always colors text",
                "isCorrect": false
              },
              {
                "id": "74aa7cbd-e7ee-4a81-b93b-47d50e456e3c",
                "title": "dbg! prints to stderr and returns the value",
                "isCorrect": true
              },
              {
                "id": "b3d4f548-c683-4e1d-9699-31b762fac174",
                "title": "dbg! works only for numbers",
                "isCorrect": false
              },
              {
                "id": "5dc21edb-fb71-4a67-8255-ffb2665254e2",
                "title": "println! is faster",
                "isCorrect": false
              }
            ],
            "descriptionText": "dbg! is handy for debugging. It prints and also returns the value",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fbf85dae-c6ab-4957-9d81-da499baab264",
            "title": "How do you declare a method for a struct?",
            "answers": [
              {
                "id": "f16c36d1-d809-439c-9269-6393fed63edb",
                "title": "fn area(self) { … }",
                "isCorrect": false
              },
              {
                "id": "b8e875d5-8f4c-4966-ab82-7c7ff873dd24",
                "title": "impl Rectangle { fn area(&self) { … } }",
                "isCorrect": true
              },
              {
                "id": "badaa2b2-616a-40b7-a7b0-64035f85ea51",
                "title": "Rectangle::area = fn() { … }",
                "isCorrect": false
              },
              {
                "id": "f7e54d69-ad9a-495b-b8c3-4e0395d1be6c",
                "title": "method Rectangle::area { … }",
                "isCorrect": false
              }
            ],
            "descriptionText": "Methods live inside impl blocks. That's Rust syntax",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1fc1241b-d2ae-4258-b43c-701d47823202",
            "title": "How does a function differ from a method?",
            "answers": [
              {
                "id": "08885588-62d5-49b9-ae2d-bb9d6101aa28",
                "title": "A method always returns self",
                "isCorrect": false
              },
              {
                "id": "39490645-6f94-4b05-9407-4b488956e832",
                "title": "A method is always public",
                "isCorrect": false
              },
              {
                "id": "e4797549-52af-4ab2-ab46-1d36b7efa6e6",
                "title": "A method is inside impl and takes self",
                "isCorrect": true
              },
              {
                "id": "4250387a-8709-4161-aab7-634389be0e15",
                "title": "A function works only in main",
                "isCorrect": false
              }
            ],
            "descriptionText": "A method is a function bound to a type. self is the first parameter",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7258921d-cacf-434f-a2f0-158851e3f656",
            "title": "What does &self mean?",
            "answers": [
              {
                "id": "fb6de51c-8f63-4da4-a1ae-3b730a406df7",
                "title": "The method takes a copy",
                "isCorrect": false
              },
              {
                "id": "c4e560e7-960f-4558-8d5b-c9bcf2b0f6ea",
                "title": "The method takes a reference to itself",
                "isCorrect": true
              },
              {
                "id": "63562bf4-5a55-4851-bb19-9fa4acc591e8",
                "title": "The method requires mut",
                "isCorrect": false
              },
              {
                "id": "e6f7b73a-f725-45e6-b7a0-7989527a422c",
                "title": "The method transfers ownership",
                "isCorrect": false
              }
            ],
            "descriptionText": "&self is sugar for self: &Self. It borrows",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8c021bc2-39da-4391-becd-753d5cffc4ab",
            "title": "How do you declare a method that changes fields?",
            "answers": [
              {
                "id": "7108f21d-e9f1-4b12-bc3e-437da2429fd6",
                "title": "fn change(&self) { … }",
                "isCorrect": false
              },
              {
                "id": "9cc4b09e-0723-4691-9534-8dc44ac3c1f8",
                "title": "fn change(mut self) { … }",
                "isCorrect": false
              },
              {
                "id": "63e49d05-e9dc-42fd-b7b5-3350801619ab",
                "title": "fn change(&mut self) { … }",
                "isCorrect": true
              },
              {
                "id": "f1a20064-c66d-4dc0-a5ea-bbfc34571661",
                "title": "fn change(self&) { … }",
                "isCorrect": false
              }
            ],
            "descriptionText": "You need &mut self. It's a mutable borrow",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a42fd1b7-74e2-4bfd-a0f6-4ae4888afa55",
            "title": "What does the can_hold() method do?",
            "answers": [
              {
                "id": "242a6dec-c9b8-4646-b352-6d9f0c755ed2",
                "title": "Compares two numbers",
                "isCorrect": false
              },
              {
                "id": "4b43934c-bd04-4094-8844-8aeb9a59e6d1",
                "title": "Checks whether one Rectangle fits inside another",
                "isCorrect": true
              },
              {
                "id": "296d68ef-411a-49de-a603-fcf2b641b1e1",
                "title": "Creates a new Rectangle",
                "isCorrect": false
              },
              {
                "id": "0050271f-3367-41f0-baf4-706ea15bbf5c",
                "title": "Checks Debug",
                "isCorrect": false
              }
            ],
            "descriptionText": "Compares width and height. Example from the chapter",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "61c1c46c-ec7a-472f-97cb-1f6da9b75001",
            "title": "How do you call a method?",
            "answers": [
              {
                "id": "cb228c47-954f-4d20-873e-1567b34e7472",
                "title": "Rectangle.area(rect)",
                "isCorrect": false
              },
              {
                "id": "d5151b2b-2c66-4215-8899-7c70c414a5ec",
                "title": "rect.area()",
                "isCorrect": true
              },
              {
                "id": "2cc609dc-8e60-4352-8c8b-220b2900a066",
                "title": "area(rect)",
                "isCorrect": false
              },
              {
                "id": "616d7dfc-187d-45ce-868e-e70f4086a1b0",
                "title": "rect->area()",
                "isCorrect": false
              }
            ],
            "descriptionText": "Use instance.method(). Rust performs auto-ref",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4c5a5f61-7ebc-4c70-b385-d5eb611127b7",
            "title": "What is an associated function?",
            "answers": [
              {
                "id": "409badb1-4efa-423b-9c14-5a24c8028cf5",
                "title": "Always a static method",
                "isCorrect": false
              },
              {
                "id": "867b36c1-4405-474c-97d2-5c8eb28d7164",
                "title": "Any function inside impl",
                "isCorrect": false
              },
              {
                "id": "d8cce8c6-0a36-459c-9518-97ec6b8d6478",
                "title": "A function without self",
                "isCorrect": true
              },
              {
                "id": "eddd5006-770f-4636-952d-94a35c1b830f",
                "title": "Only a constructor",
                "isCorrect": false
              }
            ],
            "descriptionText": "An associated function doesn't take self. Called with ::",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b8c435de-f2f3-47ef-82c1-0d0aaa4efee8",
            "title": "How do you call an associated function?",
            "answers": [
              {
                "id": "a157838c-3a5d-499d-8df6-0efd50ee71b8",
                "title": "Rectangle::square(3)",
                "isCorrect": true
              },
              {
                "id": "2145742c-6490-43e8-a3a3-da5a7fd1131a",
                "title": "rect.square(3)",
                "isCorrect": false
              },
              {
                "id": "48e3e30c-0cc0-4b7c-b44a-f018cbe82de8",
                "title": "new Rectangle(3)",
                "isCorrect": false
              },
              {
                "id": "12ec96b0-dd9c-4e6e-a03c-e13ea80bb9c6",
                "title": "square Rectangle(3)",
                "isCorrect": false
              }
            ],
            "descriptionText": "Use Type::func(). There's no instance binding",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ba8e20de-8aa3-4a00-b4ca-a63e7bcabc56",
            "title": "What does Self refer to in an impl?",
            "answers": [
              {
                "id": "37bc830a-b24b-4be3-bf87-afcaae9c1ab0",
                "title": "()",
                "isCorrect": false
              },
              {
                "id": "7868f7a6-0366-497f-a820-8e13d53c56e0",
                "title": "The struct's type name",
                "isCorrect": true
              },
              {
                "id": "621fe5fa-d5d0-4bbd-aab8-e5e39e0c983c",
                "title": "&'static struct",
                "isCorrect": false
              },
              {
                "id": "aae4fd2b-f60b-4eb2-8d20-b9e4d286cd67",
                "title": "void",
                "isCorrect": false
              }
            ],
            "descriptionText": "Self equals the type being implemented. Syntax shorthand",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b9f7e5bb-66fe-4f5e-b116-dd9ac2bc3d11",
            "title": "Can you have multiple impl blocks for one struct?",
            "answers": [
              {
                "id": "83120ca4-f603-464f-b70b-608ce24b6921",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "198cf2d9-7a49-463a-8052-2e0aba2c13a3",
                "title": "Yes, and that's valid syntax",
                "isCorrect": true
              },
              {
                "id": "2cc3c4db-d88b-4ed5-8781-66c329e21c0c",
                "title": "Only when using a trait",
                "isCorrect": false
              },
              {
                "id": "552cd954-8a47-4596-81a7-55266482b70f",
                "title": "Only on nightly",
                "isCorrect": false
              }
            ],
            "descriptionText": "You can split impls. Useful for generics/traits organization",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fdebb16f-0019-4613-b065-e5a496788b11",
            "title": "What happens if a method and a field share a name?",
            "answers": [
              {
                "id": "f193f859-d942-498a-862c-c0bc9ce7b598",
                "title": "Error",
                "isCorrect": false
              },
              {
                "id": "1ea6a9a5-79cb-4bdf-9745-42e0ec663d41",
                "title": "Rust distinguishes them: rect.width (field) vs rect.width() (method)",
                "isCorrect": true
              },
              {
                "id": "edcf1c68-3f7a-4a5b-bc54-2bffcc790c39",
                "title": "The method overwrites the field",
                "isCorrect": false
              },
              {
                "id": "4bde2eb9-57b1-4316-857f-7992cbe9f9b9",
                "title": "The field becomes private",
                "isCorrect": false
              }
            ],
            "descriptionText": "Parentheses indicate a method call. Rust disambiguates by syntax",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3864be16-0c86-4187-9859-9f24ce2d0dc8",
            "title": "What is a getter in Rust?",
            "answers": [
              {
                "id": "75f9a7ac-7f7f-430a-812c-c5e9ecbefed9",
                "title": "Generated automatically",
                "isCorrect": false
              },
              {
                "id": "7c64bc62-cfba-4edc-b529-5c11a52c47a9",
                "title": "You write it manually, typically returning a field",
                "isCorrect": true
              },
              {
                "id": "fc951e76-71ad-493d-b1c7-115a4e692b0c",
                "title": "Not supported",
                "isCorrect": false
              },
              {
                "id": "a68da089-0b42-4d6a-b2cf-75a09fdc1054",
                "title": "Created via a macro",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust doesn't auto-generate getters. The language is minimalist",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b4cba414-fa34-4cd4-a2ac-03fece438d79",
            "title": "How does Rust replace -> from C++?",
            "answers": [
              {
                "id": "9baca236-dd85-43a3-8af2-069ddd484ac4",
                "title": "Rust also uses ->",
                "isCorrect": false
              },
              {
                "id": "69fc036d-62f3-4f64-ad46-adf1f676aba3",
                "title": "Rust uses auto ref/deref when calling methods",
                "isCorrect": true
              },
              {
                "id": "1fab5582-848f-46f0-ae59-1869bb88b280",
                "title": "Rust requires * before the call",
                "isCorrect": false
              },
              {
                "id": "067ceb14-5027-438d-afa6-355a098252f5",
                "title": "Rust always copies",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust auto-references as needed. Convenience for method calls",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "682ae35d-c1bb-4a56-8e5e-f1f988bdab89",
            "title": "What does dbg! print for dbg!(30 * 2)?",
            "answers": [
              {
                "id": "a3c2a96f-4078-4f94-8af6-c2e94c3d3e06",
                "title": "Only the number",
                "isCorrect": false
              },
              {
                "id": "22c9a0f3-584d-45b0-b3b7-248d8f236380",
                "title": "File, line, and result",
                "isCorrect": true
              },
              {
                "id": "f0baeedc-3586-4420-9b84-569cb49880f1",
                "title": "Nothing",
                "isCorrect": false
              },
              {
                "id": "74db0891-6a87-4890-9f7e-2bff0c89e89a",
                "title": "Compiler error",
                "isCorrect": false
              }
            ],
            "descriptionText": "dbg! prints context + value. For debugging",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c35f96ba-65bf-4140-a81a-49beff55e12a",
            "title": "What is the pretty debug syntax?",
            "answers": [
              {
                "id": "2ec97cc3-0173-4a9c-9341-9d35dcecb8ff",
                "title": "{:#?}",
                "isCorrect": true
              },
              {
                "id": "8c4613f7-d267-418d-9e9d-023163489d82",
                "title": "{:debug}",
                "isCorrect": false
              },
              {
                "id": "bdee1564-9115-4152-b119-2bf74d4fbc5a",
                "title": "{::?}",
                "isCorrect": false
              },
              {
                "id": "41b11490-2db2-4987-963f-e975fafd52c3",
                "title": "{~?}",
                "isCorrect": false
              }
            ],
            "descriptionText": "Pretty-print is {:#?}. Standard Rust format",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "041c5716-7f8f-4961-b800-f17b1266b641",
            "title": "What does impl Rectangle { fn new() -> Self { … } } do?",
            "answers": [
              {
                "id": "91e0c065-48a1-4520-8dad-a68885451d1e",
                "title": "Not allowed",
                "isCorrect": false
              },
              {
                "id": "4a144112-e604-478c-954a-2620b2a0bf06",
                "title": "Defines an associated-function constructor",
                "isCorrect": true
              },
              {
                "id": "37835396-1fdb-47fc-aa5a-de42cb524c49",
                "title": "Defines a method",
                "isCorrect": false
              },
              {
                "id": "d6839bfe-fa51-4454-9468-ed9a7321d656",
                "title": "Nothing",
                "isCorrect": false
              }
            ],
            "descriptionText": "A constructor via new. Rust has no built-in constructors",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6eae52d9-9ebb-4a85-9338-9fd773906d48",
            "title": "Bottom line: why use structs?",
            "answers": [
              {
                "id": "0f450e19-86b7-4564-9429-c7c564b59585",
                "title": "To replace enums",
                "isCorrect": false
              },
              {
                "id": "1dd53234-3ab7-435d-a9ec-3de35a708890",
                "title": "To store values like an array",
                "isCorrect": false
              },
              {
                "id": "eca14fd6-8f7e-49ef-ae8e-0b5919b78e1a",
                "title": "To group related data with names and behavior",
                "isCorrect": true
              },
              {
                "id": "e4447227-1d0c-403e-b77c-ae1f40ca2daa",
                "title": "To speed up compilation",
                "isCorrect": false
              }
            ],
            "descriptionText": "A struct groups data and methods. It's Rust's primary modeling tool",
            "descriptionLink": "using_structs_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "32fd792d-dcea-458a-818b-1b0cb43becb4",
        "theme": "Enums and Pattern Matching",
        "priority": 4,
        "questions": [
          {
            "id": "847896c0-cab5-4b08-ad83-8a2b962bdaac",
            "title": "What does an enum do in Rust?",
            "answers": [
              {
                "id": "1beeab35-1a7b-4451-836b-ddea8b5e3e4c",
                "title": "Creates an array of values",
                "isCorrect": false
              },
              {
                "id": "b3f7213e-1e46-49ba-91b4-ec32ac95012b",
                "title": "Lets you list the possible variants of a type",
                "isCorrect": true
              },
              {
                "id": "dc7f5dd4-06e3-478d-b4b3-11dd3a168db0",
                "title": "Stores only numbers",
                "isCorrect": false
              },
              {
                "id": "cfdcc5c7-8ecb-4e22-9861-8d7fd2c26179",
                "title": "Works like a struct without fields",
                "isCorrect": false
              }
            ],
            "descriptionText": "An enum defines a type that can be one of several variants. It's an expressive alternative to structs when modeling choices",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "611f76e2-6400-49f8-a63b-b95c9719e49b",
            "title": "How do you declare an enum IpAddrKind with variants V4 and V6?",
            "answers": [
              {
                "id": "c208cffa-a047-4c7d-96de-ae64466d3a70",
                "title": "enum IpAddrKind { V4, V6 }",
                "isCorrect": true
              },
              {
                "id": "04505b6e-80fe-4fe9-b697-54ff43322c60",
                "title": "enum IpAddrKind(V4, V6)",
                "isCorrect": false
              },
              {
                "id": "f916c74c-5add-4e80-8588-46a4866b65ec",
                "title": "struct IpAddrKind { V4, V6 }",
                "isCorrect": false
              },
              {
                "id": "8d9e4da3-f65c-4fca-9f18-07ccd65cd435",
                "title": "type IpAddrKind = V4 | V6",
                "isCorrect": false
              }
            ],
            "descriptionText": "Enums use braces with listed variants. That's standard Rust syntax",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fe4df8e9-005e-4bc6-b22b-f97bddada881",
            "title": "How do you create an enum instance?",
            "answers": [
              {
                "id": "80a96ac3-7dd6-4904-a293-b6823fde8963",
                "title": "let x = V4;",
                "isCorrect": false
              },
              {
                "id": "6d702611-83a4-46b3-8017-51dfe48d726f",
                "title": "let x = IpAddrKind::V4;",
                "isCorrect": true
              },
              {
                "id": "bb004ddb-627e-4f6a-8589-93e134436e59",
                "title": "let x = IpAddrKind.V4;",
                "isCorrect": false
              },
              {
                "id": "a158e2b9-d126-40dc-96de-d3736c688672",
                "title": "let x = new IpAddrKind(V4);",
                "isCorrect": false
              }
            ],
            "descriptionText": "Variants are accessed with ::. Rust namespacing",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bee6ef31-8f8d-49ff-94e3-7104ecc204d1",
            "title": "Can variants of an enum hold data?",
            "answers": [
              {
                "id": "89d93e66-bfb6-4324-8495-87f4e56bc780",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "c3ca7511-7aa6-441b-9139-bdf1c8cfe335",
                "title": "Only numbers",
                "isCorrect": false
              },
              {
                "id": "62beec5e-be24-45ad-bcb5-134c3842eb48",
                "title": "Yes, any type",
                "isCorrect": true
              },
              {
                "id": "cef084a2-db0e-4a7d-bd98-a48c4802032d",
                "title": "Only strings",
                "isCorrect": false
              }
            ],
            "descriptionText": "Enums can contain different kinds of data, e.g., V4(u8, u8, u8, u8)",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fb639766-771e-4afb-8888-2dd5ca4cd938",
            "title": "Why is enum IpAddr better than struct IpAddrKind + String?",
            "answers": [
              {
                "id": "cf5d6c70-eac0-4021-b72a-6394691166a5",
                "title": "Enums are faster",
                "isCorrect": false
              },
              {
                "id": "b94b152b-724d-4385-801b-3e37e607b7aa",
                "title": "Enums are clearer and shorter",
                "isCorrect": true
              },
              {
                "id": "a8319e1c-1442-4932-8cf1-8a28efe96b99",
                "title": "Enums always use less memory",
                "isCorrect": false
              },
              {
                "id": "e1ab932a-a12a-4438-815b-2602d678fb93",
                "title": "There's no difference",
                "isCorrect": false
              }
            ],
            "descriptionText": "An enum stores the kind and the data together. Less code, more expressive",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3b0c0a30-c0b7-4031-88b9-51398496620d",
            "title": "Can different enum variants have different amounts and types of data?",
            "answers": [
              {
                "id": "2d1fc51b-4347-4512-ae0d-f6cd070d1b60",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "7791369e-37d7-43a7-9343-02ad4a717386",
                "title": "Yes",
                "isCorrect": true
              },
              {
                "id": "24f1883b-892e-429d-ac9c-5a1c03dec64f",
                "title": "Only the same types",
                "isCorrect": false
              },
              {
                "id": "d582a149-0876-47a1-9a36-a320ad2533f8",
                "title": "Only the same arity",
                "isCorrect": false
              }
            ],
            "descriptionText": "V4(u8,u8,u8,u8) and V6(String) are valid together. Enums support heterogeneous data",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5bc52e47-04e1-401c-8bc0-562b7b41cf54",
            "title": "How do Message::Quit and Message::Write(String) differ?",
            "answers": [
              {
                "id": "f6c88977-9911-4d13-87c4-931d38603020",
                "title": "The first has no data; the second carries data",
                "isCorrect": true
              },
              {
                "id": "e1564a7f-e5dd-4a3f-b868-5ffba78c0254",
                "title": "They're the same",
                "isCorrect": false
              },
              {
                "id": "3edb8293-c23d-4f53-873d-86b36dbea00c",
                "title": "Quit is always a String",
                "isCorrect": false
              },
              {
                "id": "b486e637-1d9d-4cd1-97b5-9a78b6eab3c8",
                "title": "Write can't be used",
                "isCorrect": false
              }
            ],
            "descriptionText": "Quit is unit-like; Write stores a String. Variants may or may not contain data",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4005bf6b-feed-4ab9-9510-f85ed666bb75",
            "title": "Can you add methods to an enum?",
            "answers": [
              {
                "id": "6ecf465f-c5d9-4902-98bb-2695254868f9",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "5a17227b-e33d-4f11-b017-7f9bd0963d91",
                "title": "Yes, via impl",
                "isCorrect": true
              },
              {
                "id": "50bc1356-4dee-401d-bce1-8c64854c288d",
                "title": "Only to variants",
                "isCorrect": false
              },
              {
                "id": "94b28317-2950-44a6-a989-812a3b9e69c0",
                "title": "Only if the enum is empty",
                "isCorrect": false
              }
            ],
            "descriptionText": "Enums support impl blocks. Methods work like with structs",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "68b13956-1231-4017-88aa-87230364b4c0",
            "title": "What is Option?",
            "answers": [
              {
                "id": "5c8de11a-fb8b-480f-b4e6-811eb2bf6451",
                "title": "An enum for storing a bool",
                "isCorrect": false
              },
              {
                "id": "090ad55b-5c46-4f3b-9436-7cb970878e11",
                "title": "An enum representing presence or absence of a value",
                "isCorrect": true
              },
              {
                "id": "c5df9128-5d0a-44db-91c4-c88f0f1bed64",
                "title": "Null in Rust",
                "isCorrect": false
              },
              {
                "id": "3f1de13a-4bdb-4493-9813-075898a914c5",
                "title": "A special numeric type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Option is Some(T) or None. A safe alternative to null",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f857859c-d801-4a36-8b5d-89cb7c3bf994",
            "title": "What is true about Option?",
            "answers": [
              {
                "id": "59902a7f-59e0-439e-bd8a-9aa8e84da27b",
                "title": "Option<T> and T are the same type",
                "isCorrect": false
              },
              {
                "id": "2742b0f9-6896-4e41-a67e-72651d1bf142",
                "title": "Option<T> and T are different types",
                "isCorrect": true
              },
              {
                "id": "addec335-670b-423d-adf3-20f0922586a0",
                "title": "You can add Option<T> to T directly",
                "isCorrect": false
              },
              {
                "id": "e7d952e5-f616-44ea-bcff-e5547160effe",
                "title": "Option is always compiled as null",
                "isCorrect": false
              }
            ],
            "descriptionText": "You mustn't confuse Option<T> with T. The compiler forces explicit None handling",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "488892fb-ecf8-40e5-8850-cd1c8e07a044",
            "title": "Why doesn't Rust have null?",
            "answers": [
              {
                "id": "6622545e-ae35-45d1-af69-3dba743ccced",
                "title": "To save memory",
                "isCorrect": false
              },
              {
                "id": "5a75f910-7892-42d1-8b5e-aa7c4ada4067",
                "title": "Personal preference of the authors",
                "isCorrect": false
              },
              {
                "id": "f4a2ba73-7134-42ac-90c5-aa3f4fb6fa79",
                "title": "To avoid errors (the \"billion dollar mistake\")",
                "isCorrect": true
              },
              {
                "id": "0e2bb4c1-ee4f-46f7-97c7-557057ad0a4b",
                "title": "Rust has hidden nulls",
                "isCorrect": false
              }
            ],
            "descriptionText": "Null often leads to bugs. Option is the safe alternative",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dbc5ae65-61fb-46b7-a113-8e31eb1bbcbc",
            "title": "How do you get a value out of an Option?",
            "answers": [
              {
                "id": "6c9cbdea-67f4-4bb7-8c89-6610c956f75a",
                "title": "Always unwrap()",
                "isCorrect": false
              },
              {
                "id": "00ea2b80-c45b-497b-8a32-2cba3a0a2d14",
                "title": "With match or helper methods",
                "isCorrect": true
              },
              {
                "id": "553d9881-8750-48fb-9094-284dbfa935e7",
                "title": "Automatically when adding",
                "isCorrect": false
              },
              {
                "id": "6c4d3705-6e92-47d8-99f5-4a12c6c1204e",
                "title": "Using a null-check",
                "isCorrect": false
              }
            ],
            "descriptionText": "Typically use match, if let, or methods. Rust requires handling None",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "26fdc8fe-d413-4584-b502-06b387e0555e",
            "title": "What does the match construct do?",
            "answers": [
              {
                "id": "69dbcf5c-4a74-4424-a87e-aac2e1359e79",
                "title": "Checks only bool",
                "isCorrect": false
              },
              {
                "id": "9472ecae-b117-48bc-96ca-0addd59be450",
                "title": "Compares a value against patterns",
                "isCorrect": true
              },
              {
                "id": "40c38286-38f0-4cbb-aa77-2fb3ef701713",
                "title": "Always replaces if",
                "isCorrect": false
              },
              {
                "id": "228c266d-b47a-47ee-9fe0-823eff90c0d4",
                "title": "Works only with numbers",
                "isCorrect": false
              }
            ],
            "descriptionText": "match matches a value to patterns. It's Rust's primary pattern-matching tool",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "779c6048-3a45-480b-9e4b-0c159f9f7649",
            "title": "How does match differ from if?",
            "answers": [
              {
                "id": "c0b5a536-4b2d-455d-9edb-aae124e00369",
                "title": "match is faster",
                "isCorrect": false
              },
              {
                "id": "0aeba1b1-a534-4c7d-aa96-e5dbedfac3f5",
                "title": "if checks a bool; match works with any value",
                "isCorrect": true
              },
              {
                "id": "ee4e361b-5f2b-4cd3-a6c3-0d705bc721a0",
                "title": "if requires all branches; match doesn't",
                "isCorrect": false
              },
              {
                "id": "e79d6cfb-0a96-46ae-b941-d9963da2be20",
                "title": "if can store data, match can't",
                "isCorrect": false
              }
            ],
            "descriptionText": "match works with many types, not just bool. General-purpose matching",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "961a22da-5eab-4318-8172-a9c6bf39348b",
            "title": "What does the arrow => mean in match?",
            "answers": [
              {
                "id": "678587eb-1674-4f2b-a67b-99f513500adb",
                "title": "Assignment",
                "isCorrect": false
              },
              {
                "id": "ef097df3-c42f-4ed9-90ef-21119192a4ee",
                "title": "Condition",
                "isCorrect": false
              },
              {
                "id": "970062cc-4e52-4366-8d87-041b07c046f1",
                "title": "Separates the pattern from its arm's code",
                "isCorrect": true
              },
              {
                "id": "169718eb-c4fc-478f-8c8a-fcf0dba1c26e",
                "title": "Typing",
                "isCorrect": false
              }
            ],
            "descriptionText": "Code for the arm goes after =>. It's part of match syntax",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "54202a7c-b6ee-4a4f-a7ef-50768eddea22",
            "title": "What happens if you don't cover all enum variants in a match?",
            "answers": [
              {
                "id": "dac70512-23d0-4ecd-901d-55cd1c17662c",
                "title": "Compiles with a warning",
                "isCorrect": false
              },
              {
                "id": "d75caffd-445e-4105-a825-21b467d3edde",
                "title": "Compile error",
                "isCorrect": true
              },
              {
                "id": "5a3a2d65-aaa6-4f3e-9084-780ef68bae3a",
                "title": "A default is added automatically",
                "isCorrect": false
              },
              {
                "id": "dba09c84-c409-40a6-a4dd-b9c47f1c69f0",
                "title": "Runtime panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "match must be exhaustive in Rust. Safety guarantee",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9f945aaa-ceb8-48e9-bf72-237d596b7df5",
            "title": "What is _ used for in match?",
            "answers": [
              {
                "id": "8baaf0b0-1000-4c1e-abdb-05952caeb3f7",
                "title": "Printing a value",
                "isCorrect": false
              },
              {
                "id": "e528c894-074b-4bfb-9a19-77d8a0aff88c",
                "title": "Catch-all (any remaining case)",
                "isCorrect": true
              },
              {
                "id": "ecc40ba6-1ec2-4d96-b971-ace9e04c394b",
                "title": "Comments",
                "isCorrect": false
              },
              {
                "id": "fef2e207-ca46-4ed5-bb17-c3d5da866882",
                "title": "Calling a method",
                "isCorrect": false
              }
            ],
            "descriptionText": "_ ignores the value and matches anything. Closes remaining cases",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ec949330-16cb-4915-8a16-1359c2738af8",
            "title": "What does match x { Some(i) => i, _ => 0 } do?",
            "answers": [
              {
                "id": "a6ac2c5a-1be7-4b84-a0e5-73aa57d8c3fa",
                "title": "Always returns i",
                "isCorrect": false
              },
              {
                "id": "4840913b-4258-4e8c-9200-0c0e427b48a0",
                "title": "Returns i or 0 if None",
                "isCorrect": true
              },
              {
                "id": "5211895c-db0c-425c-8d51-1e6c4dde4bcf",
                "title": "Compile error",
                "isCorrect": false
              },
              {
                "id": "1beb605a-1183-4820-a7f8-17d5b4a50db6",
                "title": "Returns null",
                "isCorrect": false
              }
            ],
            "descriptionText": "_ covers the None case. Safe Option handling",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7a550f96-c529-4b8f-96b9-b8ba1eaa37e5",
            "title": "What's the advantage of if let over match?",
            "answers": [
              {
                "id": "2d1f95af-df27-4461-ae40-da5c120844ba",
                "title": "Ensures exhaustiveness",
                "isCorrect": false
              },
              {
                "id": "3b63f99e-8557-42c9-8bca-b5333ce7b48f",
                "title": "Shorter when handling a single variant",
                "isCorrect": true
              },
              {
                "id": "c2990032-08e5-482a-a1d1-6c3e0084aac4",
                "title": "Works only with numbers",
                "isCorrect": false
              },
              {
                "id": "214cb375-1225-4b8d-acd6-67bc2973b2ba",
                "title": "No advantage",
                "isCorrect": false
              }
            ],
            "descriptionText": "if let is handy when you care about one case. Less boilerplate",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b7d9cb3f-13d4-4226-9870-a4e7ad0c90ed",
            "title": "What do you lose when using if let instead of match?",
            "answers": [
              {
                "id": "32105fae-94ac-48de-9ddd-204c5eaa1854",
                "title": "Performance",
                "isCorrect": false
              },
              {
                "id": "d1e68519-69d2-462c-861f-43b6d1cd1f35",
                "title": "Automatic coverage of all cases",
                "isCorrect": true
              },
              {
                "id": "00373dc2-8144-4dff-9650-5375437c98e7",
                "title": "Ability to use Option",
                "isCorrect": false
              },
              {
                "id": "15422143-fe98-4881-a9e3-e71ed0ebf635",
                "title": "The call method",
                "isCorrect": false
              }
            ],
            "descriptionText": "if let doesn't require handling all variants. Exhaustiveness only with match",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a368d84f-eef5-41bd-9d19-0e0ab6dd2ba9",
            "title": "How does let…else differ from if let?",
            "answers": [
              {
                "id": "1053d097-f189-42e5-91ce-c25bc6c1b790",
                "title": "let…else is always faster",
                "isCorrect": false
              },
              {
                "id": "096a4910-94bf-4288-b19a-45b56128377d",
                "title": "let…else requires the else branch to exit (e.g., return)",
                "isCorrect": true
              },
              {
                "id": "8d962bfe-a37f-42f2-a280-863b8eda656b",
                "title": "let…else works only with Option",
                "isCorrect": false
              },
              {
                "id": "81280aac-6acb-4f7f-83b4-7d4647baded9",
                "title": "No difference",
                "isCorrect": false
              }
            ],
            "descriptionText": "In let…else, the else must terminate the function. Convenient for \"happy path\" code",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c215b9db-4d57-47db-9bec-9d7f8c8008e0",
            "title": "How does data binding work in match?",
            "answers": [
              {
                "id": "4855b534-df22-4723-b3ee-ed0e53de483e",
                "title": "You can't extract data",
                "isCorrect": false
              },
              {
                "id": "d0c35173-d911-4cae-b18f-60c019026074",
                "title": "Through variables in the pattern",
                "isCorrect": true
              },
              {
                "id": "b5996d16-32aa-4e08-920e-535c786f1ec7",
                "title": "Only via unwrap",
                "isCorrect": false
              },
              {
                "id": "86ee48f9-5f2e-423a-aa27-b6b7ee7c1eb3",
                "title": "Only via Option methods",
                "isCorrect": false
              }
            ],
            "descriptionText": "Coin::Quarter(state) => println!(\"{state:?}\"). match can destructure and bind",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0c1a196a-3b8d-4ba3-a74d-89cee6f2f638",
            "title": "What does this code do?\n\nif let Some(x) = y {\n    println!(\"{x}\");\n}",
            "answers": [
              {
                "id": "879ef794-e291-4988-bae6-47ef82433ec2",
                "title": "Always prints y",
                "isCorrect": false
              },
              {
                "id": "d1f467c7-b5ec-486c-87a2-ace620a867a3",
                "title": "Prints x if y = Some(x)",
                "isCorrect": true
              },
              {
                "id": "6bf1949c-6db2-4611-bafc-2d8744025142",
                "title": "Compile error",
                "isCorrect": false
              },
              {
                "id": "bcbd250e-0255-471b-89ab-e048c538f5f4",
                "title": "Works only for numbers",
                "isCorrect": false
              }
            ],
            "descriptionText": "if let extracts the value from Some. A condensed form of match",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cfe6ba81-6260-4821-a9aa-e094233a876c",
            "title": "Bottom line: why use enum + match?",
            "answers": [
              {
                "id": "8979d979-506d-4856-a739-c1d5ce579c7f",
                "title": "To replace structs",
                "isCorrect": false
              },
              {
                "id": "f3fbb6fc-161c-43f3-8396-f4cf6b751a0b",
                "title": "To store only strings",
                "isCorrect": false
              },
              {
                "id": "d6e76bf2-92e0-4ffd-a5c5-1149fde3607f",
                "title": "To express a set of variants and handle them safely",
                "isCorrect": true
              },
              {
                "id": "542a15cf-b2f8-4541-983c-bd5c37e1539f",
                "title": "To speed up println!",
                "isCorrect": false
              }
            ],
            "descriptionText": "Enums describe variants; match handles them reliably. It's the Rust foundation for choice and control flow",
            "descriptionLink": "enums_and_pattern_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "8383d1ec-31be-4287-8676-4715198c96ea",
        "theme": "Managing Growing Projects with Packages, Crates, and Modules",
        "priority": 5,
        "questions": [
          {
            "id": "5c700462-3455-400b-9093-34b014a5440c",
            "title": "What is a crate in Rust?",
            "answers": [
              {
                "id": "3a173872-bd23-4a2c-8a31-b269891b3ee5",
                "title": "The Cargo.toml file",
                "isCorrect": false
              },
              {
                "id": "d9bb07c1-3b25-4e04-9f07-3bec7000458c",
                "title": "The smallest unit of code for compilation",
                "isCorrect": true
              },
              {
                "id": "52619035-65b2-4c75-9e93-ef468cd745e6",
                "title": "Only a binary executable",
                "isCorrect": false
              },
              {
                "id": "3c6b72ab-0be7-4091-96f7-a4311728ce0d",
                "title": "A separate package with dependencies",
                "isCorrect": false
              }
            ],
            "descriptionText": "A crate is the minimal compilation unit. Even a single .rs file compiles as a crate",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "74664644-c0fc-4d45-a300-c621dacffdfd",
            "title": "What kinds of crates exist?",
            "answers": [
              {
                "id": "21d9c041-7a92-45c3-82be-feb6ddc490f2",
                "title": "Library only",
                "isCorrect": false
              },
              {
                "id": "7ffdb8e1-9cad-4e1c-9c92-2cb4481966fc",
                "title": "Binary only",
                "isCorrect": false
              },
              {
                "id": "0d10d06a-811c-495e-a700-e1aa32e056ae",
                "title": "Binary and library",
                "isCorrect": true
              },
              {
                "id": "4e534e59-7b28-4d44-8b34-7894b4290a72",
                "title": "Module only",
                "isCorrect": false
              }
            ],
            "descriptionText": "Crates come in two types: binary (with main) and library (without main)",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "40ba7207-fda1-4972-b918-dd8f57c4308a",
            "title": "What must a binary crate contain?",
            "answers": [
              {
                "id": "18a32c21-0830-46d6-ab54-80b26580f3aa",
                "title": "A Cargo.toml file",
                "isCorrect": false
              },
              {
                "id": "113cb9aa-c187-469e-b8cc-3d69fd51bc60",
                "title": "main.rs",
                "isCorrect": false
              },
              {
                "id": "04709626-bda6-4aa8-ae59-68a8bce38ce4",
                "title": "A main function",
                "isCorrect": true
              },
              {
                "id": "cc0483e6-9759-428c-91f3-04d99a12c921",
                "title": "A lib module",
                "isCorrect": false
              }
            ],
            "descriptionText": "A binary crate requires fn main() as the entry point",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d63cc441-5213-4910-a5de-55b6ee9bb158",
            "title": "What does a library crate conventionally specify?",
            "answers": [
              {
                "id": "10da5a8c-b24c-417f-8213-e38b1ef9a7c7",
                "title": "A main entry point",
                "isCorrect": false
              },
              {
                "id": "26fb08e6-92b7-440c-a95f-30f0d6407fac",
                "title": "The file src/lib.rs",
                "isCorrect": true
              },
              {
                "id": "a616b04c-cd5b-4d60-a778-b022d2ce8efc",
                "title": "Cargo.lock",
                "isCorrect": false
              },
              {
                "id": "05cdc2ea-d579-4760-af6b-c23116c9b734",
                "title": "A separate front_of_house module",
                "isCorrect": false
              }
            ],
            "descriptionText": "By convention, a library starts at src/lib.rs",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3269779b-8e32-425a-b0e6-8d1bad99e4a3",
            "title": "What is the crate root?",
            "answers": [
              {
                "id": "12b8bfb7-8a33-4a91-b72c-850e8831ec2b",
                "title": "The project's root directory",
                "isCorrect": false
              },
              {
                "id": "af682dcf-72f3-42e4-9230-a4858704acb2",
                "title": "The first module where the compiler starts",
                "isCorrect": true
              },
              {
                "id": "5fe5fa38-f3bd-4cfb-ba36-d90076b904fd",
                "title": "Cargo.toml",
                "isCorrect": false
              },
              {
                "id": "7381edef-bb32-4225-ac34-d2fd613eafee",
                "title": "The target folder",
                "isCorrect": false
              }
            ],
            "descriptionText": "src/main.rs or src/lib.rs is the crate root from which the module tree is built",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "41b79495-6061-47b2-9701-5dee96e949fc",
            "title": "What is a package?",
            "answers": [
              {
                "id": "d3ed353d-1807-4856-81e4-c8712140c109",
                "title": "Any binary crate",
                "isCorrect": false
              },
              {
                "id": "ae670fbc-5b18-40bc-b920-04fb195de941",
                "title": "A group of modules",
                "isCorrect": false
              },
              {
                "id": "24f282d7-b889-47d1-98bf-f1fa4c4d5ce2",
                "title": "A bundle of one or more crates with a Cargo.toml",
                "isCorrect": true
              },
              {
                "id": "c7f392df-0152-451a-aeda-1b9314e6c8c3",
                "title": "A workspace",
                "isCorrect": false
              }
            ],
            "descriptionText": "A package is a set of crates + Cargo.toml describing how to build them",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8318cfb9-6126-4183-9916-49e53f6d900b",
            "title": "How many library crates can a package have?",
            "answers": [
              {
                "id": "cdf09d0a-e029-4889-928b-6578f52309a3",
                "title": "Any number",
                "isCorrect": false
              },
              {
                "id": "83438e3d-47bc-4b17-891a-7698d1dbd3ef",
                "title": "At most one",
                "isCorrect": true
              },
              {
                "id": "f4ae2c60-4ed0-406b-9235-630be0d62b0e",
                "title": "Only if there are no binaries",
                "isCorrect": false
              },
              {
                "id": "7908183b-64c8-4150-b216-89bde2354499",
                "title": "Depends on Cargo.toml",
                "isCorrect": false
              }
            ],
            "descriptionText": "A package may contain many binary crates but only one library crate",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ce03d633-6f9f-47df-971d-a0bae131d122",
            "title": "Where does Cargo look for the binary crate root?",
            "answers": [
              {
                "id": "979fb74f-1b29-4340-bf14-14f03a598692",
                "title": "src/bin.rs",
                "isCorrect": false
              },
              {
                "id": "08ae9950-54ba-400c-a37c-7ef9ff218386",
                "title": "src/bin/mod.rs",
                "isCorrect": false
              },
              {
                "id": "577f90d4-9ed8-41dd-87b0-9c915d1eb601",
                "title": "src/main.rs",
                "isCorrect": true
              },
              {
                "id": "9c94e01b-4f5f-408f-9d68-b876e9f5fec1",
                "title": "src/root.rs",
                "isCorrect": false
              }
            ],
            "descriptionText": "By default a binary crate starts at src/main.rs",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "141d1c7f-f8e5-4710-a25b-ee62ce148c25",
            "title": "Where does Cargo look for the library crate root?",
            "answers": [
              {
                "id": "6b699540-ba59-4f0e-9f1b-2f894ec33d82",
                "title": "src/main.rs",
                "isCorrect": false
              },
              {
                "id": "2b6da971-bf1e-4bab-bdda-f761f6abd51d",
                "title": "src/root.rs",
                "isCorrect": false
              },
              {
                "id": "5963f930-746e-4c2d-8503-1a79da9714b3",
                "title": "src/lib.rs",
                "isCorrect": true
              },
              {
                "id": "41421593-0f1e-4010-b894-2c9ea6b26696",
                "title": "lib.toml",
                "isCorrect": false
              }
            ],
            "descriptionText": "A library crate is defined in src/lib.rs",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5bab2052-5ac5-40b0-88a1-e0064c84aa24",
            "title": "How do you create a new project with a binary crate?",
            "answers": [
              {
                "id": "e609d5a9-a4bc-4e1b-a9e8-f693af2dfb69",
                "title": "cargo create",
                "isCorrect": false
              },
              {
                "id": "89d1452e-cd78-4aa4-a861-79c19094723e",
                "title": "cargo new myproj",
                "isCorrect": true
              },
              {
                "id": "896f66ff-dcec-4f54-975a-c0f22f0f7aa2",
                "title": "cargo init lib",
                "isCorrect": false
              },
              {
                "id": "727eb695-35f7-446b-b1b0-e1d0255d66cf",
                "title": "cargo bin myproj",
                "isCorrect": false
              }
            ],
            "descriptionText": "cargo new creates a binary crate by default",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "215969b3-4379-4dce-a789-9cd6fa9093c6",
            "title": "How do you create a new project with a library crate?",
            "answers": [
              {
                "id": "3df28434-a232-4ecc-b0af-7463b94ec4eb",
                "title": "cargo new mylib",
                "isCorrect": false
              },
              {
                "id": "227fc324-e2d2-4a5c-b7df-4bf1fa37a3ba",
                "title": "cargo new mylib --lib",
                "isCorrect": true
              },
              {
                "id": "0375b28c-cb9a-4786-a14c-1b9e24d30ed9",
                "title": "cargo lib mylib",
                "isCorrect": false
              },
              {
                "id": "d01540c4-435e-4a90-9844-5b1cf560b0a2",
                "title": "cargo init bin",
                "isCorrect": false
              }
            ],
            "descriptionText": "The --lib flag tells Cargo to create a library",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "87d43964-48b3-4d96-8b6c-f2e000dc10f6",
            "title": "What does the mod keyword do?",
            "answers": [
              {
                "id": "f825b884-1ed7-4152-b2d7-5ea424ab36df",
                "title": "Brings in an external crate",
                "isCorrect": false
              },
              {
                "id": "1b6fddb8-4a9c-43b7-8d80-2f604ea329a7",
                "title": "Declares a module",
                "isCorrect": true
              },
              {
                "id": "68cff9ca-9d25-414e-bcb0-eebd46a2fc1d",
                "title": "Makes a function public",
                "isCorrect": false
              },
              {
                "id": "5839c296-26e3-4fa4-a765-7386c2303e5e",
                "title": "Adds a dependency",
                "isCorrect": false
              }
            ],
            "descriptionText": "mod is used to declare a module",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5b88beae-a0a9-4e1b-808e-3594f8e41589",
            "title": "Where is code for mod garden; searched?",
            "answers": [
              {
                "id": "5df33a8f-28a7-40f9-b371-2bc1df32d973",
                "title": "Only in src/garden.rs",
                "isCorrect": false
              },
              {
                "id": "daf5b2de-7214-4a25-86da-81929b8e85e2",
                "title": "src/garden.rs or src/garden/mod.rs",
                "isCorrect": true
              },
              {
                "id": "9df5664d-4160-4021-ab61-5d02ed4bc929",
                "title": "Only inside main.rs",
                "isCorrect": false
              },
              {
                "id": "7b4178ff-8d46-4ba0-8d2d-de70714f4bd3",
                "title": "Only in Cargo.toml",
                "isCorrect": false
              }
            ],
            "descriptionText": "The compiler checks two paths: garden.rs or garden/mod.rs",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1a805abe-5c30-4b9e-99c6-187dc2ca74d5",
            "title": "What does pub mod mean?",
            "answers": [
              {
                "id": "47f46316-c713-4440-8f71-0cc332a04630",
                "title": "Makes the module and all its contents public",
                "isCorrect": false
              },
              {
                "id": "40892923-ab3b-4ae9-9314-0b670be24dd1",
                "title": "Makes the module accessible from outside",
                "isCorrect": true
              },
              {
                "id": "7fc1550a-f7c7-419e-9b92-787d489a4491",
                "title": "Removes privacy from all functions",
                "isCorrect": false
              },
              {
                "id": "d7ea499b-eb01-4489-928a-cab7b8bb53ef",
                "title": "Creates a new binary crate",
                "isCorrect": false
              }
            ],
            "descriptionText": "pub mod exposes the module; its contents remain private by default",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2ee9afaf-18c4-475b-829a-1acb62d2188c",
            "title": "What's the default visibility for modules and functions?",
            "answers": [
              {
                "id": "422264db-64bf-49ec-aa20-01948addaeb5",
                "title": "Public",
                "isCorrect": false
              },
              {
                "id": "82a56e6f-2939-464b-9cce-ef5266b1902e",
                "title": "Private",
                "isCorrect": true
              },
              {
                "id": "6eaccdba-f9f4-426e-a687-a81ed699bb82",
                "title": "Protected",
                "isCorrect": false
              },
              {
                "id": "d4e63b84-1980-4676-bfdf-8f07b81186d1",
                "title": "Internal",
                "isCorrect": false
              }
            ],
            "descriptionText": "In Rust, everything is private by default",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d7f343a0-cdbd-4122-bec6-391dce2cd2fb",
            "title": "What is true of an absolute path?",
            "answers": [
              {
                "id": "7583df54-42d4-4805-ab04-b2e05dfacd92",
                "title": "Starts with self",
                "isCorrect": false
              },
              {
                "id": "6a1cfbe2-1ec4-494a-bc3c-0bc194ab120b",
                "title": "Starts with super",
                "isCorrect": false
              },
              {
                "id": "57f32f9e-6e82-4f2f-9da9-e79219b06e90",
                "title": "Starts with crate",
                "isCorrect": true
              },
              {
                "id": "805575dc-d718-4691-a6b8-960745362807",
                "title": "Always starts with lib",
                "isCorrect": false
              }
            ],
            "descriptionText": "An absolute path starts with crate or an external crate name",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "19ba6211-f587-4e0e-8596-7a70341e5883",
            "title": "What is true of a relative path?",
            "answers": [
              {
                "id": "ae8ddd19-64a2-4a9e-b37f-983aa5db3c11",
                "title": "Starts with crate",
                "isCorrect": false
              },
              {
                "id": "68193171-5198-4596-8af9-8649234d6a38",
                "title": "Starts with self or super",
                "isCorrect": true
              },
              {
                "id": "4207d5dd-bebd-45f9-9237-11b9fb3269e3",
                "title": "Always starts with pub",
                "isCorrect": false
              },
              {
                "id": "b8f8719c-9372-4d8c-8d5b-870aacfe606e",
                "title": "Can only be used in lib.rs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Relative paths are built from the current module via self, super, or identifiers",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ce983816-369d-4f14-9bb9-ee1a301f85f0",
            "title": "How does use differ from pub use?",
            "answers": [
              {
                "id": "ffcc97a9-fe2d-4fef-9a24-547a3f393d8a",
                "title": "use works only in binaries",
                "isCorrect": false
              },
              {
                "id": "4d2886d0-75a1-4e12-b00d-ddbbd740a178",
                "title": "pub use performs a re-export",
                "isCorrect": true
              },
              {
                "id": "5c81a1af-3c89-427f-964d-55ee59c6c025",
                "title": "pub use is only for std",
                "isCorrect": false
              },
              {
                "id": "22c8648c-350c-4f94-b7f1-5cf6ea41216e",
                "title": "use can't be used in lib.rs",
                "isCorrect": false
              }
            ],
            "descriptionText": "use brings a name into scope; pub use also makes it accessible to external users",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c818b069-7f66-496d-8337-fb1973ce828a",
            "title": "Which privacy rule is correct?",
            "answers": [
              {
                "id": "8aab309d-6926-4740-b64e-860c8ed2d115",
                "title": "A parent sees a child's private items",
                "isCorrect": false
              },
              {
                "id": "d22ffcdd-962c-482c-820b-46fdc831528a",
                "title": "A child sees its parent",
                "isCorrect": true
              },
              {
                "id": "ba97a01c-7db4-484c-a153-c7a45514f73a",
                "title": "Everyone sees everyone",
                "isCorrect": false
              },
              {
                "id": "519b8afc-d4b0-4982-94d5-7c83ab4cfec3",
                "title": "Privacy applies only to functions",
                "isCorrect": false
              }
            ],
            "descriptionText": "A parent cannot access a child's private items, but the child can access the parent",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fb27a7af-a3b7-445e-bdd5-ba2d4ce99d8d",
            "title": "What does the keyword super do?",
            "answers": [
              {
                "id": "747e4874-54b4-402c-b491-2f069824038b",
                "title": "Brings in std",
                "isCorrect": false
              },
              {
                "id": "057635c7-68a6-469e-bf42-bfbe366a694a",
                "title": "Refers to the parent module",
                "isCorrect": true
              },
              {
                "id": "aaa61493-260e-49d3-ba40-11a053076982",
                "title": "Makes a struct public",
                "isCorrect": false
              },
              {
                "id": "ef3bde97-21d9-43ca-b6ee-e1358207c2b3",
                "title": "Overrides pub",
                "isCorrect": false
              }
            ],
            "descriptionText": "super means \"go up one level\" in the module tree",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "eac0717a-90cd-4eec-952f-c812c2afa002",
            "title": "How do struct and enum differ with pub?",
            "answers": [
              {
                "id": "bca2927b-0223-4fb2-9533-63e1e04fcc5f",
                "title": "Struct fields are public by default",
                "isCorrect": false
              },
              {
                "id": "febf1157-0b17-4006-adc5-98812acaedc4",
                "title": "All enum variants become public",
                "isCorrect": true
              },
              {
                "id": "513e8a20-9581-401a-a013-e6463dd5a407",
                "title": "Enum variants are private",
                "isCorrect": false
              },
              {
                "id": "35c28043-96d8-413f-b5f6-a479db70e8ac",
                "title": "Struct fields can't be made private",
                "isCorrect": false
              }
            ],
            "descriptionText": "If an enum is public, all its variants are public",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "761b68b9-54e3-4b87-92a8-af96347ce512",
            "title": "What happens with pub struct S { x: i32 }?",
            "answers": [
              {
                "id": "2c30b331-241b-49ff-a552-0daeac89f562",
                "title": "Field x is public",
                "isCorrect": false
              },
              {
                "id": "354dcc92-eb9d-4151-867e-c49c839d1cf5",
                "title": "Field x is private",
                "isCorrect": true
              },
              {
                "id": "32bf635f-a565-4e91-8d80-3e3df61aecd9",
                "title": "Compile error",
                "isCorrect": false
              },
              {
                "id": "f2c951b9-d25c-41bd-8705-af47631dd253",
                "title": "Everything is public",
                "isCorrect": false
              }
            ],
            "descriptionText": "Even with pub struct, fields are private by default",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "11307288-ee00-47bc-850d-b6429c204c92",
            "title": "What does use std::collections::HashMap do?",
            "answers": [
              {
                "id": "3fcfef8e-a1dc-4571-87bb-0ec041b50642",
                "title": "Imports all of std",
                "isCorrect": false
              },
              {
                "id": "19aa3567-4498-44da-b67f-18dbe20aa8d3",
                "title": "Makes HashMap available by its name",
                "isCorrect": true
              },
              {
                "id": "de7450ae-7386-4b69-9846-d486926b64a9",
                "title": "Creates a new crate",
                "isCorrect": false
              },
              {
                "id": "4cc72986-ca7c-476b-98a0-c8f78d92fa99",
                "title": "Imports the entire collections module",
                "isCorrect": false
              }
            ],
            "descriptionText": "use shortens the path to refer to HashMap directly",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a2ec2a8f-fd74-433d-b856-86814f2aba34",
            "title": "How to import two items from std correctly?",
            "answers": [
              {
                "id": "42553757-6b5a-4147-9a0a-b8250a1bab80",
                "title": "use std::io; use std::cmp;",
                "isCorrect": false
              },
              {
                "id": "fc86eae8-7532-4d5b-bb29-9786679f93a7",
                "title": "use std::{io, cmp};",
                "isCorrect": true
              },
              {
                "id": "82f199c2-e376-4cb8-a5d8-3d575afdb2b1",
                "title": "use std::io, cmp;",
                "isCorrect": false
              },
              {
                "id": "0d71232c-6976-4a2b-ae1e-840279b145b6",
                "title": "use std::(io, cmp);",
                "isCorrect": false
              }
            ],
            "descriptionText": "Nested paths reduce repetition",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "585b8995-9bde-43bc-99b8-61febbaf4d38",
            "title": "What does use std::io::{self, Write}; do?",
            "answers": [
              {
                "id": "75135e48-d7c6-42e8-a1d1-4bcd1f3afa8e",
                "title": "Imports only Write",
                "isCorrect": false
              },
              {
                "id": "69e25755-504d-4c80-9194-ced5203c4cff",
                "title": "Imports io and Write",
                "isCorrect": true
              },
              {
                "id": "be9c2a5d-ac65-4413-9636-344a71ee9d77",
                "title": "Imports everything from io",
                "isCorrect": false
              },
              {
                "id": "f7f21150-a70c-4ba5-8e6e-b89d1ab98778",
                "title": "Compile error",
                "isCorrect": false
              }
            ],
            "descriptionText": "self refers to the module itself; you import both io and Write",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "06020bdc-2595-4827-95dd-144904649a5d",
            "title": "What does * do with use?",
            "answers": [
              {
                "id": "9bc5deb1-e2bb-4c2c-8760-ad1195e5e64b",
                "title": "Imports only pub use",
                "isCorrect": false
              },
              {
                "id": "4f48f3c3-7d81-445f-8c00-096d2b82dea2",
                "title": "Imports all public items",
                "isCorrect": true
              },
              {
                "id": "7fb53983-d839-4021-8862-7eae0c791758",
                "title": "Imports private items",
                "isCorrect": false
              },
              {
                "id": "b8acc0e6-ce40-4ed1-afff-06513e43505d",
                "title": "Creates an alias",
                "isCorrect": false
              }
            ],
            "descriptionText": "* imports all public items from a module",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "50439d92-ae17-46fa-9956-91b5e3481fdd",
            "title": "When is glob (*) often used?",
            "answers": [
              {
                "id": "b852fa25-317f-4ab2-8c6d-229b8115905b",
                "title": "In main.rs",
                "isCorrect": false
              },
              {
                "id": "69ac79e7-c5ab-4c47-a469-49ffcefa8a01",
                "title": "In tests",
                "isCorrect": true
              },
              {
                "id": "75bf6edf-9186-4e80-863a-58c6f4c6d902",
                "title": "In Cargo.toml",
                "isCorrect": false
              },
              {
                "id": "4a666d11-00a5-40ea-997c-223972d8c451",
                "title": "In enums",
                "isCorrect": false
              }
            ],
            "descriptionText": "* is commonly used in a tests module",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "93302766-725a-426c-838c-c11f8c22e05f",
            "title": "What does as do in use?",
            "answers": [
              {
                "id": "e87fc15a-f209-48bb-a268-1779d0ddd724",
                "title": "Makes it private",
                "isCorrect": false
              },
              {
                "id": "e5750195-4448-4c9d-8a3b-a770ca50577d",
                "title": "Creates an alias",
                "isCorrect": true
              },
              {
                "id": "87c81527-bdbc-417b-92bc-29e7d3ddb28a",
                "title": "Exports it outward",
                "isCorrect": false
              },
              {
                "id": "0c60b24e-996d-49a5-88cc-b147cb7a7e29",
                "title": "Replaces super",
                "isCorrect": false
              }
            ],
            "descriptionText": "as lets you rename an import",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "12038df6-fbd4-4179-abe8-3e6f360f6fb7",
            "title": "What happens on a name conflict?",
            "answers": [
              {
                "id": "25666384-9e17-4862-b429-5a8098d16800",
                "title": "Compile error",
                "isCorrect": true
              },
              {
                "id": "099ebee2-d3b1-4ad2-9ec4-c593bca066af",
                "title": "Rust takes the first",
                "isCorrect": false
              },
              {
                "id": "88f9e4e2-4fed-43a7-9d20-74df0dffdad6",
                "title": "Rust takes the last",
                "isCorrect": false
              },
              {
                "id": "ff76cc72-73c1-43eb-89c4-1cf74fc909b6",
                "title": "An alias is created automatically",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust doesn't allow the same name twice in one scope",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8d28b52d-f0bd-46a0-80f9-45e0bf675979",
            "title": "How do you add the external crate rand?",
            "answers": [
              {
                "id": "ad629214-8793-4194-9617-5a0c6b10c421",
                "title": "use rand in Cargo.toml",
                "isCorrect": false
              },
              {
                "id": "9b033eb8-b913-45ef-ba07-27e71b2f18fa",
                "title": "rand = \"0.8\" in Cargo.toml",
                "isCorrect": true
              },
              {
                "id": "959e4ff1-e4ae-49ee-8383-583e2075a09a",
                "title": "mod rand",
                "isCorrect": false
              },
              {
                "id": "9eeec779-2d43-4a2a-aefd-d9f3983bbe96",
                "title": "extern rand",
                "isCorrect": false
              }
            ],
            "descriptionText": "External crates are added as dependencies in Cargo.toml",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "36ea6f9e-e4ae-4708-a983-438199b65238",
            "title": "What is needed to use rand::thread_rng()?",
            "answers": [
              {
                "id": "973ba233-de7e-436c-812e-a73ba3c6f09b",
                "title": "use rand::Rng",
                "isCorrect": true
              },
              {
                "id": "1b8b5f80-070d-49fd-9cde-2c44bc3e0c0e",
                "title": "mod rand",
                "isCorrect": false
              },
              {
                "id": "277df820-c272-41c0-8259-42f197bafd41",
                "title": "pub use rand",
                "isCorrect": false
              },
              {
                "id": "aa25c62d-3b11-4074-ac0a-5eb902fe7895",
                "title": "extern crate rng",
                "isCorrect": false
              }
            ],
            "descriptionText": "You must import the traits for the methods to work",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6cbe4a4a-906d-4494-9c93-582659c2de48",
            "title": "How is the standard library included?",
            "answers": [
              {
                "id": "48e1b0a3-ff42-443d-8c06-8723eacfae32",
                "title": "Automatically",
                "isCorrect": true
              },
              {
                "id": "c007ee13-9b5f-47da-a66f-f2842f0969d9",
                "title": "Through Cargo.toml",
                "isCorrect": false
              },
              {
                "id": "183de8b9-1673-4758-b64e-f7969297b2c2",
                "title": "Via extern crate std",
                "isCorrect": false
              },
              {
                "id": "01426ad3-0d92-4f9e-bfba-6e47aa405ece",
                "title": "Via pub mod",
                "isCorrect": false
              }
            ],
            "descriptionText": "std is included automatically, but you must use items into scope",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "78d344c6-e1a3-47e6-98fd-d8076d364aab",
            "title": "Where is a crate's module structure stored?",
            "answers": [
              {
                "id": "fe4ccf5c-d5b4-4d21-bc75-fc7303d91b4f",
                "title": "In Cargo.lock",
                "isCorrect": false
              },
              {
                "id": "6b8d9621-a733-461e-be24-b8bd502fc6f6",
                "title": "In the mod tree",
                "isCorrect": true
              },
              {
                "id": "d7d36c0d-589b-4ead-b769-1a4494c1e381",
                "title": "In Cargo.toml",
                "isCorrect": false
              },
              {
                "id": "3742a9d2-8083-44e2-891d-5f33ac75c2fc",
                "title": "In bin/",
                "isCorrect": false
              }
            ],
            "descriptionText": "The crate builds a module tree starting at the crate root",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c342e88f-7bb5-4928-a9f0-ca69d474ef02",
            "title": "What is a re-export?",
            "answers": [
              {
                "id": "2a562dd6-e5fb-4206-952a-75360439f85b",
                "title": "A new crate",
                "isCorrect": false
              },
              {
                "id": "facf091a-4b13-44cd-93b1-dafbd4642948",
                "title": "pub use",
                "isCorrect": true
              },
              {
                "id": "d96f865f-9f70-424d-8041-82773ee8f38f",
                "title": "An alias",
                "isCorrect": false
              },
              {
                "id": "75b1e460-4c72-4cc8-94c8-79feb7b92d57",
                "title": "pub mod",
                "isCorrect": false
              }
            ],
            "descriptionText": "Re-exporting (pub use) simplifies a public API",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b585298e-df46-4e03-928c-7ba69d8449c0",
            "title": "What's the idiomatic way to import a function?",
            "answers": [
              {
                "id": "a515f2f2-d8b0-444e-9452-e68d3ab2f7de",
                "title": "use path::to::func",
                "isCorrect": false
              },
              {
                "id": "ee0465bb-a211-4d22-a017-f326792c36c1",
                "title": "use path::to::module; module::func();",
                "isCorrect": true
              },
              {
                "id": "473e2848-2b82-4dde-b8df-16c92862d3c0",
                "title": "Always via *",
                "isCorrect": false
              },
              {
                "id": "a2dc79e5-f88a-4c97-b70f-c8f815bc61fa",
                "title": "Via self",
                "isCorrect": false
              }
            ],
            "descriptionText": "Idiomatic Rust imports the module, then calls module::func()",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ccdf9c67-dcf9-4d60-9856-41b17e65bb23",
            "title": "Where is a module file searched?",
            "answers": [
              {
                "id": "b4e60935-7679-41e8-9152-75410443d9d9",
                "title": "Only mod.rs",
                "isCorrect": false
              },
              {
                "id": "bbbf904f-8f79-44e9-bc45-d8b1beb7a7bb",
                "title": "file.rs or dir/mod.rs",
                "isCorrect": true
              },
              {
                "id": "596dfec2-0211-4f48-b083-fb19075746c7",
                "title": "Only in src/bin",
                "isCorrect": false
              },
              {
                "id": "ce9c1665-07ba-47cd-ac7e-ff3b5057edd7",
                "title": "Only in Cargo.toml",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust supports both styles: file.rs and dir/mod.rs",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4016c86c-4e50-4cc8-bd74-b103b97ca64b",
            "title": "What if you create both file.rs and dir/mod.rs for the same module?",
            "answers": [
              {
                "id": "5f370d96-54fc-4423-9f6c-a046bc014f04",
                "title": "The first is used",
                "isCorrect": false
              },
              {
                "id": "a8acb65c-035b-4071-9eda-1777c5a989e3",
                "title": "Compile error",
                "isCorrect": true
              },
              {
                "id": "adcf8781-8f65-4fd4-8a36-bb176ca9ddfb",
                "title": "Everything works",
                "isCorrect": false
              },
              {
                "id": "62d632ac-ff9f-45be-8aff-a9133afe8dd2",
                "title": "Cargo chooses automatically",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust doesn't allow both variants for a single module",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "666c4fa5-bb27-461f-bed0-fc9027055d85",
            "title": "Where is the module tree usually written?",
            "answers": [
              {
                "id": "2002213e-9485-4a5f-a685-3add8254a7f0",
                "title": "In Cargo.lock",
                "isCorrect": false
              },
              {
                "id": "c1c8c89b-b44a-4487-bd7d-1f13ed65fb24",
                "title": "In lib.rs",
                "isCorrect": true
              },
              {
                "id": "2866a186-b80a-41e3-98ee-97ae2eec1ad3",
                "title": "In bin/",
                "isCorrect": false
              },
              {
                "id": "06603a70-8d92-4231-9ead-c963a5bade4a",
                "title": "In target/",
                "isCorrect": false
              }
            ],
            "descriptionText": "The module structure is declared in the crate root (lib.rs or main.rs)",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "444a4f7f-4e43-4cb5-8a71-4bb89e0f98b7",
            "title": "What does a use apply to by default?",
            "answers": [
              {
                "id": "68b1ff06-6e2c-4b7e-a38f-33a00caf1960",
                "title": "Works everywhere",
                "isCorrect": false
              },
              {
                "id": "fb066bd4-280f-4195-a2e8-c017f982f8cb",
                "title": "Only within the current module",
                "isCorrect": true
              },
              {
                "id": "378b8c3d-35b4-4884-84e4-e06f9bc4a528",
                "title": "Automatically propagates",
                "isCorrect": false
              },
              {
                "id": "593731a9-c48c-4aa9-a146-909a332c5e4d",
                "title": "Always global",
                "isCorrect": false
              }
            ],
            "descriptionText": "use is limited to the current scope",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1311741d-08f1-407a-8ca2-a0e571913095",
            "title": "How does a workspace differ from a package?",
            "answers": [
              {
                "id": "53fe125d-0de3-47e8-a81e-d77aefd3f522",
                "title": "A workspace is a set of packages",
                "isCorrect": true
              },
              {
                "id": "f19c6059-0d36-4d6e-8d84-3bcaec375a95",
                "title": "A package is a set of workspaces",
                "isCorrect": false
              },
              {
                "id": "feb98062-c739-4ec8-b762-17230b0a876b",
                "title": "They're the same",
                "isCorrect": false
              },
              {
                "id": "a8da3912-fbfe-4cd6-aaee-1f2a28d05697",
                "title": "A workspace = binaries only",
                "isCorrect": false
              }
            ],
            "descriptionText": "A workspace is a collection of multiple packages",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "92ae2be6-e93c-4b7f-b55d-23a13cd924bc",
            "title": "How do you create multiple binary crates in one package?",
            "answers": [
              {
                "id": "de0b6ad8-127d-417f-896a-141738554b93",
                "title": "Put files in src/bin",
                "isCorrect": true
              },
              {
                "id": "a77cc6ad-8258-45cb-b2a1-d6ba7e6c3d5e",
                "title": "In Cargo.toml [bin]",
                "isCorrect": false
              },
              {
                "id": "c7a68503-16a9-4df6-bb6d-1ff90f79f17b",
                "title": "In lib.rs",
                "isCorrect": false
              },
              {
                "id": "aca73837-77ae-4cc6-8477-1aeba033ea34",
                "title": "In Cargo.lock",
                "isCorrect": false
              }
            ],
            "descriptionText": "Each file in src/bin becomes a separate binary crate",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e41e8835-8393-42ee-8643-314c359d7223",
            "title": "What does self mean in a path?",
            "answers": [
              {
                "id": "d3f3c542-1f83-4d32-97f8-c101ed44d5e5",
                "title": "Refers to the parent",
                "isCorrect": false
              },
              {
                "id": "ed7d6e37-2221-4603-8dc4-b2434e6fec16",
                "title": "Refers to the current module",
                "isCorrect": true
              },
              {
                "id": "3dfa2da0-baec-4b0c-ab9e-23e2ec57522f",
                "title": "Imports private items",
                "isCorrect": false
              },
              {
                "id": "0b42aa38-6b0c-47f4-a847-283f072b3693",
                "title": "Points to the crate",
                "isCorrect": false
              }
            ],
            "descriptionText": "self = the current module",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9038e78f-4a32-45c9-90a6-746b4d80a60c",
            "title": "What's the default for pub enum?",
            "answers": [
              {
                "id": "5c56e3c2-84e2-4737-9d8a-7de2e9ae3772",
                "title": "Variants are private",
                "isCorrect": false
              },
              {
                "id": "f378e148-3223-444e-9ea0-1df0a304f85d",
                "title": "All variants are public",
                "isCorrect": true
              },
              {
                "id": "1074ac4b-2418-4f48-ae9f-c4837738bed8",
                "title": "Compile error",
                "isCorrect": false
              },
              {
                "id": "ee4103e3-d9bf-4ee3-b540-35f244035db8",
                "title": "Nothing changes",
                "isCorrect": false
              }
            ],
            "descriptionText": "For an enum, making it pub makes all its variants public",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "00b0d359-8063-493d-aef7-ee814473a502",
            "title": "What is true about a struct?",
            "answers": [
              {
                "id": "e7c000dd-d0bb-45e4-96b5-76da6b065e2e",
                "title": "All fields are public",
                "isCorrect": false
              },
              {
                "id": "5cd32f44-cd30-4644-92e9-c819e1e07558",
                "title": "Fields are private by default",
                "isCorrect": true
              },
              {
                "id": "9d07bf64-104a-4525-9840-7862d335acba",
                "title": "Fields are always public",
                "isCorrect": false
              },
              {
                "id": "acecaa81-5476-4940-abeb-cd133b16c7c7",
                "title": "Fields are hidden only with mod",
                "isCorrect": false
              }
            ],
            "descriptionText": "Even with pub struct, fields are private unless marked pub",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e313681f-eb27-49f8-9e20-2f4ee7e79226",
            "title": "What's the idiomatic use for HashMap?",
            "answers": [
              {
                "id": "039c1556-14c0-4dc2-927d-f75e2d926594",
                "title": "use std; HashMap::new()",
                "isCorrect": false
              },
              {
                "id": "681e59db-61f6-44ea-827d-e348d920248e",
                "title": "use std::collections::HashMap",
                "isCorrect": true
              },
              {
                "id": "ec88b71f-0157-4c5f-8e27-64c8cee75094",
                "title": "use std::HashMap",
                "isCorrect": false
              },
              {
                "id": "b3879ff0-2e40-4029-9166-0c8d800a9eb5",
                "title": "pub use std::HashMap",
                "isCorrect": false
              }
            ],
            "descriptionText": "Idiomatic is to import the full path to the type",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2c3cd2c3-3b8a-4ea3-849f-160c26aa7ab4",
            "title": "What happens with use std::fmt::Result and use std::io::Result?",
            "answers": [
              {
                "id": "9e9675fd-8c61-4a94-abd2-b1b5574d7b0c",
                "title": "Compile error",
                "isCorrect": true
              },
              {
                "id": "f358fd49-bee9-4a61-8eb5-564f9526da71",
                "title": "The first is chosen",
                "isCorrect": false
              },
              {
                "id": "fd3f28af-321c-478a-b002-86d56527298f",
                "title": "The last is chosen",
                "isCorrect": false
              },
              {
                "id": "0f56e770-bb66-496a-9a2f-cdefa39c78b3",
                "title": "Automatic alias",
                "isCorrect": false
              }
            ],
            "descriptionText": "You can't import two items with the same name into one scope",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0c3b8a41-9b7c-4e6d-b34f-974cab5f32ff",
            "title": "How to resolve the Result name conflict?",
            "answers": [
              {
                "id": "57925161-edca-49a5-9bee-e10128a9f0bf",
                "title": "Use pub mod",
                "isCorrect": false
              },
              {
                "id": "da286a74-695e-4ad8-b26e-66a8ed8d457f",
                "title": "Use as for an alias",
                "isCorrect": true
              },
              {
                "id": "b64f58e0-e812-4d3b-b116-cc1894195aa3",
                "title": "Use only glob",
                "isCorrect": false
              },
              {
                "id": "b63f9dfe-e6d4-4629-817b-4fad7c7239cb",
                "title": "Remove one import",
                "isCorrect": false
              }
            ],
            "descriptionText": "as lets you rename, e.g., IoResult",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b6b3ee1f-4980-4845-991a-7127131e3f43",
            "title": "What does pub use hosting; do?",
            "answers": [
              {
                "id": "ad431a60-62d1-4544-ae1c-4b169fb30d52",
                "title": "Imports only locally",
                "isCorrect": false
              },
              {
                "id": "a0b53dad-e769-4f55-a8c0-03e930bbfaa1",
                "title": "Makes the name hosting available both internally and externally",
                "isCorrect": true
              },
              {
                "id": "a45a3fb8-59f9-4c4b-beee-1fdaec2cd93b",
                "title": "Deletes the hosting module",
                "isCorrect": false
              },
              {
                "id": "49966747-6646-4034-be5c-b6d6db03d892",
                "title": "Duplicates hosting code",
                "isCorrect": false
              }
            ],
            "descriptionText": "Plain use is local; pub use re-exports, making it part of the public API",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "93b81020-a971-42dd-8e37-51e794048a09",
            "title": "What does pub use crate::front_of_house::hosting; do?",
            "answers": [
              {
                "id": "7f85ee04-8e3d-4308-866a-b443dae2ce95",
                "title": "Makes hosting visible only in the current file",
                "isCorrect": false
              },
              {
                "id": "6dae0161-6af3-46fb-8f13-88c962d34988",
                "title": "Exports hosting outward as part of the public API",
                "isCorrect": true
              },
              {
                "id": "19b33262-5c8b-41a2-bbc1-17014956eb8a",
                "title": "Imports hosting for tests only",
                "isCorrect": false
              },
              {
                "id": "27ce6c3c-b20b-4f97-bd4b-a08d3114bf82",
                "title": "Creates a new module",
                "isCorrect": false
              }
            ],
            "descriptionText": "pub use shortens the internal path and re-exports the name for external use",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "18a8bc72-ddde-4465-ac8f-5b61280b5eec",
            "title": "What happens if lib.rs has mod garden; but there's no garden.rs or garden/mod.rs?",
            "answers": [
              {
                "id": "7b2c9338-242b-4864-bb70-9765458eec9e",
                "title": "Cargo creates an empty module",
                "isCorrect": false
              },
              {
                "id": "3e4f4862-0b2b-4e83-9aa9-9f9ad8405e82",
                "title": "Compile error",
                "isCorrect": true
              },
              {
                "id": "42c1daab-76c4-4327-9222-88829e6683bf",
                "title": "The module is private",
                "isCorrect": false
              },
              {
                "id": "d2af4a86-ffe0-4b5a-b95c-ed304e3b4ec2",
                "title": "Rust ignores the module",
                "isCorrect": false
              }
            ],
            "descriptionText": "mod tells the compiler to find a file; if it's missing, that's an error",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3ad7f7b0-fe38-4155-913b-32e9085e6902",
            "title": "How do you properly move submodule hosting to a separate file?",
            "answers": [
              {
                "id": "7f5ea12d-e09f-493d-a2a6-824db347822c",
                "title": "src/hosting.rs",
                "isCorrect": false
              },
              {
                "id": "d5542a3c-baeb-4af5-a9da-eb629e8d051b",
                "title": "src/front_of_house/hosting.rs",
                "isCorrect": true
              },
              {
                "id": "51b54cd5-338d-4537-ab50-8b293fde4549",
                "title": "src/bin/hosting.rs",
                "isCorrect": false
              },
              {
                "id": "66191394-41d2-4727-b6d5-230e1c087f18",
                "title": "lib/hosting.rs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Child modules must live under the directory of their parent module",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "aec8de4d-cdf6-4d9e-ae72-91fbc69c6822",
            "title": "What about the mod.rs style?",
            "answers": [
              {
                "id": "cd41f675-28e0-41ad-b8b4-1199eb0a8dcd",
                "title": "Deprecated but still supported",
                "isCorrect": true
              },
              {
                "id": "0dc98505-21cb-4d77-b965-f936780ac329",
                "title": "Mandatory in all projects",
                "isCorrect": false
              },
              {
                "id": "8f1cf117-d749-4f10-b77f-c99ecec7dc46",
                "title": "Completely replaced garden.rs",
                "isCorrect": false
              },
              {
                "id": "be991f37-3c32-48c0-a5c3-654b18f8d39b",
                "title": "Works only in a workspace",
                "isCorrect": false
              }
            ],
            "descriptionText": "mod.rs (src/garden/mod.rs) is the older style and still supported",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "68ff0870-443c-497f-b97c-1095daf68455",
            "title": "What if both garden.rs and garden/mod.rs exist?",
            "answers": [
              {
                "id": "e0fa4e79-0d9b-4469-bb43-d3430f6c19eb",
                "title": "Rust merges them",
                "isCorrect": false
              },
              {
                "id": "34b4b3b9-93db-43a9-9c84-8904581340e2",
                "title": "Compile error",
                "isCorrect": true
              },
              {
                "id": "1240d057-efa9-4f45-9eba-2fe80a247ce6",
                "title": "Cargo chooses garden.rs",
                "isCorrect": false
              },
              {
                "id": "55487fd8-cc13-411d-9590-b6232e8ebcc8",
                "title": "Cargo chooses mod.rs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust forbids defining one module in two places",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6a1a03d4-51db-4d2e-b9b9-9f122059fc66",
            "title": "What does glob use std::collections::*; do?",
            "answers": [
              {
                "id": "7300d833-c45b-49d3-8db2-645beb5ab0cd",
                "title": "Imports all public items from collections",
                "isCorrect": true
              },
              {
                "id": "76a12249-b16a-4997-adb5-50e646deb027",
                "title": "Imports only HashMap",
                "isCorrect": false
              },
              {
                "id": "66dffa41-4220-4b34-bc90-57b4c1034633",
                "title": "Imports private items too",
                "isCorrect": false
              },
              {
                "id": "aa019f85-1c02-4f9a-be43-0cd2e377d35f",
                "title": "Only enums",
                "isCorrect": false
              }
            ],
            "descriptionText": "* pulls in all public items of the module",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "98f4b7d7-a210-49cc-9474-3fb92cf23f5e",
            "title": "When should you avoid glob (*)?",
            "answers": [
              {
                "id": "3db3fd22-1992-43bf-ac97-24dac511f021",
                "title": "In small files",
                "isCorrect": false
              },
              {
                "id": "8b4cf240-662e-4532-8c05-01005d00faae",
                "title": "When you need to see explicitly what's imported",
                "isCorrect": true
              },
              {
                "id": "335186b5-bcf2-4ac1-8632-7b7c1b786206",
                "title": "When working with std",
                "isCorrect": false
              },
              {
                "id": "92e38702-6392-44ed-bc1e-d26ce78e65a7",
                "title": "When there's no pub use",
                "isCorrect": false
              }
            ],
            "descriptionText": "glob can obscure which items are in scope",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6b19b7c4-e27c-4098-a83a-23207c16d754",
            "title": "Where is glob most often used?",
            "answers": [
              {
                "id": "bf07cb92-da1c-4f50-ac8c-bbb8345f735f",
                "title": "In tests",
                "isCorrect": true
              },
              {
                "id": "6c93350b-482d-4b72-b718-25ca02b129f1",
                "title": "In Cargo.toml",
                "isCorrect": false
              },
              {
                "id": "d3847cc7-a550-48a3-b444-e9d7721cb21f",
                "title": "In a workspace",
                "isCorrect": false
              },
              {
                "id": "08ba2fc5-a76d-43f0-84ac-85d2147d1bd4",
                "title": "In bin",
                "isCorrect": false
              }
            ],
            "descriptionText": "It's commonly used in the tests module to import everything",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "37f971bc-4eac-40e5-a7fa-fd18bceb926b",
            "title": "Which statement best describes Rust's module system?",
            "answers": [
              {
                "id": "b3fa77b8-d98d-4246-a3ce-cc4b1f317547",
                "title": "It's only about pub/private",
                "isCorrect": false
              },
              {
                "id": "85bff1c0-cb98-4453-a013-71edb8f6d5bc",
                "title": "It's the combination of packages, crates, modules, paths, and use",
                "isCorrect": true
              },
              {
                "id": "6f5b5e05-5013-48d7-835c-6936f8f6300c",
                "title": "It's an analog of C++ include",
                "isCorrect": false
              },
              {
                "id": "4a015d08-071e-43fa-b0e9-09386aba88ba",
                "title": "It's only about workspaces",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust's module system encompasses all code organization mechanisms: packages, crates, modules, pub/use, and paths",
            "descriptionLink": "managing_projects_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "79f3176d-43c7-4953-b1b5-9824cc7edb5f",
        "theme": "Common Collections",
        "priority": 6,
        "questions": [
          {
            "id": "5ea036e0-d879-4142-a76e-1e70fba70ad2",
            "title": "What is Vec<T> in Rust?",
            "answers": [
              {
                "id": "fb602b09-3109-49f2-b85b-be28bfc02509",
                "title": "A fixed-size stack array",
                "isCorrect": false
              },
              {
                "id": "e37e0f38-b986-468a-a5ef-8793f0542831",
                "title": "A dynamic heap array",
                "isCorrect": true
              },
              {
                "id": "f955a867-7e4d-49cf-949b-eb505ecc2975",
                "title": "An associative array",
                "isCorrect": false
              },
              {
                "id": "07979b88-eabb-4c5f-ab7e-003c4b04890d",
                "title": "A UTF-8 string",
                "isCorrect": false
              }
            ],
            "descriptionText": "Vec<T> stores data on the heap; its size can change at runtime",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "be35f020-6b8f-4a78-abfd-be766715d399",
            "title": "How do you create an empty i32 vector?",
            "answers": [
              {
                "id": "0931ae92-3996-4d37-a1c5-10dc2ec310c6",
                "title": "let v = Vec::new();",
                "isCorrect": true
              },
              {
                "id": "e6ce97b9-5aa8-487f-8f28-527f01b81043",
                "title": "let v = [];",
                "isCorrect": false
              },
              {
                "id": "0d37febb-d6c8-42e6-9166-f16f990d6a63",
                "title": "let v = vec::empty();",
                "isCorrect": false
              },
              {
                "id": "a4353b95-7fb9-418b-b992-f972a32d7f01",
                "title": "let v = array![];",
                "isCorrect": false
              }
            ],
            "descriptionText": "Vec::new() creates an empty vector; the type is via annotation or later inference",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3cc19523-0437-4010-b50c-ff3d033f264c",
            "title": "Macro to create a vector with elements:",
            "answers": [
              {
                "id": "9b95ccad-683e-47eb-b912-5a5d7693d620",
                "title": "vec![]",
                "isCorrect": true
              },
              {
                "id": "df39514c-84c6-44db-9a09-930143fdb4ba",
                "title": "array![]",
                "isCorrect": false
              },
              {
                "id": "5e425820-7feb-41b8-8818-8faaa4ef875b",
                "title": "make_vec![]",
                "isCorrect": false
              },
              {
                "id": "a9be91a3-7ba9-45f9-9ffa-ae2afc7453db",
                "title": "collection![]",
                "isCorrect": false
              }
            ],
            "descriptionText": "vec! is the built-in macro for vector literals",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "aec020db-d97c-46d1-821b-13a26fc93f88",
            "title": "What does v[2] return if v = vec![1, 2, 3]?",
            "answers": [
              {
                "id": "2f0941c0-b31d-403e-b951-9c9a3ccf0adb",
                "title": "Some(3)",
                "isCorrect": false
              },
              {
                "id": "e34d1042-8489-4a2f-a70e-7fc6a1a74f8b",
                "title": "&3",
                "isCorrect": true
              },
              {
                "id": "21de7579-6874-466c-bd00-51a2f2aa02cb",
                "title": "3",
                "isCorrect": false
              },
              {
                "id": "e1d91f28-b3b7-4ea6-afb6-efa511e4f78d",
                "title": "Option<i32>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Indexing with [] returns &T, not a value",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ea560128-17f2-4d00-8447-959e87d6dab4",
            "title": "What does v.get(100) do if the index is out of bounds?",
            "answers": [
              {
                "id": "ea7e5327-7d52-45c0-8eaf-13d04f397115",
                "title": "Panics",
                "isCorrect": false
              },
              {
                "id": "5c827901-5649-486a-87d8-ebe2517eb9ff",
                "title": "Returns None",
                "isCorrect": true
              },
              {
                "id": "5f527c2a-128e-494d-83fa-d50d780a8b20",
                "title": "Returns 0",
                "isCorrect": false
              },
              {
                "id": "cad4582a-0876-489b-89fc-c3873264e415",
                "title": "Returns a reference",
                "isCorrect": false
              }
            ],
            "descriptionText": "get is safe and always returns Option<&T>",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "504027e2-eae8-4a35-93ec-72e14db5c558",
            "title": "What happens with &v[100] if there are fewer elements?",
            "answers": [
              {
                "id": "0beabe90-a79b-4ec2-b0b8-84a73fc060a0",
                "title": "Returns None",
                "isCorrect": false
              },
              {
                "id": "2895cafc-8d78-4fd6-abb4-1b3573930677",
                "title": "Panics",
                "isCorrect": true
              },
              {
                "id": "4aae0789-177e-4c9d-9eea-b886dd3e5155",
                "title": "Returns 0",
                "isCorrect": false
              },
              {
                "id": "5e900a4d-498e-4704-a78b-04d3636956c7",
                "title": "Compile-time error",
                "isCorrect": false
              }
            ],
            "descriptionText": "[] indexing panics on out-of-bounds",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6f94a6ef-8ad7-4a8f-a1cf-438804e93e24",
            "title": "Can you have &v[0] and call v.push(5) in the same scope?",
            "answers": [
              {
                "id": "5867d1e7-f1f3-446d-bc4c-638457a90b01",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "efaf4073-16c1-4d10-8f19-8fe1f3b5eeef",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "34c906d8-35f2-41cb-a50f-82c10a3690a1",
                "title": "Only if push doesn't move the buffer",
                "isCorrect": false
              },
              {
                "id": "109db12f-6766-41e3-ae69-3ab47cac6f53",
                "title": "Always possible",
                "isCorrect": false
              }
            ],
            "descriptionText": "The borrow checker forbids this since push may reallocate, invalidating the reference",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6163edc5-5c55-4b66-bb5a-99f36f760d40",
            "title": "How to iterate immutably over a vector?",
            "answers": [
              {
                "id": "a5ad2afb-9e32-46ba-8761-d8fdec86501b",
                "title": "for i in v {}",
                "isCorrect": false
              },
              {
                "id": "0831ebd3-5f3d-4dec-8ab5-5a48572ec67f",
                "title": "for i in &v {}",
                "isCorrect": true
              },
              {
                "id": "2c6db7c7-5bb7-486b-975b-a8d3dd7105c3",
                "title": "for i in v.iter_mut()",
                "isCorrect": false
              },
              {
                "id": "b520def2-28c0-4662-90a1-2a7a7971f252",
                "title": "for i in mut v",
                "isCorrect": false
              }
            ],
            "descriptionText": "&v yields &T",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bc7bb07a-1374-415e-b19b-bc62141801f0",
            "title": "How to modify all elements in a vector?",
            "answers": [
              {
                "id": "9527fffa-a331-430a-99f4-ec403e644ee1",
                "title": "for i in v { *i += 1; }",
                "isCorrect": false
              },
              {
                "id": "210097fd-9236-403c-a8e1-a2ca2bc081ba",
                "title": "for i in &mut v { *i += 1; }",
                "isCorrect": true
              },
              {
                "id": "68c035cd-d58e-4907-9a82-48b06a7c9054",
                "title": "for mut i in v { i += 1; }",
                "isCorrect": false
              },
              {
                "id": "dbc2af7c-f321-4bb2-81dd-fd4aebc8a759",
                "title": "v.map(|x| x + 1)",
                "isCorrect": false
              }
            ],
            "descriptionText": "&mut v yields &mut T; use * to mutate the value",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f3131636-dddd-4d4c-a468-a0865e0c1246",
            "title": "What if you need different types in a Vec?",
            "answers": [
              {
                "id": "aaf2f84c-5668-42ff-a2e3-9d59d77484de",
                "title": "You can't",
                "isCorrect": false
              },
              {
                "id": "bb8b7766-241d-4ea2-be04-b47e97a4f5f5",
                "title": "Use an enum",
                "isCorrect": true
              },
              {
                "id": "8e00945c-2b47-43ba-98c0-079a75d8a380",
                "title": "Use a tuple",
                "isCorrect": false
              },
              {
                "id": "035038bd-0b97-45ba-bc5a-81c80bec673c",
                "title": "Use Vec<dynamic>",
                "isCorrect": false
              }
            ],
            "descriptionText": "A vector is homogeneous; an enum unifies variants under one type",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6839d6fb-33c3-4b7e-98cc-6b32d553c952",
            "title": "What happens to vector elements when it goes out of scope?",
            "answers": [
              {
                "id": "ab6c57e2-f124-4d79-bbf1-b23699730f04",
                "title": "They aren't freed",
                "isCorrect": false
              },
              {
                "id": "df65f1eb-673d-4c33-a928-5d6c11aad121",
                "title": "Memory leak",
                "isCorrect": false
              },
              {
                "id": "1e8a0082-ef60-4125-8ca5-124d16fe0648",
                "title": "All elements are dropped",
                "isCorrect": true
              },
              {
                "id": "0f0fbc6f-26a4-4df9-a2bf-fb0998672f90",
                "title": "Only the first element is dropped",
                "isCorrect": false
              }
            ],
            "descriptionText": "Vec frees memory and calls drop for each element",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4349a280-c026-47b2-9030-76fed97db7e8",
            "title": "What is String?",
            "answers": [
              {
                "id": "413fd858-82c5-4fc1-a91c-702ae280d7c5",
                "title": "A fixed-length string",
                "isCorrect": false
              },
              {
                "id": "b22cd226-14d1-42cf-af65-b91c962b5dde",
                "title": "A wrapper around Vec<u8>",
                "isCorrect": true
              },
              {
                "id": "a922f777-867b-4e3e-a90e-989da4e9e846",
                "title": "A UTF-16 string",
                "isCorrect": false
              },
              {
                "id": "662bf659-048f-43c4-b07a-841502aba6af",
                "title": "A bag of chars",
                "isCorrect": false
              }
            ],
            "descriptionText": "String is UTF-8 backed by Vec<u8>",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f8f9dccb-265c-4763-9aab-f821ff40841d",
            "title": "How to create an empty string?",
            "answers": [
              {
                "id": "7be605ac-5a52-49cb-8722-ee4ea190eba3",
                "title": "String::empty()",
                "isCorrect": false
              },
              {
                "id": "4121d88b-f96b-45ac-8e1f-24591124c26e",
                "title": "String::new()",
                "isCorrect": true
              },
              {
                "id": "456279cb-b2f1-4ea9-9c96-11d77fa632a0",
                "title": "String::default()",
                "isCorrect": false
              },
              {
                "id": "17769c08-1c86-414d-99b0-b72db394293c",
                "title": "\"\"",
                "isCorrect": false
              }
            ],
            "descriptionText": "String::new() creates an empty String",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ce670816-a990-41fe-9f6e-5d7f14089652",
            "title": "How to create a String from a literal?",
            "answers": [
              {
                "id": "fa60c41e-53ee-4441-8fa0-dedf00a0cb51",
                "title": "\"hello\".clone()",
                "isCorrect": false
              },
              {
                "id": "522d981d-41c9-4dea-9ef4-113da003015c",
                "title": "\"hello\".to_string()",
                "isCorrect": true
              },
              {
                "id": "8b100c13-827d-4d55-b4e5-40b3028f649b",
                "title": "String::literal(\"hello\")",
                "isCorrect": false
              },
              {
                "id": "9c526f70-50c4-49cf-8131-ba31b26f4625",
                "title": "String::str(\"hello\")",
                "isCorrect": false
              }
            ],
            "descriptionText": "&str has .to_string()",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bca3dec1-6ea3-4b68-aae8-82d43341ab63",
            "title": "Difference between String::from(\"hi\") and \"hi\".to_string()?",
            "answers": [
              {
                "id": "5338a192-e5da-4ae3-bdca-c29c633992b6",
                "title": "Different types",
                "isCorrect": false
              },
              {
                "id": "8d13a3d1-aec7-4475-988e-d30484d3b4e2",
                "title": "No difference",
                "isCorrect": true
              },
              {
                "id": "9fa4f02d-78de-424d-b2c2-afedac95b4b8",
                "title": "The second is faster",
                "isCorrect": false
              },
              {
                "id": "1afd0a86-a44a-44f7-8a65-e9835d3a1a62",
                "title": "The first is forbidden",
                "isCorrect": false
              }
            ],
            "descriptionText": "Both create a String from a literal",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "62a80ad9-8b45-4213-8424-4bbd016b4c84",
            "title": "What does push_str do?",
            "answers": [
              {
                "id": "f633dd1b-4e78-4386-9ab2-035c888f0a19",
                "title": "Appends a char",
                "isCorrect": false
              },
              {
                "id": "c2f09f3f-15d3-4cde-ba4c-d60c3cd209f7",
                "title": "Appends an &str",
                "isCorrect": true
              },
              {
                "id": "77cf9280-6db1-445a-a1b3-fc8c04e4935f",
                "title": "Deletes the string",
                "isCorrect": false
              },
              {
                "id": "4dc0e351-e0aa-47fe-bd54-47f0d8e3ea06",
                "title": "Returns a copy",
                "isCorrect": false
              }
            ],
            "descriptionText": "push_str takes &str and appends it",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "82fe9061-6267-40a6-abd3-5ab0bd11f17b",
            "title": "What does push do?",
            "answers": [
              {
                "id": "3f6fac2b-5e5a-41cb-949d-954c5d8e3a60",
                "title": "Appends an &str",
                "isCorrect": false
              },
              {
                "id": "44b86a16-09a4-420f-a467-1b080334c836",
                "title": "Appends a single char",
                "isCorrect": true
              },
              {
                "id": "78009ace-0ab2-4b44-98c4-a6b526a2e610",
                "title": "Concatenates strings",
                "isCorrect": false
              },
              {
                "id": "b6a801ed-d865-418b-9229-7936b33a998a",
                "title": "Appends an array",
                "isCorrect": false
              }
            ],
            "descriptionText": "push accepts only a char",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9783c8d2-5219-4e66-95f2-b746fee542b7",
            "title": "What happens with let s3 = s1 + &s2;?",
            "answers": [
              {
                "id": "763a3931-49a1-418a-a188-5d015fc3876c",
                "title": "Both remain accessible",
                "isCorrect": false
              },
              {
                "id": "22c9d6d0-b9bd-482c-9a21-8f966c717658",
                "title": "s1 is moved",
                "isCorrect": true
              },
              {
                "id": "a5cea3c3-10ff-49f2-8f40-638dbdff84b7",
                "title": "s2 is moved",
                "isCorrect": false
              },
              {
                "id": "ef895910-b209-4316-9214-2cf6d0534016",
                "title": "Compile error",
                "isCorrect": false
              }
            ],
            "descriptionText": "+ is fn add(self, s: &str) -> String, so s1 is moved",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a9f5c971-ec6f-4fc3-9419-aca426487e13",
            "title": "Why is format! better than + for strings?",
            "answers": [
              {
                "id": "5cab8796-8ac5-4534-9e06-c3f8bc624980",
                "title": "It's faster",
                "isCorrect": false
              },
              {
                "id": "8c5b8b8c-fbde-4a4d-81c2-0ae168b56da4",
                "title": "Clearer and doesn't move arguments",
                "isCorrect": true
              },
              {
                "id": "ff887e6a-163a-40a5-bb37-646269cc929c",
                "title": "Produces &str",
                "isCorrect": false
              },
              {
                "id": "069e87d9-97b7-4673-bb29-07170ff0d04f",
                "title": "For printing only",
                "isCorrect": false
              }
            ],
            "descriptionText": "format! takes references; nothing is moved",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dabb8c20-9cf7-4465-9b5e-35dd3789dadc",
            "title": "Why can't you index a string as s[0]?",
            "answers": [
              {
                "id": "6e84dcd5-abda-4279-81b8-178544729823",
                "title": "Arbitrary language choice",
                "isCorrect": false
              },
              {
                "id": "3621fef2-a8a7-43d9-be06-59ac7ae270d9",
                "title": "UTF-8 has variable width",
                "isCorrect": true
              },
              {
                "id": "61b52f01-30f5-4451-9f7e-dfeaa7e9a842",
                "title": "Borrow checker issue",
                "isCorrect": false
              },
              {
                "id": "63ee1313-3af1-424e-8e85-35edc7031eb4",
                "title": "Only arrays support indexing",
                "isCorrect": false
              }
            ],
            "descriptionText": "One character can span multiple bytes; byte indexing isn't \"a character\"",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3445118d-2f67-4fca-845a-16a5d8f8b76c",
            "title": "What does \"Здравствуйте\".len() return?",
            "answers": [
              {
                "id": "daa92bf2-f89f-43e6-9cc5-49fd832d6d3c",
                "title": "12",
                "isCorrect": false
              },
              {
                "id": "f79afe60-7dd9-4bc7-a7b6-55d81bb57d0e",
                "title": "24",
                "isCorrect": true
              },
              {
                "id": "4816d1ef-87af-41eb-8995-7f5efc5bb6b4",
                "title": "Error",
                "isCorrect": false
              },
              {
                "id": "b12262f0-32fd-448a-b5d7-04ca36373f5f",
                "title": "0",
                "isCorrect": false
              }
            ],
            "descriptionText": "len() returns bytes; Cyrillic letters here are 2 bytes each",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dc5272a1-fa5d-45a6-bf62-0e3c73c58332",
            "title": "How to get a slice of the first 4 bytes of a string?",
            "answers": [
              {
                "id": "a844c001-c50f-42b4-9bc4-3349795bf9f5",
                "title": "&s[0..2]",
                "isCorrect": false
              },
              {
                "id": "337182e9-3d5b-47d2-8f23-c84636b4a43e",
                "title": "&s[0..4]",
                "isCorrect": true
              },
              {
                "id": "a7e7a3a1-c2e5-4c8a-9ad0-b5ce027500b5",
                "title": "s.slice(4)",
                "isCorrect": false
              },
              {
                "id": "96c9ed37-e0b5-4026-a976-8b6c8a2e3dfe",
                "title": "s.bytes(0..4)",
                "isCorrect": false
              }
            ],
            "descriptionText": "Range slicing yields &str, but only on valid char boundaries",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "389d077c-692d-441e-8d19-d486105549b2",
            "title": "What does \"Зд\".chars() do?",
            "answers": [
              {
                "id": "5aee3119-3560-4b78-a81c-689ea0fbb1a6",
                "title": "Bytes",
                "isCorrect": false
              },
              {
                "id": "1e189aa8-1379-477e-b2ac-4475dac6716c",
                "title": "Unicode scalar chars",
                "isCorrect": true
              },
              {
                "id": "29b1aa59-8174-4091-9398-b7058b8dbfd7",
                "title": "&str slices",
                "isCorrect": false
              },
              {
                "id": "5f24be8f-b121-48b4-8c22-e88271d119b0",
                "title": "Error",
                "isCorrect": false
              }
            ],
            "descriptionText": ".chars() iterates Unicode scalar values",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "aa6d4099-285c-462d-87e1-cfb7da89697a",
            "title": "What does \"Зд\".bytes() do?",
            "answers": [
              {
                "id": "33fcf421-f7d8-4e97-be69-3ce280243659",
                "title": "Characters",
                "isCorrect": false
              },
              {
                "id": "18be6a78-4a5a-41dd-bace-0219b17922e5",
                "title": "An array of char",
                "isCorrect": false
              },
              {
                "id": "ceffe4c7-0269-4efd-af6e-f6bad76fdd6c",
                "title": "UTF-8 bytes",
                "isCorrect": true
              },
              {
                "id": "2a7faa53-e6f7-4c40-8ff1-524e8f77db08",
                "title": "Graphemes",
                "isCorrect": false
              }
            ],
            "descriptionText": ".bytes() yields u8",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d454d2c0-fc02-4aba-905b-c35f65c1686f",
            "title": "What doesn't the standard library provide for strings?",
            "answers": [
              {
                "id": "3a040390-e344-461f-8423-dcb85fdfb823",
                "title": "Bytes",
                "isCorrect": false
              },
              {
                "id": "50a3ba32-2a9f-4e14-82b9-3bbc4d29abce",
                "title": "Chars",
                "isCorrect": false
              },
              {
                "id": "dd333c57-164c-4ac2-bb50-fd80e3cfc354",
                "title": "Grapheme clusters",
                "isCorrect": true
              },
              {
                "id": "61c00c7f-7b52-4268-889d-5f5a72588de4",
                "title": "Length",
                "isCorrect": false
              }
            ],
            "descriptionText": "Graphemes require external crates",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "37ab787a-f989-4da1-9acc-f6224837abab",
            "title": "How to create a HashMap?",
            "answers": [
              {
                "id": "67b4fe5f-71b2-4421-b18a-5012a7015059",
                "title": "let m = HashMap::new();",
                "isCorrect": true
              },
              {
                "id": "5fb9af32-04ec-49d4-adc6-31e3a2bf3219",
                "title": "let m = map![];",
                "isCorrect": false
              },
              {
                "id": "1edd8ea5-03ad-451b-9c5d-38a2ceb38d3c",
                "title": "let m = {};",
                "isCorrect": false
              },
              {
                "id": "634dfdee-bd59-432b-82f8-f9165af0a0e2",
                "title": "let m = dictionary![];",
                "isCorrect": false
              }
            ],
            "descriptionText": "HashMap::new() is the standard way",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "01eab723-8175-4b05-bd80-22757763663d",
            "title": "Where is HashMap located?",
            "answers": [
              {
                "id": "a10d044a-4e26-4ac2-83f1-e340acc45a84",
                "title": "std::hash",
                "isCorrect": false
              },
              {
                "id": "920c6a2f-8dc0-43c9-a259-2a94bfced341",
                "title": "std::map",
                "isCorrect": false
              },
              {
                "id": "d62936fd-1030-49bc-984e-9dd5afd7d7fd",
                "title": "std::collections",
                "isCorrect": true
              },
              {
                "id": "e36176e6-69c7-4825-a632-b312eff781aa",
                "title": "std::core",
                "isCorrect": false
              }
            ],
            "descriptionText": "HashMap lives in the collections module",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fea34dfc-2066-4349-808e-6396c4732b71",
            "title": "How to get a value from a HashMap?",
            "answers": [
              {
                "id": "0b538093-4d52-4de2-899b-835f3f9bb342",
                "title": "map[\"key\"]",
                "isCorrect": false
              },
              {
                "id": "537e73e5-3c56-4088-bbd6-ac44f2119a29",
                "title": "map.get(\"key\")",
                "isCorrect": true
              },
              {
                "id": "2120a227-1a1b-408d-bfb3-e21d789ba982",
                "title": "map.value(\"key\")",
                "isCorrect": false
              },
              {
                "id": "cf899ddf-0cf1-4a21-9609-97b9eaa7f28e",
                "title": "map.find(\"key\")",
                "isCorrect": false
              }
            ],
            "descriptionText": "Use .get(), which returns Option<&V>",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "172a8aca-1b26-47d1-8837-478f8fe2e03a",
            "title": "What does the entry method do?",
            "answers": [
              {
                "id": "86629725-5599-4337-a9ac-b929a856bfe4",
                "title": "Checks key existence",
                "isCorrect": true
              },
              {
                "id": "b9161f24-011c-4f67-a582-6317b4069ea6",
                "title": "Deletes an entry",
                "isCorrect": false
              },
              {
                "id": "6e91022d-37b8-4e97-9e0b-3b1a9cfec586",
                "title": "Overwrites a key",
                "isCorrect": false
              },
              {
                "id": "81b80da0-b8e0-4fe5-9046-61d4637bee9b",
                "title": "Returns the list of keys",
                "isCorrect": false
              }
            ],
            "descriptionText": "entry returns an Entry, on which you can call or_insert",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "361ca2da-5686-4b45-a8b5-ab1411744b3b",
            "title": "What does or_insert(50) do?",
            "answers": [
              {
                "id": "e8a564b8-bc66-42a8-bf0b-1d942ae7d5b3",
                "title": "Always inserts 50",
                "isCorrect": false
              },
              {
                "id": "68575a25-0697-4449-a658-dace986ba6c5",
                "title": "Inserts only if the key is absent",
                "isCorrect": true
              },
              {
                "id": "d4924bf4-fa7d-401a-bd60-be188a16c249",
                "title": "Deletes the key",
                "isCorrect": false
              },
              {
                "id": "f476f9d9-a6e6-4a13-86a1-7b0e015a4f75",
                "title": "Returns an Option",
                "isCorrect": false
              }
            ],
            "descriptionText": "or_insert inserts when missing; otherwise it returns a mutable ref to the existing value",
            "descriptionLink": "common_collections_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "8d0f8cdb-7c14-4d9a-b1c8-08d3a44e498a",
        "theme": "Error Handling",
        "priority": 7,
        "questions": [
          {
            "id": "838f22e4-1ac9-49b5-9084-e1811a51742d",
            "title": "How do error kinds differ in Rust?",
            "answers": [
              {
                "id": "cabd690a-06cf-4704-b3fb-a2a51400fd37",
                "title": "Compile-time vs. runtime",
                "isCorrect": false
              },
              {
                "id": "c363e27b-cd66-493e-b312-9bdb49062bcd",
                "title": "Light vs. heavy",
                "isCorrect": false
              },
              {
                "id": "3d036a7f-a93f-4000-a343-cc99cfbef51c",
                "title": "Recoverable vs. unrecoverable",
                "isCorrect": true
              },
              {
                "id": "07068757-04d9-4016-a52c-9f0b04deb33f",
                "title": "Syntactic vs. logical",
                "isCorrect": false
              }
            ],
            "descriptionText": "Recoverable → Result<T, E>, unrecoverable → panic!",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2091bc2c-0e34-4abe-8aae-c315a2ac8579",
            "title": "What does panic! do?",
            "answers": [
              {
                "id": "06e66783-96af-4e80-8493-d58a66805262",
                "title": "Returns Err",
                "isCorrect": false
              },
              {
                "id": "6c7bacfd-b983-49f9-ac2a-86fe680418d1",
                "title": "Prints a warning and continues",
                "isCorrect": false
              },
              {
                "id": "6b4e84b6-b6d3-44cf-8313-110d6e343d23",
                "title": "Terminates the thread with stack unwinding by default",
                "isCorrect": true
              },
              {
                "id": "14df7c48-b5bf-41b4-95e6-5feb8690cb4f",
                "title": "Silently logs an error",
                "isCorrect": false
              }
            ],
            "descriptionText": "A panic stops execution; default behavior is unwinding",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "61360d92-774b-44a7-9ff9-6a0a43026e1c",
            "title": "How to switch panics to immediate abort?",
            "answers": [
              {
                "id": "ea2819ed-a230-46ca-894b-07b1b97bd996",
                "title": "RUST_PANIC=abort",
                "isCorrect": false
              },
              {
                "id": "0872ce4f-3f29-45a8-9ce8-93a0871f60c0",
                "title": "In Cargo.toml: panic = 'abort' in the target profile",
                "isCorrect": true
              },
              {
                "id": "7584a90b-6e4b-486f-b648-6aa2bc7cc9f7",
                "title": "Compiler flag --abort",
                "isCorrect": false
              },
              {
                "id": "d1ca9b89-0d26-48e2-bbbb-f5044ce8d9b4",
                "title": "Function std::panic::abort()",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Cargo profile sets the strategy",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b0af3a30-d0f2-43ad-bfc3-f14675a08737",
            "title": "What does RUST_BACKTRACE=1 show?",
            "answers": [
              {
                "id": "fef2ca4d-24c6-4cb4-8d19-596e4cc519fc",
                "title": "Error type",
                "isCorrect": false
              },
              {
                "id": "8989fe37-920b-4903-b89e-bd07e0d70c5c",
                "title": "The call stack up to the panic site",
                "isCorrect": true
              },
              {
                "id": "1dddb9b0-0bc5-4de0-b2a0-84b37b3e3d82",
                "title": "Memory contents",
                "isCorrect": false
              },
              {
                "id": "613e9184-59a9-46b3-b264-afd44f18d50e",
                "title": "Rust version",
                "isCorrect": false
              }
            ],
            "descriptionText": "Enables backtrace output",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bbe2393c-f2e1-4384-82ef-0b1f16be18f6",
            "title": "Which type is used for recoverable errors?",
            "answers": [
              {
                "id": "2eb7fd33-b3bf-43b6-8d88-4fddb866600b",
                "title": "Option<T>",
                "isCorrect": false
              },
              {
                "id": "fbbce682-103e-4261-81c2-cedd5e644b13",
                "title": "Result<T, E>",
                "isCorrect": true
              },
              {
                "id": "6eeabe18-55a6-4119-91a2-12428d6637da",
                "title": "Try<T>",
                "isCorrect": false
              },
              {
                "id": "95642dd6-3cc9-4893-9d9d-94574213c9b7",
                "title": "Either<T, E>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Result encapsulates success/error",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1950e16e-d72f-4209-83fe-f1fafd2ade36",
            "title": "What does File::open(\"a.txt\") return?",
            "answers": [
              {
                "id": "89bec9ae-3ad0-46cc-bc42-3b7a57d720fd",
                "title": "Option<File>",
                "isCorrect": false
              },
              {
                "id": "2bfc3439-2047-42ee-b601-bc3669cd93fa",
                "title": "Result<File, io::Error>",
                "isCorrect": true
              },
              {
                "id": "75a52fbd-b44d-4798-8f43-57cb64137141",
                "title": "Result<&File, &io::Error>",
                "isCorrect": false
              },
              {
                "id": "6de87e20-7f76-42ff-8a8b-785f6697fa9b",
                "title": "File",
                "isCorrect": false
              }
            ],
            "descriptionText": "The operation can fail",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "31a9d490-e256-4bbc-98c0-e0fc75b96ccf",
            "title": "What does unwrap() on a Result do?",
            "answers": [
              {
                "id": "fe30696b-5a77-48c3-8edc-726f6f163e70",
                "title": "Always returns T",
                "isCorrect": false
              },
              {
                "id": "233c1c14-d04c-4c04-a324-f7efe629c0c2",
                "title": "Returns T or panics",
                "isCorrect": true
              },
              {
                "id": "b91d2407-e572-4a17-92bc-abebe6f29523",
                "title": "Always panics",
                "isCorrect": false
              },
              {
                "id": "fd908f66-d665-4c46-bdb3-a9c1d501bc16",
                "title": "Converts to Option",
                "isCorrect": false
              }
            ],
            "descriptionText": "Shortcut for \"Ok or panic\"",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9ce7813e-8cd2-4e5e-8f63-a23ffbe600ac",
            "title": "How does expect() differ from unwrap()?",
            "answers": [
              {
                "id": "0f396563-30ae-4f55-ae2c-a5cb12c732ba",
                "title": "Returns Option",
                "isCorrect": false
              },
              {
                "id": "8e5195a0-5229-46d5-b54b-b0e07eabcd33",
                "title": "Doesn't panic",
                "isCorrect": false
              },
              {
                "id": "58cf4edb-529e-409e-8447-8ce4474941d2",
                "title": "Lets you set a custom panic message",
                "isCorrect": true
              },
              {
                "id": "9f4eeaf1-d660-49dc-a4f6-9a982c6042a2",
                "title": "Is 2× slower",
                "isCorrect": false
              }
            ],
            "descriptionText": "You provide your own message",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e9fb0fab-ad0e-4ff4-ad21-87c95720558e",
            "title": "How to react differently to io::Error kinds?",
            "answers": [
              {
                "id": "e7a5467a-3f28-468a-a11f-5b4b1145309c",
                "title": "if error == NotFound",
                "isCorrect": false
              },
              {
                "id": "649bc71d-f931-49d2-b53f-39d1ef8eb92a",
                "title": "match error.kind()",
                "isCorrect": true
              },
              {
                "id": "1d5a651c-f41e-41b2-bd76-44e39ea8bb76",
                "title": "error.code()",
                "isCorrect": false
              },
              {
                "id": "8c7d7222-6828-4106-8b3f-fd3b3130804b",
                "title": "You can't",
                "isCorrect": false
              }
            ],
            "descriptionText": "ErrorKind indicates the class of error",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "607ef0f6-f2f9-4c53-9349-9a08d9149be7",
            "title": "What does unwrap_or_else(|e| { ... }) do?",
            "answers": [
              {
                "id": "dfb90e4d-82d8-4623-812c-1c69c881994d",
                "title": "Always uses a default value",
                "isCorrect": false
              },
              {
                "id": "7d3928e2-1620-4c81-afe4-140bab284f6e",
                "title": "Handles Ok",
                "isCorrect": false
              },
              {
                "id": "898d12c2-4c91-4cb9-951b-b95d68bf0c90",
                "title": "Calls the closure only on Err",
                "isCorrect": true
              },
              {
                "id": "68edcee9-56c9-486c-a4ca-ccd7ba0543f9",
                "title": "Never called",
                "isCorrect": false
              }
            ],
            "descriptionText": "Lazily creates a value on error",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b57d7b1b-a895-444d-b53b-af066a9f4de6",
            "title": "What is error propagation?",
            "answers": [
              {
                "id": "519ff36a-a5f5-49e6-a390-ee17937b26f4",
                "title": "Logging and continuing",
                "isCorrect": false
              },
              {
                "id": "2d6665de-e335-472a-bed4-3bbb4197c36a",
                "title": "Converting to panic!",
                "isCorrect": false
              },
              {
                "id": "b477dd26-e3c8-4f30-afa4-11cadcb4cd66",
                "title": "Returning the error to the caller",
                "isCorrect": true
              },
              {
                "id": "26be524b-19b4-44ce-9037-fb160cf208b7",
                "title": "Retrying",
                "isCorrect": false
              }
            ],
            "descriptionText": "\"Let the caller decide.\"",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1603deff-e3ae-4d5b-8ea3-15d38fd41123",
            "title": "What does the ? operator do?",
            "answers": [
              {
                "id": "f247af4e-c65a-4a88-ba22-525cda14a231",
                "title": "Converts Result to Option",
                "isCorrect": false
              },
              {
                "id": "fbd2509d-b27a-4592-ae30-5ee1cf3581a4",
                "title": "\"If Ok — unwrap; if Err — return from the function\"",
                "isCorrect": true
              },
              {
                "id": "7f372915-bd4d-4368-b51a-8bfa347cf5aa",
                "title": "Catches panics",
                "isCorrect": false
              },
              {
                "id": "941add85-8f82-48df-bf12-eb89ebfed990",
                "title": "Hides the error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Sugar for match on Result",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "eab910cd-99e5-47fe-bd97-f6df8373e25e",
            "title": "Where can you use ?",
            "answers": [
              {
                "id": "ae0d9d0b-4be7-4d8c-881f-eeacfde2c8c5",
                "title": "In any function",
                "isCorrect": false
              },
              {
                "id": "8212a422-3345-4427-aee9-59920e8ec607",
                "title": "Only in main",
                "isCorrect": false
              },
              {
                "id": "e181b06c-2750-476e-b36d-6c7112514ddf",
                "title": "In functions whose return type is compatible (Result, Option, …)",
                "isCorrect": true
              },
              {
                "id": "52ffb65d-86a1-4b66-9240-9a8d8c4ce59b",
                "title": "Only in async",
                "isCorrect": false
              }
            ],
            "descriptionText": "Early return must match the function's return type",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cebb0d5a-8df0-4599-9a8c-88ba83f4cec1",
            "title": "What does ? do on Option<T>?",
            "answers": [
              {
                "id": "116d91b8-b1cc-485c-a76d-9422e83ed1bb",
                "title": "Converts to Result",
                "isCorrect": false
              },
              {
                "id": "fe51d620-14e8-4010-aece-262505ca177e",
                "title": "Returns None on None, otherwise unwraps Some",
                "isCorrect": true
              },
              {
                "id": "83ee6aa8-c99a-4432-b0f4-6748c0cf83ed",
                "title": "Panics on None",
                "isCorrect": false
              },
              {
                "id": "4d251dd2-f33b-496e-8e62-2a4f30a4cc86",
                "title": "Ignores None",
                "isCorrect": false
              }
            ],
            "descriptionText": "Same idea as Result, but for Option",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0257803c-5776-4fd8-9387-32821b0b9ba9",
            "title": "Can you use ? on a Result inside a function returning Option?",
            "answers": [
              {
                "id": "273ad5b3-af37-4e30-8ec8-4f9361583c70",
                "title": "Yes, automatically",
                "isCorrect": false
              },
              {
                "id": "50d2d456-bef6-4d8f-a034-d4420e818899",
                "title": "No, you need explicit conversion (ok, ok_or)",
                "isCorrect": true
              },
              {
                "id": "be55f692-ed82-4ada-a61e-92064064c7e3",
                "title": "Yes, only on nightly",
                "isCorrect": false
              },
              {
                "id": "f3b18a2e-bb79-4b3f-81e6-6035bb152004",
                "title": "Yes, if From is implemented",
                "isCorrect": false
              }
            ],
            "descriptionText": "Types are incompatible without conversion",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "73e403f6-8003-4dac-92e8-1fab840adfa3",
            "title": "What does From do in the context of ?",
            "answers": [
              {
                "id": "11e49b35-0d34-4393-aed9-27ce4a02a485",
                "title": "Writes to logs",
                "isCorrect": false
              },
              {
                "id": "e65691ee-c795-46c6-b996-527eb2369670",
                "title": "Converts Ok into Err",
                "isCorrect": false
              },
              {
                "id": "a7315b32-eaea-4007-aa13-f50a9f3d6bdc",
                "title": "Converts the error type into the function's error type",
                "isCorrect": true
              },
              {
                "id": "810ac616-748a-4301-9d44-dd03b78c2f1e",
                "title": "Suppresses the error",
                "isCorrect": false
              }
            ],
            "descriptionText": "? uses From::from(err) to coerce errors",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7c955e10-fa62-41db-bbe7-b11dce1fc106",
            "title": "Can you use ? in main?",
            "answers": [
              {
                "id": "a8200e3d-78ba-4747-8cc6-eb4edebffc13",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "436805ae-5301-4b5a-ada6-57e9c892c4c6",
                "title": "Yes, if main returns Result<(), E>",
                "isCorrect": true
              },
              {
                "id": "6df941c3-8c4e-4e5b-9fbc-189acb996797",
                "title": "Only with Box<dyn Error>",
                "isCorrect": false
              },
              {
                "id": "d814c699-4224-425b-acc6-89d54957ff99",
                "title": "Only with io::Result<()>",
                "isCorrect": false
              }
            ],
            "descriptionText": "main can return Result, then ? is allowed",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3c7e0553-af64-4619-8615-7218553295ed",
            "title": "What does Box<dyn Error> mean in main() -> Result<(), Box<dyn Error>>?",
            "answers": [
              {
                "id": "4030dad9-a196-479c-bfde-a662feb6b9ae",
                "title": "Forbids ?",
                "isCorrect": false
              },
              {
                "id": "bdc69f48-faeb-493c-b2ee-80275f44132d",
                "title": "Allows \"any\" error type",
                "isCorrect": true
              },
              {
                "id": "de0985c3-c261-40d0-bfab-7ca3c3475e8d",
                "title": "Hides the stack",
                "isCorrect": false
              },
              {
                "id": "2a3f7dfa-79cf-47b4-8e0f-b20ca8ef79f0",
                "title": "Panics on any error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Trait object for \"any Error\"",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8bfbb01f-1a74-4ab5-9132-5c7809f23536",
            "title": "Which is preferable in production: unwrap or expect?",
            "answers": [
              {
                "id": "a671f060-3f0b-46ce-b7e5-bb18b17bac9b",
                "title": "unwrap",
                "isCorrect": false
              },
              {
                "id": "700c7a68-9e53-449d-a6ec-29367fe3fbdf",
                "title": "expect with a clear message",
                "isCorrect": true
              },
              {
                "id": "ad5766f2-d7bd-4127-983a-2d367d07aa03",
                "title": "Neither",
                "isCorrect": false
              },
              {
                "id": "b7a67122-1901-4c56-bc91-4c64da6730ac",
                "title": "No difference",
                "isCorrect": false
              }
            ],
            "descriptionText": "Gives context on failure",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5f60f607-d159-449b-b065-9be598c771ed",
            "title": "When is panicking appropriate?",
            "answers": [
              {
                "id": "2bf57ce0-6f66-4896-8220-901ec694d9bf",
                "title": "Always for any error",
                "isCorrect": false
              },
              {
                "id": "804340a8-dbe4-4ea0-b7ef-608b03d8a967",
                "title": "In examples/prototypes/tests; on invariant violations; in unsafe states",
                "isCorrect": true
              },
              {
                "id": "5b8d9e2a-005a-4f5b-96d7-e6bd96c7e3e9",
                "title": "Never",
                "isCorrect": false
              },
              {
                "id": "7f9ade7b-fe3f-423c-a58a-638d7e12293b",
                "title": "Only in release",
                "isCorrect": false
              }
            ],
            "descriptionText": "Panic is for truly \"impossible/dangerous\" situations",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "928dc6d9-c16f-4377-a976-9797df1dff58",
            "title": "What is a \"bad state\"?",
            "answers": [
              {
                "id": "e4d26420-4c0b-407b-bb0b-4f7e4c156b6b",
                "title": "Any input error",
                "isCorrect": false
              },
              {
                "id": "2a0ca7b4-55de-44d4-a1ec-1ead1be04b75",
                "title": "Contract/invariant violation; dangerous/inconsistent values",
                "isCorrect": true
              },
              {
                "id": "d259f22b-7086-464e-ad79-13153f7fc406",
                "title": "A zero value",
                "isCorrect": false
              },
              {
                "id": "a6b498ec-8279-45da-b7b9-f58226e630fc",
                "title": "An empty file",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unsafe to continue afterwards",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e038a259-2e79-4d14-b28f-a7e1ddd54b65",
            "title": "For expected failures (e.g., API rate limit), what's better?",
            "answers": [
              {
                "id": "d5ebd290-3581-4f70-b1c2-cca01860d9ba",
                "title": "panic!",
                "isCorrect": false
              },
              {
                "id": "8963be7e-1038-4cba-8f68-e2c48e9e4075",
                "title": "Return Result",
                "isCorrect": true
              },
              {
                "id": "75f97895-ac07-46f2-bd23-692b464991be",
                "title": "Ignore it",
                "isCorrect": false
              },
              {
                "id": "73eb6f09-abb2-4a24-b36e-6a9a5a87d44e",
                "title": "unwrap()",
                "isCorrect": false
              }
            ],
            "descriptionText": "Let the caller choose a recovery strategy",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "55a64a77-5b17-4913-a616-bbda4c7d4e55",
            "title": "How to \"bake in\" value validation into types?",
            "answers": [
              {
                "id": "db99186f-f583-4e2b-90e8-d23b9279a503",
                "title": "Check with if in every function",
                "isCorrect": false
              },
              {
                "id": "06b8c9b1-d74e-4ac4-8599-0afde0eee573",
                "title": "Create a new type and validate in its constructor",
                "isCorrect": true
              },
              {
                "id": "7faf32a4-2cf6-4e7a-b515-227cf7babb67",
                "title": "Use a global variable",
                "isCorrect": false
              },
              {
                "id": "47330d88-5ce3-41b0-adbc-9c5735e99efc",
                "title": "Rely on comments",
                "isCorrect": false
              }
            ],
            "descriptionText": "Encapsulation enforces correctness at the type level",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ab3ce3dd-7587-48ae-9c4f-7dc41cc4b989",
            "title": "Why make fields of a validating type private?",
            "answers": [
              {
                "id": "4f1baf48-9b31-4d1d-a1c2-85cd4917825e",
                "title": "For speed",
                "isCorrect": false
              },
              {
                "id": "0e1d0e05-ac2e-485d-a578-d7bdf9a4dcff",
                "title": "To prevent bypassing constructor checks",
                "isCorrect": true
              },
              {
                "id": "2ddc0d1a-a93b-4b1d-95b0-2831abb27982",
                "title": "To make it compile",
                "isCorrect": false
              },
              {
                "id": "f9cb0c99-5482-4a6e-a366-311ee6aa4a9f",
                "title": "For automatic Debug",
                "isCorrect": false
              }
            ],
            "descriptionText": "Otherwise invalid values could be assigned directly",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dbfa9a14-591a-4298-85e1-49878a4ecc7d",
            "title": "What does fs::read_to_string(path) return?",
            "answers": [
              {
                "id": "c89fd503-39f9-4058-96c8-458903491058",
                "title": "String or panic",
                "isCorrect": false
              },
              {
                "id": "8ccacfb3-6e97-4e03-a76d-98f484e03030",
                "title": "Result<String, io::Error>",
                "isCorrect": true
              },
              {
                "id": "7169fd2d-4ed3-42b3-812c-beaeb96751a1",
                "title": "&str",
                "isCorrect": false
              },
              {
                "id": "dfe46ce2-41a3-4c04-9103-86268a3ae988",
                "title": "Option<String>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Convenience function with its own error type",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "120cdc40-1e3a-44d9-afd2-038cd6bb7af5",
            "title": "How does match on Result compare to ?",
            "answers": [
              {
                "id": "81a5b4d8-85cf-4023-91fa-3377e81c681a",
                "title": "match is shorter",
                "isCorrect": false
              },
              {
                "id": "a57398af-4ee2-498c-bd21-2a6f05120828",
                "title": "? is shorter and does the same (unwrap Ok, return Err)",
                "isCorrect": true
              },
              {
                "id": "70cbd12f-12c5-459c-b9d4-433cdecff745",
                "title": "? is slower",
                "isCorrect": false
              },
              {
                "id": "df8d54f3-f03e-4de7-9a44-faec529a8add",
                "title": "match can't be used",
                "isCorrect": false
              }
            ],
            "descriptionText": "? is syntactic sugar",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a6c756f9-c233-4a2d-bfd2-beb9c398458c",
            "title": "What happens with v[99] if v is shorter?",
            "answers": [
              {
                "id": "41804d17-ff25-4648-89dd-ba021d0e601c",
                "title": "Returns None",
                "isCorrect": false
              },
              {
                "id": "7df21d96-f08c-4ab1-ad52-869f722ef5da",
                "title": "Panics due to out-of-bounds",
                "isCorrect": true
              },
              {
                "id": "b479b6b8-189d-4b52-b310-2a29bb9ae4f0",
                "title": "Returns Err",
                "isCorrect": false
              },
              {
                "id": "04f83f73-216e-4837-984b-7dd546de8e1b",
                "title": "Nothing",
                "isCorrect": false
              }
            ],
            "descriptionText": "Bounds-checked indexing → panic",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fd6dd541-bda2-4109-a7c9-39e3b4adb202",
            "title": "What does a vector's get method return?",
            "answers": [
              {
                "id": "fd8267cd-e8e4-4c75-b33b-a00537216b15",
                "title": "Result<&T, OutOfBounds>",
                "isCorrect": false
              },
              {
                "id": "cd248ee8-0635-4f4c-8b56-ada9f4285607",
                "title": "Option<&T>",
                "isCorrect": true
              },
              {
                "id": "ef766e95-dc38-4dce-a58e-f2386d2645a2",
                "title": "&T",
                "isCorrect": false
              },
              {
                "id": "a1ebed45-5830-4aad-84e9-d14634dc5072",
                "title": "Option<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Safe access without panic",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "94931e12-4c8c-4996-9577-12e123e08b0f",
            "title": "Shorter way to \"open a file and read it into a string\" using ?",
            "answers": [
              {
                "id": "529b4d7a-0342-4448-b597-a038fdaa5053",
                "title": "File::open()?.read_to_string()? (with a buffer)",
                "isCorrect": false
              },
              {
                "id": "21aaf53b-1582-4f0c-89e5-156ff396864e",
                "title": "fs::read_to_string(\"hello.txt\")",
                "isCorrect": true
              },
              {
                "id": "3a5b3047-1a3e-4180-8d95-e64ac3b2f787",
                "title": "include_str!()",
                "isCorrect": false
              },
              {
                "id": "b6c0db20-7417-4433-ba14-4c382f7303b6",
                "title": "std::read_all()",
                "isCorrect": false
              }
            ],
            "descriptionText": "There's a ready-made std function",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "278c5b0a-4ff1-4d82-a5d5-521d9e231290",
            "title": "What does \"unwinding\" mean during a panic?",
            "answers": [
              {
                "id": "499a22b1-a5eb-4094-b280-d35a4f38b4cf",
                "title": "The GC cleans the heap",
                "isCorrect": false
              },
              {
                "id": "5ce01b36-d161-4396-90f0-51a3b8f8fecb",
                "title": "The stack is unwound and destructors (drop) are called",
                "isCorrect": true
              },
              {
                "id": "95c55c7d-5a9c-48e8-afba-70290c351888",
                "title": "Threads migrate",
                "isCorrect": false
              },
              {
                "id": "77d0f4c2-ed64-4c16-a615-596650d67522",
                "title": "Nothing",
                "isCorrect": false
              }
            ],
            "descriptionText": "Proper cleanup unless abort is chosen",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2e1568a9-7ca5-4cf2-ab8d-bb188e7cc598",
            "title": "Why choose panic = 'abort' sometimes?",
            "answers": [
              {
                "id": "f72f0c79-b694-492f-9ffd-5136d70c3c09",
                "title": "Smaller binary/simpler behavior in production",
                "isCorrect": true
              },
              {
                "id": "2ee7440d-525b-412a-8383-3ecbb7cb48de",
                "title": "To catch errors",
                "isCorrect": false
              },
              {
                "id": "59d9a8b3-3607-4e80-91bb-4e491989b79d",
                "title": "For debugging",
                "isCorrect": false
              },
              {
                "id": "088f9d1c-c52c-4c66-af5c-3677690b0b73",
                "title": "For faster compilation",
                "isCorrect": false
              }
            ],
            "descriptionText": "No unwinding code → smaller size",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "38e7c76f-2f7c-42fb-9694-dc03fccd18a7",
            "title": "What happens if you use ? in a function returning ()?",
            "answers": [
              {
                "id": "899131b1-baba-4687-8d90-fd54ce82ca54",
                "title": "It compiles",
                "isCorrect": false
              },
              {
                "id": "e74a86e2-fe60-441f-8095-15c71aa55b64",
                "title": "It doesn't compile — return type mismatch",
                "isCorrect": true
              },
              {
                "id": "8b52d878-fd90-4acb-8b4a-c86015708ef8",
                "title": "Automatically wraps in Result",
                "isCorrect": false
              },
              {
                "id": "9664bfe4-fe36-4b4e-95df-cb219d631987",
                "title": "Converts to a panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "? returns early with Err(...); the function must return a compatible type",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "af064275-0ac5-467e-9916-27695abd38c3",
            "title": "Which code is valid with ? in main?",
            "answers": [
              {
                "id": "7e240ada-7ea9-423c-bc0f-a52c53f3f678",
                "title": "fn main() { File::open(\"x\")?; }",
                "isCorrect": false
              },
              {
                "id": "5e72353d-1c73-4e75-a0ca-9f309a546b7c",
                "title": "fn main() -> Result<(), Box<dyn std::error::Error>> { File::open(\"x\")?; Ok(()) }",
                "isCorrect": true
              },
              {
                "id": "c6c71d16-db2f-4c09-b3ef-9b4c6c011abe",
                "title": "fn main() -> Option<()> { File::open(\"x\")?; Some(()) }",
                "isCorrect": false
              },
              {
                "id": "20563834-82df-4174-9293-d30e920fcc88",
                "title": "None",
                "isCorrect": false
              }
            ],
            "descriptionText": "main must return Result for ? on Result to be valid",
            "descriptionLink": "error_handling_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "0f8feb1b-8c6a-4c6f-85dd-89b7b9565f94",
        "theme": "Generic Types, Traits, and Lifetimes",
        "priority": 8,
        "questions": [
          {
            "id": "395322e2-09e2-4b43-847c-2cefd933de9f",
            "title": "What are generics used for in Rust?",
            "answers": [
              {
                "id": "abb7f334-3dbc-4f73-a59b-b7e303da4f69",
                "title": "To reduce binary size",
                "isCorrect": false
              },
              {
                "id": "89d7349f-c0ed-4858-84b9-5bb087a896c5",
                "title": "To avoid code duplication",
                "isCorrect": true
              },
              {
                "id": "a2ffe04a-b537-47b2-8628-66f3e624bf6d",
                "title": "To speed up compilation",
                "isCorrect": false
              },
              {
                "id": "e16393ee-a6cf-4ccd-8fb6-a8bc32d8b76e",
                "title": "To replace macros",
                "isCorrect": false
              }
            ],
            "descriptionText": "Generics allow writing abstract code for different types without copying logic",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3a21d866-8475-478b-99df-1858e3d01111",
            "title": "How is a type parameter denoted in Rust?",
            "answers": [
              {
                "id": "d6fc9c1a-c9de-4aeb-9d42-8947e1ac9a2b",
                "title": "[T]",
                "isCorrect": false
              },
              {
                "id": "0a756e6a-4c2e-4e58-a4a5-c4791b9228eb",
                "title": "{T}",
                "isCorrect": false
              },
              {
                "id": "3ef331be-71c5-46d4-96e2-c40bd0ed3272",
                "title": "<T>",
                "isCorrect": true
              },
              {
                "id": "cce4b349-3a63-4778-83e7-b787bf35899c",
                "title": "(T)",
                "isCorrect": false
              }
            ],
            "descriptionText": "Generics are written in angle brackets <T>",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e6580e3f-4367-4e9f-a12e-3855f0dc4735",
            "title": "What does a function signature with generics look like?",
            "answers": [
              {
                "id": "ca14862e-377b-4e19-9c7a-4d9d381d3b22",
                "title": "fn foo(T: i32) -> T",
                "isCorrect": false
              },
              {
                "id": "77bbbd53-82da-4a45-bec6-69a67781865e",
                "title": "fn foo<T>(x: T) -> T",
                "isCorrect": true
              },
              {
                "id": "097e5558-1cc6-4928-bf24-36b91c842f73",
                "title": "fn foo(x: generic T)",
                "isCorrect": false
              },
              {
                "id": "c6bcfb73-97a6-45a4-91d6-8655b766306c",
                "title": "fn foo<T: T>(x: T)",
                "isCorrect": false
              }
            ],
            "descriptionText": "Generics are declared after the function name in <T>",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "44ea655e-e509-4c7d-a7ea-e20a3d159905",
            "title": "What happens if you use the > operator in a generic function without constraints?",
            "answers": [
              {
                "id": "c13e5129-1011-48f9-94ac-03e08c98356d",
                "title": "Always works",
                "isCorrect": false
              },
              {
                "id": "5b407b2b-96ae-4e32-96cf-b8d2f2f60142",
                "title": "Compilation error",
                "isCorrect": true
              },
              {
                "id": "9b10bb82-5e55-4996-869f-dc32a8c1c054",
                "title": "PartialOrd is automatically applied",
                "isCorrect": false
              },
              {
                "id": "1b4390b1-2408-47e2-baab-11824643e677",
                "title": "Runtime panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "The > comparison requires the PartialOrd trait",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "884a17ae-aa81-47f8-b919-65f175123807",
            "title": "How do you constrain a generic type in Rust?",
            "answers": [
              {
                "id": "9ac3da50-dbd5-492e-b49d-26317985a977",
                "title": "T",
                "isCorrect": false
              },
              {
                "id": "da0ea222-eb86-47aa-b5d1-46d63314be50",
                "title": "where T: PartialOrd",
                "isCorrect": true
              },
              {
                "id": "6bac98e6-a95e-4717-bf02-d92409b7f3d5",
                "title": "bound T = PartialOrd",
                "isCorrect": false
              },
              {
                "id": "4f3489ea-e1ad-47d7-bb70-20e762d1e0a2",
                "title": "impl PartialOrd for T",
                "isCorrect": false
              }
            ],
            "descriptionText": "Constraints (bounds) are written as T: Trait",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cc83d204-36c2-4442-a4e2-2382a73e099f",
            "title": "What is a trait in Rust?",
            "answers": [
              {
                "id": "ad0be31b-d6fc-4ccd-9298-a034450181f5",
                "title": "A data type",
                "isCorrect": false
              },
              {
                "id": "3da72ba2-ae5f-4343-be9b-ace51923fe63",
                "title": "An interface",
                "isCorrect": true
              },
              {
                "id": "eb6dbf3f-2904-49bc-b3fd-9dfa1a220de7",
                "title": "A macro",
                "isCorrect": false
              },
              {
                "id": "60c7f456-b234-4ee7-b613-3f247c769dff",
                "title": "An attribute",
                "isCorrect": false
              }
            ],
            "descriptionText": "Trait describes common behavior, like interfaces in other languages",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "221250f4-300d-4a3b-99e0-e8e4c97f9920",
            "title": "How do you declare a trait?",
            "answers": [
              {
                "id": "be30b24a-f06c-4c9a-8a34-a46127d76e2a",
                "title": "interface Summary { … }",
                "isCorrect": false
              },
              {
                "id": "258cc185-4ced-4e3a-8d59-86704712ff08",
                "title": "trait Summary { … }",
                "isCorrect": true
              },
              {
                "id": "8e204c2c-185b-4b49-adfd-6b36eadc2097",
                "title": "class Summary { … }",
                "isCorrect": false
              },
              {
                "id": "652201eb-9b1a-4138-9325-f3e4c5d6497a",
                "title": "impl Summary { … }",
                "isCorrect": false
              }
            ],
            "descriptionText": "The trait keyword is used",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "46faca44-a8db-4c6d-b664-e038f970064e",
            "title": "How do you implement a trait for a struct?",
            "answers": [
              {
                "id": "1c15e966-6ebf-4e8c-9ca5-44085c9d02e7",
                "title": "impl Struct: Trait { … }",
                "isCorrect": false
              },
              {
                "id": "d516f867-f65d-4562-bce9-169678a3bcb3",
                "title": "impl Trait for Struct { … }",
                "isCorrect": true
              },
              {
                "id": "460451ed-49c8-484f-b3c6-49248b92e3c8",
                "title": "trait Struct impl { … }",
                "isCorrect": false
              },
              {
                "id": "f2086db3-1681-49a0-bb4f-a34968b5b7c1",
                "title": "class Struct : Trait { … }",
                "isCorrect": false
              }
            ],
            "descriptionText": "Syntax is: impl Trait for Type",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d5821414-abff-4be2-8af0-f76fb7cce4c7",
            "title": "Can you implement an external trait for an external type?",
            "answers": [
              {
                "id": "0b8a8db8-2510-4b29-8f55-5e9ea6638d5a",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "28d7d504-26e3-48bd-b904-ca1585898a9e",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "5fd10a11-e9c1-4980-b73d-72fce643a9dc",
                "title": "Only with #[allow(external)] attribute",
                "isCorrect": false
              },
              {
                "id": "f3825cd6-29ff-44a9-994c-3d94a3ee4e18",
                "title": "Only in main",
                "isCorrect": false
              }
            ],
            "descriptionText": "Prohibited by the orphan rule",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "618b0d86-881e-436d-8a61-7f4e90644ada",
            "title": "What is the orphan rule?",
            "answers": [
              {
                "id": "459717f6-8bff-4368-83a6-b45e0f03e8e1",
                "title": "Traits cannot be inherited",
                "isCorrect": false
              },
              {
                "id": "c8bf0678-97c0-4ae7-94bb-c241c83a0ee0",
                "title": "Cannot implement an external trait for an external type",
                "isCorrect": true
              },
              {
                "id": "772cfe56-02cb-431c-89b3-42148a6a9963",
                "title": "Prohibits using static",
                "isCorrect": false
              },
              {
                "id": "d7430512-efea-4233-922a-a1517d90b37d",
                "title": "Requires private fields",
                "isCorrect": false
              }
            ],
            "descriptionText": "Protects against implementation conflicts",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ed126b74-0b96-4484-ba7d-19bae3c46936",
            "title": "How do you define a default method in a trait?",
            "answers": [
              {
                "id": "a7565566-e581-4be0-8cbe-7dfab08ec5b9",
                "title": "fn foo();",
                "isCorrect": false
              },
              {
                "id": "c980a82a-f47f-4f32-be0d-ab68f6d7bf44",
                "title": "fn foo() { … }",
                "isCorrect": true
              },
              {
                "id": "97d74817-9302-4d85-9336-d268a18a8ea5",
                "title": "default fn foo();",
                "isCorrect": false
              },
              {
                "id": "4930b1a7-3b95-461a-bfb3-5393087e4b17",
                "title": "impl fn foo()",
                "isCorrect": false
              }
            ],
            "descriptionText": "Implementation in the trait serves as the default",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "709958cf-8311-4fff-b699-b46cc3d28713",
            "title": "Can you override a default method?",
            "answers": [
              {
                "id": "eb7dec33-5ca6-4bda-b780-740edc00b4d2",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "73409756-fa90-4786-bd24-dce7c9fc9ad9",
                "title": "Yes",
                "isCorrect": true
              },
              {
                "id": "b1daf646-622c-44f0-9a66-ab1822832019",
                "title": "Only with #[override]",
                "isCorrect": false
              },
              {
                "id": "2f0c24fd-9bc3-42d5-820f-3b83fe02c814",
                "title": "Only for generics",
                "isCorrect": false
              }
            ],
            "descriptionText": "In impl you can override a method with any implementation",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dd73f982-1f08-4165-9cea-d03da04e0443",
            "title": "How do you use a trait as a function parameter?",
            "answers": [
              {
                "id": "e409fb34-ff91-4568-9ea5-a4cf14215dd3",
                "title": "fn foo<T>(x: T) where T: Summary",
                "isCorrect": false
              },
              {
                "id": "35ba5e23-02a2-46e8-b3d0-edfca3392ab3",
                "title": "fn foo(x: impl Summary)",
                "isCorrect": true
              },
              {
                "id": "1e3beb85-6685-400c-ac12-5367db12bc72",
                "title": "fn foo(x: dyn Summary)",
                "isCorrect": false
              },
              {
                "id": "403228cb-fc0f-4455-9459-7946a17ce8b3",
                "title": "fn foo<T: impl Summary>(x: T)",
                "isCorrect": false
              }
            ],
            "descriptionText": "impl Trait is the short syntax",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "328839de-7ef6-4bb2-a4ec-0e4edd5784ed",
            "title": "What's the difference between impl Trait and trait bound?",
            "answers": [
              {
                "id": "21324f62-5909-446e-aa77-998912d417c8",
                "title": "They are different things",
                "isCorrect": false
              },
              {
                "id": "16c948a9-b84a-4066-9465-93f442dc1ae5",
                "title": "impl Trait is syntactic sugar for trait bound",
                "isCorrect": true
              },
              {
                "id": "9e3adc41-1a71-4fec-9b34-04dd367b9f0b",
                "title": "impl Trait works faster",
                "isCorrect": false
              },
              {
                "id": "b63a418d-1037-4739-8b3f-bbba7ef694ff",
                "title": "trait bound is forbidden",
                "isCorrect": false
              }
            ],
            "descriptionText": "Both express the same thing",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "205dd25c-aca7-4cbc-9eee-b5258478b409",
            "title": "How do you combine multiple trait bounds?",
            "answers": [
              {
                "id": "8ec0341b-883a-44ce-846a-f50464294a2a",
                "title": "T: Trait1, Trait2",
                "isCorrect": false
              },
              {
                "id": "6da66d0f-9807-4215-96d7-b6fd569fae0b",
                "title": "T: Trait1 + Trait2",
                "isCorrect": true
              },
              {
                "id": "838eea14-2a7f-47a5-ab3b-655607057fa6",
                "title": "T: [Trait1, Trait2]",
                "isCorrect": false
              },
              {
                "id": "9f21e6ea-78ce-4394-9b92-8b5ca1d9d9cd",
                "title": "T: Trait1 & Trait2",
                "isCorrect": false
              }
            ],
            "descriptionText": "Multiple traits are specified with +",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1e04d0a1-f31d-47c4-aced-4e9103b51e8e",
            "title": "Where is it more convenient to write complex bounds?",
            "answers": [
              {
                "id": "492c8318-87d9-40e5-b1d4-6aeeb157232b",
                "title": "In the signature",
                "isCorrect": false
              },
              {
                "id": "0ce2cf22-937e-4220-89ae-e8bbee221af5",
                "title": "In where",
                "isCorrect": true
              },
              {
                "id": "be24fa1a-67a8-4b93-868c-cd62bd587c78",
                "title": "In impl only",
                "isCorrect": false
              },
              {
                "id": "0b5e1853-61df-4446-a78a-25bf1055a162",
                "title": "In comments",
                "isCorrect": false
              }
            ],
            "descriptionText": "where makes the signature more readable",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "79efa1a1-6790-4867-82f4-ab6aafeba898",
            "title": "How do you return a type that implements a trait?",
            "answers": [
              {
                "id": "310d8d23-1455-4164-a151-b68cc4c79f3f",
                "title": "fn foo() -> impl Trait",
                "isCorrect": true
              },
              {
                "id": "b33bd433-3c94-4750-8014-c87b3739623d",
                "title": "fn foo() -> Trait",
                "isCorrect": false
              },
              {
                "id": "21095bf4-1b2a-4c90-aba3-8a7843fd35b3",
                "title": "fn foo<T: Trait>() -> T",
                "isCorrect": false
              },
              {
                "id": "2a796422-56d6-4a85-b5b9-9c4936ede494",
                "title": "fn foo() -> dyn Trait",
                "isCorrect": false
              }
            ],
            "descriptionText": "impl Trait in return position",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "146319d0-cd2b-480f-8299-ec352a65b172",
            "title": "Can you return different types through impl Trait?",
            "answers": [
              {
                "id": "31c95fb4-5d3f-47dd-8f57-c98dea0e956e",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "5806b9cc-4097-48bf-9c6d-5c750d0e6c2e",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "c3204602-226b-4ffe-925d-c95b76a389ef",
                "title": "Only with #[dynamic]",
                "isCorrect": false
              },
              {
                "id": "33192e82-bfb7-4725-806f-aaf7aa1af748",
                "title": "Only with unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Only one concrete type is allowed",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "59167a42-4d34-42d9-b86e-00cdadf0a619",
            "title": "What is a blanket implementation?",
            "answers": [
              {
                "id": "2d74000d-db0f-4649-aeb7-6a153dd25e97",
                "title": "Implementing a trait for all types with a constraint",
                "isCorrect": true
              },
              {
                "id": "7978a485-801f-4a8e-90fd-f9940a61231b",
                "title": "Automatic code generation",
                "isCorrect": false
              },
              {
                "id": "7b05b590-bf80-44c2-9a88-bda7442f7578",
                "title": "A macro in std",
                "isCorrect": false
              },
              {
                "id": "a97d375d-76d1-4ba7-bd07-cdd15712ca59",
                "title": "Duplication prohibition",
                "isCorrect": false
              }
            ],
            "descriptionText": "Example: impl<T: Display> ToString for T",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b6620fb8-0db9-407e-9ff1-2582fb31489a",
            "title": "What does monomorphization do?",
            "answers": [
              {
                "id": "fefd017c-edb2-4291-866b-80b4efa31cfd",
                "title": "Generates code for each type",
                "isCorrect": true
              },
              {
                "id": "79c57e47-eafb-4eba-9070-4581b52a02ca",
                "title": "Removes generics",
                "isCorrect": false
              },
              {
                "id": "69c18ec8-685e-42b3-9c65-422c7442b1e2",
                "title": "Optimizes code at runtime",
                "isCorrect": false
              },
              {
                "id": "75bad764-18de-43b0-aef3-774adb41c902",
                "title": "Turns into trait object",
                "isCorrect": false
              }
            ],
            "descriptionText": "Generics are turned into concrete types at compile-time",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "00992b44-2b50-4501-af63-712e9e79d4ec",
            "title": "Is there runtime overhead with generics?",
            "answers": [
              {
                "id": "a0c7afd8-8e1e-467a-bcdc-95724f55742c",
                "title": "Yes, due to virtual calls",
                "isCorrect": false
              },
              {
                "id": "6270f354-13d0-48ab-ac1f-aad552cd5abf",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "5cb84ba9-210a-4139-a055-73c84e0cf751",
                "title": "Sometimes",
                "isCorrect": false
              },
              {
                "id": "3c31b880-7fd4-4bf4-ac1a-d342ba9f681e",
                "title": "Only in debug",
                "isCorrect": false
              }
            ],
            "descriptionText": "Thanks to monomorphization there's no overhead",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "63c207e9-2ae4-49dc-9478-b08221725a47",
            "title": "What is a lifetime?",
            "answers": [
              {
                "id": "fe89d094-4f15-425d-b0f0-c585e1e7227d",
                "title": "Variable lifetime",
                "isCorrect": false
              },
              {
                "id": "aa871b14-9157-4e01-8ad3-a71dfd14994c",
                "title": "Reference validity duration",
                "isCorrect": true
              },
              {
                "id": "b2c66af3-d914-449e-b506-0eea9068f28f",
                "title": "Variable type",
                "isCorrect": false
              },
              {
                "id": "c970391e-1c02-4cfc-a4bc-c0cf963811e8",
                "title": "Program execution time",
                "isCorrect": false
              }
            ],
            "descriptionText": "Lifetimes describe how long a reference lives",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8b3eb173-3be7-433f-8ef2-ae93c79d84a9",
            "title": "What are lifetime annotations for?",
            "answers": [
              {
                "id": "2514c0c3-d1ac-4c5f-8312-d0198070f6d5",
                "title": "Speed up compilation",
                "isCorrect": false
              },
              {
                "id": "aac00e3c-aee6-4222-b29a-d2ba57cdbd1c",
                "title": "Help the borrow checker understand relationships between references",
                "isCorrect": true
              },
              {
                "id": "0c6cd861-ee37-4ca7-917a-4dad8c97a88d",
                "title": "Increase object lifetimes",
                "isCorrect": false
              },
              {
                "id": "00cd790e-c987-4ce4-9771-a22dd5054695",
                "title": "Give access to static",
                "isCorrect": false
              }
            ],
            "descriptionText": "Lifetimes connect references and are checked at compile-time",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "54a8fb34-ebac-4e54-8933-349817ccdc5c",
            "title": "How are lifetime parameters denoted?",
            "answers": [
              {
                "id": "392e60f2-1b57-4ec0-9911-ea818113bac2",
                "title": "^a",
                "isCorrect": false
              },
              {
                "id": "5fad4bf5-dc44-40d1-98d7-44239f2e7d5b",
                "title": "'a",
                "isCorrect": true
              },
              {
                "id": "1441a0b7-8558-4685-ae01-ef0eeb95298e",
                "title": "&a",
                "isCorrect": false
              },
              {
                "id": "5e734530-0933-4da8-993e-cad03286730c",
                "title": "#a",
                "isCorrect": false
              }
            ],
            "descriptionText": "Lifetimes always start with '",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a535d2e9-a2b6-41ad-ade3-476852e65b19",
            "title": "Where are lifetime annotations written in functions?",
            "answers": [
              {
                "id": "d7048cb3-cb46-403e-8f9c-71d86b71dbc0",
                "title": "Inside the body",
                "isCorrect": false
              },
              {
                "id": "9dc174fc-2116-40cc-9581-0ff9279e5100",
                "title": "In the signature",
                "isCorrect": true
              },
              {
                "id": "8fe4e103-4c6c-46a2-9670-61b998a94d07",
                "title": "Only in impl",
                "isCorrect": false
              },
              {
                "id": "393155fb-717a-48c2-9c13-e382f8be35e3",
                "title": "In comments",
                "isCorrect": false
              }
            ],
            "descriptionText": "Lifetimes are part of the function contract",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "721fdfaa-77cf-4f88-9685-b556faa3f62a",
            "title": "What happens if you return a reference to a local variable?",
            "answers": [
              {
                "id": "bc475b48-f5cb-42bb-885a-6b4f8cde32cf",
                "title": "Always works",
                "isCorrect": false
              },
              {
                "id": "b36070eb-1d21-4217-93fa-334e0769974c",
                "title": "Compilation error",
                "isCorrect": true
              },
              {
                "id": "077fac31-f775-4a44-909a-fb2451d3d601",
                "title": "Panic at runtime",
                "isCorrect": false
              },
              {
                "id": "ece2ca50-5959-4c4a-a0e3-7dd6be080568",
                "title": "Undefined behavior",
                "isCorrect": false
              }
            ],
            "descriptionText": "The compiler prohibits dangling references",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4c8e79ca-dae3-4755-b8e5-f585266b4450",
            "title": "What does the borrow checker do?",
            "answers": [
              {
                "id": "9936d06d-b8ba-49b0-aeae-3d86116eba2a",
                "title": "Checks type sizes",
                "isCorrect": false
              },
              {
                "id": "daedc7bd-9854-46f7-b005-0722c8270b7f",
                "title": "Checks that references live long enough",
                "isCorrect": true
              },
              {
                "id": "7a0e3f59-bd12-4d6d-8488-b6afc8eb08e4",
                "title": "Optimizes the heap",
                "isCorrect": false
              },
              {
                "id": "23461062-0c31-4443-a3b5-a4999d76fe93",
                "title": "Removes duplicates",
                "isCorrect": false
              }
            ],
            "descriptionText": "Guarantees no dangling references",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "247c4154-e056-4717-9034-464440bcef5b",
            "title": "What does the 'static lifetime mean?",
            "answers": [
              {
                "id": "88d09156-d392-4f0a-a4d2-5f228159dde2",
                "title": "Reference lives until the end of the program",
                "isCorrect": true
              },
              {
                "id": "62564500-0199-43bf-b700-a9cf0721e510",
                "title": "Global variable",
                "isCorrect": false
              },
              {
                "id": "0ac5b2b4-f642-472c-8f7c-57e87d05a8ea",
                "title": "Only for const",
                "isCorrect": false
              },
              {
                "id": "19289baf-6e21-43a6-bd37-488e4bcc80f6",
                "title": "Only for String",
                "isCorrect": false
              }
            ],
            "descriptionText": "String literals have 'static",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9885512f-9e04-4bfe-aac4-a12c40e949f4",
            "title": "What is lifetime elision?",
            "answers": [
              {
                "id": "e42ae9ad-0034-4511-adf2-83badfde0dd1",
                "title": "Garbage collector",
                "isCorrect": false
              },
              {
                "id": "93d0d05e-2362-4493-adf6-e851ce6dd848",
                "title": "Rules that allow omitting lifetimes in simple cases",
                "isCorrect": true
              },
              {
                "id": "220ab6e3-ab4b-4213-93d4-271fcdba44df",
                "title": "Turning lifetimes into static",
                "isCorrect": false
              },
              {
                "id": "17b0a890-2913-4d84-baed-c4cb2a1ea492",
                "title": "Panic on mismatch",
                "isCorrect": false
              }
            ],
            "descriptionText": "The compiler applies three rules for lifetime inference",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c3daa693-0747-4fb1-93af-bb85556d51fd",
            "title": "Which function falls under elision rules?",
            "answers": [
              {
                "id": "b3c099b1-0566-4ab9-be58-3fb17f700647",
                "title": "fn foo(x: &str) -> &str",
                "isCorrect": true
              },
              {
                "id": "82212f8a-ef17-4dd9-a537-77280bb8cc10",
                "title": "fn foo(x: &str, y: &str) -> &str",
                "isCorrect": false
              },
              {
                "id": "87d4c385-a714-4439-a0ba-a34f8c2994f0",
                "title": "fn foo(x: &str, y: &str) -> &String",
                "isCorrect": false
              },
              {
                "id": "4c4130b3-fe70-4af1-b036-8b00eaf47fa1",
                "title": "fn foo<'a>(x: &'a str, y: &'a str) -> &'a str",
                "isCorrect": false
              }
            ],
            "descriptionText": "One input value → its lifetime is used as output",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9c71a7e6-95ef-4597-9843-48861f4c4097",
            "title": "Why are lifetimes often not written in methods?",
            "answers": [
              {
                "id": "9f556188-7c32-445d-aa0c-44370582f7c4",
                "title": "'static is automatically substituted",
                "isCorrect": false
              },
              {
                "id": "c804d9de-f0b3-48a4-80f9-e20601797f97",
                "title": "The 3rd elision rule works (with &self)",
                "isCorrect": true
              },
              {
                "id": "40069e7f-ccf1-4309-bcc1-10b22da18830",
                "title": "Because impl hides them",
                "isCorrect": false
              },
              {
                "id": "522f1eb5-9a41-44ef-b2ac-871965696699",
                "title": "The compiler ignores them",
                "isCorrect": false
              }
            ],
            "descriptionText": "If there's &self, the returned reference gets its lifetime",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cfbb5b6b-e060-4306-a2a0-b563f5672ba0",
            "title": "Can you store a reference in a struct?",
            "answers": [
              {
                "id": "1e31efc2-a690-44fb-9ffa-55c4992963f4",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "ad0606b5-86f7-4541-bd1b-f79bd062a171",
                "title": "Yes, with lifetime annotation",
                "isCorrect": true
              },
              {
                "id": "8bbdb28f-dd73-43b4-9ff1-bb12e778705d",
                "title": "Yes, always",
                "isCorrect": false
              },
              {
                "id": "074efed1-7b43-4ffa-86b8-34297ac45a6f",
                "title": "Only in enum",
                "isCorrect": false
              }
            ],
            "descriptionText": "A struct with &T requires 'a",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "eee74126-c51e-40a7-9dfa-314e18852c9b",
            "title": "What happens if a struct lifetime parameter is not specified?",
            "answers": [
              {
                "id": "f00def3d-3d52-41b0-a5f4-2c5928bff9e9",
                "title": "Always works",
                "isCorrect": false
              },
              {
                "id": "c734b981-c3e9-47c2-be06-1ba0c7028ff1",
                "title": "Compilation error",
                "isCorrect": true
              },
              {
                "id": "b8e8a5b0-fb46-46a6-ba25-893c3b8bbec1",
                "title": "Panic",
                "isCorrect": false
              },
              {
                "id": "561e68fe-ffff-4664-8575-e480785f0218",
                "title": "Will be 'static",
                "isCorrect": false
              }
            ],
            "descriptionText": "References always require lifetimes",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a1777122-4bae-45e1-a036-e8137160465b",
            "title": "What unites generics, trait bounds, and lifetimes?",
            "answers": [
              {
                "id": "dc88a7a9-2c64-4e87-8876-c34254123169",
                "title": "All are data types",
                "isCorrect": false
              },
              {
                "id": "986ce60c-024d-428f-ba2f-a97025d46f00",
                "title": "All are compile-time generics",
                "isCorrect": true
              },
              {
                "id": "5660ac39-7684-4a29-bab8-1eba1652b09a",
                "title": "All are runtime abstractions",
                "isCorrect": false
              },
              {
                "id": "93e53ab3-890c-4dba-9fe7-42c6ed1526d2",
                "title": "All are syntactic sugar",
                "isCorrect": false
              }
            ],
            "descriptionText": "They work at compile-time, describing different aspects of genericity",
            "descriptionLink": "generics_traits_lifetimes_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "0a115a15-bc04-4779-a6f0-71b1557d3396",
        "theme": "Writing Automated Tests",
        "priority": 9,
        "questions": [
          {
            "id": "e6d3ea18-27a1-4bab-971d-4865cc55e387",
            "title": "What does the #[test] attribute before a function do?",
            "answers": [
              {
                "id": "511e395b-cfcd-4891-96e8-afd8b1f8c17f",
                "title": "Makes the function public",
                "isCorrect": false
              },
              {
                "id": "47268f8f-eec8-49dc-bad2-5aa6863bc61b",
                "title": "Marks the function as a test",
                "isCorrect": true
              },
              {
                "id": "c19aa5ab-56bf-499e-a83e-f5c08242ac12",
                "title": "Prohibits compilation",
                "isCorrect": false
              },
              {
                "id": "3d5e28d1-96cd-488f-be19-77f69fc02046",
                "title": "Makes the function private",
                "isCorrect": false
              }
            ],
            "descriptionText": "#[test] tells the test runner that this is a test",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "53fde550-6415-4582-9b89-7a74daadbe58",
            "title": "Which command runs tests in a Rust project?",
            "answers": [
              {
                "id": "2e9ac850-7b48-44a7-beb0-8e298244f692",
                "title": "cargo run",
                "isCorrect": false
              },
              {
                "id": "e47d63f4-6ac6-402d-91ee-ffd3ad0a82d6",
                "title": "cargo build",
                "isCorrect": false
              },
              {
                "id": "5549d710-03ac-411f-af6e-7a934a945c82",
                "title": "cargo test",
                "isCorrect": true
              },
              {
                "id": "33b761e3-8d44-471c-bc13-fef135eeacce",
                "title": "rustc test.rs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Tests are run with cargo test, which compiles and executes them",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cf3720d5-5537-4058-884e-21b5eab94c51",
            "title": "What happens if you call panic! in a test?",
            "answers": [
              {
                "id": "5914297d-3171-4e0a-bb17-9ed7d9877163",
                "title": "The test completes successfully",
                "isCorrect": false
              },
              {
                "id": "9b15f767-1d6a-4211-8c7c-7b9ebf1ca08d",
                "title": "The test fails",
                "isCorrect": true
              },
              {
                "id": "132a42f3-73c7-4e08-88fd-f1c5a3743487",
                "title": "The compiler ignores it",
                "isCorrect": false
              },
              {
                "id": "e33de18b-3916-4908-bc56-9c52dc0aff78",
                "title": "Panic is hidden",
                "isCorrect": false
              }
            ],
            "descriptionText": "A test is considered failed if it panics",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7dbe72ec-fffa-4db1-a562-1acf5535c225",
            "title": "What does the assert! macro do?",
            "answers": [
              {
                "id": "c6bbaea5-14ba-4d56-ac34-9426505243d1",
                "title": "Checks equality of two values",
                "isCorrect": false
              },
              {
                "id": "92ca0eb0-e9be-4c9f-a39e-ab34c22fc6e2",
                "title": "Checks a condition for true",
                "isCorrect": true
              },
              {
                "id": "303dda0f-a061-4999-b86b-7bd3c6c5ec6a",
                "title": "Calls drop on a variable",
                "isCorrect": false
              },
              {
                "id": "33202ec9-6799-4da1-b11c-eede482bcfb4",
                "title": "Creates a log in stdout",
                "isCorrect": false
              }
            ],
            "descriptionText": "assert!(cond) checks a boolean condition, on false → panic",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5f4b5303-c1be-4df3-a627-627fc76bded1",
            "title": "How does assert_eq! differ from assert!?",
            "answers": [
              {
                "id": "b9f7b560-5d22-4d18-aa8a-6d997478a7d4",
                "title": "Works faster",
                "isCorrect": false
              },
              {
                "id": "bccb77b4-23a5-4874-9589-5ae4325cfcb4",
                "title": "Shows left/right values on error",
                "isCorrect": true
              },
              {
                "id": "10f6ad5f-3c2f-4cc4-9c8a-19711f7f6467",
                "title": "Uses unsafe",
                "isCorrect": false
              },
              {
                "id": "61d0fa1e-5e33-407b-b021-460d61e9c75d",
                "title": "Only works with numbers",
                "isCorrect": false
              }
            ],
            "descriptionText": "assert_eq! prints both values on mismatch",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "69ad2ed5-cb18-45ca-9aca-5b67ce69d716",
            "title": "What does assert_ne! do?",
            "answers": [
              {
                "id": "de6eebe0-77c3-4c76-9bc6-87453a3f7dbf",
                "title": "Checks for equality",
                "isCorrect": false
              },
              {
                "id": "0a48ca8a-a5a2-4135-9bbb-5b55c21dfd7d",
                "title": "Checks for inequality",
                "isCorrect": true
              },
              {
                "id": "b2fbd6ee-d3ed-4830-b95d-90ba779ab2e1",
                "title": "Checks for Null",
                "isCorrect": false
              },
              {
                "id": "f5b39522-717b-462d-9b76-c7c7ac377344",
                "title": "Checks for Drop",
                "isCorrect": false
              }
            ],
            "descriptionText": "assert_ne! passes if values are different",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "da0ff4a7-cfa2-4a34-ba15-2cee7030bd18",
            "title": "Which traits must types implement to use in assert_eq!?",
            "answers": [
              {
                "id": "2ab7350b-877e-42d8-b163-a2aca4c4fa84",
                "title": "Clone and Copy",
                "isCorrect": false
              },
              {
                "id": "bbb7cf42-e7fe-41c5-a212-f491e7895752",
                "title": "PartialEq and Debug",
                "isCorrect": true
              },
              {
                "id": "f14c4a07-4377-4728-9804-088b172760d9",
                "title": "Sized and Send",
                "isCorrect": false
              },
              {
                "id": "53356540-4ef4-46ad-9d65-078689c6a5c6",
                "title": "Drop and Default",
                "isCorrect": false
              }
            ],
            "descriptionText": "Comparison requires PartialEq, printing requires Debug",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c906067f-eb4b-4abc-b037-5521abc77d95",
            "title": "What does the #[should_panic] attribute do?",
            "answers": [
              {
                "id": "60258878-b47c-4a99-abba-8fbf4fbe0e8f",
                "title": "Prevents test failure",
                "isCorrect": false
              },
              {
                "id": "e7e55c8d-a4ba-43e2-a19e-e2f68e30f5da",
                "title": "Expects the test to panic",
                "isCorrect": true
              },
              {
                "id": "a8635d5e-1edf-48ef-9fdc-61a3fbe3db5c",
                "title": "Sets the test to ignored",
                "isCorrect": false
              },
              {
                "id": "437a76f5-e49c-4869-9762-1135202ad29b",
                "title": "Disables borrow checker",
                "isCorrect": false
              }
            ],
            "descriptionText": "The test passes only if a panic occurred",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e06d432c-7156-498c-8b4f-c28946781c51",
            "title": "What is the expected parameter used for in #[should_panic(expected=\"...\")]?",
            "answers": [
              {
                "id": "02951c90-771f-42e0-b5dc-2f677c9e0892",
                "title": "To specify the panic type",
                "isCorrect": false
              },
              {
                "id": "13099b94-419d-4992-9dfb-5bad2f550e61",
                "title": "To check that panic contains a substring",
                "isCorrect": true
              },
              {
                "id": "504e4b0b-1196-4feb-bc02-b97242664cc8",
                "title": "To specify the return value",
                "isCorrect": false
              },
              {
                "id": "7c559ec7-ab29-4c4b-85fc-1694715240bf",
                "title": "To choose optimization level",
                "isCorrect": false
              }
            ],
            "descriptionText": "Helps verify that panic occurred for the right reason",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c7f0eda7-ce4e-415b-a014-5598883cab26",
            "title": "Can you use #[should_panic] with tests returning Result<T,E>?",
            "answers": [
              {
                "id": "882e5aab-eacc-4d38-82ac-d33b8dd725c7",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "fdbc6c94-755e-4ff6-ad7e-1fc2e8c27028",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "3f6b568d-9a04-4c5d-b754-1eff8cca8831",
                "title": "Only with nightly",
                "isCorrect": false
              },
              {
                "id": "f290dff6-8117-4b67-9819-5452dbf3e508",
                "title": "Only for Err",
                "isCorrect": false
              }
            ],
            "descriptionText": "Tests with Result cannot be combined with #[should_panic]",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "36887af9-2029-48db-9009-b36c88f0c4df",
            "title": "What does writing tests with Result<(), E> allow?",
            "answers": [
              {
                "id": "5d1d86d7-45de-4b89-956e-04f66ec5921a",
                "title": "Using ? inside the test",
                "isCorrect": true
              },
              {
                "id": "4e8a48a9-ed29-41a6-948a-a95639eac56f",
                "title": "Disabling asserts",
                "isCorrect": false
              },
              {
                "id": "90286585-d81b-4c2f-8d46-6b0716927cbf",
                "title": "Turning errors into warnings",
                "isCorrect": false
              },
              {
                "id": "498e4067-31e9-4701-9495-7573beee706c",
                "title": "Skipping the test",
                "isCorrect": false
              }
            ],
            "descriptionText": "? is only available when returning Result",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ed0ef21d-5469-48c0-9ddb-d60f4f4104e0",
            "title": "How are tests run by default in Rust?",
            "answers": [
              {
                "id": "5f711329-e1c5-43b7-9d69-e4159d32bb48",
                "title": "Sequentially",
                "isCorrect": false
              },
              {
                "id": "7103bc55-ee88-4e45-abf6-7df636854641",
                "title": "In parallel",
                "isCorrect": true
              },
              {
                "id": "f1d46029-1fdb-43bb-b1a2-d38e9e732053",
                "title": "Only one",
                "isCorrect": false
              },
              {
                "id": "85959602-3aa9-43a4-bbbb-f400908241fe",
                "title": "Through separate binary for each test",
                "isCorrect": false
              }
            ],
            "descriptionText": "Tests run in threads by default",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "88d5a0df-c811-459d-9f8e-07db1ab0de28",
            "title": "How do you limit the number of threads for tests?",
            "answers": [
              {
                "id": "d6de2a50-67ae-4dda-b5e6-465e5ccc523c",
                "title": "cargo test --limit=N",
                "isCorrect": false
              },
              {
                "id": "12b32b19-d849-4f54-b05f-7614bd20e499",
                "title": "cargo test -- --test-threads=N",
                "isCorrect": true
              },
              {
                "id": "6feabec0-b2fe-411a-b7ba-204f11b0803d",
                "title": "cargo run --threads=N",
                "isCorrect": false
              },
              {
                "id": "3d3ac011-c528-42e4-bed0-3c5de22cc364",
                "title": "export TEST_THREADS=N",
                "isCorrect": false
              }
            ],
            "descriptionText": "The --test-threads flag sets the number",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3442daba-1005-442f-83e5-09d495bbe7d7",
            "title": "Why can't tests sometimes be run in parallel?",
            "answers": [
              {
                "id": "fd8751c0-028d-4084-a61c-ec11ead3e788",
                "title": "Because it's slower",
                "isCorrect": false
              },
              {
                "id": "059a719f-3088-4a94-aa69-c6d67d1ead01",
                "title": "Due to shared state",
                "isCorrect": true
              },
              {
                "id": "2c025e34-8698-499d-9b2b-432c6a9ad2f9",
                "title": "The compiler prohibits it",
                "isCorrect": false
              },
              {
                "id": "cc5dac53-bc7f-4ac5-a2b2-931a6e2a4292",
                "title": "Cargo doesn't know how",
                "isCorrect": false
              }
            ],
            "descriptionText": "Parallel tests can conflict through shared resources",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "831437d8-05f7-4963-bf4a-22ee41172b3d",
            "title": "What does the --show-output flag do when running cargo test?",
            "answers": [
              {
                "id": "6be5edc5-bb81-4258-bd47-415c31a8f12c",
                "title": "Shows output only for failed tests",
                "isCorrect": false
              },
              {
                "id": "f8f4773b-fbba-4f73-af5b-1b1ee1e51c56",
                "title": "Shows println! output even for passed tests",
                "isCorrect": true
              },
              {
                "id": "fc1af64a-d52f-40fb-900b-7092695d5b13",
                "title": "Shows only the list of tests",
                "isCorrect": false
              },
              {
                "id": "1cd2ab9b-a286-4494-a53b-4a3e16a03147",
                "title": "Disables stdout",
                "isCorrect": false
              }
            ],
            "descriptionText": "By default println! is hidden, --show-output always displays it",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4e4cb2ac-c3cd-4b95-991a-4244dd6fed79",
            "title": "How do you run only a test named foo_test?",
            "answers": [
              {
                "id": "455cc6e2-ecf6-4bdb-af6f-63231ca688e0",
                "title": "cargo run foo_test",
                "isCorrect": false
              },
              {
                "id": "2796baa2-6b10-451d-8479-2c20a98f3f3f",
                "title": "cargo test foo_test",
                "isCorrect": true
              },
              {
                "id": "d8f475a5-084f-45d4-9403-16aff66a50bc",
                "title": "cargo test --name foo_test",
                "isCorrect": false
              },
              {
                "id": "18377413-f18f-453a-937a-b8a53c0d2873",
                "title": "cargo test-only foo_test",
                "isCorrect": false
              }
            ],
            "descriptionText": "Filtering by name works through the cargo test argument",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d22e8ca0-1849-4f03-8762-a206281c3d51",
            "title": "What happens if you pass cargo test add?",
            "answers": [
              {
                "id": "6e48627f-25ad-4665-9d10-562b24a8919c",
                "title": "Only one test runs",
                "isCorrect": false
              },
              {
                "id": "ae6c48f1-c2e5-4147-b7e7-dc7fa6ed12dd",
                "title": "All tests with add in the name run",
                "isCorrect": true
              },
              {
                "id": "e7b9ca8a-9635-4333-9345-28adae5ec34e",
                "title": "All tests are ignored",
                "isCorrect": false
              },
              {
                "id": "2adbccae-9103-4b30-8ecd-f6aa3e36ec50",
                "title": "Compilation error",
                "isCorrect": false
              }
            ],
            "descriptionText": "Substring filters the test set",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e2e09270-b1d7-4342-afbd-b867a4ebc55e",
            "title": "What is the #[ignore] attribute used for in a test?",
            "answers": [
              {
                "id": "6b4301e1-d7c0-4e81-a521-1344b0723d88",
                "title": "Completely removes the test",
                "isCorrect": false
              },
              {
                "id": "e8720ea8-943a-4a02-9c90-0ede62f9f094",
                "title": "Skips the test during normal run",
                "isCorrect": true
              },
              {
                "id": "e1677296-a126-4fa4-96ea-0758d9a6ca4e",
                "title": "Makes the test private",
                "isCorrect": false
              },
              {
                "id": "2db2012b-52bf-467d-a2b7-defb598c6feb",
                "title": "Places the test first in the list",
                "isCorrect": false
              }
            ],
            "descriptionText": "#[ignore] excludes the test from default run",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3827074c-c149-41b9-a2dc-241ee8d2cf40",
            "title": "How do you run only ignored tests?",
            "answers": [
              {
                "id": "f0427ce7-49f3-4f28-9137-9367954b3724",
                "title": "cargo test --ignore",
                "isCorrect": false
              },
              {
                "id": "c49cdb08-c86a-457a-8c80-29d24efea8ff",
                "title": "cargo test -- --ignored",
                "isCorrect": true
              },
              {
                "id": "4afaac17-c086-45db-ad17-c10d20745406",
                "title": "cargo test --include=ignored",
                "isCorrect": false
              },
              {
                "id": "7307005c-90c5-479e-bd82-d31c0040919c",
                "title": "cargo test ignored-only",
                "isCorrect": false
              }
            ],
            "descriptionText": "The --ignored flag runs only tests with the #[ignore] attribute",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f7216e46-9093-4a6c-841d-78763f5d7936",
            "title": "What's the difference between unit and integration tests?",
            "answers": [
              {
                "id": "312fbd12-8a6d-43e1-95f9-ba3ee51cbc96",
                "title": "Unit tests are always public, integration are private",
                "isCorrect": false
              },
              {
                "id": "4a689f5a-d941-4dc2-8683-81be4cf64d9f",
                "title": "Unit tests are written inside src, integration in tests folder",
                "isCorrect": true
              },
              {
                "id": "8b2d9430-b5e1-4dc3-85e8-db75827e0d58",
                "title": "Unit tests require Cargo.toml, integration don't",
                "isCorrect": false
              },
              {
                "id": "dcdf8391-c57c-4b36-83ab-846375fe0d9a",
                "title": "Unit tests only run with nightly",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unit tests live in the same file, integration in separate tests/ directory",
            "descriptionLink": "automated_tests_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "3354d129-6362-41a5-bb50-37e38c416aa1",
        "theme": "Functional Language Features — Iterators and Closures",
        "priority": 10,
        "questions": [
          {
            "id": "ed1af2d0-a3be-4423-9b34-710da03ef236",
            "title": "How does a closure differ from a regular function?",
            "answers": [
              {
                "id": "e7d97c12-a321-4fef-b5a9-8c227510e83a",
                "title": "Has no parameters",
                "isCorrect": false
              },
              {
                "id": "18f07df1-f5cf-4ad2-a4f6-f03dbe5c1679",
                "title": "Can capture the environment",
                "isCorrect": true
              },
              {
                "id": "0bb1c310-c396-4c3a-9f43-069170ffb1b0",
                "title": "Only works in main",
                "isCorrect": false
              },
              {
                "id": "b49fac79-1d0d-49db-9d63-e59d2337bd65",
                "title": "Always asynchronous",
                "isCorrect": false
              }
            ],
            "descriptionText": "Functions cannot capture values from their scope, closures can",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8ea4a575-b236-44fd-8fc5-01bc689e72d1",
            "title": "How do you declare a closure without parameters?",
            "answers": [
              {
                "id": "e02a72b5-2d5a-4a6f-8aca-56487751183b",
                "title": "fn() {}",
                "isCorrect": false
              },
              {
                "id": "61c27365-7583-41be-80c7-d8ec15b93b1a",
                "title": "|| { … }",
                "isCorrect": true
              },
              {
                "id": "fc14481a-0e39-40c8-b007-67adf7cb120d",
                "title": "[] { … }",
                "isCorrect": false
              },
              {
                "id": "d813e7f6-7b6f-4c64-997f-7ed50275bfb5",
                "title": "{}",
                "isCorrect": false
              }
            ],
            "descriptionText": "Closure syntax uses vertical bars ||",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2ed50b8a-4d76-41f2-85f3-aa0b6adcd8ab",
            "title": "What does the unwrap_or_else method do for Option?",
            "answers": [
              {
                "id": "776eab5e-4f9a-49e3-8151-3afc20c3ea42",
                "title": "Returns the value or panics",
                "isCorrect": false
              },
              {
                "id": "36056f11-b8af-46c0-a5b6-0fc47322d9bb",
                "title": "Returns the value or calls a closure",
                "isCorrect": true
              },
              {
                "id": "c14fbeaa-0127-40c9-af66-8e683f3e9f0f",
                "title": "Returns only None",
                "isCorrect": false
              },
              {
                "id": "b9802c42-4019-4cfb-8e8e-b9788fee4412",
                "title": "Returns a reference",
                "isCorrect": false
              }
            ],
            "descriptionText": "unwrap_or_else accepts a closure that executes on None",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4b3e6297-8df3-48a6-9a5e-84833db29b74",
            "title": "What's the difference between unwrap_or and unwrap_or_else?",
            "answers": [
              {
                "id": "e3e8d9ea-6dac-47c7-8851-e7fbdb4dd796",
                "title": "First accepts a value, second accepts a closure",
                "isCorrect": true
              },
              {
                "id": "80562a4f-bc13-40b5-9bec-56379121b4cf",
                "title": "First works faster",
                "isCorrect": false
              },
              {
                "id": "59093bb5-a085-48a0-8b1e-d387f0f76fce",
                "title": "Second doesn't work with Some",
                "isCorrect": false
              },
              {
                "id": "715dd00f-d90c-48c1-9b8f-46cd1f4a9f8b",
                "title": "First always panics",
                "isCorrect": false
              }
            ],
            "descriptionText": "unwrap_or_else lazily computes the value only if None",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b5d9609f-3637-41b0-8247-1b6a3a3a348a",
            "title": "How does a closure capture variables by default?",
            "answers": [
              {
                "id": "be959397-2459-4273-b2e9-07a2bff1f91d",
                "title": "Always by value",
                "isCorrect": false
              },
              {
                "id": "fe7927b3-88c6-4813-ab64-80ef7844e908",
                "title": "Decides itself: by reference, by &mut, or by move",
                "isCorrect": true
              },
              {
                "id": "ac40112b-f80f-4fb8-b9ac-d8d8ffdcc14c",
                "title": "Always by &mut",
                "isCorrect": false
              },
              {
                "id": "65e4823e-77f5-4767-aff5-4a063109942f",
                "title": "Cannot capture",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust chooses the capture strategy based on the closure body",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d759e592-c0b8-45e7-b6d1-a9de90dc600b",
            "title": "What does the move keyword do for a closure?",
            "answers": [
              {
                "id": "4eab8abb-3e4c-4436-8e16-53d0c547f03b",
                "title": "Prohibits capture",
                "isCorrect": false
              },
              {
                "id": "38d3976d-03b5-4971-a824-61eaabeada2c",
                "title": "Captures variables by value",
                "isCorrect": true
              },
              {
                "id": "a02e8a3c-41c6-4d96-b908-111ecb9d75fe",
                "title": "Makes the closure FnMut",
                "isCorrect": false
              },
              {
                "id": "7341eb2e-d76b-4c02-a7c1-e5b05fcd58ea",
                "title": "Optimizes speed",
                "isCorrect": false
              }
            ],
            "descriptionText": "move forces ownership transfer into the closure",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "68dbca9b-6d88-47c5-b2bc-f8de49b03987",
            "title": "Why do you need to use move in a closure for a new thread?",
            "answers": [
              {
                "id": "50bdacff-e2ff-4f41-a85f-914e9e6b0189",
                "title": "Thread cannot reference parent data",
                "isCorrect": true
              },
              {
                "id": "fa799fa9-3f71-482f-b959-5565edc0fe89",
                "title": "It's faster",
                "isCorrect": false
              },
              {
                "id": "a86328e6-9ff0-4d04-adc0-e26df686ea4d",
                "title": "Without it, panic",
                "isCorrect": false
              },
              {
                "id": "3ce55633-f771-444d-ade6-805737e500f7",
                "title": "Only for FnOnce",
                "isCorrect": false
              }
            ],
            "descriptionText": "Thread can outlive the parent, so ownership is required",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ea7320fd-d89d-48de-ab9a-7e4f90992ddf",
            "title": "What are the three traits for closures?",
            "answers": [
              {
                "id": "2b091693-94f6-4dd9-a1ad-cfd91d18b81a",
                "title": "Fn, FnMut, FnOnce",
                "isCorrect": true
              },
              {
                "id": "afe91403-318e-43bb-8c32-d4b7f48fa90b",
                "title": "Fn, Func, Callable",
                "isCorrect": false
              },
              {
                "id": "276d1450-7b9c-44eb-bc5c-99b970a42ca5",
                "title": "FnStatic, FnShared, FnOwned",
                "isCorrect": false
              },
              {
                "id": "bf14f080-e12a-4cb5-8c62-1c7dc21c5f6a",
                "title": "Copy, Clone, Drop",
                "isCorrect": false
              }
            ],
            "descriptionText": "These three traits reflect capture methods",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "69192f95-ab8f-49ec-a7fe-401f05ce7c2d",
            "title": "Which Fn-trait does any closure implement?",
            "answers": [
              {
                "id": "0aacf443-deb7-482b-bfad-d4110278a889",
                "title": "Fn",
                "isCorrect": false
              },
              {
                "id": "dda9459c-9283-4c49-8453-d82aed862c76",
                "title": "FnMut",
                "isCorrect": false
              },
              {
                "id": "940f24b5-dc50-4c34-a537-a14e35b15302",
                "title": "FnOnce",
                "isCorrect": true
              },
              {
                "id": "4106ae8b-bd90-4f3e-a845-a8c1ecfd20d8",
                "title": "None",
                "isCorrect": false
              }
            ],
            "descriptionText": "Any closure can be called at least once",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a3b1c770-a5b0-4259-b5e9-ac1c55c819ee",
            "title": "A closure that modifies an external variable implements:",
            "answers": [
              {
                "id": "baeee776-03cc-461e-8a41-9f1490af4444",
                "title": "Fn",
                "isCorrect": false
              },
              {
                "id": "74046149-d270-4be3-9227-cdb30c2dc9e6",
                "title": "FnMut",
                "isCorrect": true
              },
              {
                "id": "68a46b1e-f687-46ba-8552-558cffa30fcb",
                "title": "FnOnce",
                "isCorrect": false
              },
              {
                "id": "235ad2a5-652b-42c4-b573-4b7d3540c277",
                "title": "Copy",
                "isCorrect": false
              }
            ],
            "descriptionText": "Modification requires &mut — that's FnMut",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2d89c2a2-a6aa-4cae-a3c9-fb7175983cfc",
            "title": "A closure that moves a value from the environment implements:",
            "answers": [
              {
                "id": "629d80db-7815-4546-8395-efd5a11cf8f7",
                "title": "Fn",
                "isCorrect": false
              },
              {
                "id": "3cdcc847-bab5-43ba-8309-785df189e5d6",
                "title": "FnMut",
                "isCorrect": false
              },
              {
                "id": "c42e47f3-1fad-4cfe-8756-54699c825489",
                "title": "FnOnce",
                "isCorrect": true
              },
              {
                "id": "20e1e139-0c07-4581-84cb-8cc9eed3bdfc",
                "title": "All three",
                "isCorrect": false
              }
            ],
            "descriptionText": "With move-operation, closure can only be called once",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7662b3a9-b0cd-4815-82da-96b6db0b14e0",
            "title": "How does function syntax differ from closure syntax?",
            "answers": [
              {
                "id": "2f8336b2-ae17-45ec-858d-c4ebd1a1d5c8",
                "title": "Function always with fn, closure with ||",
                "isCorrect": true
              },
              {
                "id": "0c10ff14-b8a9-4f04-a78b-3d03a121e1fb",
                "title": "Closure must have return",
                "isCorrect": false
              },
              {
                "id": "0b9396f8-bb10-47b2-be7e-3b8915d27218",
                "title": "Closures have no body",
                "isCorrect": false
              },
              {
                "id": "58e3472c-99a0-4c4b-9278-f43452f7d884",
                "title": "Functions cannot accept parameters",
                "isCorrect": false
              }
            ],
            "descriptionText": "The difference is precisely in || and optional type annotations",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0cf965c3-b3d9-40ee-9763-e1d2c3de7dd7",
            "title": "Do you always need to specify types in a closure?",
            "answers": [
              {
                "id": "4d455cad-a627-4260-a671-01158e5be161",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "be1b644c-9e0b-4a03-b87a-dab9218dd372",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "decfb3d6-0b52-4737-9a7d-4649e985155e",
                "title": "Only for FnMut",
                "isCorrect": false
              },
              {
                "id": "16d74e20-dc36-46ce-ad32-307c8e2aa4bb",
                "title": "Only for return value",
                "isCorrect": false
              }
            ],
            "descriptionText": "Compiler usually infers types automatically",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "777f1d3e-aa54-49bd-8490-94cac976f6a0",
            "title": "When might explicit type annotation be needed in a closure?",
            "answers": [
              {
                "id": "c328aeac-e214-43ef-b46b-96d3a94b9473",
                "title": "When using multithreading",
                "isCorrect": false
              },
              {
                "id": "2833608a-bbe5-4072-a697-5469f33ea9cd",
                "title": "When compiler cannot infer the type",
                "isCorrect": true
              },
              {
                "id": "7b04cf50-ee71-476c-9c2e-29ca7e5c3c01",
                "title": "When closure is empty",
                "isCorrect": false
              },
              {
                "id": "824348c3-96d6-44cf-b1ed-8acfb9dc2afe",
                "title": "Always in release",
                "isCorrect": false
              }
            ],
            "descriptionText": "Closure types are inferred, but sometimes clarification is needed",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b91674b1-1e0f-450e-b3a8-b1d9c28b1fd6",
            "title": "What happens if you call a closure first with a string, then with a number?",
            "answers": [
              {
                "id": "f3f6708f-264f-4e92-8e12-44c3cbd088c7",
                "title": "Will work",
                "isCorrect": false
              },
              {
                "id": "326e14ff-5a71-4288-8e7f-4d881e52d0ca",
                "title": "Type error",
                "isCorrect": true
              },
              {
                "id": "0ac84b7a-a2d0-43f0-b605-ba327acb63b4",
                "title": "Automatic conversion",
                "isCorrect": false
              },
              {
                "id": "dffc5350-6099-4e73-8870-5f369da96f78",
                "title": "Runtime panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "Closure type is fixed on first call",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b920d08f-d821-4193-b540-2d76ae2b7639",
            "title": "Which closure can be passed to sort_by_key?",
            "answers": [
              {
                "id": "0fc6835a-aea2-4b58-a8f9-91b9d8c4486f",
                "title": "Only FnOnce",
                "isCorrect": false
              },
              {
                "id": "e8c401ee-fba1-4bdd-954b-03adee7bb0ba",
                "title": "FnMut",
                "isCorrect": true
              },
              {
                "id": "3ead2ab8-5798-4514-819e-13b401e67ee1",
                "title": "Fn",
                "isCorrect": false
              },
              {
                "id": "63e81c09-9924-4352-b240-f11e586a5577",
                "title": "Any",
                "isCorrect": false
              }
            ],
            "descriptionText": "sort_by_key calls the closure multiple times",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "05f4f2a8-0a7f-44a1-a17d-22396619b019",
            "title": "Which method must any iterator implement?",
            "answers": [
              {
                "id": "0554375d-a1ef-4759-be93-c5cc29ff8db8",
                "title": "for_each",
                "isCorrect": false
              },
              {
                "id": "90cb072b-4622-44aa-9b65-b58f2dfea3e6",
                "title": "next",
                "isCorrect": true
              },
              {
                "id": "82720da8-de4a-4080-b028-edb155324051",
                "title": "iter",
                "isCorrect": false
              },
              {
                "id": "08d5a60d-a8b8-49f3-bf4c-8c0f256fdfae",
                "title": "map",
                "isCorrect": false
              }
            ],
            "descriptionText": "Iterator requires defining next()",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2c6bbd1f-0ac9-42cc-b854-1b8454e3bf15",
            "title": "What does the next() method return?",
            "answers": [
              {
                "id": "a7b7f738-e49c-41b9-9922-87fc3bb247fc",
                "title": "Element directly",
                "isCorrect": false
              },
              {
                "id": "e928965f-8867-49e0-92c4-b0d79130ebc9",
                "title": "Option",
                "isCorrect": true
              },
              {
                "id": "b69fe76c-d402-4198-a903-7505aa8e77a2",
                "title": "Result<Item,Err>",
                "isCorrect": false
              },
              {
                "id": "10087f6e-3149-4209-adb6-f0b78a3e81ca",
                "title": "&Item",
                "isCorrect": false
              }
            ],
            "descriptionText": "next() returns Some(item) or None",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2f02b44e-1806-4a7e-8c1e-4a726d179104",
            "title": "What happens if you call next() on an exhausted iterator?",
            "answers": [
              {
                "id": "19764067-56de-4058-8305-0d884780626f",
                "title": "Panic",
                "isCorrect": false
              },
              {
                "id": "6efa98e0-b16c-4e10-9504-ac2cccc5fab5",
                "title": "None",
                "isCorrect": true
              },
              {
                "id": "7c4e414e-2030-4eef-8a90-23fe8d9bedac",
                "title": "0",
                "isCorrect": false
              },
              {
                "id": "d4596243-983d-4817-88f9-30957574e401",
                "title": "Compilation error",
                "isCorrect": false
              }
            ],
            "descriptionText": "After the end, iterator returns None",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1f995a96-6200-4a57-a45d-4d379fde6117",
            "title": "Why is an iterator variable usually declared as mut?",
            "answers": [
              {
                "id": "9f91a92a-a7d6-4bc0-b363-dcb7d4595c51",
                "title": "Otherwise compiler always complains",
                "isCorrect": false
              },
              {
                "id": "12bd5904-e024-453b-ad4b-f53d4d2aaedf",
                "title": "next modifies internal state",
                "isCorrect": true
              },
              {
                "id": "0d663c4b-74cf-4a9b-b0cb-4ab32fad6174",
                "title": "Vector requires mut",
                "isCorrect": false
              },
              {
                "id": "3b496741-e3e9-4fad-a521-feb7f68b1d22",
                "title": "collect requires mut",
                "isCorrect": false
              }
            ],
            "descriptionText": "next moves the iterator pointer",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "59a7e67e-fbe8-44c8-8abb-77eae47c1208",
            "title": "How do iter, into_iter, iter_mut methods differ for a vector?",
            "answers": [
              {
                "id": "f64406b2-a12c-42ec-9e32-656bfce3a92a",
                "title": "All the same",
                "isCorrect": false
              },
              {
                "id": "23272af6-b5d3-472a-84ce-5ea5bb8d21bb",
                "title": "iter → &T, into_iter → T, iter_mut → &mut T",
                "isCorrect": true
              },
              {
                "id": "a137d074-a4b4-4879-bd33-6e18ffbd3fc9",
                "title": "iter → copies, into_iter → references",
                "isCorrect": false
              },
              {
                "id": "1659320f-584f-4196-ab6b-534aa1b0314d",
                "title": "iter works faster",
                "isCorrect": false
              }
            ],
            "descriptionText": "These are three ways to traverse: by reference, ownership, and mutable reference",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8aedf285-0a83-46fd-ad54-a9c1ff7aae43",
            "title": "What is iterator \"laziness\"?",
            "answers": [
              {
                "id": "961ee00a-8234-4734-9e05-03ea0b40cb77",
                "title": "They don't compile until called",
                "isCorrect": false
              },
              {
                "id": "898d153c-fdf6-4add-9fc5-3a3ec43ba5df",
                "title": "They do nothing until consumed",
                "isCorrect": true
              },
              {
                "id": "02fe7a3a-d8c9-4a1b-88c8-27c5793fdb76",
                "title": "They are slow",
                "isCorrect": false
              },
              {
                "id": "9c8de0db-4946-4cb6-8845-d6e78ca24b51",
                "title": "They only work in release",
                "isCorrect": false
              }
            ],
            "descriptionText": "Iterators defer computation until a consuming method",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6443e047-f1ea-41d6-8697-d4c9765c6793",
            "title": "Example of a method that consumes an iterator:",
            "answers": [
              {
                "id": "87181a17-20a9-4208-814c-d015df4f4913",
                "title": "map",
                "isCorrect": false
              },
              {
                "id": "5b9d5b34-01a0-4d7e-93ea-d4e592e8e4d8",
                "title": "filter",
                "isCorrect": false
              },
              {
                "id": "ab1e6fde-a1ca-4914-8cab-8c128229288c",
                "title": "sum",
                "isCorrect": true
              },
              {
                "id": "9a96000c-47ff-4908-9b2e-374168433d50",
                "title": "iter",
                "isCorrect": false
              }
            ],
            "descriptionText": "sum calls next until the end and takes the iterator",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bef971a9-beae-4042-9985-33af0c7d723c",
            "title": "What happens to an iterator after calling sum()?",
            "answers": [
              {
                "id": "8213660c-fc61-43d7-94f6-a99723ecbc25",
                "title": "Can be used again",
                "isCorrect": false
              },
              {
                "id": "a8f1bf52-584b-41c0-8520-0f2e0da02da7",
                "title": "It's moved and no longer accessible",
                "isCorrect": true
              },
              {
                "id": "b862fe88-5b8c-4ea7-8094-381a62856b7d",
                "title": "Returns empty",
                "isCorrect": false
              },
              {
                "id": "8d0afef6-4362-48e0-b0ef-1254ebfcd974",
                "title": "It's cloned",
                "isCorrect": false
              }
            ],
            "descriptionText": "sum owns the iterator and exhausts it",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "00d047e5-426e-49c2-8401-914223e752a9",
            "title": "Example of an adapter method (doesn't consume iterator):",
            "answers": [
              {
                "id": "00d10b9e-4afc-4a9c-a463-dd74ed9cce40",
                "title": "map",
                "isCorrect": true
              },
              {
                "id": "514eb5ee-569f-4667-b2d5-df6db03f4de5",
                "title": "sum",
                "isCorrect": false
              },
              {
                "id": "2226b517-26b0-4e8c-941d-f51b9882c9b7",
                "title": "collect",
                "isCorrect": false
              },
              {
                "id": "f66e52ab-3f2c-47b9-850e-639d7b545e8d",
                "title": "next",
                "isCorrect": false
              }
            ],
            "descriptionText": "Adapter returns a new iterator without consuming the original",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "77adfe7b-63bc-44c7-b34b-e9e7a1e63645",
            "title": "What do you need to call to actually execute map?",
            "answers": [
              {
                "id": "56a3038a-f127-4be9-8129-44b7f2c924c6",
                "title": "collect",
                "isCorrect": true
              },
              {
                "id": "51e3b940-7ba4-4160-b17f-e05c85ab4857",
                "title": "for_each",
                "isCorrect": false
              },
              {
                "id": "f00c46b9-0458-4eea-940d-471aabe0c909",
                "title": "next",
                "isCorrect": false
              },
              {
                "id": "f62914c7-3c8e-47d2-82cb-b8dc89d24784",
                "title": "All above",
                "isCorrect": false
              }
            ],
            "descriptionText": "map is lazy, collect starts traversal",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d7e3cd05-4504-4011-8a04-1b1d8b9efdcb",
            "title": "What will collect return from a map iterator?",
            "answers": [
              {
                "id": "df5dd007-72ca-40ed-8295-167d38e71d3c",
                "title": "Nothing",
                "isCorrect": false
              },
              {
                "id": "c4c8873b-7112-49bd-9f7d-fbfa1bbec356",
                "title": "Any collection",
                "isCorrect": true
              },
              {
                "id": "86ed5fb4-ef04-40d7-9585-45c44a3f9046",
                "title": "Only Vec",
                "isCorrect": false
              },
              {
                "id": "6676aba2-f35f-442a-936e-3d2dbf1d0514",
                "title": "Only String",
                "isCorrect": false
              }
            ],
            "descriptionText": "collect can be parameterized into different collections",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "96179e88-1445-46de-b0a5-1559bc1a0694",
            "title": "How does filter work?",
            "answers": [
              {
                "id": "1cf84591-1a34-47e3-b248-22e7bb9f7544",
                "title": "Removes None",
                "isCorrect": false
              },
              {
                "id": "a532523b-d36f-47db-baa8-77ab3493c048",
                "title": "Keeps elements whose closure returns true",
                "isCorrect": true
              },
              {
                "id": "b80f7760-efb7-4a54-9157-ec5d07d03b4c",
                "title": "Sorts elements",
                "isCorrect": false
              },
              {
                "id": "6ab5e104-eaa6-49c7-a6fe-7a64d5011ca8",
                "title": "Transforms type",
                "isCorrect": false
              }
            ],
            "descriptionText": "filter keeps only elements for which the condition is true",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c3d11189-a1d8-4623-ac05-fa671a433be6",
            "title": "How does the filter closure receive elements?",
            "answers": [
              {
                "id": "165cd8dd-8cfc-4c98-9c73-3a48d84bf2c8",
                "title": "By value",
                "isCorrect": false
              },
              {
                "id": "6146c882-5442-4c24-a1cb-e7bda079e4e8",
                "title": "By reference",
                "isCorrect": true
              },
              {
                "id": "a374d05c-29e7-4026-9c67-27a2253c4c1f",
                "title": "By copy",
                "isCorrect": false
              },
              {
                "id": "1486aed8-cda6-4083-8677-71f0d6a2a286",
                "title": "Always through move",
                "isCorrect": false
              }
            ],
            "descriptionText": "filter calls the closure with a reference to the element",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1ccbcc65-c462-4f98-b7c8-f609ef6aa8af",
            "title": "What does the for_each method do for an iterator?",
            "answers": [
              {
                "id": "dfb4c558-509f-4bad-bea5-c39ae5a05a06",
                "title": "Returns a new collection",
                "isCorrect": false
              },
              {
                "id": "d49faf58-9a17-4845-a491-6eb9fc4e313b",
                "title": "Applies closure to each element",
                "isCorrect": true
              },
              {
                "id": "4ce52578-6b49-4c6d-a1fb-ba604bb36a31",
                "title": "Sorts",
                "isCorrect": false
              },
              {
                "id": "3d39cb45-f7ab-4b72-a92f-61a0cfe813a7",
                "title": "Zeros the iterator",
                "isCorrect": false
              }
            ],
            "descriptionText": "for_each calls the closure for each element",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "875e55f9-4351-417e-8bce-21d68eca23ef",
            "title": "How do you check if an iterator has an element satisfying a condition?",
            "answers": [
              {
                "id": "d133ad87-d139-458e-96c0-db200964a635",
                "title": "map",
                "isCorrect": false
              },
              {
                "id": "3e3af5a4-d4ef-4b43-9f73-3bbc1e67918c",
                "title": "any",
                "isCorrect": true
              },
              {
                "id": "8b2024b7-c538-4c7f-9325-52b7b600f7f7",
                "title": "all",
                "isCorrect": false
              },
              {
                "id": "baff89be-8308-47a3-bb32-f79e8e30ee86",
                "title": "find",
                "isCorrect": false
              }
            ],
            "descriptionText": "any checks if the closure returns true at least once",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a0173ac5-307c-4b34-8fe7-0eabbb49167c",
            "title": "How does all differ from any?",
            "answers": [
              {
                "id": "23b2730e-950f-4cf0-8492-d7687fd109cd",
                "title": "all requires true for all",
                "isCorrect": true
              },
              {
                "id": "8cdc09a5-4ad0-45f1-bebe-7264d0da1ae5",
                "title": "any requires true for all",
                "isCorrect": false
              },
              {
                "id": "0852212c-8026-401c-97c1-e961839247e9",
                "title": "all only works with Vec",
                "isCorrect": false
              },
              {
                "id": "1b862172-7774-4743-99c7-caeaf7d557f7",
                "title": "all is always faster",
                "isCorrect": false
              }
            ],
            "descriptionText": "all returns true if the condition holds for all elements",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3a2520a6-115a-4623-8e15-f43bb0140d3a",
            "title": "What does the find method return?",
            "answers": [
              {
                "id": "14044fa2-5b78-46e8-bcfa-57a595312232",
                "title": "bool",
                "isCorrect": false
              },
              {
                "id": "adc4b6e5-4fb1-4980-8c76-d1b245a319bc",
                "title": "Option",
                "isCorrect": true
              },
              {
                "id": "d627b4cb-2505-49f0-9add-03982d114859",
                "title": "Result",
                "isCorrect": false
              },
              {
                "id": "a4f066d2-f1c5-4a41-bdc2-aa9f4cc18a30",
                "title": "usize",
                "isCorrect": false
              }
            ],
            "descriptionText": "find returns Some(first element), or None",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7395e68e-9838-48db-a602-709d0b5dfd44",
            "title": "How do for loops and iterators differ?",
            "answers": [
              {
                "id": "0ac057ff-3181-444a-a60b-b23287eb43de",
                "title": "for is always faster",
                "isCorrect": false
              },
              {
                "id": "8f55328c-7f89-4b10-b20b-704d5a0cab21",
                "title": "for is syntactic sugar for iterator",
                "isCorrect": true
              },
              {
                "id": "0a3a4c4c-c42d-46cb-8c42-cdc7f5cef6e4",
                "title": "Iterator only works with Vec",
                "isCorrect": false
              },
              {
                "id": "4218fe72-6103-4e7f-ba0e-86f5c68e4295",
                "title": "for uses pointers",
                "isCorrect": false
              }
            ],
            "descriptionText": "for internally creates and consumes an iterator",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "629beea3-7ab6-46f6-a1b6-b4eb13d1c9a8",
            "title": "Why are iterators in Rust considered \"zero-cost abstraction\"?",
            "answers": [
              {
                "id": "0073f516-34c8-41ea-a822-ffe56c774d81",
                "title": "They're free",
                "isCorrect": false
              },
              {
                "id": "56d3d713-9071-41c8-89a3-ce1f7bf05580",
                "title": "After compilation they add no overhead",
                "isCorrect": true
              },
              {
                "id": "4124dbe9-bb6a-4647-9dc9-fbab8bc65625",
                "title": "They're always inlined",
                "isCorrect": false
              },
              {
                "id": "a3ded043-6019-4936-a008-038cc7da6e54",
                "title": "They only work in release",
                "isCorrect": false
              }
            ],
            "descriptionText": "Iterators compile to code at the level of manual loops",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ae22cd2c-2a1d-47d3-9a89-40dbf4e240d8",
            "title": "What does the enumerate() method do?",
            "answers": [
              {
                "id": "9d196b2a-3805-4001-b1fd-ea07302e2ac8",
                "title": "Numbers the collection in println",
                "isCorrect": false
              },
              {
                "id": "66e5cdda-85b7-4955-a63a-800ae83cc5d6",
                "title": "Adds an index to each element",
                "isCorrect": true
              },
              {
                "id": "90b88052-6e23-4a24-8bde-35c7e5eafcb0",
                "title": "Sorts",
                "isCorrect": false
              },
              {
                "id": "f20821ec-3a49-4978-a336-bba13fdad64f",
                "title": "Returns usize",
                "isCorrect": false
              }
            ],
            "descriptionText": "enumerate returns pairs (index, element)",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "69cd864f-9b27-49c5-8ad0-e52174c2dbc1",
            "title": "What does zip() do?",
            "answers": [
              {
                "id": "3414e7c8-aba0-4a92-9232-5cc79779e141",
                "title": "Combines two iterators into tuples",
                "isCorrect": true
              },
              {
                "id": "0068e593-da5e-4603-961e-5e26035e3c13",
                "title": "Joins strings",
                "isCorrect": false
              },
              {
                "id": "1e827939-c866-47f6-bcb2-f7e7a8045e9b",
                "title": "Removes duplicates",
                "isCorrect": false
              },
              {
                "id": "098ade41-1e08-4de9-8e9d-33b423211e96",
                "title": "Does flatmap",
                "isCorrect": false
              }
            ],
            "descriptionText": "zip combines elements in pairs",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f8ff24b2-3026-4e65-8489-1413cf557292",
            "title": "What does the chain() method do?",
            "answers": [
              {
                "id": "af1f2ae6-987e-4dfd-bf35-73b81c02c3d0",
                "title": "Joins two iterators sequentially",
                "isCorrect": true
              },
              {
                "id": "ca6aee97-b6ca-429a-8520-08d866938d77",
                "title": "Does merge sort",
                "isCorrect": false
              },
              {
                "id": "0a2672bf-a3fc-41e2-a9b0-6778c330e969",
                "title": "Joins strings",
                "isCorrect": false
              },
              {
                "id": "24136633-add0-4e70-be51-5a13d4cccc95",
                "title": "Concatenates Vec",
                "isCorrect": false
              }
            ],
            "descriptionText": "chain creates one iterator from two",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0b135165-a49b-4198-91e3-a90b62adedcd",
            "title": "What does the take() method do?",
            "answers": [
              {
                "id": "59679dd5-77ac-40a0-a5a2-f74959cbea6f",
                "title": "Takes the first N elements",
                "isCorrect": true
              },
              {
                "id": "caf3da04-a18a-4706-82f4-00cf4b42b1ed",
                "title": "Removes the first N elements",
                "isCorrect": false
              },
              {
                "id": "3724c2f6-50f4-470e-9fe5-5018ff61f5ad",
                "title": "Does clone",
                "isCorrect": false
              },
              {
                "id": "87699e7c-14a2-4774-9b2d-41d51df70280",
                "title": "Only works with Vec",
                "isCorrect": false
              }
            ],
            "descriptionText": "take limits the number of iterations",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a7cb4a08-97a2-4e53-a85a-a63a8c575073",
            "title": "What does the skip() method do?",
            "answers": [
              {
                "id": "910c9698-9b66-4d93-bacf-1e529c7d543a",
                "title": "Skips the first N elements",
                "isCorrect": true
              },
              {
                "id": "0290f375-018c-4955-beaa-368ba0b08731",
                "title": "Removes duplicates",
                "isCorrect": false
              },
              {
                "id": "54a1f2bf-e15f-45f8-8cc4-fad5324a391e",
                "title": "Skips None",
                "isCorrect": false
              },
              {
                "id": "5610cc25-04e2-499b-8eff-d80892afdd87",
                "title": "Sorts",
                "isCorrect": false
              }
            ],
            "descriptionText": "skip shifts the iteration start",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "eb04c7d7-6f48-4011-8335-780f9f81b06e",
            "title": "What's the point of using iterators and closures in Rust?",
            "answers": [
              {
                "id": "9ee43fe2-3949-48f4-a819-b1b38e2cc118",
                "title": "They simplify syntax but slow down",
                "isCorrect": false
              },
              {
                "id": "24c26d19-21df-4513-9add-c7b81296606c",
                "title": "They make code declarative and fast",
                "isCorrect": true
              },
              {
                "id": "6df90f39-5328-47c5-a52f-2ddfdf040537",
                "title": "They only work in tests",
                "isCorrect": false
              },
              {
                "id": "b3fc145c-efee-4ae1-aa74-5b3d6102c7d5",
                "title": "Should be avoided",
                "isCorrect": false
              }
            ],
            "descriptionText": "Iterators and closures provide readability and don't compromise performance compared to manual loops",
            "descriptionLink": "iterators_closures_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "1b4d55c8-2728-4d5c-acf4-35dada14b5c0",
        "theme": "Smart Pointers",
        "priority": 11,
        "questions": [
          {
            "id": "074a740a-52e8-4564-a348-43a0b7514623",
            "title": "What is a \"smart pointer\" in Rust?",
            "answers": [
              {
                "id": "5d6702aa-7c02-48ab-ac39-e7a71381ad4c",
                "title": "Any variable with reference &T",
                "isCorrect": false
              },
              {
                "id": "e72e410d-7901-413d-87e8-316e9a19801e",
                "title": "A struct that behaves like a pointer and has additional behavior",
                "isCorrect": true
              },
              {
                "id": "a4ca532e-45f4-4544-9edf-fa702cf814a8",
                "title": "Any wrapper over Vec<T>",
                "isCorrect": false
              },
              {
                "id": "be86d24a-0c9d-44cd-9fdd-a630a2f5d61c",
                "title": "Any type with Copy",
                "isCorrect": false
              }
            ],
            "descriptionText": "Smart pointer is a struct (usually struct) that mimics a pointer and implements traits like Deref/Drop",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "693c101b-d7a5-4447-ba7f-734f29f60633",
            "title": "What does Box<T> do?",
            "answers": [
              {
                "id": "82d1003d-4af9-4ac9-94e0-c70a121d1c3f",
                "title": "Places value on the stack",
                "isCorrect": false
              },
              {
                "id": "35ddeb6d-1fc8-481e-8beb-5990a833ad2f",
                "title": "Places value in static memory",
                "isCorrect": false
              },
              {
                "id": "95a8b523-18ce-4e34-9fa2-cee1213719b6",
                "title": "Places value on the heap",
                "isCorrect": true
              },
              {
                "id": "ee88d895-75f7-4246-baa1-9638656d9c0d",
                "title": "Clones value on each access",
                "isCorrect": false
              }
            ],
            "descriptionText": "Box stores a \"thin\" pointer to a value on the heap",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8dde2ec9-193d-4dfd-aa68-1f6be0d89b1d",
            "title": "When is it appropriate to use Box<T>?",
            "answers": [
              {
                "id": "7d1d644f-ac0a-4d93-b14d-9679316a8d53",
                "title": "Always for fixed-size values",
                "isCorrect": false
              },
              {
                "id": "7bd71018-c4a9-477a-9b14-d3171cb15ce3",
                "title": "When you need a known-size type for a recursive structure",
                "isCorrect": true
              },
              {
                "id": "d9a1dc57-3da4-4e03-b29e-5d6576bfb651",
                "title": "To speed up cache line access",
                "isCorrect": false
              },
              {
                "id": "4190a071-428f-4432-84c1-f9a875b8c343",
                "title": "To automatically share ownership",
                "isCorrect": false
              }
            ],
            "descriptionText": "Box breaks infinite recursion in size (e.g., in Cons(i32, Box<List>))",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "811860a0-c1de-4ea7-a0ea-e35636e10a2b",
            "title": "What happens when Box<T> goes out of scope?",
            "answers": [
              {
                "id": "567ea528-451b-4901-a1f0-46f34cc6f5f0",
                "title": "Only the pointer on the stack is freed",
                "isCorrect": false
              },
              {
                "id": "d130b66e-5863-45f7-b807-7df8a30f5251",
                "title": "Only the heap is freed",
                "isCorrect": false
              },
              {
                "id": "ab0de841-a24c-46b4-ad1d-fa620b3aed79",
                "title": "Both the stack pointer and heap data are freed",
                "isCorrect": true
              },
              {
                "id": "d22b68fe-81e7-4f5f-b94e-3bb99ded95b2",
                "title": "Nothing, garbage collector frees later",
                "isCorrect": false
              }
            ],
            "descriptionText": "Drop is implemented to free both the \"box\" and stored data",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7c0d98d9-f671-4658-8efa-6084a2777932",
            "title": "Why doesn't enum List { Cons(i32, List), Nil } compile?",
            "answers": [
              {
                "id": "fd65d5e1-17e2-4520-97d6-3c0da499fcef",
                "title": "Type error",
                "isCorrect": false
              },
              {
                "id": "8a1e9cf4-cc78-43a2-88db-7086dcd9d370",
                "title": "Recursive type of infinite size",
                "isCorrect": true
              },
              {
                "id": "339a2000-918f-4823-8ca2-3558f2a101d1",
                "title": "Cannot have Nil in enum",
                "isCorrect": false
              },
              {
                "id": "03d48567-41c3-400c-a949-8f1b5ddc47ba",
                "title": "Compiler doesn't support such enums",
                "isCorrect": false
              }
            ],
            "descriptionText": "List size cannot be computed — need indirection via pointer (Box, Rc, &)",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cc0b899d-d60d-42ba-b299-14fa1f07be5c",
            "title": "What does the Deref trait do?",
            "answers": [
              {
                "id": "c2060ee2-0bb6-432b-98a9-71b3d4a6d12f",
                "title": "Manages lifetimes",
                "isCorrect": false
              },
              {
                "id": "619f7b09-af4c-46ea-a21f-c69ae36d8670",
                "title": "Allows using * operator and reference coercions",
                "isCorrect": true
              },
              {
                "id": "843b0a70-275d-4e32-97e3-47d945546373",
                "title": "Allows copying without cloning",
                "isCorrect": false
              },
              {
                "id": "8676f19e-81ae-486e-aed7-5e40568b2317",
                "title": "Enables garbage collection",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref::deref(&self) -> &Target describes what the type dereferences to",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d5e13932-1014-4ee8-8c1a-3e8fc3b1a490",
            "title": "Why can't MyBox<T> without Deref be dereferenced with *y?",
            "answers": [
              {
                "id": "e7c0b796-5263-4967-8e01-1a2a8347e882",
                "title": "No Copy",
                "isCorrect": false
              },
              {
                "id": "39721b19-7a85-4c4d-ac89-401bccdea3b2",
                "title": "Drop not implemented",
                "isCorrect": false
              },
              {
                "id": "0722532b-10ba-4bc4-8a7e-21f3b7f0cd7a",
                "title": "Deref not implemented",
                "isCorrect": true
              },
              {
                "id": "628e89a0-37bc-4915-8eab-c85abc0c652e",
                "title": "Type must be enum",
                "isCorrect": false
              }
            ],
            "descriptionText": "Dereferencing custom smart pointers requires Deref",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f6db92d1-9ea9-45df-90e2-1519ef7d0559",
            "title": "What is DerefMut for?",
            "answers": [
              {
                "id": "0b380440-7bd9-4bc9-b2cd-4f9a65aa6ddc",
                "title": "For coercion &T → &U",
                "isCorrect": false
              },
              {
                "id": "ccfda0df-40ce-411d-9721-485cd953a20d",
                "title": "For coercion &mut T → &mut U",
                "isCorrect": true
              },
              {
                "id": "20e29545-006a-47e7-b5ba-121e297f4581",
                "title": "For default copying",
                "isCorrect": false
              },
              {
                "id": "f9558605-8f83-43fc-ab92-62a9a45f42a5",
                "title": "For resource cleanup",
                "isCorrect": false
              }
            ],
            "descriptionText": "DerefMut allows dereferencing/coercing mutable references",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d35b0602-4048-4d6b-8935-64992a871170",
            "title": "What is the automatic conversion of references through Deref in function signatures called?",
            "answers": [
              {
                "id": "576195c0-5603-4cb5-b302-92f58d5bc6fa",
                "title": "Lifting",
                "isCorrect": false
              },
              {
                "id": "f3ce77f2-c62f-4b12-9c8c-33047e13d86b",
                "title": "Monomorphization",
                "isCorrect": false
              },
              {
                "id": "5c991aef-baca-4fb7-872b-5a7e0aeb7db9",
                "title": "Deref coercion",
                "isCorrect": true
              },
              {
                "id": "350984df-276d-4948-8dbc-2d991937a535",
                "title": "Copy elision",
                "isCorrect": false
              }
            ],
            "descriptionText": "Compiler automatically inserts deref calls to match expected reference type",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "781e8a22-b0e3-4dbd-b22b-5bb250fc32dd",
            "title": "What is true about deref-coercion?",
            "answers": [
              {
                "id": "b8e72007-e2fd-474b-b8fd-627efcfb8488",
                "title": "Only works for Box<T>",
                "isCorrect": false
              },
              {
                "id": "476cf727-48e7-4a5c-b831-e068189c5ebd",
                "title": "Only works for methods, not functions",
                "isCorrect": false
              },
              {
                "id": "be7fdfab-bbf0-498e-ad79-ee1fe6210ea2",
                "title": "Works for types implementing Deref/DerefMut",
                "isCorrect": true
              },
              {
                "id": "55bb49e1-fdaf-40df-8834-e0b75846cf35",
                "title": "Only works in nightly",
                "isCorrect": false
              }
            ],
            "descriptionText": "Conditions are having the corresponding trait implementations",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "99b36c25-dc13-4c91-98b8-c07a3957dd86",
            "title": "Which coercion is allowed?",
            "answers": [
              {
                "id": "268ba096-8a9d-4942-9f16-9830608421f2",
                "title": "&mut T → &T",
                "isCorrect": true
              },
              {
                "id": "903a3b0c-5b78-46e9-a00e-353b907bffae",
                "title": "&T → &mut T",
                "isCorrect": false
              },
              {
                "id": "1c781b49-c831-4d78-bfed-da9343d9d9ff",
                "title": "&T → T",
                "isCorrect": false
              },
              {
                "id": "9cea54f6-ba41-4970-abd5-2d4317eea392",
                "title": "T → &T always",
                "isCorrect": false
              }
            ],
            "descriptionText": "Mutable reference can be downgraded to immutable, reverse is forbidden by borrowing rules",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c07ca07b-b87d-4a81-ad3a-e157294630f6",
            "title": "What is the Drop trait for?",
            "answers": [
              {
                "id": "4f7a5d9a-036c-4324-8f6a-53b4ee99e507",
                "title": "Allows copying types by value",
                "isCorrect": false
              },
              {
                "id": "2ca7ebea-75a3-48cb-894c-68fc1fc5d189",
                "title": "Defines behavior when going out of scope",
                "isCorrect": true
              },
              {
                "id": "739a8650-6577-4c9e-9464-7d9940720fd6",
                "title": "Speeds up memory deallocation",
                "isCorrect": false
              },
              {
                "id": "1a0c6725-eeec-4bd3-9d7d-e822a890ea0a",
                "title": "Replaces RAII",
                "isCorrect": false
              }
            ],
            "descriptionText": "drop(&mut self) is called automatically on destruction",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2c103798-0c8f-4fa1-98a3-f4e0c1096960",
            "title": "Can you explicitly call the drop() method from Drop?",
            "answers": [
              {
                "id": "d1d519c3-179e-431f-9128-121238265d88",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "a9474736-6e5a-4e14-8d56-ee79cff945f5",
                "title": "Yes, but only in unsafe",
                "isCorrect": false
              },
              {
                "id": "ed6f881d-c389-4b7d-a68d-866e1f6a39db",
                "title": "No, need to use std::mem::drop(value)",
                "isCorrect": true
              },
              {
                "id": "fb037f5f-1c32-42f1-baae-218ad9e9f49a",
                "title": "Can, but only for Box<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Direct call value.drop() is forbidden; use free function drop",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a471c551-2990-493b-a1e7-297f5941146f",
            "title": "Order of variable destruction in a block:",
            "answers": [
              {
                "id": "328b1d5f-c37b-4f5b-9b1e-2fe28f439e84",
                "title": "In order of declaration",
                "isCorrect": false
              },
              {
                "id": "c8592130-9c08-4547-bb11-2c782a90978e",
                "title": "In reverse order of declaration",
                "isCorrect": true
              },
              {
                "id": "139a8288-3d4e-465b-92ae-8330352730a5",
                "title": "Random",
                "isCorrect": false
              },
              {
                "id": "e4fc8cb0-33f6-4073-b1a8-cf6d668d633b",
                "title": "By name",
                "isCorrect": false
              }
            ],
            "descriptionText": "LIFO — last created, first destroyed",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "67bccf93-07fe-4d82-967d-572ab1219d1e",
            "title": "What is Rc<T> for?",
            "answers": [
              {
                "id": "cad145cf-1c28-47ee-8dc9-d5611acefa94",
                "title": "Single ownership",
                "isCorrect": false
              },
              {
                "id": "30104b10-23ba-4433-9ba6-2b58937f1d89",
                "title": "Multiple ownership of one value in multithreaded context",
                "isCorrect": false
              },
              {
                "id": "17685ed3-675f-48ec-80bb-e495763adac4",
                "title": "Multiple ownership of one value in single-threaded context",
                "isCorrect": true
              },
              {
                "id": "0c4c2473-e81c-4aae-9699-fcb03f7ee272",
                "title": "Thread synchronization",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rc is reference counting, but only for single thread",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4c8fd78f-4bd8-4ebd-b75b-44d02a931e6f",
            "title": "What does Rc::clone do?",
            "answers": [
              {
                "id": "bde537ad-ab5d-4c9f-9d81-b74b734a51b8",
                "title": "Deep copies data",
                "isCorrect": false
              },
              {
                "id": "37cb198d-5e79-4e15-9770-ea1dd160e12a",
                "title": "Increments strong reference count",
                "isCorrect": true
              },
              {
                "id": "c9c43871-734c-422f-b980-dcc1b863c6d5",
                "title": "Copies only header and data",
                "isCorrect": false
              },
              {
                "id": "f545db19-15b4-4b12-b88c-d44d7446cf0c",
                "title": "Moves data",
                "isCorrect": false
              }
            ],
            "descriptionText": "Fast increment of counter, data is not copied",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "267594b8-e494-410d-9541-c9cf2d45f00d",
            "title": "Why is calling Rc::clone(&rc) instead of rc.clone() recommended?",
            "answers": [
              {
                "id": "6bb9cc5a-ad7f-45c7-bbc2-bbfa4a09f6de",
                "title": "It's faster",
                "isCorrect": false
              },
              {
                "id": "63dadb5b-284f-483f-ab65-7ecfff17453b",
                "title": "It's the only way",
                "isCorrect": false
              },
              {
                "id": "f04a4424-8152-4e41-baf5-ec4e43228e66",
                "title": "It's an idiom to explicitly denote \"cheap\" reference-cloning",
                "isCorrect": true
              },
              {
                "id": "19170084-583d-4ac5-ba59-06c30f0a2f4a",
                "title": "Otherwise won't compile",
                "isCorrect": false
              }
            ],
            "descriptionText": "Signals to the reader that no deep copying occurs",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5e5d29b6-bdab-4e77-91c6-8cf921b8f93d",
            "title": "What does Rc::strong_count(&rc) show?",
            "answers": [
              {
                "id": "ef1b4991-5506-4384-bf3a-feccb3d78709",
                "title": "Number of weak references",
                "isCorrect": false
              },
              {
                "id": "dee1d606-97e9-48fa-be34-0667ba92e0e5",
                "title": "Number of all references",
                "isCorrect": false
              },
              {
                "id": "1d054227-8a82-4c12-b1f3-0cd2eda2cb19",
                "title": "Number of strong references",
                "isCorrect": true
              },
              {
                "id": "d0f0b6b6-abe5-4afb-9fc4-928287fcb9be",
                "title": "Shows nothing, deprecated",
                "isCorrect": false
              }
            ],
            "descriptionText": "Shows the count of strong references",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "94e93845-702c-47f7-af88-a61e31327ca8",
            "title": "When will data inside Rc<T> be freed?",
            "answers": [
              {
                "id": "08551e56-468c-4c37-a95a-07045e5cb6e1",
                "title": "When strong_count == 0",
                "isCorrect": true
              },
              {
                "id": "0ca6ee2c-cd84-49f0-88c8-769c6904e4a4",
                "title": "When weak_count == 0",
                "isCorrect": false
              },
              {
                "id": "75fcacde-749b-4cc4-afd2-8d86f17ca191",
                "title": "When strong_count == weak_count",
                "isCorrect": false
              },
              {
                "id": "53b13fef-c1bf-4ffa-87b2-5b8ab37b68cb",
                "title": "When both owner variables go out of scope",
                "isCorrect": false
              }
            ],
            "descriptionText": "Weak references don't prevent deallocation",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9d4fee72-4156-4117-a0a6-8440e229f442",
            "title": "Can you modify data through Rc<T>?",
            "answers": [
              {
                "id": "fa1789a0-9c77-41a8-93e0-060588c9389c",
                "title": "Yes, through mut rc",
                "isCorrect": false
              },
              {
                "id": "eefa92e1-3e66-4435-b19e-a48bbb6e9af4",
                "title": "No, never",
                "isCorrect": false
              },
              {
                "id": "5cf86b1c-61b2-4a47-82cd-12b1a4e32670",
                "title": "Yes, if you wrap data in RefCell<T> and use Rc<RefCell<T>>",
                "isCorrect": true
              },
              {
                "id": "5ff4159f-fca2-4a72-8fa0-92bbdb434472",
                "title": "Yes, if you call Rc::get_mut",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rc<T> gives only immutable access; for mutation — interior mutability through RefCell",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "60a9a7e5-ee50-4c9e-b5a5-0a1dd20fc18f",
            "title": "When does Rc::get_mut(&mut rc) return Some(&mut T)?",
            "answers": [
              {
                "id": "08d79718-3c3b-4e41-a89d-652057ee124b",
                "title": "Always",
                "isCorrect": false
              },
              {
                "id": "f6e0db04-adcb-47b1-8726-53d6a34fe35e",
                "title": "If strong references are exactly 1",
                "isCorrect": true
              },
              {
                "id": "f5dbeb97-1cde-47e8-a5a7-8fff39f9af97",
                "title": "If weak references are 0",
                "isCorrect": false
              },
              {
                "id": "a07356e6-df8e-432e-863d-fdbd7440dfae",
                "title": "Never",
                "isCorrect": false
              }
            ],
            "descriptionText": "Safe mutation possible only with sole ownership",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f1ab42cf-c51b-44d5-b948-fff6d110ec76",
            "title": "What does RefCell<T> do?",
            "answers": [
              {
                "id": "23300129-7f16-4555-b17a-372c6aedef0b",
                "title": "Moves borrow checking to runtime",
                "isCorrect": true
              },
              {
                "id": "47c878d9-b1c5-4956-969d-ece150c9256d",
                "title": "Adds thread safety",
                "isCorrect": false
              },
              {
                "id": "9d6dda00-9d1e-4d18-9a73-b365ef08f65d",
                "title": "Improves mutation performance",
                "isCorrect": false
              },
              {
                "id": "dd1f5081-8d24-43c7-aa2c-1c703d242fba",
                "title": "Guarantees no panics",
                "isCorrect": false
              }
            ],
            "descriptionText": "Compiler allows, but checks (number of Ref/RefMut) are performed at runtime",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "29b1eaf2-061b-4183-83e8-cbdf360f9e31",
            "title": "What will borrow() on RefCell<T> return?",
            "answers": [
              {
                "id": "751b1916-7f43-43a6-90d6-0701cae9cc69",
                "title": "&T",
                "isCorrect": false
              },
              {
                "id": "421f3ee5-0414-429b-aecb-8b4c1a3eb423",
                "title": "&mut T",
                "isCorrect": false
              },
              {
                "id": "b2233b05-8c01-45e0-b4c6-453614483472",
                "title": "Ref<T>",
                "isCorrect": true
              },
              {
                "id": "7d4374aa-8e27-4654-abb8-57b0c6a3886a",
                "title": "RefMut<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "It's a smart pointer with Deref to &T",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d697910c-4dd7-4b6d-82cc-6bd03f2d562e",
            "title": "What will borrow_mut() return?",
            "answers": [
              {
                "id": "d253a2f0-4ab6-4f2d-93b9-227b655264be",
                "title": "&mut T",
                "isCorrect": false
              },
              {
                "id": "dd212efe-3cf3-4b93-8f5c-8ce547e46bcf",
                "title": "RefMut<T>",
                "isCorrect": true
              },
              {
                "id": "26d70894-8131-4174-b4af-ca6ef0c135de",
                "title": "Ref<T>",
                "isCorrect": false
              },
              {
                "id": "184ce7b2-573b-43ca-a089-b7380a23283c",
                "title": "&T",
                "isCorrect": false
              }
            ],
            "descriptionText": "Smart pointer with DerefMut to &mut T",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5438b2f1-d258-40f0-84c8-072d7fa01e4f",
            "title": "What happens with two borrow_mut() in the same scope?",
            "answers": [
              {
                "id": "bc42f8df-ef79-4694-96ce-d573fa913203",
                "title": "Compilation fails",
                "isCorrect": false
              },
              {
                "id": "90adae83-1e8c-4d5d-8350-690fccd4fee8",
                "title": "Program panics at runtime",
                "isCorrect": true
              },
              {
                "id": "aeaa83c1-19e1-4346-9974-deed57ea5024",
                "title": "Second returns None",
                "isCorrect": false
              },
              {
                "id": "a208f7d2-0f16-43bf-b400-d6a84119c95a",
                "title": "Everything's fine",
                "isCorrect": false
              }
            ],
            "descriptionText": "Violation of \"only one mutable reference\" rule — panic with BorrowMutError",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d0cb7e02-7b48-49e8-a0a1-65fc11120390",
            "title": "Can you have borrow() and borrow_mut() active simultaneously?",
            "answers": [
              {
                "id": "72f49bc1-7d93-4750-9321-0070b5d09925",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "697a1a5b-e8a6-4bac-a86c-7859836673dc",
                "title": "Yes, if T: Sync",
                "isCorrect": false
              },
              {
                "id": "773d8220-e58b-4a21-8a9d-14734599a33f",
                "title": "No, leads to panic",
                "isCorrect": true
              },
              {
                "id": "efcb29cd-05a9-49da-8133-1e04ba5873ca",
                "title": "Depends on platform",
                "isCorrect": false
              }
            ],
            "descriptionText": "Either many Ref, or one RefMut",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fc702922-cec5-4414-9835-65c09d8617d3",
            "title": "The Rc<RefCell<T>> combination provides:",
            "answers": [
              {
                "id": "355b34ec-7da2-45c5-9fd6-8400836d09ce",
                "title": "Multiple owners of immutable data",
                "isCorrect": false
              },
              {
                "id": "2cfb53c0-b573-4ba9-b5aa-dc639f7d845b",
                "title": "Multiple owners with mutation capability via interior mutability",
                "isCorrect": true
              },
              {
                "id": "4f60793d-afcf-4e57-9bf1-4145ef7781ce",
                "title": "Single owner and mutation",
                "isCorrect": false
              },
              {
                "id": "1506669f-dfcb-43d7-97f1-cf97139c7647",
                "title": "Thread safety",
                "isCorrect": false
              }
            ],
            "descriptionText": "Combines multiple ownership with runtime-checked mutation",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d1db4aa6-97c1-45b7-8010-901171458497",
            "title": "What is \"interior mutability\"?",
            "answers": [
              {
                "id": "94d60f5a-a321-4a8a-a3f5-b6872ece1df9",
                "title": "Mutation through unsafe always",
                "isCorrect": false
              },
              {
                "id": "20ffbde1-c0be-4baa-88f2-e0e32b2a5216",
                "title": "Ability to change internal value with externally immutable container",
                "isCorrect": true
              },
              {
                "id": "d412617b-bb0b-4868-b59a-a9c98414992b",
                "title": "Mutation only in tests",
                "isCorrect": false
              },
              {
                "id": "72caf279-4e23-47eb-814d-dc81e5617522",
                "title": "Technique exclusively with Box<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Pattern for mutation through immutable reference",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d5161793-8e54-4a69-9c22-0fccb8be6081",
            "title": "Why are \"reference cycles\" with Rc<T> dangerous?",
            "answers": [
              {
                "id": "aa2426ed-1336-4615-9901-49ba3ebc9d8c",
                "title": "Lead to data race",
                "isCorrect": false
              },
              {
                "id": "52885123-63b4-4e40-b769-fe227ae705db",
                "title": "Lead to memory leak",
                "isCorrect": true
              },
              {
                "id": "0298ff12-f8f7-46fd-9886-b80a1be92948",
                "title": "Lead to UB",
                "isCorrect": false
              },
              {
                "id": "d5726eee-d101-4cad-b75b-482ffbabfa16",
                "title": "Lead to double free",
                "isCorrect": false
              }
            ],
            "descriptionText": "Strong references don't drop to zero — Drop is not called",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7b5fbd0c-1946-4e1e-9424-da2a0808a6a5",
            "title": "How to avoid reference cycle in parent↔children tree?",
            "answers": [
              {
                "id": "7be7d46f-cd24-4320-ae7b-0d7712e23308",
                "title": "Use Box<T>",
                "isCorrect": false
              },
              {
                "id": "9459d50e-1a3e-4375-ba07-44c7ebbd6bd6",
                "title": "Use Weak<T> for parent reference",
                "isCorrect": true
              },
              {
                "id": "2653a5c0-453d-4ee5-bf81-8aab2f753031",
                "title": "Forbid parents",
                "isCorrect": false
              },
              {
                "id": "e507ee62-3401-48b8-b62b-8193383ffdae",
                "title": "Use RefCell<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Weak reference doesn't increment strong_count",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ec54b995-cf32-4b5d-b2fb-7c4a5f337391",
            "title": "What does Rc::downgrade(&rc) return?",
            "answers": [
              {
                "id": "a7c48415-78a9-41de-bfb1-f11f98b69fbb",
                "title": "Rc<T>",
                "isCorrect": false
              },
              {
                "id": "22927cc4-e410-4095-b5f9-f78830e8e0d2",
                "title": "&T",
                "isCorrect": false
              },
              {
                "id": "34d8dbc8-09c9-4dfa-bdd9-f95508580fe7",
                "title": "Weak<T>",
                "isCorrect": true
              },
              {
                "id": "27e956f9-7a39-4e49-8ab9-516fa1911547",
                "title": "Option<Rc<T>>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Creates a weak reference",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fbb65616-21c3-4c66-9674-ea99df3b5326",
            "title": "How to get Rc<T> from Weak<T>?",
            "answers": [
              {
                "id": "9ac8b0eb-f8e4-4291-b180-d87ab88f8b0d",
                "title": "clone()",
                "isCorrect": false
              },
              {
                "id": "638225a5-4be2-4f2a-a0c9-27066d0e21ad",
                "title": "upgrade()",
                "isCorrect": true
              },
              {
                "id": "62ce6a92-24f9-44d8-93f0-a2a0951952f0",
                "title": "try_clone()",
                "isCorrect": false
              },
              {
                "id": "4bd6fe65-a537-4b69-b33d-67d993238bfd",
                "title": "as_rc()",
                "isCorrect": false
              }
            ],
            "descriptionText": "upgrade() → Option<Rc<T>>, if object still alive",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4f1c90da-9282-4fdb-88d2-5294c7202b34",
            "title": "When does Weak<T> stop being a valid reference?",
            "answers": [
              {
                "id": "eb86c3ae-fde5-41fe-bb43-d7994e2597cf",
                "title": "When weak_count == 0",
                "isCorrect": false
              },
              {
                "id": "659b0a2d-0b03-4c1f-9b3d-b49384782a29",
                "title": "When strong_count == 0",
                "isCorrect": true
              },
              {
                "id": "bfe3b9b6-3df5-430d-95e4-66fea5df40fc",
                "title": "When both variables go out of scope",
                "isCorrect": false
              },
              {
                "id": "43873a16-b673-4593-884e-4cecbf2d9dcb",
                "title": "Never",
                "isCorrect": false
              }
            ],
            "descriptionText": "When strong_count == 0 data is freed; upgrade() returns None",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "172f7f1f-526a-4ccb-986d-c82fb399a18a",
            "title": "What does Rc::weak_count(&rc) show?",
            "answers": [
              {
                "id": "61017862-e56e-4298-bd35-ad60b83f526a",
                "title": "Number of weak references",
                "isCorrect": true
              },
              {
                "id": "c55490b3-853a-4fb6-bb55-d61ee456616b",
                "title": "Number of strong references",
                "isCorrect": false
              },
              {
                "id": "985da19b-feb8-4a10-b5a8-15af33c75bc1",
                "title": "Total number of references",
                "isCorrect": false
              },
              {
                "id": "1f7e8579-5d6d-4d4c-be30-ec9d7be4a9a3",
                "title": "Not publicly available",
                "isCorrect": false
              }
            ],
            "descriptionText": "Shows weak reference count",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b84e85e6-6e0b-4828-ba15-59753ca195b0",
            "title": "Can Rc<T> be made thread-safe?",
            "answers": [
              {
                "id": "47f73478-0bb4-4f32-807b-952aa8ca1784",
                "title": "Yes, with Mutex<T>",
                "isCorrect": false
              },
              {
                "id": "6f8405c8-7d1b-42b9-8fd7-498eb9fe95b1",
                "title": "Yes, by using Arc<T> instead of Rc<T>",
                "isCorrect": true
              },
              {
                "id": "fea4e8a8-3890-41c8-87ce-b26fb3abe6e7",
                "title": "Yes, through RefCell<T>",
                "isCorrect": false
              },
              {
                "id": "34b97e73-331e-429a-b141-d6689de4d04f",
                "title": "No",
                "isCorrect": false
              }
            ],
            "descriptionText": "For multithreading, Arc<T> is used (Chapter 16)",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b58aba1b-13e8-4438-8225-feaebd4e447d",
            "title": "Why couldn't Vec<String> be stored in mock object (Messenger example) without RefCell?",
            "answers": [
              {
                "id": "b2b8eebb-42a3-4b39-9332-cc3ebe8caaf8",
                "title": "Cannot allocate in tests",
                "isCorrect": false
              },
              {
                "id": "037df87a-544f-4ead-8c43-7088dc36664d",
                "title": "Method send(&self, ...) takes &self, but mutation requires &mut self",
                "isCorrect": true
              },
              {
                "id": "f9682ae8-8ee3-4419-9074-e0c92aa66316",
                "title": "Vec is not Send",
                "isCorrect": false
              },
              {
                "id": "3ea81cd2-29d1-4f10-82bb-e7fe02dc1b31",
                "title": "Vec is not Sync",
                "isCorrect": false
              }
            ],
            "descriptionText": "Interior mutability through RefCell allows mutation with &self",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "38d2b574-7fb8-4335-88c0-6b59303f5219",
            "title": "What happens if you call two borrow_mut() in a row in mock object?",
            "answers": [
              {
                "id": "7b1b41ab-f80b-4bf7-a3be-a46de2a5e4ca",
                "title": "Compilation breaks",
                "isCorrect": false
              },
              {
                "id": "898d07ab-ae7a-400b-bcf9-f1cd4aaafe37",
                "title": "panic! triggers",
                "isCorrect": true
              },
              {
                "id": "c7cf78c5-e539-4834-84c3-75594a725aed",
                "title": "Returns two independent RefMut",
                "isCorrect": false
              },
              {
                "id": "b3a6cbe0-ba89-4dc1-8362-c0e0bd859884",
                "title": "Copies data",
                "isCorrect": false
              }
            ],
            "descriptionText": "Runtime borrowing rules violation",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cb7910f4-814c-46ae-89c6-82e4a8ea7990",
            "title": "Is Box<T> a \"thin\" pointer?",
            "answers": [
              {
                "id": "e54408ed-5cbb-4c98-a33c-73441f40d479",
                "title": "Yes",
                "isCorrect": true
              },
              {
                "id": "bd5236d1-5c60-402c-a056-67e2416c7157",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "67c4edbc-393e-4532-89c2-f3a65676c76c",
                "title": "Depends on T",
                "isCorrect": false
              },
              {
                "id": "37197ca2-53a5-4bf4-99bb-a12d78ded4b7",
                "title": "Only in nightly",
                "isCorrect": false
              }
            ],
            "descriptionText": "Stores only address (plus metadata for DST), size is known",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "316768d9-76fb-40d5-96a7-5630d25a7d73",
            "title": "What is Box<dyn Trait> useful for?",
            "answers": [
              {
                "id": "9620f438-8193-4150-b6e8-6eeae3a3ad7d",
                "title": "For generics",
                "isCorrect": false
              },
              {
                "id": "61e0c049-7da4-4abb-a5c3-525073e1fe7d",
                "title": "For storing values of concrete type",
                "isCorrect": false
              },
              {
                "id": "e19e8643-e065-467a-9376-106864a5f732",
                "title": "For dynamic dispatch via trait object",
                "isCorrect": true
              },
              {
                "id": "1d81a5d1-82c8-4d3e-bee4-e25e2fbbcb06",
                "title": "To speed up compilation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Enables trait objects for dynamic dispatch",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ad55cd72-0a16-41bb-b51e-3a802d7361b4",
            "title": "Can you dereference Box<T> with * operator?",
            "answers": [
              {
                "id": "792d416c-48da-42ee-9a5b-8d4f2fb2779c",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "9132e4f2-d2a3-46f3-a6f9-4eb2aa92ac82",
                "title": "Yes, thanks to Deref",
                "isCorrect": true
              },
              {
                "id": "39ef9afd-8256-456d-ad56-985ff9633055",
                "title": "Only if T: Copy",
                "isCorrect": false
              },
              {
                "id": "59ee7f1c-bb76-4830-97e4-e93a3e85924a",
                "title": "Only through unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Box implements Deref",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b41ff87a-aec1-4c79-8658-b883fddcccd5",
            "title": "What happens if you panic in Drop::drop?",
            "answers": [
              {
                "id": "91e32ad2-de0e-4e68-b14c-f57b7ae8a5b6",
                "title": "Always UB",
                "isCorrect": false
              },
              {
                "id": "86cb562b-45cd-4e3f-a58c-822d53a84677",
                "title": "Allowed, but may lead to double panic and abort",
                "isCorrect": true
              },
              {
                "id": "db55a10a-7531-47e8-85ad-38e54e640cb7",
                "title": "Ignored",
                "isCorrect": false
              },
              {
                "id": "836c8b32-fb93-4232-bd0c-e9d8792b5697",
                "title": "Forbidden by compiler",
                "isCorrect": false
              }
            ],
            "descriptionText": "Panic in drop is dangerous during ongoing panic (double panic)",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ebc19d75-96c2-4ca8-b7fa-d4e5e9f2ed78",
            "title": "What doesn't RefCell<T> do?",
            "answers": [
              {
                "id": "cbca5aa3-bf1d-4207-aa57-56785e8eb166",
                "title": "Allows mutation with &self",
                "isCorrect": false
              },
              {
                "id": "e0b32188-2c90-43fc-9289-93b2dad10f7f",
                "title": "Makes type thread-safe",
                "isCorrect": true
              },
              {
                "id": "84208f77-be13-4387-bc0b-0aaab0e58d72",
                "title": "Checks borrows at runtime",
                "isCorrect": false
              },
              {
                "id": "be32c13d-2752-46a0-a58f-bcb3eb967241",
                "title": "Returns Ref/RefMut",
                "isCorrect": false
              }
            ],
            "descriptionText": "RefCell is not thread-safe",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "982c266f-47ff-4e6f-b72c-9455a18dec36",
            "title": "Why can &String be coerced to &str?",
            "answers": [
              {
                "id": "0c217029-ca88-48ae-ad00-85352ed16732",
                "title": "Special compiler magic",
                "isCorrect": false
              },
              {
                "id": "30de7c35-8707-40cc-8ed1-b4534f92d420",
                "title": "Because String: Deref<Target = str>",
                "isCorrect": true
              },
              {
                "id": "b26505a6-cc5c-4a8b-9034-8ba83cab7392",
                "title": "Because str: Deref<String>",
                "isCorrect": false
              },
              {
                "id": "b07f34f6-0ced-431d-ae6e-b025a569b00f",
                "title": "Because String: AsRef<str> and it's automatic",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref coercion from String to str",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4907879b-a7ad-45c3-8b4c-2d45cc23cb7d",
            "title": "What is a \"recursive type with known size\"?",
            "answers": [
              {
                "id": "520864d0-b74e-4f89-918a-7ef015207992",
                "title": "Type where all variants are equal in size",
                "isCorrect": false
              },
              {
                "id": "f9b8b63e-2994-426a-bc02-73653aedb9bb",
                "title": "Recursive type where recursion goes through pointer (Box/Rc/&)",
                "isCorrect": true
              },
              {
                "id": "b7d2cafa-308d-43ec-9471-5e9efc2917cd",
                "title": "Type that doesn't use Box",
                "isCorrect": false
              },
              {
                "id": "1e8142b0-0629-4a38-91bd-f9357db9ea0b",
                "title": "Type whose size is computed at runtime",
                "isCorrect": false
              }
            ],
            "descriptionText": "Indirection provides known size",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9bc0ae79-66fb-4198-a6b5-a9414635a00c",
            "title": "What happens when printing cyclic Rc structure without protection?",
            "answers": [
              {
                "id": "33bbdb32-022c-400f-8416-8ba21775bd65",
                "title": "Everything prints",
                "isCorrect": false
              },
              {
                "id": "efbbdc72-c3b1-45d9-b648-e57f4df1dec4",
                "title": "Compiler forbids",
                "isCorrect": false
              },
              {
                "id": "d32b2c98-4093-4136-a173-6fce76cba96f",
                "title": "Possible stack overflow (infinite recursion)",
                "isCorrect": true
              },
              {
                "id": "47e4aa3e-5008-4ac3-a1b1-30e2857c64c3",
                "title": "Returns None",
                "isCorrect": false
              }
            ],
            "descriptionText": "Infinite cycle causes stack overflow",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "53a05ccf-66fc-4e8c-a512-41fc6efadeab",
            "title": "When is it appropriate to call drop(x) manually?",
            "answers": [
              {
                "id": "b2ee67d0-ce54-4354-a7fb-3e30911353d6",
                "title": "Never",
                "isCorrect": false
              },
              {
                "id": "62dc60bc-3d02-40dc-8a5f-2fb51305f732",
                "title": "When need to free resource before end of scope (e.g., mutex)",
                "isCorrect": true
              },
              {
                "id": "4191af85-64df-4915-8ad4-a1d7d79237fb",
                "title": "To speed up program",
                "isCorrect": false
              },
              {
                "id": "91a0dfee-21aa-4797-b7b1-09f8afa18c4c",
                "title": "To decrease Rc::strong_count",
                "isCorrect": false
              }
            ],
            "descriptionText": "Early cleanup when needed",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "47bc229e-0dfa-45c2-bb05-c3dca8201673",
            "title": "What does Weak<T> store?",
            "answers": [
              {
                "id": "307baa2b-d71e-4722-b6cc-0c95816933fc",
                "title": "Strong reference",
                "isCorrect": false
              },
              {
                "id": "654d623d-0b62-4839-859d-b9514b28c9bd",
                "title": "Weak reference, not preventing deallocation",
                "isCorrect": true
              },
              {
                "id": "3b74f5a7-5fac-4c38-af94-8b9cd1ad2bf0",
                "title": "Copy of data",
                "isCorrect": false
              },
              {
                "id": "0d6211e2-a7d7-4556-b1f3-1333da35f5df",
                "title": "Offset for ZST",
                "isCorrect": false
              }
            ],
            "descriptionText": "Non-owning reference",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "36eae11f-9042-47bb-9be7-e3acf1a2a7f3",
            "title": "How to check if object pointed to by Weak<T> is alive?",
            "answers": [
              {
                "id": "792b6626-9312-45a8-aec2-69cafdc061f4",
                "title": "is_alive()",
                "isCorrect": false
              },
              {
                "id": "42129ec7-f509-4a95-b136-2eeff3505fea",
                "title": "try()",
                "isCorrect": false
              },
              {
                "id": "0e6e9ef4-9863-45fa-8c91-6ca4eed5214d",
                "title": "upgrade().is_some()",
                "isCorrect": true
              },
              {
                "id": "fa21bcb7-bf6e-4500-bb84-90c97c03b5af",
                "title": "alive()",
                "isCorrect": false
              }
            ],
            "descriptionText": "upgrade() returns Option",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a759de14-91b1-4f1f-970b-04effe5466fb",
            "title": "How does Rc<T> differ from Box<T>?",
            "answers": [
              {
                "id": "49e4874e-762d-42c6-bc20-7049cb045267",
                "title": "Rc is single owner, Box is shared",
                "isCorrect": false
              },
              {
                "id": "05a0ed65-450d-4040-ba77-ad0ac368b31a",
                "title": "Rc is shared owner, Box is single",
                "isCorrect": true
              },
              {
                "id": "23260d8c-e9ce-4145-a160-80299ffaed1e",
                "title": "Both are shared owners",
                "isCorrect": false
              },
              {
                "id": "850e0b22-d3b0-4ac8-8149-046375b597c8",
                "title": "Both are single owners",
                "isCorrect": false
              }
            ],
            "descriptionText": "Different ownership models",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "95b7624c-a69e-49a6-bf40-24ae01c48bcb",
            "title": "What happens with RefMut<T> if you try to take borrow() in parallel?",
            "answers": [
              {
                "id": "79a002b9-dcac-4a3d-b2da-c7cac7f845fb",
                "title": "Returns another RefMut",
                "isCorrect": false
              },
              {
                "id": "9ec29718-574a-4bf7-841e-dcbc9b4d9229",
                "title": "Returns Ref",
                "isCorrect": false
              },
              {
                "id": "eeb042b2-6f2e-419b-9f6b-71aad40f070f",
                "title": "Runtime panic",
                "isCorrect": true
              },
              {
                "id": "45a8ffcb-826a-40ae-9704-c1522167868c",
                "title": "Compiles, but UB",
                "isCorrect": false
              }
            ],
            "descriptionText": "Borrowing rules enforced at runtime",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c34f4903-04d5-448d-9b7d-fb6dc0d65828",
            "title": "Why is RefCell<T> only for single-threaded code?",
            "answers": [
              {
                "id": "6d98e914-a17e-4dbf-85b3-dc18c2a224e3",
                "title": "Doesn't implement Sync/Send",
                "isCorrect": true
              },
              {
                "id": "f60c30e7-7290-4e98-b73e-03b21c01e33f",
                "title": "Because it's slow",
                "isCorrect": false
              },
              {
                "id": "23b25699-e918-4bd0-b710-aace5fbf6d81",
                "title": "Requires unsafe",
                "isCorrect": false
              },
              {
                "id": "fedb87cf-4e19-4326-b7b8-7a876082d00a",
                "title": "Because it's deprecated",
                "isCorrect": false
              }
            ],
            "descriptionText": "Not thread-safe by design",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3fd153a0-2e7e-4a91-bc2f-5c437bf89714",
            "title": "What properties does Rc<RefCell<T>> provide?",
            "answers": [
              {
                "id": "627a2379-eb58-42a1-8915-9345106b6e4a",
                "title": "Multiple mutation without checks",
                "isCorrect": false
              },
              {
                "id": "a8ea3829-9b0c-4906-ba9d-3d5d652d7679",
                "title": "Multiple mutation with compile-time checks",
                "isCorrect": false
              },
              {
                "id": "c3eed8bb-c725-4f14-b909-1a150bfa684d",
                "title": "Multiple ownership + runtime mutation checks",
                "isCorrect": true
              },
              {
                "id": "f644f24a-ea59-4752-965b-230797b37771",
                "title": "Multiple ownership + thread safety",
                "isCorrect": false
              }
            ],
            "descriptionText": "Shared ownership with interior mutability",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "55b19461-bcf9-4d43-a0ca-0b1cea570acb",
            "title": "What happens if last Rc<T> is destroyed but Weak<T> remain?",
            "answers": [
              {
                "id": "d27b8998-8900-4898-8f6a-9afd0c38fd8e",
                "title": "Data lives until last Weak",
                "isCorrect": false
              },
              {
                "id": "276576ab-4826-46e3-a134-71fa59a1fb96",
                "title": "Data freed, Weak::upgrade() returns None",
                "isCorrect": true
              },
              {
                "id": "a544d51a-c914-4896-bad7-70752f6d31d2",
                "title": "Data not freed",
                "isCorrect": false
              },
              {
                "id": "26a2a5fa-d1b6-463c-9961-a3385069ef8b",
                "title": "Panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "Weak doesn't prevent deallocation",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "38054c2a-6359-488c-8380-c246fcc131d0",
            "title": "Why are \"just references &T\" in recursive type inconvenient?",
            "answers": [
              {
                "id": "21d1d0c4-6ab5-4a60-a42a-a94a3476573d",
                "title": "Always slower",
                "isCorrect": false
              },
              {
                "id": "6ff60cff-9331-451c-8d3e-fba522ed593c",
                "title": "Require lifetimes and often don't express needed ownership",
                "isCorrect": true
              },
              {
                "id": "f58d816b-980e-4278-ad89-ecc5f604461a",
                "title": "Forbidden in enum",
                "isCorrect": false
              },
              {
                "id": "cc678576-e75c-496b-8095-36d0c011c75d",
                "title": "Don't work with Vec",
                "isCorrect": false
              }
            ],
            "descriptionText": "Lifetime and ownership complications",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0c28544d-96b6-4ece-b855-b2dd1f04ba87",
            "title": "What is #[derive(Debug)] useful for in list/tree examples?",
            "answers": [
              {
                "id": "ef2a0141-6cd1-4827-9fe4-071a82eba7e9",
                "title": "For cloning",
                "isCorrect": false
              },
              {
                "id": "d29464db-e435-443c-9316-7a52ba9a64f6",
                "title": "For automatic Drop",
                "isCorrect": false
              },
              {
                "id": "9a9c47f4-aa7b-4b73-a9bd-7513198940e7",
                "title": "For convenient debug printing of structures",
                "isCorrect": true
              },
              {
                "id": "6438a4bc-bb1a-4eeb-9e3c-762a70c8344f",
                "title": "For optimizations",
                "isCorrect": false
              }
            ],
            "descriptionText": "Enables debug formatting",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "48eaf332-c74b-46cc-ab0e-0b9b29efc142",
            "title": "Why can Rc + RefCell lead to leaks?",
            "answers": [
              {
                "id": "8bdedfc0-d29c-4581-89df-8700ec3d32b1",
                "title": "Because of RefCell",
                "isCorrect": false
              },
              {
                "id": "5d16457c-ed72-459c-80f0-517b13ee2ace",
                "title": "Because of panics",
                "isCorrect": false
              },
              {
                "id": "1659e221-90b5-4c47-8bdc-a9a50046e5cd",
                "title": "Because of strong reference cycles in Rc",
                "isCorrect": true
              },
              {
                "id": "5dc8b38e-780e-4491-b5d1-629793f889c0",
                "title": "Because of Deref",
                "isCorrect": false
              }
            ],
            "descriptionText": "Cycles prevent reference counts reaching zero",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e2fa961b-0566-4012-a161-1852ce5b970c",
            "title": "How to break cycle in Rc-graph?",
            "answers": [
              {
                "id": "0863dd1c-7cfa-4c6b-8e48-cab3d06377c3",
                "title": "Use Box instead of Rc",
                "isCorrect": false
              },
              {
                "id": "bbab1e8d-2e1e-492a-9707-5544fef5de91",
                "title": "Use Weak in edges where ownership not required",
                "isCorrect": true
              },
              {
                "id": "d6f816d0-3787-43cd-a81a-381b17b25dcd",
                "title": "Switch to RefCell",
                "isCorrect": false
              },
              {
                "id": "9269b71b-7d10-4636-af09-8b4197b5d8aa",
                "title": "Forbidden in Rust",
                "isCorrect": false
              }
            ],
            "descriptionText": "Weak breaks ownership cycles",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "20ed9ed2-ecc8-43a2-b277-87df567af612",
            "title": "What's true about Box<T> and performance?",
            "answers": [
              {
                "id": "444435ed-ffcd-4f6f-9d47-e348d76be21f",
                "title": "Always faster than stack",
                "isCorrect": false
              },
              {
                "id": "d7e34043-ef64-4cf1-b27b-781d4663f51d",
                "title": "No overhead except heap indirection",
                "isCorrect": true
              },
              {
                "id": "30bbaab0-9c63-4b6d-8769-8e17702c6cf1",
                "title": "10x slower everywhere",
                "isCorrect": false
              },
              {
                "id": "119999cc-696d-4875-9d20-31905ae411c1",
                "title": "Significantly slows compilation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Minimal overhead design",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cf86d7e1-7cc0-4361-bf3b-61b4fe1e8b4f",
            "title": "Can you store unsized types (DST) in Box?",
            "answers": [
              {
                "id": "f9ef0620-5cb5-4f52-aa87-d8410790712e",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "01ce9867-a4f9-41dc-a5cc-c26700085bae",
                "title": "Yes, e.g. Box<str> or Box<[T]>",
                "isCorrect": true
              },
              {
                "id": "80c516b8-8412-4502-bdb6-8632a2624e6a",
                "title": "Only in nightly",
                "isCorrect": false
              },
              {
                "id": "296f4c9e-5c57-4648-8c0b-e9c9d124cbd0",
                "title": "Only through unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Box supports dynamically sized types",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6c876cd0-e610-4e34-9209-01df213cc679",
            "title": "Why shouldn't you call drop in Drop::drop on same object?",
            "answers": [
              {
                "id": "b668d814-5334-45b0-bdce-fa67dcbaaea6",
                "title": "It speeds up",
                "isCorrect": false
              },
              {
                "id": "9f5ce58b-9981-4180-bee5-2cc7e21e6287",
                "title": "Leads to double destruction/panic",
                "isCorrect": true
              },
              {
                "id": "9db1bb1b-6419-4bba-9ece-721d00b6bac4",
                "title": "Requires unsafe",
                "isCorrect": false
              },
              {
                "id": "4bea1161-63c5-4531-9474-75f61968acc9",
                "title": "Meaningless — no such API",
                "isCorrect": false
              }
            ],
            "descriptionText": "Double free prevention",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8a8f4cda-3928-4449-8c29-320ae3480228",
            "title": "What makes Ref<T> useful?",
            "answers": [
              {
                "id": "e5cffddb-4658-48d8-8f27-010562a6cbd9",
                "title": "It's &T with borrow counting",
                "isCorrect": true
              },
              {
                "id": "e064d968-0bfb-4d57-b213-9e15ba1eb7fa",
                "title": "It's Rc<T>",
                "isCorrect": false
              },
              {
                "id": "b14c8af3-2457-4a0d-a9b0-c94b120a604a",
                "title": "It's Box<T>",
                "isCorrect": false
              },
              {
                "id": "baa3e360-c852-4603-97c7-8ce64b6e2dee",
                "title": "It's Weak<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Runtime-checked reference",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cfa997d6-3b23-48dc-b59a-90800ecd4efe",
            "title": "What if Ref<T> hasn't left scope and we take borrow_mut()?",
            "answers": [
              {
                "id": "8b0e2e6c-4dc8-41ce-a78b-386fecf18941",
                "title": "Returns Some",
                "isCorrect": false
              },
              {
                "id": "399ff53c-1bd1-4a17-a612-3cc6d7083f35",
                "title": "Will panic! with BorrowMutError",
                "isCorrect": true
              },
              {
                "id": "6f2b3956-0c03-4342-a1f9-1ba1610746ad",
                "title": "Compilation fails",
                "isCorrect": false
              },
              {
                "id": "cdc3c709-99d3-47f8-b33a-26cff9944af8",
                "title": "Implicit drop occurs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Runtime borrow check violation",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3c91f54b-76d0-4a90-b5ff-0965fe0f3cf1",
            "title": "Why doesn't Rc<T> have method to always get &mut T?",
            "answers": [
              {
                "id": "0dec20f8-9e64-4444-b565-4dad958c0c47",
                "title": "There is — as_mut()",
                "isCorrect": false
              },
              {
                "id": "c3395625-ed3e-4b10-b4af-b659632ceaf2",
                "title": "There is — get_unchecked_mut",
                "isCorrect": false
              },
              {
                "id": "f34169d3-a47b-4776-9995-9bb0ffa5a437",
                "title": "Because there can be multiple owners, and unique mutation isn't safe",
                "isCorrect": true
              },
              {
                "id": "7bdf5160-2b7a-470f-8091-8fa6a757c86a",
                "title": "Because T may not be Copy",
                "isCorrect": false
              }
            ],
            "descriptionText": "Shared ownership prevents exclusive mutation",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "112836a3-0223-44f0-8170-6f9b2c1e05b1",
            "title": "What does Cons(Rc<RefCell<i32>>, Rc<List>) mean for mutation?",
            "answers": [
              {
                "id": "a9ca58af-c9fa-453f-9e2d-183ababfb1a4",
                "title": "Cannot mutate",
                "isCorrect": false
              },
              {
                "id": "fea0ded3-6ff0-4014-829c-0939a7900669",
                "title": "Can only mutate tail",
                "isCorrect": false
              },
              {
                "id": "1c32735e-f459-4c59-a63c-b142d742b1a9",
                "title": "Can mutate number inside list via borrow_mut()",
                "isCorrect": true
              },
              {
                "id": "1bc2b69a-207d-4d8b-bed3-248a04ab5483",
                "title": "Can only mutate through unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Interior mutability pattern in action",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5d17b6a9-6c46-4300-a536-5514bda82f0d",
            "title": "What's the main advantage of smart pointers in Rust?",
            "answers": [
              {
                "id": "8c6a9aaa-f460-41b1-af32-9fbe9622dd7b",
                "title": "Garbage collector",
                "isCorrect": false
              },
              {
                "id": "f6a5a592-f263-40a4-bb57-8313f4a7c175",
                "title": "Zero-cost abstractions when used correctly",
                "isCorrect": true
              },
              {
                "id": "343d8bb1-c1ac-48ea-859e-72285808fe8c",
                "title": "Automatic unsafe",
                "isCorrect": false
              },
              {
                "id": "50bb70f9-9612-4359-ad4a-e9344fff9b3a",
                "title": "Ability to bypass borrow checker everywhere",
                "isCorrect": false
              }
            ],
            "descriptionText": "For example, iterators/Box/Rc when properly applied don't add overhead beyond necessary",
            "descriptionLink": "smart_pointers_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "ef841772-7a30-43a8-8831-2e05773c02e2",
        "theme": "Fearless Concurrency",
        "priority": 12,
        "questions": [
          {
            "id": "73a57925-7634-4393-bd42-9220451a01a5",
            "title": "What is a \"thread\" in the context of Rust (standard library)?",
            "answers": [
              {
                "id": "ee19969a-da1d-43a0-bd97-b67ed133bc11",
                "title": "Lightweight green thread of runtime",
                "isCorrect": false
              },
              {
                "id": "fd2f161b-59ab-457d-95e6-8c7b6798c5bf",
                "title": "1:1 correspondence with OS thread",
                "isCorrect": true
              },
              {
                "id": "5d6f2ed9-2051-447f-9c6d-97a6af77485f",
                "title": "OS process",
                "isCorrect": false
              },
              {
                "id": "eea978cf-e397-4164-bd62-6b26295209d2",
                "title": "Asynchronous task",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust standard library uses 1:1 model (OS thread per thread)",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "32963000-50ad-46ed-b50d-193a67df3e1d",
            "title": "What does thread::spawn do?",
            "answers": [
              {
                "id": "c2f1a763-c30e-48c2-aaf0-b5557b07f573",
                "title": "Starts a new process",
                "isCorrect": false
              },
              {
                "id": "cb09979b-d5e2-431c-b91d-a8fe47cd2ff5",
                "title": "Creates a new thread and returns JoinHandle<T>",
                "isCorrect": true
              },
              {
                "id": "69c84aba-636b-4bcb-a28c-c8ab9fecc65c",
                "title": "Blocks current thread",
                "isCorrect": false
              },
              {
                "id": "ae16d96e-2110-4c61-a984-e03e711fa642",
                "title": "Returns Result",
                "isCorrect": false
              }
            ],
            "descriptionText": "spawn accepts a closure and returns a handle for joining",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f6076ae7-392e-4f9a-baad-fbf154d8f142",
            "title": "What is JoinHandle::join for?",
            "answers": [
              {
                "id": "6879bc90-9053-4041-b59c-b8ecd4913084",
                "title": "To kill the thread",
                "isCorrect": false
              },
              {
                "id": "5e362eea-4766-4053-9771-5025c687f556",
                "title": "To wait for thread completion and get result",
                "isCorrect": true
              },
              {
                "id": "ccd51cc1-9026-4a8c-a5f1-69580add7892",
                "title": "To \"detach\" the thread",
                "isCorrect": false
              },
              {
                "id": "d1395144-d99b-4b16-84f7-8a5acd415dfe",
                "title": "To increase thread priority",
                "isCorrect": false
              }
            ],
            "descriptionText": "join() blocks calling thread until spawned one finishes",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "749bf96b-5533-45d8-8ef2-6e99c63df77d",
            "title": "What happens to child threads if main thread exits?",
            "answers": [
              {
                "id": "32d5e56a-9f15-46ff-ab9a-90691e910ee1",
                "title": "They continue running",
                "isCorrect": false
              },
              {
                "id": "14969f9e-dec1-4835-ac83-8a4c8f9943ba",
                "title": "Runtime takes over their work",
                "isCorrect": false
              },
              {
                "id": "5c791285-bc3e-4893-89a2-5a7b2ec101b4",
                "title": "They are terminated prematurely",
                "isCorrect": true
              },
              {
                "id": "aa067a33-2b82-4048-ae51-90b029511003",
                "title": "Nothing, behavior is undefined",
                "isCorrect": false
              }
            ],
            "descriptionText": "Child threads are terminated when main exits",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "249b403b-5dc4-4f0f-9011-61708d82db57",
            "title": "Why is the move keyword often used in closures passed to spawn?",
            "answers": [
              {
                "id": "95040b2b-ea60-4759-bced-03792a35f5ae",
                "title": "To speed up execution",
                "isCorrect": false
              },
              {
                "id": "c7e9625a-3681-4b81-a17d-9a8f3d03b119",
                "title": "To make closure capture values by reference",
                "isCorrect": false
              },
              {
                "id": "c030795e-ad48-4015-9a81-46554428fc25",
                "title": "To make closure move ownership of captured values into thread",
                "isCorrect": true
              },
              {
                "id": "e95789c9-f706-4fa0-8c8e-33cad83453fa",
                "title": "To make closure FnMut",
                "isCorrect": false
              }
            ],
            "descriptionText": "move transfers ownership into the thread",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e6e4e7f2-2001-4d0c-9b0f-9526b74b92e5",
            "title": "Why might code using borrows from outer scope without move not compile?",
            "answers": [
              {
                "id": "6e874c46-0f1c-4f03-8fc9-1e77f255f79e",
                "title": "Compiler doesn't support references in threads",
                "isCorrect": false
              },
              {
                "id": "e688c559-387a-4293-822c-7f5bd537e225",
                "title": "'static is required for data used by thread",
                "isCorrect": true
              },
              {
                "id": "13a21a91-e9e7-480d-a145-c6117c391b05",
                "title": "Always need Arc",
                "isCorrect": false
              },
              {
                "id": "1b721d23-f960-41e3-a947-492abb9228bf",
                "title": "References are forbidden in Rust",
                "isCorrect": false
              }
            ],
            "descriptionText": "Thread can outlive current scope, so captured data must be 'static or moved inside",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "85c7f387-c911-4043-bc35-8ebb0a844982",
            "title": "Channels std::sync::mpsc are:",
            "answers": [
              {
                "id": "cdce2d7e-8543-49b7-a7b3-7597a9e3f9a1",
                "title": "Multiple consumer, single producer",
                "isCorrect": false
              },
              {
                "id": "029ad8bf-22e8-495d-90b1-1a5ff70815a0",
                "title": "Single consumer, multiple producers",
                "isCorrect": true
              },
              {
                "id": "9ce481c4-ca33-4481-9945-71e3be163a92",
                "title": "Multiple consumer, multiple producer",
                "isCorrect": false
              },
              {
                "id": "79610e15-858c-4f80-a875-d56e0508edad",
                "title": "Only single producer and consumer",
                "isCorrect": false
              }
            ],
            "descriptionText": "mpsc stands for multiple producer, single consumer",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7d1e0108-fc53-4a9e-906c-16c149bb16d5",
            "title": "What does mpsc::channel() return?",
            "answers": [
              {
                "id": "715c8eec-1ac5-42f4-a104-3df8084bf338",
                "title": "(Sender<T>, Receiver<T>)",
                "isCorrect": true
              },
              {
                "id": "90ed9f09-dd9a-4bb4-9f6a-8b564ae69e07",
                "title": "Result<(Sender<T>, Receiver<T>)>",
                "isCorrect": false
              },
              {
                "id": "c346325b-ed3e-4aad-870e-3f272216863c",
                "title": "Arc<Mutex<T>>",
                "isCorrect": false
              },
              {
                "id": "92c99778-62cc-4537-836b-6af8d7df5cc0",
                "title": "JoinHandle<(Sender<T>, Receiver<T>)>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Returns tuple of sender and receiver",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "49c76b80-f5e0-49d2-a526-9224537f8b73",
            "title": "What does Sender::send(value) do in terms of ownership?",
            "answers": [
              {
                "id": "e580a324-22f4-4c2b-9f60-3d380c0d3a99",
                "title": "Copies the value",
                "isCorrect": false
              },
              {
                "id": "b3ffeba5-5cf6-47c1-9d94-8678dfc24b64",
                "title": "Moves the value to another thread",
                "isCorrect": true
              },
              {
                "id": "1473d5ec-56b0-471b-944d-f8b65238cd8e",
                "title": "Borrows the value",
                "isCorrect": false
              },
              {
                "id": "bd200d96-1f78-4f50-8d74-bde8f7542e1e",
                "title": "None of these",
                "isCorrect": false
              }
            ],
            "descriptionText": "send transfers ownership across threads",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "73f69f9b-8731-4946-9661-ac9cdf341914",
            "title": "How does recv() differ from try_recv() on Receiver?",
            "answers": [
              {
                "id": "538d21b8-d6ca-4f89-970a-00f89e9f0e26",
                "title": "recv is non-blocking, try_recv is blocking",
                "isCorrect": false
              },
              {
                "id": "a1fc0717-fcf5-4cf3-8d1b-72096a3112bc",
                "title": "Both block",
                "isCorrect": false
              },
              {
                "id": "b115d0ce-c283-40e2-944a-bb2d688bf15e",
                "title": "recv blocks, try_recv returns immediately",
                "isCorrect": true
              },
              {
                "id": "a54d5a8e-8020-4e5d-8fd8-ee8b6c828215",
                "title": "Both are non-blocking",
                "isCorrect": false
              }
            ],
            "descriptionText": "recv waits, try_recv doesn't",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9f185857-c63a-4497-b284-0243fedd148f",
            "title": "Can you have multiple senders (Sender) for one receiver (Receiver)?",
            "answers": [
              {
                "id": "ad432c06-42e8-4825-925e-7eff133be01c",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "6a289773-6675-4059-8776-b6b9ff81370c",
                "title": "Yes, via clone() of sender",
                "isCorrect": true
              },
              {
                "id": "76ecec7a-3a7e-4dcb-802e-6836254deefc",
                "title": "Only through Arc<Sender<_>>",
                "isCorrect": false
              },
              {
                "id": "58eac77d-3e04-4638-abe0-9b77ec5ce665",
                "title": "Only in nightly",
                "isCorrect": false
              }
            ],
            "descriptionText": "Clone sender for multiple producers",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "53bab99c-9b0f-42fc-aff6-63cb17f88885",
            "title": "What happens when sending on a channel if receiver is already closed?",
            "answers": [
              {
                "id": "5c56fcaf-d143-4aa2-8ed2-a26df7374134",
                "title": "Blocks forever",
                "isCorrect": false
              },
              {
                "id": "b8734a4a-3f3a-4507-88bf-116db4790266",
                "title": "Process crashes",
                "isCorrect": false
              },
              {
                "id": "4a8634ea-4488-4707-b681-a483ae9a64d8",
                "title": "send returns error",
                "isCorrect": true
              },
              {
                "id": "4f3e64d3-4e21-4a9a-812b-adea9f86cb3c",
                "title": "Message is lost without error",
                "isCorrect": false
              }
            ],
            "descriptionText": "send returns Err when receiver dropped",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "27b885cf-4c95-41de-94c4-b5a6152a75dc",
            "title": "How does the message-passing approach slogan sound?",
            "answers": [
              {
                "id": "7b3e4f99-595b-4725-8f00-a8cae2a185d4",
                "title": "\"Communicate by sharing memory\"",
                "isCorrect": false
              },
              {
                "id": "3b88adef-5582-4261-b226-bf87d4c503e1",
                "title": "\"Don't share memory to communicate; communicate to share memory\"",
                "isCorrect": true
              },
              {
                "id": "795d073f-2d5b-45a8-ac73-6a452ae047ca",
                "title": "\"Use global variables\"",
                "isCorrect": false
              },
              {
                "id": "88a7c869-9628-4cf1-b8c2-e38441a13f3c",
                "title": "\"Only mutexes — only hardcore\"",
                "isCorrect": false
              }
            ],
            "descriptionText": "Classic concurrency philosophy",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cb025067-22fb-495b-9fdc-54b12670b888",
            "title": "What is Mutex<T>?",
            "answers": [
              {
                "id": "3db9b07f-c985-4c03-aaa5-a0101988bd35",
                "title": "Primitive allowing only one thread to own T at any moment",
                "isCorrect": true
              },
              {
                "id": "8979b083-ceac-407a-b981-80f94ea215a5",
                "title": "Asynchronous queue",
                "isCorrect": false
              },
              {
                "id": "cd5438dc-fa47-4b25-85d5-882e2fc9c36e",
                "title": "Atomic counter",
                "isCorrect": false
              },
              {
                "id": "bee0b290-c118-4c9c-ae3c-a2ffc05b449d",
                "title": "Read/write lock",
                "isCorrect": false
              }
            ],
            "descriptionText": "Mutual exclusion lock",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "47b16c89-1b49-4ec3-aa42-1dc94c9488a6",
            "title": "What does Mutex::lock() return on success?",
            "answers": [
              {
                "id": "a371bcf9-5a51-4b56-a021-dbdbddf9669d",
                "title": "&mut T",
                "isCorrect": false
              },
              {
                "id": "d61aa7e3-f718-49c7-938a-ea9b97df7c2b",
                "title": "MutexGuard<T>",
                "isCorrect": true
              },
              {
                "id": "fb689dac-eabd-44b2-8cff-7ed560452c92",
                "title": "Arc<T>",
                "isCorrect": false
              },
              {
                "id": "2cc54920-58a3-40cd-8d2b-8bd4e47f0937",
                "title": "Option<&mut T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "MutexGuard implements Deref/DerefMut and releases lock in Drop",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e4d45458-b56b-4a46-ae83-534f68cd13eb",
            "title": "When is Mutex lock released?",
            "answers": [
              {
                "id": "696e0d5c-da9e-4b31-bfa8-49e3cfe65139",
                "title": "On explicit unlock()",
                "isCorrect": false
              },
              {
                "id": "e367fd1a-7503-47df-997f-eb43139d6f4f",
                "title": "When MutexGuard goes out of scope (Drop)",
                "isCorrect": true
              },
              {
                "id": "fa869f7e-7490-4fd6-a8bc-8f5af4efc693",
                "title": "On calling mem::drop(mutex)",
                "isCorrect": false
              },
              {
                "id": "b4d61cbb-8e68-41b3-bb95-292ce163db12",
                "title": "When all threads finish",
                "isCorrect": false
              }
            ],
            "descriptionText": "RAII pattern via Drop",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e6212291-8de7-463d-b427-25de6453ba84",
            "title": "Why can't Rc<T> be used between threads?",
            "answers": [
              {
                "id": "fe5b3daa-35ca-47a4-8142-62bdbc848526",
                "title": "Because it's slow",
                "isCorrect": false
              },
              {
                "id": "c9799e44-f12e-4ab5-8237-f598e06f679d",
                "title": "Because Rc<T> is not Send",
                "isCorrect": true
              },
              {
                "id": "5b450385-2a29-4df5-b885-69cde4f63016",
                "title": "Because Rc<T> is not Clone",
                "isCorrect": false
              },
              {
                "id": "89cfcc51-56c8-4079-9c06-bcd2fecd8547",
                "title": "Because Rc<T> is not Sync and has no Drop",
                "isCorrect": false
              }
            ],
            "descriptionText": "Reference count modification in Rc is not thread-safe",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f5d12251-a678-4f61-8e83-bf014c3adb5e",
            "title": "How does Arc<T> differ from Rc<T>?",
            "answers": [
              {
                "id": "b7b008c4-e251-4551-b254-0086de6cfc26",
                "title": "Nothing",
                "isCorrect": false
              },
              {
                "id": "6bb5b286-2b27-4c28-9f49-73f47141d1e5",
                "title": "Arc<T> is thread-safe (atomic counter), Rc<T> is not",
                "isCorrect": true
              },
              {
                "id": "e180b970-e7fb-4d78-b5da-3f3be0b5dbd5",
                "title": "Arc<T> cannot be cloned",
                "isCorrect": false
              },
              {
                "id": "2306e95f-5c40-4cf5-8184-0105dc3ebd6b",
                "title": "Arc<T> is slower and forbidden",
                "isCorrect": false
              }
            ],
            "descriptionText": "Arc uses atomic operations for thread safety",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "32b6aeac-22fe-4e0c-8743-67a965647df4",
            "title": "How to organize \"many owners + mutation\" in multithreaded code?",
            "answers": [
              {
                "id": "634f70ff-1f9b-4e03-a7af-7dac0d37de06",
                "title": "Rc<T> + RefCell<T>",
                "isCorrect": false
              },
              {
                "id": "04342772-61b1-422d-9b55-c2b58d99e7f3",
                "title": "Arc<T> + RefCell<T>",
                "isCorrect": false
              },
              {
                "id": "b27fbea4-a1d5-4a69-b43d-31bac46f63fb",
                "title": "Arc<T> + Mutex<T>",
                "isCorrect": true
              },
              {
                "id": "153902e7-cd35-40aa-907b-e47666bd5e9b",
                "title": "Box<T> + Mutex<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Thread-safe shared ownership with mutation",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9b8537be-f71d-4365-92db-b34002d018d6",
            "title": "What logic defect is common with Mutex<T>?",
            "answers": [
              {
                "id": "75f9f5e4-19b6-4077-8a25-b41af8df5ebd",
                "title": "Memory leak always",
                "isCorrect": false
              },
              {
                "id": "251154f2-64b6-4432-9101-587341b97d2d",
                "title": "Data race",
                "isCorrect": false
              },
              {
                "id": "d8126775-07e9-4d9f-970e-fbd535d38304",
                "title": "Deadlock (mutual blocking)",
                "isCorrect": true
              },
              {
                "id": "f9f737e2-ddd8-4b54-add2-21526ebbe201",
                "title": "Impossible to compile",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deadlocks can occur with multiple locks",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "da103c90-3e18-44d3-90f3-4b9b68e0cb43",
            "title": "What does the marker trait Send mean?",
            "answers": [
              {
                "id": "618ed970-68e5-4c84-bb5d-83a97bf3bbc2",
                "title": "Type can be safely passed between threads by reference",
                "isCorrect": false
              },
              {
                "id": "dc0c42c6-874a-499f-9edc-0e1616d08cd8",
                "title": "Ownership of type's value can be transferred between threads",
                "isCorrect": true
              },
              {
                "id": "bacb378b-75fe-4369-a273-c0729f87401f",
                "title": "Type is thread-safe for concurrent reading",
                "isCorrect": false
              },
              {
                "id": "b1e313b2-feea-45bf-9434-845ff58d4f35",
                "title": "Type cannot be passed between threads",
                "isCorrect": false
              }
            ],
            "descriptionText": "Send allows ownership transfer across threads",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f60569f2-d7d4-47dd-b30f-815b88a57b77",
            "title": "What does the marker trait Sync mean?",
            "answers": [
              {
                "id": "0d5fbb57-e3eb-4a59-8350-fb062229e5e7",
                "title": "Type can be copied",
                "isCorrect": false
              },
              {
                "id": "00047bde-d43e-480f-8954-e15d8d62a26f",
                "title": "Type can be moved",
                "isCorrect": false
              },
              {
                "id": "ba2fa813-a6b5-486e-a900-340bbe6152ae",
                "title": "&T can be safely shared between threads",
                "isCorrect": true
              },
              {
                "id": "c47a5bdf-62d4-4d00-986a-10feebc812f8",
                "title": "&mut T can be shared between threads",
                "isCorrect": false
              }
            ],
            "descriptionText": "Sync allows sharing references across threads",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "204f0c55-3a20-4606-8a6a-de26faadc222",
            "title": "Is Send/Sync automatically (derived) implemented?",
            "answers": [
              {
                "id": "67fde862-50af-4f26-b9df-fe9b16e183eb",
                "title": "No, only manually",
                "isCorrect": false
              },
              {
                "id": "3788e54c-5885-4f06-97a1-d14fa5f75101",
                "title": "Yes, if all component types are also Send/Sync",
                "isCorrect": true
              },
              {
                "id": "1c08f4db-67ae-4764-9ce0-d5eaf26cbd10",
                "title": "Only for primitives",
                "isCorrect": false
              },
              {
                "id": "612cae32-ae11-40c1-a037-37d24506b928",
                "title": "Only in nightly",
                "isCorrect": false
              }
            ],
            "descriptionText": "Auto-implemented when safe",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e4969e27-1bf4-4996-af7c-5416bfc142c1",
            "title": "Can Send/Sync be implemented manually?",
            "answers": [
              {
                "id": "4243ff88-788e-42df-8752-4f219f2f9100",
                "title": "Yes, it's always safe",
                "isCorrect": false
              },
              {
                "id": "7893821c-78c2-4104-a380-4ebfb7414bf6",
                "title": "Yes, but it's unsafe and requires great care",
                "isCorrect": true
              },
              {
                "id": "59d364c1-78c1-4ed0-82ab-e6ea432f581c",
                "title": "No, forbidden",
                "isCorrect": false
              },
              {
                "id": "d3962dbb-42f8-493f-a7ce-2c55adc3ccf6",
                "title": "Only Send can be",
                "isCorrect": false
              }
            ],
            "descriptionText": "Requires unsafe implementation",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "15645026-fa2f-40a5-ad0e-d3b81431be83",
            "title": "Why is RefCell<T> not Sync?",
            "answers": [
              {
                "id": "99859a2c-c5e2-45da-be72-00982adc661a",
                "title": "Because it's expensive",
                "isCorrect": false
              },
              {
                "id": "5b79941f-9e00-453f-8964-b49eaf1eed30",
                "title": "Because it checks borrows at runtime, which is not thread-safe",
                "isCorrect": true
              },
              {
                "id": "0624a1c4-afb6-435d-bfa4-ecc2ae392479",
                "title": "Because it has no Drop",
                "isCorrect": false
              },
              {
                "id": "997d0e77-87c1-47ba-b5a1-052ae8d322c2",
                "title": "Because it's not Clone",
                "isCorrect": false
              }
            ],
            "descriptionText": "Runtime borrow checking isn't thread-safe",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a7cf8d57-ebef-46d7-80a4-f4914ff37a1f",
            "title": "How to get result from thread launched with spawn?",
            "answers": [
              {
                "id": "3ca56786-d9ab-4d6e-99d2-409be09b8ed1",
                "title": "Global variable",
                "isCorrect": false
              },
              {
                "id": "9f2c4899-1326-42ad-b061-bdc3f0505756",
                "title": "mpsc channel",
                "isCorrect": false
              },
              {
                "id": "c12073a9-0759-4a6c-81ab-4877b6731590",
                "title": "Via return value from closure and join()",
                "isCorrect": true
              },
              {
                "id": "456748f3-9a15-4150-8d56-3e2e23db01fc",
                "title": "No way",
                "isCorrect": false
              }
            ],
            "descriptionText": "join() returns the closure's result",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9f775f58-ea1c-45de-a3b6-02288648e249",
            "title": "What happens if you try to use a value after send(val)?",
            "answers": [
              {
                "id": "fab07623-f677-4ee7-bffd-040499af3d22",
                "title": "Compiles and copies value",
                "isCorrect": false
              },
              {
                "id": "1a28ec9e-2d74-4d65-945f-6b7f45008f0c",
                "title": "Compilation error: value was moved",
                "isCorrect": true
              },
              {
                "id": "9f97b6d2-9774-4ad3-80d1-8846b19b8a56",
                "title": "Runtime panic",
                "isCorrect": false
              },
              {
                "id": "e97c6989-78b8-457c-96e6-94b4487f71f2",
                "title": "UB",
                "isCorrect": false
              }
            ],
            "descriptionText": "send moves the value",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "19e53eae-fe61-4828-9080-1a97d9dcd1e1",
            "title": "Why does output order from threads differ between runs?",
            "answers": [
              {
                "id": "41513463-9027-4aa9-b092-fbeffc4f9963",
                "title": "Due to undefined behavior",
                "isCorrect": false
              },
              {
                "id": "127e983e-6412-4258-8689-a58d81484efe",
                "title": "Due to OS scheduler and lack of execution order guarantees",
                "isCorrect": true
              },
              {
                "id": "765c0a03-da65-474f-b39b-491604261c82",
                "title": "Due to println!",
                "isCorrect": false
              },
              {
                "id": "b60e4e7a-0991-4816-a5e3-05d4e6d52a4f",
                "title": "Designed that way, but always deterministic",
                "isCorrect": false
              }
            ],
            "descriptionText": "Non-deterministic scheduling",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e7ff07e0-0342-4c64-92ee-9cfdd1d31ad5",
            "title": "What does thread::sleep(Duration) do?",
            "answers": [
              {
                "id": "fb23fb82-8f55-4ef7-af87-1a3a4724ee72",
                "title": "Blocks all process threads",
                "isCorrect": false
              },
              {
                "id": "3a058f50-bd2d-46df-acf5-f41ff622b4f2",
                "title": "Puts current thread to sleep, giving others a chance",
                "isCorrect": true
              },
              {
                "id": "f2d1b2a6-3cbb-4035-aa43-0d99ebba7d69",
                "title": "Switches context to specified thread",
                "isCorrect": false
              },
              {
                "id": "b7018ce4-7342-49b2-8e0e-8a0e41483de4",
                "title": "Speeds up execution",
                "isCorrect": false
              }
            ],
            "descriptionText": "Yields to other threads",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9b5145d6-c61f-4d8c-9ee4-6d771b421264",
            "title": "Can you iterate over Receiver as an iterator?",
            "answers": [
              {
                "id": "ec7597f0-0218-465d-a1c4-eb0d8f83dd4b",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "123d2659-8d5e-43a8-9713-8ea97d5dfdc2",
                "title": "Yes, while channel is not closed",
                "isCorrect": true
              },
              {
                "id": "7d2b7ac6-fcaa-4dea-a31a-0229664e4738",
                "title": "Yes, but only once",
                "isCorrect": false
              },
              {
                "id": "d6d517ad-40e7-40eb-95ef-3f361cd20280",
                "title": "Only through try_iter in nightly",
                "isCorrect": false
              }
            ],
            "descriptionText": "Receiver implements Iterator",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "52b58d9c-ce1f-4741-a72b-894d1618bf71",
            "title": "What happens if join() is called before main thread does its work?",
            "answers": [
              {
                "id": "4a035adf-723c-4ef3-b054-4948a1dc8950",
                "title": "Nothing",
                "isCorrect": false
              },
              {
                "id": "e1ea8716-8895-495a-9bf2-1ec2e575ddca",
                "title": "There will be interleaving",
                "isCorrect": false
              },
              {
                "id": "0ba3ad3d-5378-43a1-b7a5-dd3639ccd097",
                "title": "Main thread waits, then executes its work (no interleaving)",
                "isCorrect": true
              },
              {
                "id": "954a25ad-aed3-451e-a580-0b541312b319",
                "title": "Thread exits with error",
                "isCorrect": false
              }
            ],
            "descriptionText": "join() blocks until completion",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c14b59da-4a39-4eec-94ff-4316dd676516",
            "title": "What primitive is simpler and faster for simple numeric counters in multithreading?",
            "answers": [
              {
                "id": "2962bcf3-46c4-47e7-ac51-7735a264fdf9",
                "title": "Arc<Mutex<i32>>",
                "isCorrect": false
              },
              {
                "id": "6cb62ed7-1e04-4bf3-a950-dd827a69bf70",
                "title": "std::sync::atomic::{AtomicI32, ...}",
                "isCorrect": true
              },
              {
                "id": "93d9cde9-55c8-4d00-90fb-b3559cb33b56",
                "title": "Rc<Cell<i32>>",
                "isCorrect": false
              },
              {
                "id": "1fdeeac7-9275-4e54-91d7-5af5b628410c",
                "title": "Box<i32>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Atomic types for lock-free operations",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "65b152b6-999e-4131-9a42-3d518f275d55",
            "title": "What does \"fearless concurrency\" mean in Rust?",
            "answers": [
              {
                "id": "320074dd-9c5d-44b5-bc6c-1a4ef1e83aaf",
                "title": "Complete absence of errors",
                "isCorrect": false
              },
              {
                "id": "21e04f66-a2e5-4d90-8e68-8e2061a4352e",
                "title": "Concurrent code without locks",
                "isCorrect": false
              },
              {
                "id": "e7664373-880e-42ab-b9a1-569c8ddabeab",
                "title": "Most concurrency errors become compile errors thanks to ownership system and types",
                "isCorrect": true
              },
              {
                "id": "be082084-aaa7-4a8a-86ad-86092e831c38",
                "title": "Universal green threads",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type system catches concurrency bugs",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f121698b-536e-42ff-9188-d0b7281b4f00",
            "title": "What's the key difference between \"messaging\" vs \"shared-state\"?",
            "answers": [
              {
                "id": "01bcaae9-ec99-4b19-8c4b-714657ad49eb",
                "title": "Messages are slower, shared-state is faster",
                "isCorrect": false
              },
              {
                "id": "33f29aab-c413-4c70-a79d-cd1cea868aab",
                "title": "Messages transfer ownership; shared-state shares memory between threads",
                "isCorrect": true
              },
              {
                "id": "ffdf72ac-9afb-443c-82b8-1ad3bdaec27b",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "42979d0a-94bd-437c-bc80-6fe0c8e574ae",
                "title": "Messages require unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Different concurrency paradigms",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d045c02e-566c-4295-a560-2601c6f0f52f",
            "title": "What happens if thread with captured MutexGuard panics?",
            "answers": [
              {
                "id": "d55f930f-defe-495a-b54a-67e40191536c",
                "title": "Lock is always released via Drop of MutexGuard",
                "isCorrect": true
              },
              {
                "id": "cdf9e100-3c78-4a52-a37c-5a671ba651b2",
                "title": "Lock remains forever",
                "isCorrect": false
              },
              {
                "id": "381bb0af-e7f0-4265-b058-e7ab348900df",
                "title": "Leak occurs",
                "isCorrect": false
              },
              {
                "id": "d82e8d83-e837-48f2-9111-255e5e0e044e",
                "title": "UB",
                "isCorrect": false
              }
            ],
            "descriptionText": "Drop ensures cleanup even on panic",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "40dde88b-b3b0-4a1a-8f8d-26c50b2a33af",
            "title": "Is it true: Arc<T> itself provides mutation of T?",
            "answers": [
              {
                "id": "8abe644f-131d-473b-a0c3-5a83e7faa526",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "3eae6981-4148-4dd5-94a8-c4313f080856",
                "title": "No, need additional primitive (Mutex/RwLock) for safe mutation",
                "isCorrect": true
              },
              {
                "id": "3b103717-abfc-4078-a7c3-8d93a1501d8a",
                "title": "Yes, if T: Sync",
                "isCorrect": false
              },
              {
                "id": "1ba81876-4f70-4288-bac7-470f10c202d0",
                "title": "Yes, if T: Send",
                "isCorrect": false
              }
            ],
            "descriptionText": "Arc only provides shared ownership",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dcc2c647-5a66-48d8-be6e-ba559034a289",
            "title": "Why does join() return Result<T, Box<Any + Send>> (simplified)?",
            "answers": [
              {
                "id": "d1e82ade-5ce3-408c-b861-791e064c498f",
                "title": "To return lock status",
                "isCorrect": false
              },
              {
                "id": "81bbfb6c-2aa5-494c-a376-3b8aae3ccdc8",
                "title": "To signal panic in child thread",
                "isCorrect": true
              },
              {
                "id": "2bf29f71-d766-4314-93e7-c0456a01abc6",
                "title": "To return Sender",
                "isCorrect": false
              },
              {
                "id": "dc78fad3-8634-40c2-8beb-983e42931026",
                "title": "To convert to Option",
                "isCorrect": false
              }
            ],
            "descriptionText": "Captures thread panic",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8600f7fe-84ae-44cf-afeb-b9ba6616ad43",
            "title": "Can you use move-closure and then use the moved variable in main thread?",
            "answers": [
              {
                "id": "0b23003d-0b28-4dc1-a34f-529681fcb0a9",
                "title": "Yes",
                "isCorrect": false
              },
              {
                "id": "b5873309-83a0-41f4-8055-b3e2e995901d",
                "title": "No, variable was moved, use leads to compilation error",
                "isCorrect": true
              },
              {
                "id": "b38ec1cd-6836-4b8b-87b9-1f227da84fe8",
                "title": "Yes, but only if Copy",
                "isCorrect": false
              },
              {
                "id": "6c5c5a90-c1b2-47b2-89e9-5ad42e317058",
                "title": "Yes, but only through unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Ownership transferred to closure",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e2823688-5549-4a1c-8c1a-da20a3e9c875",
            "title": "How to correctly organize a \"counter\" from 10 threads, each incrementing shared counter?",
            "answers": [
              {
                "id": "d0845253-feec-4cd3-acd0-e42cd628f8e5",
                "title": "Rc<RefCell<i32>>",
                "isCorrect": false
              },
              {
                "id": "1925912b-3f4e-4109-bc91-a8d73299f64d",
                "title": "Rc<Mutex<i32>>",
                "isCorrect": false
              },
              {
                "id": "d5a2782a-0206-4187-ba42-77aa05e0c9f5",
                "title": "Arc<Mutex<i32>> and Arc::clone to each thread",
                "isCorrect": true
              },
              {
                "id": "d5327411-79b1-43f6-b988-35b85dcf858b",
                "title": "Box<i32>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Thread-safe shared counter pattern",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "03d0ad7d-4745-48bd-83ff-c61fb40413a4",
            "title": "Why is Mutex<T> also considered an implementation of \"interior mutability\"?",
            "answers": [
              {
                "id": "925878ee-83c0-4016-bf2e-3bc75414ee52",
                "title": "Because Mutex<T> is always mut",
                "isCorrect": false
              },
              {
                "id": "1719250d-3f0a-4f63-b682-62f45c28d08c",
                "title": "Because it allows changing T through immutable wrapper Arc<Mutex<T>> while following locking protocol",
                "isCorrect": true
              },
              {
                "id": "26a8fe27-9172-4635-8b82-b7dad1edebe5",
                "title": "Because it uses RefCell",
                "isCorrect": false
              },
              {
                "id": "b62475eb-ff30-4635-8640-b4a719a6c5e0",
                "title": "Because it implements Copy",
                "isCorrect": false
              }
            ],
            "descriptionText": "Mutation through shared reference with runtime checks",
            "descriptionLink": "fearless_concurrency_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "bb244971-a678-46f9-89c3-efd7cbc96eca",
        "theme": "Fundamentals of Asynchronous Programming in Rust",
        "priority": 13,
        "questions": [
          {
            "id": "26c2f6c6-6bc8-4003-b005-06059ae590be",
            "title": "What is a Future in Rust?",
            "answers": [
              {
                "id": "0769ee27-f522-42f8-a80b-ffc905234aae",
                "title": "A function that runs immediately",
                "isCorrect": false
              },
              {
                "id": "bafa8232-017e-4345-8f40-b73a20232cbf",
                "title": "A value that may not be ready now but will be ready in the future",
                "isCorrect": true
              },
              {
                "id": "6d65772c-b7d8-4c7a-8db5-329ea1305d9e",
                "title": "A data type for working with dates",
                "isCorrect": false
              },
              {
                "id": "a1171fce-40f5-4ddd-921f-4da6525bb869",
                "title": "A synonym for Thread",
                "isCorrect": false
              }
            ],
            "descriptionText": "A Future represents a value that might be unavailable now but will become available later",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6b910521-df66-43d4-9964-78b08c15aff1",
            "title": "Which keyword defines an asynchronous function?",
            "answers": [
              {
                "id": "3de5e773-871c-460a-9e48-90f47e9d08f3",
                "title": "future",
                "isCorrect": false
              },
              {
                "id": "4740115a-f156-4e48-bb6a-d793924c531d",
                "title": "await",
                "isCorrect": false
              },
              {
                "id": "d2c9b269-bb09-4fb7-87fa-9ad3c8d4569b",
                "title": "async",
                "isCorrect": true
              },
              {
                "id": "e16ec683-b033-442f-9c30-d3b178276651",
                "title": "defer",
                "isCorrect": false
              }
            ],
            "descriptionText": "Placing async before fn or a block makes it asynchronous",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c7fd42fb-4faa-4f5c-ae7f-6ac71146dfa1",
            "title": "What does the await keyword do?",
            "answers": [
              {
                "id": "b37a46ed-84f1-41e0-a426-4ed2fdb6fcd2",
                "title": "Blocks the thread until the operation finishes",
                "isCorrect": false
              },
              {
                "id": "c8fd32f6-cfdd-4644-8cae-5c5b53634948",
                "title": "Suspends the future and yields control to the runtime",
                "isCorrect": true
              },
              {
                "id": "e8c7f8d9-148e-4be7-9a81-17370dc8f393",
                "title": "Deletes the future from memory",
                "isCorrect": false
              },
              {
                "id": "70967601-03c4-4e2b-a661-c9053fcbcf58",
                "title": "Creates a new thread",
                "isCorrect": false
              }
            ],
            "descriptionText": "await pauses a future and lets the runtime schedule other tasks",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "71645651-0488-44ba-a3e0-b1a816eca58a",
            "title": "How do parallelism and concurrency differ?",
            "answers": [
              {
                "id": "65899efe-6d92-4518-bdf8-b1374c8400b5",
                "title": "Parallelism = executing tasks at the same time on different cores; concurrency = switching between tasks",
                "isCorrect": true
              },
              {
                "id": "29796bb9-9517-4c8d-9946-8b1df0fc3da1",
                "title": "They are synonyms",
                "isCorrect": false
              },
              {
                "id": "7fc0742b-294c-4992-acff-c35cadeb0bf9",
                "title": "Parallelism works only with async",
                "isCorrect": false
              },
              {
                "id": "efd2aa36-8943-45e0-92d4-a78477612833",
                "title": "Concurrency requires multithreading",
                "isCorrect": false
              }
            ],
            "descriptionText": "Parallelism is simultaneous execution; concurrency is coordinated interleaving",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "428b0c09-dd50-47b2-8650-2831c596ae92",
            "title": "Which method on the Future trait checks readiness?",
            "answers": [
              {
                "id": "717c775c-3d81-450a-8cfa-2b86a96901e3",
                "title": "check()",
                "isCorrect": false
              },
              {
                "id": "0d8e44fb-7528-4e51-ab39-3c77c991b1ed",
                "title": "ready()",
                "isCorrect": false
              },
              {
                "id": "2bba4d1e-c997-434f-b840-3def46c60a8a",
                "title": "poll()",
                "isCorrect": true
              },
              {
                "id": "a8a78e0a-6b4a-4ea8-a50e-94a272f784d4",
                "title": "await()",
                "isCorrect": false
              }
            ],
            "descriptionText": "poll returns Poll::Ready or Poll::Pending",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d144b891-ba3c-47a4-9fce-eedd8556964d",
            "title": "What does poll return for a Future?",
            "answers": [
              {
                "id": "3127ab17-cbcd-484c-845b-4be5a836154c",
                "title": "bool",
                "isCorrect": false
              },
              {
                "id": "8df0db37-bd5e-40d0-829c-632fab981572",
                "title": "Option<T>",
                "isCorrect": false
              },
              {
                "id": "2267233b-e2fc-4681-9010-ac9939d87ef0",
                "title": "Poll<Self::Output>",
                "isCorrect": true
              },
              {
                "id": "e7fec2e2-90f1-4069-ba28-8ee275987549",
                "title": "Result<T, E>",
                "isCorrect": false
              }
            ],
            "descriptionText": "poll returns Poll<Self::Output>: either Ready(T) or Pending",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "520c7f71-4596-4f64-b4e0-d9690fc4b631",
            "title": "Are Rust futures lazy?",
            "answers": [
              {
                "id": "262255ca-6907-488e-9ec1-cfb091b3f1c9",
                "title": "No, they run immediately",
                "isCorrect": false
              },
              {
                "id": "e59f19df-d794-4080-8346-88c4ef32dbfb",
                "title": "Yes, they do nothing until await",
                "isCorrect": true
              },
              {
                "id": "3426bbea-cc26-4edc-920f-634106e2c624",
                "title": "Only if explicitly specified",
                "isCorrect": false
              },
              {
                "id": "bcd8a255-b80f-415c-8ec4-a93d3244ce14",
                "title": "Depends on the runtime",
                "isCorrect": false
              }
            ],
            "descriptionText": "Futures are lazy—they start progressing only when awaited/polled",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d9777f39-d2d6-4c88-99d5-8219cbfe6b22",
            "title": "What is an async runtime?",
            "answers": [
              {
                "id": "ce33fcc4-f53b-43a0-b0ad-8b3d26270cad",
                "title": "The Rust compiler",
                "isCorrect": false
              },
              {
                "id": "30a64a9b-5dd6-46ce-a168-a2ea90477e21",
                "title": "A library that orchestrates asynchronous code",
                "isCorrect": true
              },
              {
                "id": "35a7a1a0-3cdb-4b36-8431-1bc513d6769a",
                "title": "The operating system",
                "isCorrect": false
              },
              {
                "id": "c6b64288-5cc3-4f23-b1ec-cd28daad39b7",
                "title": "A data type",
                "isCorrect": false
              }
            ],
            "descriptionText": "The runtime schedules tasks and provides async I/O primitives",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "38855651-490a-45bc-93f1-146646b363bf",
            "title": "Why isn't main async by default?",
            "answers": [
              {
                "id": "52a8bc6f-baf3-411c-9cb0-c925cb2a07a5",
                "title": "It's forbidden by syntax",
                "isCorrect": false
              },
              {
                "id": "896c06ed-b969-42b6-8526-185b41dd9dc1",
                "title": "main should initialize the runtime rather than be part of it",
                "isCorrect": true
              },
              {
                "id": "8aaab874-45d0-4649-9b3e-9c8e6cd91ebd",
                "title": "Async functions can't return values",
                "isCorrect": false
              },
              {
                "id": "0a46da90-646f-4d31-884d-a9db1308ab55",
                "title": "OS limitation",
                "isCorrect": false
              }
            ],
            "descriptionText": "main sets up the runtime that runs async code",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a477f628-7553-404c-99c8-fa0e1f4044f4",
            "title": "What does trpl::run do?",
            "answers": [
              {
                "id": "a56d56df-a59c-470a-92f8-49fb6d946ae5",
                "title": "Compiles async code",
                "isCorrect": false
              },
              {
                "id": "c9c76ca6-0e41-42eb-a853-153eee7582c5",
                "title": "Creates a new thread",
                "isCorrect": false
              },
              {
                "id": "add62b77-6fd6-4716-a2cc-f47c0dae9a03",
                "title": "Sets up a runtime and runs a future to completion",
                "isCorrect": true
              },
              {
                "id": "28b58c55-a721-410f-ac26-37c8057963f9",
                "title": "Converts async to sync",
                "isCorrect": false
              }
            ],
            "descriptionText": "trpl::run configures a runtime and executes the given future",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a279096e-e7ab-4f91-8d49-5586cd06b0e8",
            "title": "Where does await appear relative to the expression?",
            "answers": [
              {
                "id": "b6dc539f-73c1-4409-bb25-5ddaac3099d0",
                "title": "Before the expression",
                "isCorrect": false
              },
              {
                "id": "5838fae5-c38d-45d1-a2d3-6a3e2f46b7cf",
                "title": "After the expression (postfix)",
                "isCorrect": true
              },
              {
                "id": "e7cce3b1-48bc-47d1-885c-75ac5d5b0c83",
                "title": "Anywhere",
                "isCorrect": false
              },
              {
                "id": "f3f386af-ce06-449b-aec3-0927f71eb4cb",
                "title": "On a separate line",
                "isCorrect": false
              }
            ],
            "descriptionText": "In Rust, await is postfix: future.await",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0a069697-5986-4145-9c0e-fd10c9f05c19",
            "title": "What happens when an async block is compiled?",
            "answers": [
              {
                "id": "99d4fb24-f963-4445-b3fc-d24ded528e27",
                "title": "It's removed from the code",
                "isCorrect": false
              },
              {
                "id": "b5173322-f191-431f-bc97-a9add70d61c3",
                "title": "An anonymous type implementing Future is created",
                "isCorrect": true
              },
              {
                "id": "39505d49-a867-4e31-9d9a-674f3dfb4362",
                "title": "It becomes a regular function",
                "isCorrect": false
              },
              {
                "id": "d56dc785-ff9e-4614-be59-17f49dbdcb73",
                "title": "A new thread is generated",
                "isCorrect": false
              }
            ],
            "descriptionText": "The compiler generates a unique state-machine type implementing Future",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9f2f3e94-beaa-4338-b222-82b57fd151f8",
            "title": "What does async fn function_name() -> T return?",
            "answers": [
              {
                "id": "9a8c591c-b69d-4be6-937a-4feada3245a3",
                "title": "T",
                "isCorrect": false
              },
              {
                "id": "bc36f0e3-3e1f-4158-b8a5-510556be2778",
                "title": "Future<T>",
                "isCorrect": false
              },
              {
                "id": "c39412f2-7806-41e4-9d4f-9f70a57e9ffa",
                "title": "impl Future<Output = T>",
                "isCorrect": true
              },
              {
                "id": "6fce87ac-131b-498c-8616-b12cfd18f2a2",
                "title": "Task<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "An async function returns a type implementing Future with Output = T",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "42f12f9c-0842-4cd6-9209-f6372ba346cc",
            "title": "What does trpl::race do?",
            "answers": [
              {
                "id": "a2631849-7613-4ffe-a0d1-f9fa3a6e09fe",
                "title": "Runs futures in parallel",
                "isCorrect": false
              },
              {
                "id": "f6856da3-2d2e-4921-8fc4-b6bbb63a30e8",
                "title": "Returns the result of the first future to complete",
                "isCorrect": true
              },
              {
                "id": "42a59e29-492b-40a1-9ab8-9c21851c9c0f",
                "title": "Cancels all futures except one",
                "isCorrect": false
              },
              {
                "id": "6ffb90ff-f506-4d43-9f2a-28b194cf438a",
                "title": "Checks execution speed",
                "isCorrect": false
              }
            ],
            "descriptionText": "race resolves with whichever future finishes first",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "989e1828-211e-4fc3-baf2-d19b2ab2d785",
            "title": "What type does trpl::race return?",
            "answers": [
              {
                "id": "eb0084ff-bafb-4fc1-b809-9eb89537dd1c",
                "title": "Result<T, E>",
                "isCorrect": false
              },
              {
                "id": "092f37a3-d536-40e7-87dc-af90bfb9efcf",
                "title": "Option<T>",
                "isCorrect": false
              },
              {
                "id": "750f1042-d010-432b-9927-bc3679481b14",
                "title": "Either<A, B>",
                "isCorrect": true
              },
              {
                "id": "21d92509-579b-45ad-a472-2664a4eef106",
                "title": "A tuple (A, B)",
                "isCorrect": false
              }
            ],
            "descriptionText": "It returns Either::Left or Either::Right based on which future wins",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7761028e-c616-4889-a25f-2ecabdb1edab",
            "title": "What is an \"await point\"?",
            "answers": [
              {
                "id": "57f4d414-8de8-4308-900b-3398a45ea19c",
                "title": "Where the program ends",
                "isCorrect": false
              },
              {
                "id": "83093454-1d23-4475-b64a-060845ec0180",
                "title": "A point where a future may be suspended and later resumed",
                "isCorrect": true
              },
              {
                "id": "a7e466a1-7080-488c-9b91-3d2728457a10",
                "title": "The entry point into an async function",
                "isCorrect": false
              },
              {
                "id": "8048fa94-3361-47d7-a7f3-ebf4db056662",
                "title": "Where the future is created",
                "isCorrect": false
              }
            ],
            "descriptionText": "At each await, the runtime can pause the task and switch to others",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "857c6e4b-412c-404d-b561-238421d45633",
            "title": "What is a state machine in the async context?",
            "answers": [
              {
                "id": "2e0d1469-69e4-49fb-9a40-9be619cd5220",
                "title": "A physical device",
                "isCorrect": false
              },
              {
                "id": "f443e1bd-9aa1-4ac6-bad5-50465384e166",
                "title": "A data structure the compiler generates to track async block state",
                "isCorrect": true
              },
              {
                "id": "b0a32d57-e6f5-442b-ae1c-2024e03640b4",
                "title": "A database type",
                "isCorrect": false
              },
              {
                "id": "d96594f3-a479-49c9-8c3d-a0e02b3d1212",
                "title": "A sorting algorithm",
                "isCorrect": false
              }
            ],
            "descriptionText": "Async code is transformed into a state machine spanning await points",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9c634c9a-123d-4e25-b9d0-3fb2ec92f1ba",
            "title": "What does trpl::spawn_task do?",
            "answers": [
              {
                "id": "49696dcb-c4c3-4322-87f3-65d107ee012e",
                "title": "Creates a new OS thread",
                "isCorrect": false
              },
              {
                "id": "e4edbcad-84a1-4eae-874d-0a33b09126c7",
                "title": "Spawns a new task in the async runtime",
                "isCorrect": true
              },
              {
                "id": "9dedf5ef-cafe-4eea-bbe3-36b5bf5ed48d",
                "title": "Blocks the current task",
                "isCorrect": false
              },
              {
                "id": "b7634bb9-0375-4abb-9379-bd371f0b7afd",
                "title": "Deletes a task",
                "isCorrect": false
              }
            ],
            "descriptionText": "It spawns a runtime-managed task (not an OS thread)",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4cee255d-b696-48bf-aff1-a6197f4c8d0e",
            "title": "What does spawn_task return?",
            "answers": [
              {
                "id": "31ad61c1-a728-4224-afca-3c7126fc689f",
                "title": "A Future",
                "isCorrect": false
              },
              {
                "id": "4f8af0bd-f607-45ad-8932-2a523a45bfb4",
                "title": "A thread handle",
                "isCorrect": false
              },
              {
                "id": "03147963-07ea-472e-a51e-21340bfb6ebd",
                "title": "A task JoinHandle",
                "isCorrect": true
              },
              {
                "id": "222c8dc6-578d-452a-94ba-8955733e4b8a",
                "title": "A task ID",
                "isCorrect": false
              }
            ],
            "descriptionText": "A handle you can await to get the task's result",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a5174843-7462-4be9-9db7-82fdf1505f48",
            "title": "How does trpl::sleep differ from thread::sleep?",
            "answers": [
              {
                "id": "a4d95e81-83c3-46c6-804d-0427dc465d8d",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "6aae193f-7d24-4ad9-b4ee-0a295fef32ae",
                "title": "trpl::sleep is async and returns a future",
                "isCorrect": true
              },
              {
                "id": "07b095d1-3b5e-48e0-8a17-be42025fd63e",
                "title": "trpl::sleep is faster",
                "isCorrect": false
              },
              {
                "id": "5a3b42b1-4385-4a93-8507-70b6c63f575c",
                "title": "thread::sleep works only in async",
                "isCorrect": false
              }
            ],
            "descriptionText": "trpl::sleep doesn't block a thread; you await its future",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "33ae84f5-3b01-4b2f-9c42-d8dabc1b364c",
            "title": "What does trpl::join do?",
            "answers": [
              {
                "id": "157ad880-04dd-49ad-a9cb-e85ae79ad870",
                "title": "Joins two threads",
                "isCorrect": false
              },
              {
                "id": "a20a0d48-0555-4621-a82b-2e0843a491e2",
                "title": "Awaits both futures and returns a tuple of results",
                "isCorrect": true
              },
              {
                "id": "a9a2a79c-1d89-4f60-8c81-2da838d6eacd",
                "title": "Merges futures into one",
                "isCorrect": false
              },
              {
                "id": "7bcbb05a-a267-46fc-9f32-da83c92ec2a3",
                "title": "Cancels futures",
                "isCorrect": false
              }
            ],
            "descriptionText": "It waits for all given futures and returns all results",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "23c2cf80-086e-4343-8cac-09af2f34014d",
            "title": "Is trpl::join fair?",
            "answers": [
              {
                "id": "02020a82-8bff-483f-973d-378b37873156",
                "title": "No, it polls futures in argument order",
                "isCorrect": false
              },
              {
                "id": "904e6f24-761a-498c-a8a7-afd8f016fa31",
                "title": "Yes, it alternates polling fairly",
                "isCorrect": true
              },
              {
                "id": "ebe71c1b-8f65-4c3b-b4a5-eb83a4e9dcf9",
                "title": "Depends on the runtime",
                "isCorrect": false
              },
              {
                "id": "9ce7564a-8a78-40e3-9a8d-106b92099652",
                "title": "Fairness doesn't apply to join",
                "isCorrect": false
              }
            ],
            "descriptionText": "It alternates so one future can't starve the other",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5806632e-5bdb-4859-966a-f1e73edbc7ee",
            "title": "What is an async channel?",
            "answers": [
              {
                "id": "f2949a98-a827-4245-be7c-8b4161b0d77f",
                "title": "A regular thread channel",
                "isCorrect": false
              },
              {
                "id": "687728b9-dfc2-47d9-9089-f8c693d236cf",
                "title": "A channel for asynchronous message passing between futures",
                "isCorrect": true
              },
              {
                "id": "9b41312e-d524-40fa-a5ee-0eb5d4f633a8",
                "title": "A network connection",
                "isCorrect": false
              },
              {
                "id": "b1d46c83-c1c8-4bd9-939e-e08a0031756d",
                "title": "A storage type",
                "isCorrect": false
              }
            ],
            "descriptionText": "It passes messages between futures asynchronously",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0bad1c14-bcba-46c0-935a-6c5228abfba6",
            "title": "How does recv in an async channel differ from a sync channel?",
            "answers": [
              {
                "id": "8719be20-ce54-453b-a37d-4eae176d33cd",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "6b492f01-4768-498d-877d-7c8a7b400ef5",
                "title": "Async recv returns a future you must await",
                "isCorrect": true
              },
              {
                "id": "2f2849be-3921-4f40-9621-6d253b2ab0ba",
                "title": "Async recv is faster",
                "isCorrect": false
              },
              {
                "id": "5553b534-6eb3-4963-afaf-3655a4016ce4",
                "title": "Sync recv doesn't exist",
                "isCorrect": false
              }
            ],
            "descriptionText": "Async recv is nonblocking and yields a future",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "490ce95c-cd0b-4e17-bad2-16add764a9b9",
            "title": "Why use async move for async blocks?",
            "answers": [
              {
                "id": "f0a4ad3c-b494-4ee1-ae1e-1a03f67a0c83",
                "title": "For speed",
                "isCorrect": false
              },
              {
                "id": "f3bef65d-db56-49b0-a53c-85addef32510",
                "title": "To transfer ownership of captured variables into the block",
                "isCorrect": true
              },
              {
                "id": "f1befd80-7c64-46b2-9f87-7cff95b78949",
                "title": "It's required for all async blocks",
                "isCorrect": false
              },
              {
                "id": "783222ec-9143-4aad-8d8b-befcac766759",
                "title": "To create a new thread",
                "isCorrect": false
              }
            ],
            "descriptionText": "Like closures, move captures by value for later use",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a7f7761a-b941-43f8-b348-afe7ec03f1f6",
            "title": "What does the trpl::join! macro do?",
            "answers": [
              {
                "id": "e8c1b365-2548-44cf-867e-0a329bfb6557",
                "title": "Accepts only 2 futures",
                "isCorrect": false
              },
              {
                "id": "25282191-e5f9-42ae-bd85-960aae681d23",
                "title": "Accepts an arbitrary number of futures",
                "isCorrect": true
              },
              {
                "id": "0a9bda9b-d716-427b-8e5e-9cdd7d40ff15",
                "title": "Works with one type only",
                "isCorrect": false
              },
              {
                "id": "8e2a76a2-da54-4f11-bdf6-9f1ce307c537",
                "title": "Creates new futures",
                "isCorrect": false
              }
            ],
            "descriptionText": "join! can take any number of futures as arguments",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "19782e12-ab2d-45a2-bd64-23a762caf19d",
            "title": "What does trpl::join_all do?",
            "answers": [
              {
                "id": "b1d6b192-d21f-4089-86bf-a939502143e8",
                "title": "Waits for all futures in a collection",
                "isCorrect": true
              },
              {
                "id": "b7dc2833-06be-47ee-aeac-b8dad527a3aa",
                "title": "Combines futures into one",
                "isCorrect": false
              },
              {
                "id": "7b2426a8-6940-4dcb-8592-fa2bea2ee1d0",
                "title": "Cancels all futures",
                "isCorrect": false
              },
              {
                "id": "98615297-7137-46c0-8aa4-b3d02740e423",
                "title": "Checks types of futures",
                "isCorrect": false
              }
            ],
            "descriptionText": "It takes an iterator of futures and completes when all are done",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d2997ac0-accf-4ddb-8e17-e5279aa510dc",
            "title": "What requirement applies to futures in join_all?",
            "answers": [
              {
                "id": "034be618-dbe9-47f1-80fe-97a63c8299a8",
                "title": "They must be of different types",
                "isCorrect": false
              },
              {
                "id": "517d9b73-fb20-4497-9c7c-ca0c4d68af17",
                "title": "They must be of the same type",
                "isCorrect": true
              },
              {
                "id": "79fe4d15-e0c1-430d-be1f-73247cdd1116",
                "title": "They must finish simultaneously",
                "isCorrect": false
              },
              {
                "id": "9e3f9b8c-3e90-4441-93c6-f76c4a0028e5",
                "title": "They must not be pinned",
                "isCorrect": false
              }
            ],
            "descriptionText": "join_all requires uniform output types",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5d24d638-478a-49ca-ab44-1212a8281c0d",
            "title": "What is a trait object in async contexts?",
            "answers": [
              {
                "id": "d49c5260-fedd-4230-8abc-4adca68063d2",
                "title": "An OOP class",
                "isCorrect": false
              },
              {
                "id": "ac3aa4e6-42c1-45a0-9e4f-0164edef8cae",
                "title": "A dynamic type enabling heterogeneous types via a common trait",
                "isCorrect": true
              },
              {
                "id": "a1e91d81-d550-439d-a3c8-fd8e647b9bb7",
                "title": "An asynchronous object",
                "isCorrect": false
              },
              {
                "id": "8792df6f-35a4-480b-a551-3bfbfd743abe",
                "title": "A function pointer",
                "isCorrect": false
              }
            ],
            "descriptionText": "dyn Trait lets you work through a shared interface",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b69fef1b-87bb-41f3-a026-eee9fac436dd",
            "title": "Why is Pin needed in async Rust?",
            "answers": [
              {
                "id": "91e79095-7d77-4a94-820e-e8db703791e4",
                "title": "To speed up code",
                "isCorrect": false
              },
              {
                "id": "31df43b9-7242-4cff-971a-99512296535f",
                "title": "To guarantee a value won't be moved in memory",
                "isCorrect": true
              },
              {
                "id": "283f554e-492c-4290-882c-2f905d11b291",
                "title": "To create pointers",
                "isCorrect": false
              },
              {
                "id": "ce172bbc-5991-4d74-8d9c-2249db54640d",
                "title": "It's deprecated",
                "isCorrect": false
              }
            ],
            "descriptionText": "Pin protects self-referential structures used by futures",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ff3e10e5-51e8-46b3-b71a-9ac1b6675c84",
            "title": "What is the Unpin trait?",
            "answers": [
              {
                "id": "a37de14a-bdf6-4f97-b0a1-2a41af406338",
                "title": "The opposite of Pin",
                "isCorrect": false
              },
              {
                "id": "e9e6b1cb-face-42fd-9c0f-eea8b4ead0ac",
                "title": "A marker that a type can be safely moved even when pinned",
                "isCorrect": true
              },
              {
                "id": "e6145df4-f73b-4a47-8af8-d3a26e098a0a",
                "title": "A trait for removing Pin",
                "isCorrect": false
              },
              {
                "id": "298a15e5-9e3c-4b55-a8dd-ff14f6817f08",
                "title": "An alternative to Future",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unpin indicates moving the type is safe",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6af5e848-5885-4d66-8ecb-6417888e61ce",
            "title": "Do most types implement Unpin automatically?",
            "answers": [
              {
                "id": "01b591c8-ee19-4a85-924b-ed6ae885050f",
                "title": "No, you must implement it manually",
                "isCorrect": false
              },
              {
                "id": "825c008d-3830-4ccb-b8c0-b50c5d53415e",
                "title": "Yes, except for special cases",
                "isCorrect": true
              },
              {
                "id": "93890736-4898-4bcd-ac1c-c5ef1b6b5dfe",
                "title": "Only primitive types",
                "isCorrect": false
              },
              {
                "id": "d1b63286-c2b6-4244-bfe0-f15f7eae087b",
                "title": "Depends on the runtime",
                "isCorrect": false
              }
            ],
            "descriptionText": "The compiler auto-derives Unpin when safe",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "22176a5f-1c19-4e97-bae5-7376ee66d325",
            "title": "When should you use Box::pin?",
            "answers": [
              {
                "id": "30804dcb-7c92-4719-99e2-b1782034fa75",
                "title": "Always for futures",
                "isCorrect": false
              },
              {
                "id": "6ac34b98-ae84-4133-8004-6f5e520c3f27",
                "title": "When you need a pinned future on the heap",
                "isCorrect": true
              },
              {
                "id": "ec90bb6b-eb0e-45bd-a820-81b23069c762",
                "title": "Only for large structs",
                "isCorrect": false
              },
              {
                "id": "1a87c6c4-54ba-4d76-8a11-e277ad320124",
                "title": "Never; it's obsolete",
                "isCorrect": false
              }
            ],
            "descriptionText": "Box::pin produces a pinned heap allocation, useful for dynamic futures",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "91030f6e-9032-40fb-8693-fd2823c77954",
            "title": "What is a Stream in async Rust?",
            "answers": [
              {
                "id": "a4fe430b-060f-4ba8-bd73-9172712a325e",
                "title": "A network connection",
                "isCorrect": false
              },
              {
                "id": "1e381c33-e361-4234-93b6-395ef780161f",
                "title": "An asynchronous iterator",
                "isCorrect": true
              },
              {
                "id": "4a47907e-67cc-474b-9331-173ffca320bd",
                "title": "A data flow type",
                "isCorrect": false
              },
              {
                "id": "7068aca0-ec4c-41a6-bef6-189ed6d30afe",
                "title": "An alternative to Future",
                "isCorrect": false
              }
            ],
            "descriptionText": "Stream is the async counterpart to Iterator",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7ba48713-8f96-49f8-82a5-79ead3389aaa",
            "title": "Which method does the Stream trait define?",
            "answers": [
              {
                "id": "5ccc7940-4b36-461c-956c-c42587b1be44",
                "title": "next()",
                "isCorrect": false
              },
              {
                "id": "9122af64-cefb-4103-96f3-a4cabc6f362d",
                "title": "poll()",
                "isCorrect": false
              },
              {
                "id": "3428045b-4f3d-4f73-9eb9-59198c065c08",
                "title": "poll_next()",
                "isCorrect": true
              },
              {
                "id": "ee46bef4-8e2c-42a6-8809-0aa0b70cf97c",
                "title": "stream()",
                "isCorrect": false
              }
            ],
            "descriptionText": "poll_next merges Future::poll with Iterator::next",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b26b2801-89ff-4bff-b351-2ee18147c0fb",
            "title": "What does poll_next return?",
            "answers": [
              {
                "id": "56d3d502-0e98-4e70-a3f9-98bb10f250bd",
                "title": "Option<T>",
                "isCorrect": false
              },
              {
                "id": "d507c6af-9a4b-4e6a-b0b4-ac4fb4539452",
                "title": "Poll<T>",
                "isCorrect": false
              },
              {
                "id": "c4e91ecf-634b-4025-a057-720a677a9693",
                "title": "Poll<Option<T>>",
                "isCorrect": true
              },
              {
                "id": "a3e4b6f1-6696-4aeb-8e5f-a7f23bb7cc02",
                "title": "Result<T, E>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Poll for readiness, Option for sequence items",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e9648548-db25-4b71-b288-d92a8131beec",
            "title": "What is StreamExt?",
            "answers": [
              {
                "id": "680998a6-d238-4f43-859f-3a79e8cb1de0",
                "title": "A file extension",
                "isCorrect": false
              },
              {
                "id": "dff01f33-8716-4471-9fd9-654e90933e44",
                "title": "A trait with extra utility methods for Stream",
                "isCorrect": true
              },
              {
                "id": "0b235b41-b464-4629-b90a-021dfb51bbac",
                "title": "An alternative Stream",
                "isCorrect": false
              },
              {
                "id": "9ac1a22e-93fe-4ddb-aad9-fee135b5666c",
                "title": "A data type",
                "isCorrect": false
              }
            ],
            "descriptionText": "StreamExt adds helpers like next, filter, map, etc",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d6801f0f-7bb9-4204-960c-02c36adc9dd4",
            "title": "What does a timeout method on a stream do?",
            "answers": [
              {
                "id": "80e6f5d5-6cc6-4f4a-944d-f331d75d5230",
                "title": "Stops the stream",
                "isCorrect": false
              },
              {
                "id": "0f77ef35-cfd7-40bc-b9d3-c21c36a38db4",
                "title": "Sets a time limit for receiving each item",
                "isCorrect": true
              },
              {
                "id": "b7c275ac-1827-4c17-a2ae-20a8ced9f805",
                "title": "Speeds up the stream",
                "isCorrect": false
              },
              {
                "id": "3d1daac4-87bd-42b3-848f-c2698800458c",
                "title": "Creates a timer",
                "isCorrect": false
              }
            ],
            "descriptionText": "It wraps the stream and errors if an item is late",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "74ad75b2-97f5-46fb-81d3-9b8698151a53",
            "title": "What does throttle do on a stream?",
            "answers": [
              {
                "id": "3297729c-4a25-4695-9cb6-4dba2494e120",
                "title": "Increases speed",
                "isCorrect": false
              },
              {
                "id": "dc7c1440-b221-4219-bd2d-cb6bf664de89",
                "title": "Limits the rate of receiving items",
                "isCorrect": true
              },
              {
                "id": "ef878594-dbed-4886-b908-762ceed70b1c",
                "title": "Stops the stream",
                "isCorrect": false
              },
              {
                "id": "aee2d828-9398-4a15-86b7-5a2cb8495043",
                "title": "Filters items",
                "isCorrect": false
              }
            ],
            "descriptionText": "throttle controls how often the stream is polled",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0ed37d03-2e50-4a74-a29d-a4fc013be864",
            "title": "What does merge do with streams?",
            "answers": [
              {
                "id": "b38dd41d-b49f-4224-a645-9a05614a7256",
                "title": "Combines data into a single item",
                "isCorrect": false
              },
              {
                "id": "72ec8df3-1b10-49ee-a013-3e0ef548a17c",
                "title": "Combines multiple streams into one, yielding items as they arrive",
                "isCorrect": true
              },
              {
                "id": "127ba17c-fecb-4734-98cb-648a8abe2736",
                "title": "Removes duplicates",
                "isCorrect": false
              },
              {
                "id": "2ac85ba9-f97d-467b-9ec9-1e3000742b4d",
                "title": "Sorts items",
                "isCorrect": false
              }
            ],
            "descriptionText": "It emits items from several source streams",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3a6b2305-5da5-49c7-92cc-5086a7c9f38e",
            "title": "What does take do on a stream?",
            "answers": [
              {
                "id": "25c768e5-b4fd-4686-a499-4c8b93c25667",
                "title": "Removes items",
                "isCorrect": false
              },
              {
                "id": "5115faff-e372-4adc-811b-9a44268609aa",
                "title": "Limits the number of items produced",
                "isCorrect": true
              },
              {
                "id": "c2fb32b3-8e58-467d-8956-cfb7280218de",
                "title": "Captures ownership",
                "isCorrect": false
              },
              {
                "id": "39928bb0-f3aa-462f-81d4-a66e20fd7ef9",
                "title": "Creates a copy",
                "isCorrect": false
              }
            ],
            "descriptionText": "take(n) yields at most n items",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f30234c0-5c5e-47ef-9e43-6054cc535d97",
            "title": "What is yield_now?",
            "answers": [
              {
                "id": "5bafd6c0-4a6c-4160-9933-3b513b7c843a",
                "title": "Returns a value from a function",
                "isCorrect": false
              },
              {
                "id": "afb01819-48bc-4e81-a56b-807c675a197d",
                "title": "Explicitly yields control to the runtime",
                "isCorrect": true
              },
              {
                "id": "8429258d-8941-45bf-a8f9-dc02541b6055",
                "title": "Creates a new task",
                "isCorrect": false
              },
              {
                "id": "c0ff8ef5-b8ea-4a8f-b0bf-966214d04d79",
                "title": "Stops the program",
                "isCorrect": false
              }
            ],
            "descriptionText": "yield_now creates an await point to let the runtime run others",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "97f1a0d7-b737-4297-8f2b-280f4377bbfd",
            "title": "What's the difference between CPU-bound and IO-bound operations?",
            "answers": [
              {
                "id": "523789bc-da5f-47f4-ae0f-65eda7eed0b9",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "3ccda56b-c7d7-4cbc-a61e-874c7a62ca64",
                "title": "CPU-bound are limited by compute; IO-bound by I/O speed",
                "isCorrect": true
              },
              {
                "id": "8d8dc302-c226-41cd-b027-df35b5167640",
                "title": "CPU-bound are faster",
                "isCorrect": false
              },
              {
                "id": "32fa6359-af25-4155-b9d2-13bf9e8b6108",
                "title": "IO-bound require more memory",
                "isCorrect": false
              }
            ],
            "descriptionText": "CPU-bound saturate the CPU; IO-bound wait on I/O",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bc7677c1-e6a3-45d2-8a25-f170c2c0a3fc",
            "title": "Is async useful for CPU-bound tasks?",
            "answers": [
              {
                "id": "d1681168-f770-4934-9530-61d64544a640",
                "title": "No, only for IO-bound",
                "isCorrect": false
              },
              {
                "id": "182c6799-a5ee-404a-9362-ccf79923da5d",
                "title": "Yes, for structuring relationships between parts of a program",
                "isCorrect": true
              },
              {
                "id": "a78b6b8a-e66b-4a47-8b39-4362eab1661d",
                "title": "Only with multithreading",
                "isCorrect": false
              },
              {
                "id": "fa7f0281-d83e-4537-9723-3cd2619a83ad",
                "title": "Never",
                "isCorrect": false
              }
            ],
            "descriptionText": "Async can structure cooperative multitasking even for CPU-bound workflows",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2bec207e-7893-44e9-bd17-9b2625a110fc",
            "title": "What is a task in async Rust?",
            "answers": [
              {
                "id": "14d3c092-6aab-4141-9a6d-e467dd46b9e8",
                "title": "The same as a thread",
                "isCorrect": false
              },
              {
                "id": "22f1c70c-6f1c-414f-8202-291c8ac525e2",
                "title": "A unit of concurrency managed by the runtime",
                "isCorrect": true
              },
              {
                "id": "f1100e93-c01d-4f5b-aba4-133a73b3263d",
                "title": "A synonym for Future",
                "isCorrect": false
              },
              {
                "id": "0c509009-0973-4637-b115-5de1768fd31b",
                "title": "A data type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Tasks are lightweight units scheduled by the runtime",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "153cdc5a-7586-436c-bb6f-99aed4db95db",
            "title": "Can tasks move between threads?",
            "answers": [
              {
                "id": "eca58a0c-caf9-455a-aa47-ac0d65e82215",
                "title": "No, never",
                "isCorrect": false
              },
              {
                "id": "cae58ee9-4c7e-40fc-a64c-c02f6a74d6d6",
                "title": "Yes, some runtimes support work stealing",
                "isCorrect": true
              },
              {
                "id": "a2e01ef9-9996-4f1b-9adc-51648d2838df",
                "title": "Only manually",
                "isCorrect": false
              },
              {
                "id": "2090ffa6-bcc1-459c-9dea-3e362668de33",
                "title": "It's forbidden",
                "isCorrect": false
              }
            ],
            "descriptionText": "Many runtimes rebalance tasks across threads",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3ce1d933-8f02-4629-afae-b7612b742de3",
            "title": "When are threads preferable to async?",
            "answers": [
              {
                "id": "14499828-3aa3-4913-a561-fac2394ef3a5",
                "title": "Never",
                "isCorrect": false
              },
              {
                "id": "0d239a1c-565d-420e-b328-178a0183c71b",
                "title": "For highly parallelizable work",
                "isCorrect": true
              },
              {
                "id": "1e2b6a34-d73f-4507-9b0a-1401ada742eb",
                "title": "For network I/O",
                "isCorrect": false
              },
              {
                "id": "3940d5d4-f49b-4db0-92ec-407320cf166b",
                "title": "For GUIs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Threads suit compute-heavy parallel workloads",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2e7b190a-0643-4db4-bbf8-abf118bda2b3",
            "title": "When is async preferable to threads?",
            "answers": [
              {
                "id": "0bdd10b7-4d91-4443-b2eb-b95eef728658",
                "title": "Always",
                "isCorrect": false
              },
              {
                "id": "e2404591-9616-4d49-aac3-a567dbea16ee",
                "title": "For highly concurrent workloads with many sources",
                "isCorrect": true
              },
              {
                "id": "2669229c-9b0b-420e-92e2-06047cf436e4",
                "title": "For math-heavy computation",
                "isCorrect": false
              },
              {
                "id": "c9d93a73-c42b-498b-b790-4ff70bd8dc29",
                "title": "For file I/O",
                "isCorrect": false
              }
            ],
            "descriptionText": "Async shines for handling many concurrent events",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "22acea21-2c25-4d0c-8e1b-69101c47b221",
            "title": "Can you combine threads and async?",
            "answers": [
              {
                "id": "fec30324-eefe-4be4-a7e8-ce7a5691c449",
                "title": "No, they conflict",
                "isCorrect": false
              },
              {
                "id": "b8b4b9e7-76ee-4fb9-bf3e-45fbc5abf367",
                "title": "Yes, they complement each other well",
                "isCorrect": true
              },
              {
                "id": "fa95b1a1-7398-46da-8cbb-f3d828f73753",
                "title": "Only with a special runtime",
                "isCorrect": false
              },
              {
                "id": "cb4dd7bb-6516-4755-8a42-d6c957aed8a9",
                "title": "This approach is deprecated",
                "isCorrect": false
              }
            ],
            "descriptionText": "Mix them to leverage each approach's strengths",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0af3db7c-4ff1-4def-a939-bbec38f9e47f",
            "title": "What is work stealing in an async runtime?",
            "answers": [
              {
                "id": "9d2e7a0e-55e3-4d06-aed9-05ec58ff41ff",
                "title": "Stealing data between tasks",
                "isCorrect": false
              },
              {
                "id": "cdee0b62-0c06-49fa-ba02-74189604153f",
                "title": "A load-balancing mechanism that moves tasks between threads for performance",
                "isCorrect": true
              },
              {
                "id": "a7bd0642-f431-4272-8244-506e34b7afd0",
                "title": "An attack type",
                "isCorrect": false
              },
              {
                "id": "5d32c0b4-65b2-433b-8856-00bca236a38a",
                "title": "A way to cancel tasks",
                "isCorrect": false
              }
            ],
            "descriptionText": "The runtime redistributes tasks to optimize load",
            "descriptionLink": "async_await_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "22cbcf60-383b-4fd0-819c-2cc321b0505f",
        "theme": "Object-Oriented Programming in Rust",
        "priority": 14,
        "questions": [
          {
            "id": "b53e9efe-4bfd-4c3b-b246-6bab4c29bbae",
            "title": "According to the \"Gang of Four\" definition, what is an object?",
            "answers": [
              {
                "id": "e34759ec-22c1-4e22-9ae4-7c2ad0b49a00",
                "title": "Only data",
                "isCorrect": false
              },
              {
                "id": "a97a1827-74b4-48cd-9f80-b098c105cb37",
                "title": "Only methods",
                "isCorrect": false
              },
              {
                "id": "e4498c47-ff34-44c0-ab63-41b61787bb70",
                "title": "A package of data and procedures operating on that data",
                "isCorrect": true
              },
              {
                "id": "deddc157-c5c0-4868-90fb-9619c5bfd3b3",
                "title": "A class with inheritance",
                "isCorrect": false
              }
            ],
            "descriptionText": "An object combines data and procedures (methods/operations) that work with that data",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "05385636-de0e-4506-bb93-2c991da3ee27",
            "title": "Are struct and enum in Rust objects according to Gang of Four definition?",
            "answers": [
              {
                "id": "8d18a7ce-77f6-4023-9c8f-249fe3515904",
                "title": "No, they are not objects",
                "isCorrect": false
              },
              {
                "id": "2e3f960c-9aec-42e5-8684-961d9f97fb93",
                "title": "Yes, they provide the same functionality",
                "isCorrect": true
              },
              {
                "id": "546ee267-1cd5-492d-be40-7e38c35fc89a",
                "title": "Only struct are objects",
                "isCorrect": false
              },
              {
                "id": "dec28e27-11dc-4614-82cb-1ac17be24795",
                "title": "Only enum are objects",
                "isCorrect": false
              }
            ],
            "descriptionText": "Struct and enum with methods in impl blocks provide the same functionality as objects",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b98ed0cc-c04e-4ad5-aa1f-3d6cee0ef53b",
            "title": "What is encapsulation?",
            "answers": [
              {
                "id": "3293e306-038e-46be-9c18-cedd88f04121",
                "title": "Data inheritance",
                "isCorrect": false
              },
              {
                "id": "e0b5353b-d5df-409c-8712-14b62d1a4ec8",
                "title": "Hiding implementation details of an object",
                "isCorrect": true
              },
              {
                "id": "39a97de8-8b77-4a95-94eb-858675d3d396",
                "title": "Polymorphism",
                "isCorrect": false
              },
              {
                "id": "f54a8de2-ffaa-4e99-a16e-e59b739fb9cf",
                "title": "Dynamic dispatch",
                "isCorrect": false
              }
            ],
            "descriptionText": "Encapsulation means implementation details are not accessible to code using the object",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e4c03d01-5769-48f1-ab24-41b3f30ff302",
            "title": "How is encapsulation controlled in Rust?",
            "answers": [
              {
                "id": "3c56444c-5f91-430d-be07-e42656feb7c2",
                "title": "Through classes",
                "isCorrect": false
              },
              {
                "id": "a729637a-2006-4cd6-9dc9-0ff37c9cf255",
                "title": "Through the pub keyword",
                "isCorrect": true
              },
              {
                "id": "0bf11002-72fa-4c54-a69c-5e2a697acea1",
                "title": "Through inheritance",
                "isCorrect": false
              },
              {
                "id": "80b5cac3-f160-49f2-9dad-a6e5fefe0213",
                "title": "Automatically",
                "isCorrect": false
              }
            ],
            "descriptionText": "The pub keyword defines what is public, by default everything is private",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a5651f6c-bb0b-4f4f-a0e6-6f06d035e48a",
            "title": "Which fields in struct AveragedCollection are private?",
            "answers": [
              {
                "id": "880208d6-8d77-477e-88f0-a9f1ff6f8723",
                "title": "Only list",
                "isCorrect": false
              },
              {
                "id": "219c5ae0-243c-4198-96a7-7d59dbf9a12b",
                "title": "Only average",
                "isCorrect": false
              },
              {
                "id": "4ac049a4-7040-4b07-9a5e-d2954b0358e9",
                "title": "list and average",
                "isCorrect": true
              },
              {
                "id": "f0064339-de9f-4900-8ec9-f27637b1b1a2",
                "title": "All fields are public",
                "isCorrect": false
              }
            ],
            "descriptionText": "Both fields list and average are private to guarantee correctness of the average value",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "42111546-c969-4a6b-966e-9bc48dbf9ad6",
            "title": "Why is the update_average method private?",
            "answers": [
              {
                "id": "5cb5f08d-a2d5-4b9e-aa51-0e43f157c034",
                "title": "For speed",
                "isCorrect": false
              },
              {
                "id": "c9f3354a-3192-4ef5-b427-43df8ab06288",
                "title": "It's an internal implementation detail",
                "isCorrect": true
              },
              {
                "id": "ac6be9d3-4fd3-48bb-bf08-e5948caac3d2",
                "title": "Due to compiler limitation",
                "isCorrect": false
              },
              {
                "id": "d55cca93-33bc-415c-bfe5-c42de2398b4e",
                "title": "To avoid type errors",
                "isCorrect": false
              }
            ],
            "descriptionText": "update_average is an internal implementation detail that doesn't require public access",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f8dab0a8-c6e8-4b74-ad16-17b4df9e86cc",
            "title": "Does Rust support inheritance in the traditional sense?",
            "answers": [
              {
                "id": "ae6ba9b0-a24a-4ae6-bb00-225fa54d4194",
                "title": "Yes, fully",
                "isCorrect": false
              },
              {
                "id": "fc63409b-86b2-416e-b239-4b17f3c5f4bc",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "6ed3d261-5c34-4c34-9aa9-1abef59268cf",
                "title": "Only for struct",
                "isCorrect": false
              },
              {
                "id": "0da4c894-1b1b-4d97-a96f-557743e79789",
                "title": "Only through macros",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust has no way to define a struct that inherits fields and methods from a parent struct",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1c279be4-1bb2-49fa-8f8b-4e21f75caf0f",
            "title": "How can code be reused in Rust instead of inheritance?",
            "answers": [
              {
                "id": "2c73cf44-0193-4b19-94c9-de6bbeea6344",
                "title": "Only through copying",
                "isCorrect": false
              },
              {
                "id": "ca197dee-8917-44ae-8666-f22351a1ff80",
                "title": "Through default trait method implementations",
                "isCorrect": true
              },
              {
                "id": "a87eee3d-218d-48c0-9e1a-a5c84c8aead7",
                "title": "Through macros",
                "isCorrect": false
              },
              {
                "id": "b6f9b366-2d07-4e8f-8741-0a417e808158",
                "title": "Through global functions",
                "isCorrect": false
              }
            ],
            "descriptionText": "Default trait method implementations allow code reuse",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3fad461e-e803-4efe-9b33-eda1fe118b24",
            "title": "What is polymorphism?",
            "answers": [
              {
                "id": "c30571f0-63e9-4496-a446-cbfcce22f6ea",
                "title": "Multiple inheritance",
                "isCorrect": false
              },
              {
                "id": "da3353e6-f05f-41cd-8605-3ae3cfb365af",
                "title": "Code that works with data of multiple types",
                "isCorrect": true
              },
              {
                "id": "cd76242c-54c2-49e5-9ae3-3ccbc7d5072d",
                "title": "Dynamic typing",
                "isCorrect": false
              },
              {
                "id": "4dba58ec-e15d-480a-8253-faa07a8f1a02",
                "title": "Encapsulation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Polymorphism is code capable of working with data of various types",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6762c567-a4fc-4624-ba10-28b59a96c760",
            "title": "How does Rust implement polymorphism?",
            "answers": [
              {
                "id": "563b2496-6a02-48fb-a126-8cc3665fec28",
                "title": "Through inheritance",
                "isCorrect": false
              },
              {
                "id": "317edba0-d9a7-4ed4-a4f7-7fca0bd9b22b",
                "title": "Through generics and trait bounds",
                "isCorrect": true
              },
              {
                "id": "eb274887-c4a7-412b-85b8-9ff7221e31c7",
                "title": "Through classes",
                "isCorrect": false
              },
              {
                "id": "88e902ec-26f9-4d02-8195-003a3de56c76",
                "title": "Through interfaces",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust uses generics for abstraction over types and trait bounds for constraints",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5945b7f3-4f24-4f58-8834-c49587b78e7f",
            "title": "What is a trait object?",
            "answers": [
              {
                "id": "3cacac20-a679-4f41-94fc-8fd36ff01b2c",
                "title": "An instance of struct",
                "isCorrect": false
              },
              {
                "id": "4685661b-635c-4ae7-b699-d2d5eca1f4c5",
                "title": "A pointer to a type implementing a trait, with a method table",
                "isCorrect": true
              },
              {
                "id": "bf26e4e0-c814-43bd-b487-08e60f4d2009",
                "title": "A generic type",
                "isCorrect": false
              },
              {
                "id": "640e4b6b-245e-4dc7-99b5-5a0d2326004a",
                "title": "An enum variant",
                "isCorrect": false
              }
            ],
            "descriptionText": "A trait object contains a pointer to the instance and a table for trait method lookup",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "13ef9443-50b4-4dcb-a2f8-656b064184df",
            "title": "How do you create a trait object?",
            "answers": [
              {
                "id": "047ba5b6-5cb1-4778-99f5-3b5af597fefb",
                "title": "Only through Box<T>",
                "isCorrect": false
              },
              {
                "id": "ad53065c-5825-46a6-9684-8391695d607b",
                "title": "Through pointer + dyn keyword + trait",
                "isCorrect": true
              },
              {
                "id": "598495b6-e999-4740-8917-9e8736e00b92",
                "title": "Through impl keyword",
                "isCorrect": false
              },
              {
                "id": "4d788ff1-7363-4db4-a043-22935603e769",
                "title": "Through new keyword",
                "isCorrect": false
              }
            ],
            "descriptionText": "Trait object is created with a pointer (& or Box), the dyn keyword, and trait name",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "000067f8-f1a4-40f4-8964-3ad7d3f29a72",
            "title": "What does Box<dyn Draw> mean?",
            "answers": [
              {
                "id": "eee29cc8-133f-45cc-b4c7-6f42781c6413",
                "title": "Generic type",
                "isCorrect": false
              },
              {
                "id": "98e47bc3-58cf-4b67-97f1-9caad9cdaebc",
                "title": "Trait object for any type implementing Draw",
                "isCorrect": true
              },
              {
                "id": "006f18b3-bf53-4818-bac2-da26a18a1cb9",
                "title": "Concrete type Draw",
                "isCorrect": false
              },
              {
                "id": "e086822f-e4a2-4778-84e1-e32ede39ac58",
                "title": "Abstract class",
                "isCorrect": false
              }
            ],
            "descriptionText": "Box<dyn Draw> is a trait object for any type in Box implementing Draw",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "42e794ad-2dfc-4a29-9875-897b3d1e4a96",
            "title": "What's the difference between generic with trait bound and trait object?",
            "answers": [
              {
                "id": "3c8fd2c6-0c69-4b00-a46b-da3381732523",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "398fd77d-3723-438a-b674-3ca85933fe8d",
                "title": "Generic is replaced by one type, trait object allows different types at runtime",
                "isCorrect": true
              },
              {
                "id": "a4ee7313-a4e8-4472-93f6-36e63241e804",
                "title": "Generic is slower",
                "isCorrect": false
              },
              {
                "id": "6c4ed68d-ca71-468d-809a-e9149f9e51d4",
                "title": "Trait object only works with Box",
                "isCorrect": false
              }
            ],
            "descriptionText": "Generic can only be one concrete type, trait objects allow different types",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3e3ef68c-0d4a-47c0-bab0-0375f2b399e3",
            "title": "What is duck typing?",
            "answers": [
              {
                "id": "db2c47cf-a13b-48a2-94f0-8ef79928cc9d",
                "title": "Duck type in a program",
                "isCorrect": false
              },
              {
                "id": "4f1bab88-a53e-4313-864d-80cee76cddd2",
                "title": "Type checking based on behavior, not concrete type",
                "isCorrect": true
              },
              {
                "id": "ec82e991-22c5-4ace-a04c-22941bef3cf8",
                "title": "Dynamic typing",
                "isCorrect": false
              },
              {
                "id": "78792ff4-367f-41ba-9cb0-15816674bc75",
                "title": "Static typing",
                "isCorrect": false
              }
            ],
            "descriptionText": "\"If it walks like a duck and quacks like a duck, it's a duck\" — checking by behavior",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a46f9733-458c-479c-8e94-05ee78df5fc8",
            "title": "What is static dispatch?",
            "answers": [
              {
                "id": "36f282d8-bf97-418c-a822-ddbe29ca54a5",
                "title": "Compiler doesn't know method at compile time",
                "isCorrect": false
              },
              {
                "id": "b72fe2aa-b888-43e1-b24c-e98f24ddd85e",
                "title": "Compiler knows called method at compile time",
                "isCorrect": true
              },
              {
                "id": "ce79fd20-5a90-48ad-897d-e7cfa8e5f8b9",
                "title": "Runtime determines method",
                "isCorrect": false
              },
              {
                "id": "9e26bf5e-2517-4c1f-87a0-0cf0c03b2a11",
                "title": "Dynamic dispatch",
                "isCorrect": false
              }
            ],
            "descriptionText": "Static dispatch — compiler knows which method is called at compile time",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d7a598d3-6282-4850-80c5-009b80d05558",
            "title": "What is dynamic dispatch?",
            "answers": [
              {
                "id": "a63bf721-95b7-4550-9e51-d74428d13627",
                "title": "Compiler knows method at compile time",
                "isCorrect": false
              },
              {
                "id": "7cf96840-223c-4eb2-8d5c-58c129eece1c",
                "title": "Runtime determines which method to call",
                "isCorrect": true
              },
              {
                "id": "843fe32f-5193-4ea3-89aa-16b9c5047499",
                "title": "Static dispatch",
                "isCorrect": false
              },
              {
                "id": "d5513e9d-76e4-48de-aeac-5be6682810c0",
                "title": "Only works with generics",
                "isCorrect": false
              }
            ],
            "descriptionText": "Dynamic dispatch — method selection happens at runtime via pointers in trait object",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0a92897e-3e1e-448f-bd41-f7bef09e2a72",
            "title": "What's the disadvantage of dynamic dispatch?",
            "answers": [
              {
                "id": "a17b582c-c607-4079-8108-72e70db8e8fe",
                "title": "Uses more memory",
                "isCorrect": false
              },
              {
                "id": "d9c48234-f388-4c0a-b9e8-fe82986eb75d",
                "title": "Has runtime overhead and prevents some optimizations",
                "isCorrect": true
              },
              {
                "id": "f4f8a7ae-1adc-4d7c-a603-6d670edc8d06",
                "title": "Always slower than static dispatch",
                "isCorrect": false
              },
              {
                "id": "97f353c4-7f9a-495f-8ce2-c67c1eb44894",
                "title": "Cannot be used",
                "isCorrect": false
              }
            ],
            "descriptionText": "Dynamic dispatch has runtime cost and prevents inline optimizations",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1faf3f08-d550-48f6-9fbf-84199c6ea27e",
            "title": "What is the state pattern?",
            "answers": [
              {
                "id": "203aeabf-8a93-4ec9-8f02-01c874c26b07",
                "title": "Pattern for memory management",
                "isCorrect": false
              },
              {
                "id": "e0b4f0f5-d742-49a3-8145-aec8a08ce24f",
                "title": "Pattern where object's behavior changes based on its state",
                "isCorrect": true
              },
              {
                "id": "296b27c0-6252-484f-b003-807c52eed04c",
                "title": "Pattern for multithreading",
                "isCorrect": false
              },
              {
                "id": "88436ca5-ea48-4550-a840-a5843445757c",
                "title": "Pattern for database work",
                "isCorrect": false
              }
            ],
            "descriptionText": "State pattern — object changes behavior based on internal state",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "650d7bae-e36e-4d53-86bc-f76c6f7c2866",
            "title": "Why does Post use Option<Box<dyn State>>?",
            "answers": [
              {
                "id": "7d64098e-a8da-405e-ac61-e3b9d674b6b2",
                "title": "For performance",
                "isCorrect": false
              },
              {
                "id": "7156406b-7b22-4c9b-984c-362c29e04931",
                "title": "To extract value with take() method",
                "isCorrect": true
              },
              {
                "id": "a1bd3616-cbeb-47a4-b047-7991aa96b735",
                "title": "For type safety",
                "isCorrect": false
              },
              {
                "id": "3bae9920-92c6-459a-928d-1578208e6e8d",
                "title": "Compiler requirement",
                "isCorrect": false
              }
            ],
            "descriptionText": "Option allows using take() to move the state value, leaving None",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ad4da577-4585-49cb-8629-dcb58ea5a0b1",
            "title": "What does the take() method do on Option?",
            "answers": [
              {
                "id": "716e6947-a3cf-4853-aa9c-b508f480e366",
                "title": "Deletes the value",
                "isCorrect": false
              },
              {
                "id": "b9640fe9-455b-4b9d-9994-598ea9fd64a9",
                "title": "Extracts Some value, leaving None",
                "isCorrect": true
              },
              {
                "id": "04f4f188-b9ed-40b4-8b99-4956650a3941",
                "title": "Clones the value",
                "isCorrect": false
              },
              {
                "id": "b9d9935a-d04e-4851-a504-584727ae5edb",
                "title": "Checks for value presence",
                "isCorrect": false
              }
            ],
            "descriptionText": "take() moves value from Some, leaving None in its place",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "264bc401-cde7-441d-90ea-9ed912f88b73",
            "title": "Why does request_review take self: Box<Self>?",
            "answers": [
              {
                "id": "f6fffb4d-af26-4452-85b7-71df70be88e6",
                "title": "For speed",
                "isCorrect": false
              },
              {
                "id": "4aa2cf03-d01d-4da5-b3a4-c64138a43547",
                "title": "So method consumes old state and returns new one",
                "isCorrect": true
              },
              {
                "id": "45beb6f2-fc1e-48a7-aa88-d7558e94b9fb",
                "title": "For heap work",
                "isCorrect": false
              },
              {
                "id": "b2b46fa2-4ccf-40db-b920-c680cba949d3",
                "title": "It's a syntax error",
                "isCorrect": false
              }
            ],
            "descriptionText": "This signature takes ownership of Box, consuming the old state",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e764d8d5-3ecf-486f-a8ef-4237c22825aa",
            "title": "Why doesn't DraftPost have a content method in alternative implementation?",
            "answers": [
              {
                "id": "3e95aaea-b9e7-44bc-ae1d-50cced056b82",
                "title": "It's an error",
                "isCorrect": false
              },
              {
                "id": "8dc579e1-8f97-4b15-b393-ecfad6efaa17",
                "title": "To make showing draft impossible — compilation error",
                "isCorrect": true
              },
              {
                "id": "17bd9ee5-351b-400a-b579-b0f322e07e43",
                "title": "For performance",
                "isCorrect": false
              },
              {
                "id": "8b308f22-b194-44c0-b619-68c06f3eb683",
                "title": "Because drafts are empty",
                "isCorrect": false
              }
            ],
            "descriptionText": "Missing method makes displaying draft impossible — error at compile time",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f9d03ba9-6f52-4343-ab5c-4bbec60c97e6",
            "title": "How do request_review and approve methods in type-oriented version work with self?",
            "answers": [
              {
                "id": "f58138e1-217c-47c4-82ec-7d8cac0595d4",
                "title": "Take &self",
                "isCorrect": false
              },
              {
                "id": "76e8a419-4537-4699-9949-2b2279fbd041",
                "title": "Consume self and return new type",
                "isCorrect": true
              },
              {
                "id": "ad0d5be3-c8d2-4da2-8e7c-3321609728e1",
                "title": "Take &mut self",
                "isCorrect": false
              },
              {
                "id": "0d890fe4-0e61-4166-bd6f-842783367835",
                "title": "Clone self",
                "isCorrect": false
              }
            ],
            "descriptionText": "Methods take ownership of self, transforming instance into new type",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cfe2265b-e5d8-47fb-bacd-31b31e063716",
            "title": "What's the advantage of encoding states in types instead of state pattern?",
            "answers": [
              {
                "id": "3466b1d1-3c44-4b26-8a10-8bffc3aac072",
                "title": "Code is shorter",
                "isCorrect": false
              },
              {
                "id": "60afdf64-966c-44cb-8fef-ca6117efad9c",
                "title": "Invalid states become compilation errors",
                "isCorrect": true
              },
              {
                "id": "dff483b4-0e5c-4550-b8d4-bbb14ab099b0",
                "title": "Runs faster",
                "isCorrect": false
              },
              {
                "id": "b13fdb3b-59d8-4db9-9736-dadd34f1c6ad",
                "title": "Easier to read",
                "isCorrect": false
              }
            ],
            "descriptionText": "Encoding states in type system prevents some bugs at compile time",
            "descriptionLink": "oop_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "2166ddf8-31c5-4dbd-b575-ef6dc9f72eee",
        "theme": "Patterns and Matching in Rust",
        "priority": 15,
        "questions": [
          {
            "id": "1fe1a96c-ecf8-45b3-9870-9fee8e50d197",
            "title": "Where can patterns be used in Rust?",
            "answers": [
              {
                "id": "5d4650e3-4254-4a69-bdfa-e71b4023054c",
                "title": "Only in match expressions",
                "isCorrect": false
              },
              {
                "id": "32b0eb1b-3c53-482e-b183-1e70e483d84e",
                "title": "In match, if let, while let, for, let, and function parameters",
                "isCorrect": true
              },
              {
                "id": "87179e0f-85b0-4a87-bc87-e0adb6125d22",
                "title": "Only in let expressions",
                "isCorrect": false
              },
              {
                "id": "9117ea92-f782-4d38-9dc0-aa1c33aac48c",
                "title": "Only in loops",
                "isCorrect": false
              }
            ],
            "descriptionText": "Patterns can be used in match, if let, while let, for loops, let expressions, and function parameters",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2f4bb0b3-3e40-423d-a25c-bc30f8fc4e7d",
            "title": "Must match expressions be exhaustive?",
            "answers": [
              {
                "id": "3781399e-a32e-4aba-a0c7-14854f0efcaf",
                "title": "No, it's optional",
                "isCorrect": false
              },
              {
                "id": "08d35f3b-a735-4786-b56a-980a1fad6768",
                "title": "Yes, must cover all possible values",
                "isCorrect": true
              },
              {
                "id": "2f12b1a6-796f-4f2e-ab17-3ebb9c3e9a53",
                "title": "Only for Option and Result",
                "isCorrect": false
              },
              {
                "id": "bf665cb1-56b1-42a9-94ff-3080b17351ba",
                "title": "Depends on data type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Match expressions must be exhaustive — covering all possible values",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3e0ec1d6-9b7c-41ac-b899-2035e00b9c76",
            "title": "What does the _ pattern do in match?",
            "answers": [
              {
                "id": "797c7aac-f3a6-4410-9d19-dd36af65410a",
                "title": "Creates a variable named _",
                "isCorrect": false
              },
              {
                "id": "66e57da8-0be4-4c0d-8dcd-592cfea64815",
                "title": "Matches any value but doesn't bind it",
                "isCorrect": true
              },
              {
                "id": "734f48b0-092f-4e96-a5f1-7cf81bef67f0",
                "title": "Causes compilation error",
                "isCorrect": false
              },
              {
                "id": "58ec4bfb-0374-4baf-b598-78c431c22941",
                "title": "Skips checking",
                "isCorrect": false
              }
            ],
            "descriptionText": "_ is a wildcard pattern that matches any value but doesn't bind it to a variable",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9fb8bb2c-4e25-485c-b099-f337b09b967f",
            "title": "Can you mix if let, else if, and else if let?",
            "answers": [
              {
                "id": "672b483c-d56a-438c-b812-e3939d31b6c8",
                "title": "No, it's a syntax error",
                "isCorrect": false
              },
              {
                "id": "a1c2da46-7dcf-452a-aaf6-5991f76b7203",
                "title": "Yes, this gives more flexibility than match",
                "isCorrect": true
              },
              {
                "id": "e3a72c71-c514-48ff-96ab-fd737de498d6",
                "title": "Only if let and else",
                "isCorrect": false
              },
              {
                "id": "26256194-c70a-4b70-8c70-4ced7a4bc161",
                "title": "Only with Option types",
                "isCorrect": false
              }
            ],
            "descriptionText": "You can combine if let, else if, and else if let for greater flexibility",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "50e9195a-66fb-4c8e-8d9a-7b906729bf85",
            "title": "Does the compiler check exhaustiveness in if let expressions?",
            "answers": [
              {
                "id": "33c5b67d-10aa-4807-9a34-bdf9f50c774c",
                "title": "Yes, always",
                "isCorrect": false
              },
              {
                "id": "8723bf27-cc68-4e94-8ccf-da86b196b293",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "6e99175e-3361-44af-aadb-3ec5b87c1649",
                "title": "Only for Some variants",
                "isCorrect": false
              },
              {
                "id": "1812d646-9533-47bd-9187-29fa396c18f7",
                "title": "Only with else block",
                "isCorrect": false
              }
            ],
            "descriptionText": "Compiler doesn't check exhaustiveness for if let, unlike match",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bfefe8d4-8db5-4141-8742-940af7059a88",
            "title": "What does while let do?",
            "answers": [
              {
                "id": "ad5672d4-03fb-4c28-a672-27ae9945f020",
                "title": "Creates infinite loop",
                "isCorrect": false
              },
              {
                "id": "8c5ef202-08b6-4f16-bf28-ec8f9eb17f12",
                "title": "Executes loop while pattern continues to match",
                "isCorrect": true
              },
              {
                "id": "fcc772f9-fef2-4ccd-91aa-ceba82260550",
                "title": "Executes once",
                "isCorrect": false
              },
              {
                "id": "11c40f18-af05-49b3-9744-302d9e93fef6",
                "title": "Equivalent to for loop",
                "isCorrect": false
              }
            ],
            "descriptionText": "while let executes loop while pattern continues to match the value",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d0a0b6f0-9282-441d-98dd-fe5058d18bd3",
            "title": "Is x in for x in y a pattern?",
            "answers": [
              {
                "id": "887bbbe7-762c-48ab-b562-5002ee66660a",
                "title": "No, it's just a variable",
                "isCorrect": false
              },
              {
                "id": "b0cffefc-e0fd-4e9a-bdf6-e2f666cc58ac",
                "title": "Yes",
                "isCorrect": true
              },
              {
                "id": "ba4d5078-4e2a-413f-a171-d8adda956536",
                "title": "Only if it's a tuple",
                "isCorrect": false
              },
              {
                "id": "813b9121-ca8f-4c18-b653-ecf4ed7360a2",
                "title": "Depends on type of y",
                "isCorrect": false
              }
            ],
            "descriptionText": "The value after for is a pattern that can destructure values",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "512a345b-4c9f-442d-8d1d-6494c8cb4972",
            "title": "What is an irrefutable pattern?",
            "answers": [
              {
                "id": "4f464c67-d2b8-429a-b5cb-b50a63934d86",
                "title": "Pattern that might not match",
                "isCorrect": false
              },
              {
                "id": "d3b5659c-c1b3-415d-a6ee-098f38b1f43e",
                "title": "Pattern that will always match",
                "isCorrect": true
              },
              {
                "id": "fa275938-114d-4db0-9bb4-cfd14f10570e",
                "title": "Complex pattern",
                "isCorrect": false
              },
              {
                "id": "b4bfce42-a2da-470d-a3ad-83f70a7e1b19",
                "title": "Pattern with condition",
                "isCorrect": false
              }
            ],
            "descriptionText": "Irrefutable pattern always matches any possible value",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "870807c8-9d2b-42b5-8ea6-efe0badd5da1",
            "title": "What is a refutable pattern?",
            "answers": [
              {
                "id": "2687d39a-2186-482d-a9ff-c36f6be9ef59",
                "title": "Pattern that always matches",
                "isCorrect": false
              },
              {
                "id": "4e35b139-f7b2-4f45-8fc5-1b4935769c24",
                "title": "Pattern that might not match for some values",
                "isCorrect": true
              },
              {
                "id": "95c9d8d5-bb5d-4976-b5d5-ef18c789a775",
                "title": "Pattern with variables",
                "isCorrect": false
              },
              {
                "id": "c775b03d-bdfa-45a1-9a45-687326be9062",
                "title": "Pattern in match",
                "isCorrect": false
              }
            ],
            "descriptionText": "Refutable pattern might not match for some possible values",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ab034c1b-ff17-4949-a22b-033d78ae4e8d",
            "title": "Where can only irrefutable patterns be used?",
            "answers": [
              {
                "id": "823b37cb-b2b2-427f-86b3-08edd0c842dc",
                "title": "In match expressions",
                "isCorrect": false
              },
              {
                "id": "677d2fd7-f0f2-4218-848c-b7c9d57b5007",
                "title": "In let, for, and function parameters",
                "isCorrect": true
              },
              {
                "id": "27b8db32-98d3-4273-82f9-8fc358796363",
                "title": "In if let",
                "isCorrect": false
              },
              {
                "id": "f9816d67-6319-423e-a3eb-a3d4f02e5c53",
                "title": "Everywhere",
                "isCorrect": false
              }
            ],
            "descriptionText": "Let, for, and function parameters require irrefutable patterns",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6b68013d-f584-4599-8143-e90d87f5226c",
            "title": "Is Some(x) in let Some(x) = value refutable or irrefutable?",
            "answers": [
              {
                "id": "041c91a7-c979-4bf8-91fa-2430076fac2d",
                "title": "Irrefutable",
                "isCorrect": false
              },
              {
                "id": "44e446a4-bfb3-4ece-b68f-0855fa7a4948",
                "title": "Refutable",
                "isCorrect": true
              },
              {
                "id": "6f979872-925b-4aed-a340-997559646b79",
                "title": "Depends on value",
                "isCorrect": false
              },
              {
                "id": "b34c7ef4-d0c4-4072-9870-d073110e3b17",
                "title": "Not a pattern",
                "isCorrect": false
              }
            ],
            "descriptionText": "Some(x) is refutable because the value could be None",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "20674afe-0bb5-4f11-b9b0-79b6cb99f36f",
            "title": "How to fix using a refutable pattern in let?",
            "answers": [
              {
                "id": "81fd854e-0016-4cd2-9e7d-031ed6105fb1",
                "title": "Use match",
                "isCorrect": false
              },
              {
                "id": "a8f24444-7911-4c7a-9207-eddc40b4ac1b",
                "title": "Use if let or let...else",
                "isCorrect": true
              },
              {
                "id": "9643a30c-871c-4498-86d6-59c28d73f656",
                "title": "Remove the pattern",
                "isCorrect": false
              },
              {
                "id": "f45ded3f-8879-42bc-abf9-d707dd5d40cf",
                "title": "Cannot be fixed",
                "isCorrect": false
              }
            ],
            "descriptionText": "For refutable patterns, use if let or let...else instead of plain let",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8c670f37-0b3f-4fb2-b50f-af95819cbba4",
            "title": "What does the | operator do in patterns?",
            "answers": [
              {
                "id": "88983117-1338-4d31-a190-cb53b710d443",
                "title": "Logical OR — matches any of the patterns",
                "isCorrect": true
              },
              {
                "id": "6f8c97b6-df16-4848-83a0-f8eab3e23ace",
                "title": "Logical AND",
                "isCorrect": false
              },
              {
                "id": "ab2327ac-0ae0-426e-85ae-5b9a25888d83",
                "title": "Bitwise OR",
                "isCorrect": false
              },
              {
                "id": "c9dcb45d-94f8-4f68-911a-8010ad90793c",
                "title": "Creates tuple",
                "isCorrect": false
              }
            ],
            "descriptionText": "| is the \"or\" operator for patterns, matches any of the specified patterns",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6c53c38c-1d9c-465d-8104-406201ae16c2",
            "title": "What does ..= syntax mean in patterns?",
            "answers": [
              {
                "id": "e14b8b88-d34c-444a-8473-a5515a76bac1",
                "title": "Exclusive range",
                "isCorrect": false
              },
              {
                "id": "88829340-e4fd-447e-96fe-931fe4b41b17",
                "title": "Inclusive range of values",
                "isCorrect": true
              },
              {
                "id": "7ee0cb6d-861c-480b-98b0-8a39f181c33e",
                "title": "Infinite range",
                "isCorrect": false
              },
              {
                "id": "de0aaca8-8867-4448-8f4c-55fc809e3300",
                "title": "Rest of values",
                "isCorrect": false
              }
            ],
            "descriptionText": "..= creates an inclusive range (e.g., 1..=5 includes 5)",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ea404043-daff-4a79-8134-b064a6a4cd49",
            "title": "With what types can ranges be used in patterns?",
            "answers": [
              {
                "id": "441792c0-d43b-4bc2-8864-64f95fa65523",
                "title": "With any types",
                "isCorrect": false
              },
              {
                "id": "6431fd22-d5c5-4eff-9acc-22a8090eb14d",
                "title": "Only with numbers",
                "isCorrect": false
              },
              {
                "id": "526e477b-690c-46df-8d74-6c5e6b422bac",
                "title": "Only with char and numbers",
                "isCorrect": true
              },
              {
                "id": "8166b58f-00f4-46f3-a1ef-2472e2078b74",
                "title": "Only with i32",
                "isCorrect": false
              }
            ],
            "descriptionText": "Ranges in patterns only work with char and numeric types",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9046d209-a886-4c48-a6c2-c0e423091ca3",
            "title": "What does struct destructuring do in a pattern?",
            "answers": [
              {
                "id": "4656e090-3194-416d-b26c-51e792b48688",
                "title": "Deletes the struct",
                "isCorrect": false
              },
              {
                "id": "299b26e2-bd22-468d-8a40-edd18fca1983",
                "title": "Breaks struct into separate variables",
                "isCorrect": true
              },
              {
                "id": "92902b9e-0063-413a-87f7-8f5d1c367d8d",
                "title": "Clones the struct",
                "isCorrect": false
              },
              {
                "id": "656e941d-5587-4178-8f47-5c80a0850676",
                "title": "Checks the type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Destructuring extracts struct fields into separate variables",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d8e7a9fc-cec1-4040-b25f-cacda65823a0",
            "title": "What is the shorthand syntax for struct destructuring?",
            "answers": [
              {
                "id": "c5ca408a-0452-4075-9629-657d8718b883",
                "title": "Point { x: x, y: y }",
                "isCorrect": false
              },
              {
                "id": "373f028e-51d5-4c0d-8e89-e8e1280e183f",
                "title": "Point { x, y }",
                "isCorrect": true
              },
              {
                "id": "807acc81-368e-424f-9db4-39a5374a1b4e",
                "title": "Point(x, y)",
                "isCorrect": false
              },
              {
                "id": "913d6b13-20ba-42a1-af76-c4e7d2b04396",
                "title": "Point[x, y]",
                "isCorrect": false
              }
            ],
            "descriptionText": "If variable names match fields, you can write Point { x, y } instead of Point { x: x, y: y }",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c44f3c20-1a5f-4dee-95ed-4e189e5271b0",
            "title": "What's the difference between _x and _?",
            "answers": [
              {
                "id": "7f7431d2-0aec-4673-b7b6-6e7d58774e6b",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "d951d3e6-fe93-405e-b6fc-3efcede758a9",
                "title": "_x binds value (can take ownership), _ doesn't bind",
                "isCorrect": true
              },
              {
                "id": "43144842-5840-459d-8a07-873ffda0d082",
                "title": "_ is faster",
                "isCorrect": false
              },
              {
                "id": "4da2600b-85b9-43eb-bacb-a379e0d76c08",
                "title": "_x is a compilation error",
                "isCorrect": false
              }
            ],
            "descriptionText": "_x binds the value and can take ownership, _ doesn't bind at all",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b7990cc8-54e3-4d18-8fa2-c767f32cb286",
            "title": "What does .. do in patterns?",
            "answers": [
              {
                "id": "0594d9d3-aedf-4a7d-ba3c-55a86dd48e71",
                "title": "Creates range",
                "isCorrect": false
              },
              {
                "id": "18ca8211-df59-4a66-a0b4-a5070a968b73",
                "title": "Ignores remaining parts of value",
                "isCorrect": true
              },
              {
                "id": "9c3d81ae-1b48-4d00-bed8-e53439bf5b94",
                "title": "Creates array",
                "isCorrect": false
              },
              {
                "id": "ba760e40-0035-45da-9d3c-6fceb4784880",
                "title": "It's a syntax error",
                "isCorrect": false
              }
            ],
            "descriptionText": ".. ignores remaining parts of value that weren't explicitly matched",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "18b0a736-579a-48a5-8a28-1ab54db6a535",
            "title": "What is a match guard?",
            "answers": [
              {
                "id": "e0310892-31bb-465f-a49a-84db8adba54f",
                "title": "Error protection",
                "isCorrect": false
              },
              {
                "id": "c9d45b13-d99b-4d98-8234-64b0fbd26292",
                "title": "Additional if condition after pattern in match",
                "isCorrect": true
              },
              {
                "id": "6ddc6d8c-ef0e-4456-8186-9b2b1fd3ff60",
                "title": "Type checking",
                "isCorrect": false
              },
              {
                "id": "4bdcfeb3-971b-4b39-aa2e-eee57ae712a1",
                "title": "Error handler",
                "isCorrect": false
              }
            ],
            "descriptionText": "Match guard is an additional if condition after a pattern for more complex checks",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fdf3ba5a-8686-4b46-98ce-aacfb31b3bec",
            "title": "Does compiler check exhaustiveness with match guards?",
            "answers": [
              {
                "id": "95296288-5ac9-4009-b036-4b88c74bc795",
                "title": "Yes, always",
                "isCorrect": false
              },
              {
                "id": "871d3ac6-b236-4346-9584-a2742c55f4c3",
                "title": "No",
                "isCorrect": true
              },
              {
                "id": "88e4dbf9-99df-4005-9087-c29e98a284e1",
                "title": "Only for simple conditions",
                "isCorrect": false
              },
              {
                "id": "7c796d78-061b-4bc4-839f-bc98fd6d3992",
                "title": "Only for Option",
                "isCorrect": false
              }
            ],
            "descriptionText": "Compiler doesn't check exhaustiveness when using match guards",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8bb43ce5-c7cf-4fdd-bab8-7907a8a35678",
            "title": "What does the @ operator do in patterns?",
            "answers": [
              {
                "id": "39c3ff63-ce4d-4764-b1a0-5a3be0d13c64",
                "title": "Creates reference",
                "isCorrect": false
              },
              {
                "id": "2099f862-eaa7-41de-8f55-7df21699ceb6",
                "title": "Binds value to variable while testing pattern",
                "isCorrect": true
              },
              {
                "id": "7988c574-dc10-4aa1-8fe5-0aacd97177b2",
                "title": "Checks type",
                "isCorrect": false
              },
              {
                "id": "5cde13fe-08ac-4444-a621-1be1cade4ec6",
                "title": "Creates copy",
                "isCorrect": false
              }
            ],
            "descriptionText": "@ allows binding value to variable while simultaneously checking pattern",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3a987011-de84-4fb6-92c3-37c039c3c42a",
            "title": "In what order is match guard applied with |?",
            "answers": [
              {
                "id": "7c94c24f-5ca8-4d47-a8d2-9562e19c0fcc",
                "title": "Only to last value",
                "isCorrect": false
              },
              {
                "id": "31ae3531-88d2-4ba6-a4bd-36e7822f3e0d",
                "title": "To all patterns in the group",
                "isCorrect": true
              },
              {
                "id": "ff8b2420-4b21-40e2-8225-2cd88879a9df",
                "title": "To first value",
                "isCorrect": false
              },
              {
                "id": "d7203c90-ea0b-408b-9946-9d286767a6b6",
                "title": "Doesn't work with |",
                "isCorrect": false
              }
            ],
            "descriptionText": "Match guard applies to entire pattern: (4 | 5 | 6) if y, not 4 | 5 | (6 if y)",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "66e33f45-1522-438f-ab7b-acf01d6cff22",
            "title": "Can .. be used twice in one tuple pattern?",
            "answers": [
              {
                "id": "f61c77d9-db6b-4c1e-ae52-df3349af32ba",
                "title": "Yes, without restrictions",
                "isCorrect": false
              },
              {
                "id": "eaec7592-9b36-4780-8f47-0d8014f9c1c8",
                "title": "No, it's ambiguous",
                "isCorrect": true
              },
              {
                "id": "a1412b25-db06-4474-945f-54fc886ed7c9",
                "title": "Only at start and end",
                "isCorrect": false
              },
              {
                "id": "cfd12d9e-927b-4faa-9bd8-d29ec5a94cf7",
                "title": "Only with explicit types",
                "isCorrect": false
              }
            ],
            "descriptionText": "Using .. twice creates ambiguity — unclear how many elements to ignore",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3625a7c0-860e-4ab7-aace-c7b8dbbb5333",
            "title": "Can nested enum and struct be destructured?",
            "answers": [
              {
                "id": "92049abf-448f-4d3d-8767-653367b6daeb",
                "title": "No, only one level",
                "isCorrect": false
              },
              {
                "id": "f9e28b9b-2bba-4d70-ac15-b46603de42e6",
                "title": "Yes, patterns can be nested",
                "isCorrect": true
              },
              {
                "id": "7fc36d30-78a5-4805-b9b7-c002f2519019",
                "title": "Only with Box",
                "isCorrect": false
              },
              {
                "id": "c153bdfe-5b69-4ec4-9def-a49265c2309e",
                "title": "Only enum",
                "isCorrect": false
              }
            ],
            "descriptionText": "Patterns can be nested to destructure complex structures of any depth",
            "descriptionLink": "patterns_matching_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "bec94f3d-f8ae-449d-b621-b26d2f300b4f",
        "theme": "Advanced Features in Rust",
        "priority": 16,
        "questions": [
          {
            "id": "fed430ad-3664-4f73-8a13-fd5aa5331570",
            "title": "What is unsafe Rust?",
            "answers": [
              {
                "id": "b3259512-941a-473f-9436-01626849ca36",
                "title": "Dangerous code that cannot be used",
                "isCorrect": false
              },
              {
                "id": "62179b3f-1b08-4893-a015-8381764af5bd",
                "title": "Second language inside Rust without memory safety guarantees",
                "isCorrect": true
              },
              {
                "id": "b71a23b4-f1a1-4046-8b6b-501da168b1eb",
                "title": "Deprecated feature",
                "isCorrect": false
              },
              {
                "id": "d6f7eb01-aa75-4963-a6d7-9d9c78a2f1c2",
                "title": "Code with errors",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unsafe Rust is part of the language that doesn't enforce memory safety guarantees, giving programmers more control",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5a5aadc5-6844-41de-a067-3b9a848c87a6",
            "title": "How many \"superpowers\" does unsafe give?",
            "answers": [
              {
                "id": "d0e23279-4689-4f4b-93a7-04396bb46124",
                "title": "Three",
                "isCorrect": false
              },
              {
                "id": "edca0e78-75d1-4da7-9481-1a9738696e67",
                "title": "Four",
                "isCorrect": false
              },
              {
                "id": "e0747a61-697a-45c1-a009-e59fcabbc01f",
                "title": "Five",
                "isCorrect": true
              },
              {
                "id": "451f30ae-a88f-4e80-9a53-1d27ff902ac8",
                "title": "Unlimited",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unsafe gives five abilities: dereferencing raw pointers, calling unsafe functions, accessing mutable static, implementing unsafe trait, and accessing union fields",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "613f15ba-1d13-4008-86ad-5a1fb89d539b",
            "title": "Does unsafe disable the borrow checker?",
            "answers": [
              {
                "id": "5169d410-2f50-491b-8b55-7d2d64ad90a3",
                "title": "Yes, completely",
                "isCorrect": false
              },
              {
                "id": "525287e9-45d0-4d70-9373-3616a7ba4372",
                "title": "No, it continues working",
                "isCorrect": true
              },
              {
                "id": "7c3196c4-bf40-4e2e-ba99-10a195dfa7e5",
                "title": "Partially",
                "isCorrect": false
              },
              {
                "id": "f5c021d3-5604-4f22-8155-5e88bc3ef1b2",
                "title": "Depends on context",
                "isCorrect": false
              }
            ],
            "descriptionText": "unsafe doesn't disable the borrow checker and other Rust safety checks",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "56c9bde8-1741-48ba-8092-c9933907c0be",
            "title": "How are raw pointers created?",
            "answers": [
              {
                "id": "1e9e040e-0748-447c-a3e3-94f1ed582c90",
                "title": "Only in unsafe blocks",
                "isCorrect": false
              },
              {
                "id": "df6828ce-0e9d-4547-9671-abeafbdc314c",
                "title": "With &raw const and &raw mut operators",
                "isCorrect": true
              },
              {
                "id": "7c59dd74-f4b8-41ea-88b7-bbb6311939c3",
                "title": "Through new keyword",
                "isCorrect": false
              },
              {
                "id": "cb3ddb6e-bd95-4eeb-b2f6-6ca53e286f40",
                "title": "Automatically by compiler",
                "isCorrect": false
              }
            ],
            "descriptionText": "Raw pointers are created with &raw const for *const T and &raw mut for *mut T",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "be9cc24c-f900-4062-b921-2afabe267e8d",
            "title": "Can raw pointers be created in safe code?",
            "answers": [
              {
                "id": "74c8cf1d-8540-4b9f-b115-c68ed02519ae",
                "title": "No, only in unsafe",
                "isCorrect": false
              },
              {
                "id": "cb6f0aa8-4546-4308-90ac-758ba14ec231",
                "title": "Yes, but dereferencing requires unsafe",
                "isCorrect": true
              },
              {
                "id": "53a65e7a-9ee6-4669-bb91-dc0a7ea5a7a4",
                "title": "Only on stack",
                "isCorrect": false
              },
              {
                "id": "6f3683f0-16dd-4eb1-a08a-064ae8598051",
                "title": "Only with compiler permission",
                "isCorrect": false
              }
            ],
            "descriptionText": "Creating raw pointers is safe, but dereferencing requires unsafe block",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ccf97bfe-460b-4cd7-b95e-0f8fb6b0af23",
            "title": "What borrowing rules do raw pointers ignore?",
            "answers": [
              {
                "id": "fbbce0f6-a243-4324-8408-2fb267ed38a3",
                "title": "None",
                "isCorrect": false
              },
              {
                "id": "ecd16d19-69a4-4a00-ae0a-5293f3dd3fe4",
                "title": "Can have simultaneous immutable and mutable pointers to same location",
                "isCorrect": true
              },
              {
                "id": "c7dabe5b-2ded-47ad-a672-6562858e8447",
                "title": "Only lifetime rules",
                "isCorrect": false
              },
              {
                "id": "3a29e94d-c600-4f61-a4ab-b363f36a9af8",
                "title": "All rules automatically",
                "isCorrect": false
              }
            ],
            "descriptionText": "Raw pointers can ignore borrowing rules, allowing multiple mutable pointers",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "de6b2e7f-21f3-449f-bcfe-c236bceadb5e",
            "title": "How to call an unsafe function?",
            "answers": [
              {
                "id": "2d91a2bc-977c-4cc8-9fb4-7baa455ac95a",
                "title": "Directly from anywhere",
                "isCorrect": false
              },
              {
                "id": "865815e0-3ef1-4f82-9a42-9dcd1e9ede53",
                "title": "Only inside unsafe block",
                "isCorrect": true
              },
              {
                "id": "64146564-3294-4863-ada9-44148c96fe09",
                "title": "With special compiler flag",
                "isCorrect": false
              },
              {
                "id": "8703e6a1-95ad-48db-9bf1-c4599578c857",
                "title": "Through wrapper",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unsafe functions must be called inside unsafe block",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "63ff0fd9-fde7-4bd0-8ee3-bc3bcd2cada5",
            "title": "Is unsafe block needed inside unsafe function for unsafe operations?",
            "answers": [
              {
                "id": "88114b40-00b8-4131-9a35-f819dd1fb57a",
                "title": "No, function is already unsafe",
                "isCorrect": false
              },
              {
                "id": "bcd64aeb-ea69-47be-8963-73ecb3b1a185",
                "title": "Yes, compiler will warn if forgotten",
                "isCorrect": true
              },
              {
                "id": "f243428e-e2dd-4bd4-a8a0-eb4781526692",
                "title": "Depends on operation",
                "isCorrect": false
              },
              {
                "id": "87a28584-d247-4f5c-9068-f8058fb6abcd",
                "title": "Only for raw pointers",
                "isCorrect": false
              }
            ],
            "descriptionText": "Even inside unsafe function, unsafe blocks are needed for unsafe operations",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4ee9b076-6aac-4dad-8e1b-dcead259845e",
            "title": "What is a safe abstraction?",
            "answers": [
              {
                "id": "9fc7878a-e25a-447b-a4cc-3324c5dc763b",
                "title": "Abstract type",
                "isCorrect": false
              },
              {
                "id": "f55153c4-7ef6-4497-b272-4c0154637122",
                "title": "Safe wrapper around unsafe code",
                "isCorrect": true
              },
              {
                "id": "08c3cb62-1a46-4254-a0aa-23bbb87469ce",
                "title": "Type without unsafe",
                "isCorrect": false
              },
              {
                "id": "d4936ed1-f33b-40e0-b98a-7d33be353c11",
                "title": "Abstract function",
                "isCorrect": false
              }
            ],
            "descriptionText": "Safe abstraction is a safe interface over unsafe code",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7c0a4068-e8d1-4833-8c7d-bf3757daf379",
            "title": "What does extern \"C\" do?",
            "answers": [
              {
                "id": "bc0e597e-b6a9-46b7-b389-43bc7468bb2a",
                "title": "Imports C code",
                "isCorrect": false
              },
              {
                "id": "86b0c431-9263-43ba-b500-d9d5d05ce692",
                "title": "Defines ABI for interacting with external code",
                "isCorrect": true
              },
              {
                "id": "7512e243-45c3-4019-9d0b-6a6b77f75ba6",
                "title": "Compiles to C",
                "isCorrect": false
              },
              {
                "id": "3ba816c5-dbf2-41df-81e5-d21efaf2b855",
                "title": "Creates C library",
                "isCorrect": false
              }
            ],
            "descriptionText": "extern \"C\" defines ABI (Application Binary Interface) for calling functions from other languages",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5913f56c-7238-4360-8a2d-cd4c960d66be",
            "title": "Must extern block be unsafe?",
            "answers": [
              {
                "id": "0771c4d4-5ac8-4608-924a-2d0ab43210c8",
                "title": "No, never",
                "isCorrect": false
              },
              {
                "id": "0a6b3125-bf60-47fe-b429-ea97e4d44449",
                "title": "Yes, always",
                "isCorrect": true
              },
              {
                "id": "efa41577-78d2-4ab5-8774-c9374d3ec637",
                "title": "Only for some functions",
                "isCorrect": false
              },
              {
                "id": "4b4e2fe0-1c73-44fd-bdd5-38b63f5868d3",
                "title": "Depends on language",
                "isCorrect": false
              }
            ],
            "descriptionText": "Extern blocks must be unsafe since Rust cannot verify external code",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "969fed49-f62d-44be-8009-4799fe04ef26",
            "title": "Can individual function in extern block be marked as safe?",
            "answers": [
              {
                "id": "c8d81e8b-44e3-4695-8ccf-eba919403764",
                "title": "No, all must be unsafe",
                "isCorrect": false
              },
              {
                "id": "322ac970-e93f-4dab-a978-4f9b4d8d4275",
                "title": "Yes, with safe keyword",
                "isCorrect": true
              },
              {
                "id": "bdea5695-9a89-41cf-9b2c-473aa4dc4e39",
                "title": "Only for C functions",
                "isCorrect": false
              },
              {
                "id": "b31d48b3-ed94-4ce7-a1c7-d09f6d5b85e7",
                "title": "Automatically for some functions",
                "isCorrect": false
              }
            ],
            "descriptionText": "safe can be used for functions in unsafe extern blocks that are safe to call",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8ccfa3a7-617f-4385-89e8-c1997eed4f38",
            "title": "How do static variables differ from constants?",
            "answers": [
              {
                "id": "c071416b-a515-4c7a-bae9-5d8528dae181",
                "title": "Nothing",
                "isCorrect": false
              },
              {
                "id": "84533850-31d5-495e-9af2-26bafe97bc0e",
                "title": "Static have fixed address in memory",
                "isCorrect": true
              },
              {
                "id": "5607f3fa-9b90-4706-9268-53a647c2a460",
                "title": "Static are faster",
                "isCorrect": false
              },
              {
                "id": "66278138-7d99-4d81-9cc6-726132ae487b",
                "title": "Constants can be modified",
                "isCorrect": false
              }
            ],
            "descriptionText": "Static variables have fixed memory address, unlike constants",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1da0d2d8-cec8-432a-89af-8bddccb30358",
            "title": "Is accessing immutable static variable safe?",
            "answers": [
              {
                "id": "0fa4854b-319f-49e4-90de-e6e41c14588f",
                "title": "No, always unsafe",
                "isCorrect": false
              },
              {
                "id": "cbd05832-8552-4217-9069-060c2e4ed1c8",
                "title": "Yes, it's safe",
                "isCorrect": true
              },
              {
                "id": "3a0625ab-127f-494e-ac6e-7ceb1b4b1d1c",
                "title": "Depends on type",
                "isCorrect": false
              },
              {
                "id": "5aa81477-cb51-4510-91ab-25f454fd6062",
                "title": "Only for reading",
                "isCorrect": false
              }
            ],
            "descriptionText": "Accessing immutable static variable is safe",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7206d43b-aaa9-4910-83c9-dacd71869992",
            "title": "Why is accessing mutable static unsafe?",
            "answers": [
              {
                "id": "6ea5bd29-c8b5-4d19-909e-5b187dcbd818",
                "title": "It's slow",
                "isCorrect": false
              },
              {
                "id": "4113b8e5-dd45-4c0b-be1c-4b3140c0a38a",
                "title": "Can cause data race in multithreading",
                "isCorrect": true
              },
              {
                "id": "a20374ee-36d5-450e-b574-c64022b608ac",
                "title": "Takes much memory",
                "isCorrect": false
              },
              {
                "id": "83ef305c-7aa8-43a2-bccf-70b3bb44d8ea",
                "title": "It's deprecated",
                "isCorrect": false
              }
            ],
            "descriptionText": "Mutable static can be accessed from different threads, creating data race risk",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "365fd440-41b7-457c-9927-d2a54b7279a7",
            "title": "What is an unsafe trait?",
            "answers": [
              {
                "id": "6363341a-5dfa-418d-afea-80717ab73a18",
                "title": "Trait with errors",
                "isCorrect": false
              },
              {
                "id": "c6a3fe9e-a8ee-4efc-b2b9-570e5ac871b8",
                "title": "Trait with invariants compiler cannot verify",
                "isCorrect": true
              },
              {
                "id": "9b7ce50c-a60a-422a-b437-7e422092c721",
                "title": "Deprecated trait",
                "isCorrect": false
              },
              {
                "id": "f86c8b03-056d-490e-a7bd-5ee5d466f189",
                "title": "Trait for systems programming",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unsafe trait has requirements that compiler cannot automatically verify",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6f467248-727e-4bd6-b035-b0dcbd39de36",
            "title": "How to declare unsafe trait?",
            "answers": [
              {
                "id": "b38856d8-df88-4d4d-85a4-c484ce114374",
                "title": "trait Foo { unsafe fn ... }",
                "isCorrect": false
              },
              {
                "id": "eae93b42-8e95-45fc-b0d7-960231197d30",
                "title": "unsafe trait Foo { ... }",
                "isCorrect": true
              },
              {
                "id": "1da154fb-2e40-43db-b9c9-8a9200801f6e",
                "title": "#[unsafe] trait Foo { ... }",
                "isCorrect": false
              },
              {
                "id": "129b7aca-4f31-4a36-ae37-b7ceba85cb61",
                "title": "Cannot declare",
                "isCorrect": false
              }
            ],
            "descriptionText": "Unsafe trait is declared with unsafe keyword before trait",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d33880c6-729f-40cd-80b3-a53b398fc2f6",
            "title": "How to implement unsafe trait?",
            "answers": [
              {
                "id": "85b4574e-127b-4ff6-bcea-a4dd19ae8b45",
                "title": "Regular impl",
                "isCorrect": false
              },
              {
                "id": "6ad1f68d-4f4b-4613-b2c1-cd36179e6b32",
                "title": "unsafe impl",
                "isCorrect": true
              },
              {
                "id": "644459e3-94df-4924-8ce0-7e03bb638499",
                "title": "impl unsafe",
                "isCorrect": false
              },
              {
                "id": "3d4349ec-e2d8-4f07-96bf-3c32c7a7ba29",
                "title": "With compiler flag",
                "isCorrect": false
              }
            ],
            "descriptionText": "Implementing unsafe trait requires unsafe impl",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "043eb0c7-760c-463f-98e6-7a626b64ec46",
            "title": "What is Miri?",
            "answers": [
              {
                "id": "be03db97-f5d6-4a9b-a52a-1ebcb08c3d1c",
                "title": "Rust compiler",
                "isCorrect": false
              },
              {
                "id": "b2693119-2c6a-44ff-931a-8b84a5b19c0e",
                "title": "Tool for detecting undefined behavior",
                "isCorrect": true
              },
              {
                "id": "049387c1-4690-4161-9248-963a7c17c458",
                "title": "Library for unsafe",
                "isCorrect": false
              },
              {
                "id": "dca0c886-5e7f-4e9e-8016-8a2888762429",
                "title": "Runtime for async",
                "isCorrect": false
              }
            ],
            "descriptionText": "Miri is official Rust tool for detecting undefined behavior at runtime",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0a187f49-3ee6-4e34-8b9b-2d50eef196ee",
            "title": "What is an associated type in trait?",
            "answers": [
              {
                "id": "ef78a387-cdc0-4eb4-9b31-4c38e84cf45c",
                "title": "Struct field type",
                "isCorrect": false
              },
              {
                "id": "596e2a72-04c2-487f-ae75-48e9d6e48da3",
                "title": "Placeholder for type determined during trait implementation",
                "isCorrect": true
              },
              {
                "id": "6310f852-7dc4-465f-8e1d-9147b4f2a46b",
                "title": "Generic type",
                "isCorrect": false
              },
              {
                "id": "21a0e6b7-40da-4939-8a9c-70f2cf4f8347",
                "title": "Method return type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Associated type is a placeholder that implementor specifies with concrete type",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d685ff11-1c85-4632-b7e9-32be40d187c3",
            "title": "What's the difference between associated type and generic for trait?",
            "answers": [
              {
                "id": "df1a0d3c-4264-4f4b-a84e-28d3ca4c7205",
                "title": "No difference",
                "isCorrect": false
              },
              {
                "id": "b99a8bde-d7fc-4b2f-96be-c363956cac1a",
                "title": "Associated type can only be specified once per type",
                "isCorrect": true
              },
              {
                "id": "d624018d-3235-46e1-8b8d-b12938fbd02e",
                "title": "Generic is faster",
                "isCorrect": false
              },
              {
                "id": "deadcccd-6cb4-4f40-b55b-82b0e28c5f74",
                "title": "Associated type only for Iterator",
                "isCorrect": false
              }
            ],
            "descriptionText": "With associated type, trait can be implemented only once per type; with generics — multiple times",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "47e6dfb2-39c2-44da-9e34-5b68f3b405e6",
            "title": "What is a default type parameter?",
            "answers": [
              {
                "id": "335d37c8-ebc8-4a53-b37c-104af831cef7",
                "title": "Required parameter",
                "isCorrect": false
              },
              {
                "id": "b89e46e4-1b66-4d64-bb09-4a2871a936ac",
                "title": "Default type for generic parameter",
                "isCorrect": true
              },
              {
                "id": "7e417060-ef49-406f-9f98-a996e4afbb2f",
                "title": "First function parameter",
                "isCorrect": false
              },
              {
                "id": "e4331462-9828-488d-89b0-5806b8fa592a",
                "title": "Type from standard library",
                "isCorrect": false
              }
            ],
            "descriptionText": "Default type parameter is specified with syntax <PlaceholderType=ConcreteType>",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ed98ddee-f6c1-4ecc-a5f4-1eab8634d9e0",
            "title": "What is fully qualified syntax?",
            "answers": [
              {
                "id": "49479e32-87a4-4a87-81d8-309edff3b365",
                "title": "Full module name",
                "isCorrect": false
              },
              {
                "id": "8c89cccc-d79a-4503-b21e-d1b7d63e2a73",
                "title": "Syntax to explicitly specify which trait implementation to use",
                "isCorrect": true
              },
              {
                "id": "a2f9a4d4-e885-4cea-8fab-bcd08dac27ef",
                "title": "Generic syntax",
                "isCorrect": false
              },
              {
                "id": "cebedc0f-4fc4-4e49-9cc3-2faced57cb89",
                "title": "Full file path",
                "isCorrect": false
              }
            ],
            "descriptionText": "Fully qualified syntax: <Type as Trait>::function() for disambiguation",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d5d6034a-4950-46ea-923f-c482f7a3045a",
            "title": "What is a supertrait?",
            "answers": [
              {
                "id": "9148c260-8fbe-44cb-94d3-20fb240a73a9",
                "title": "Most important trait",
                "isCorrect": false
              },
              {
                "id": "8afa4816-5be0-4a52-989e-ffdf12032707",
                "title": "Trait that another trait depends on",
                "isCorrect": true
              },
              {
                "id": "184f1d19-a868-4255-a17f-c25cd3838282",
                "title": "Base trait in hierarchy",
                "isCorrect": false
              },
              {
                "id": "87bb7ba3-729c-442d-8350-304c6a8836b3",
                "title": "Trait from standard library",
                "isCorrect": false
              }
            ],
            "descriptionText": "Supertrait is a trait that must be implemented to implement dependent trait",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "02746cec-9245-4248-9bc8-fe0d907930fe",
            "title": "How to specify supertrait?",
            "answers": [
              {
                "id": "3b30ee0b-1767-43ce-a543-1f3bc609aaa3",
                "title": "trait A: B { ... }",
                "isCorrect": true
              },
              {
                "id": "29f84ec4-29db-464a-b52d-cd2f385787b2",
                "title": "trait A extends B { ... }",
                "isCorrect": false
              },
              {
                "id": "764a2606-3ead-4489-91d5-cabc49f3a6a1",
                "title": "trait A -> B { ... }",
                "isCorrect": false
              },
              {
                "id": "a323c2c1-a21f-4bbf-b400-d28ff8d5120c",
                "title": "trait A inherits B { ... }",
                "isCorrect": false
              }
            ],
            "descriptionText": "Supertrait is specified with syntax trait OutlinePrint: Display { ... }",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9987878d-1345-4e96-a0d9-660785956114",
            "title": "What is the newtype pattern?",
            "answers": [
              {
                "id": "f32c0d93-2434-420d-b404-267f76dafe2c",
                "title": "New primitive type",
                "isCorrect": false
              },
              {
                "id": "698df063-f89a-41fd-bc81-d6d84ae60b6e",
                "title": "Wrapping existing type in tuple struct",
                "isCorrect": true
              },
              {
                "id": "ec0cbcb8-0302-432c-a835-f2d5ddd36fc3",
                "title": "Generic type",
                "isCorrect": false
              },
              {
                "id": "6208a4e9-c3fe-4e63-a71c-d0c7d8c6fcb4",
                "title": "Enum variant",
                "isCorrect": false
              }
            ],
            "descriptionText": "Newtype pattern creates new type by wrapping in tuple struct with one field",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ff407d43-684a-465d-9fff-6ae8e3e6d78d",
            "title": "Why is newtype pattern needed?",
            "answers": [
              {
                "id": "505f52b4-aa15-4c97-ad96-f1f9cd0a8752",
                "title": "For speed",
                "isCorrect": false
              },
              {
                "id": "788a2feb-e5e0-4a30-8876-019127e4a85b",
                "title": "Bypass orphan rule and type safety",
                "isCorrect": true
              },
              {
                "id": "a588c968-8caf-4e97-a022-4704434d482c",
                "title": "For code beauty",
                "isCorrect": false
              },
              {
                "id": "4265f867-7f1f-4128-94fb-d84d8374c123",
                "title": "Mandatory requirement",
                "isCorrect": false
              }
            ],
            "descriptionText": "Newtype allows bypassing orphan rule and ensures type safety",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "26216baa-f8a6-4fbe-84ed-b597061f2ba4",
            "title": "What is a type alias?",
            "answers": [
              {
                "id": "2fbf39f5-13d0-4d92-bf0f-92158231f94a",
                "title": "Type copy",
                "isCorrect": false
              },
              {
                "id": "3c292984-046b-4657-b386-a5288f80a003",
                "title": "Synonym for existing type",
                "isCorrect": true
              },
              {
                "id": "176a2867-d372-4c4e-b806-438f1aa7df52",
                "title": "New type",
                "isCorrect": false
              },
              {
                "id": "2c284ba0-0968-47f4-ae4e-05bf1a38bcc9",
                "title": "Generic type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type alias is created with type Kilometers = i32, it's a synonym, not new type",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2bd1fbe0-052d-4012-929b-4672dac1cd15",
            "title": "Does type alias provide type safety like newtype?",
            "answers": [
              {
                "id": "b249eeab-b76b-4e59-b563-a06492c2662e",
                "title": "Yes, completely",
                "isCorrect": false
              },
              {
                "id": "99df63f2-1e1c-4ba2-a7b7-73a8d7a52466",
                "title": "No, it's just a synonym",
                "isCorrect": true
              },
              {
                "id": "903a2ce9-9114-4250-a3c4-c2c2fa9158b9",
                "title": "Partially",
                "isCorrect": false
              },
              {
                "id": "88402598-4fdf-4b67-94c0-709fab91c022",
                "title": "Depends on type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type alias doesn't create new type, so doesn't provide additional type safety",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "89858d7f-c47f-46dd-b1b5-094b81f886aa",
            "title": "What is the never type (!)?",
            "answers": [
              {
                "id": "1c24286e-8b51-4b50-b5d8-f345bbbc1385",
                "title": "Error type",
                "isCorrect": false
              },
              {
                "id": "4dde81cd-7b2e-4f1b-b87e-1affbe61e7cb",
                "title": "Type for functions that never return",
                "isCorrect": true
              },
              {
                "id": "df675178-fa74-44b8-98e8-4fbd44849270",
                "title": "Empty enum",
                "isCorrect": false
              },
              {
                "id": "9ba6ce4d-7255-4662-b3eb-ec6057cc398b",
                "title": "Type for panic",
                "isCorrect": false
              }
            ],
            "descriptionText": "Never type ! is used for functions that never return a value",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a93b297d-8312-46b8-b71a-bac07b69f5cd",
            "title": "What functions return never type?",
            "answers": [
              {
                "id": "08a637bd-34fd-456f-8dd3-fed5477adfef",
                "title": "Functions with errors",
                "isCorrect": false
              },
              {
                "id": "815d2b40-07c7-4516-b1a4-b15b41123394",
                "title": "Diverging functions (e.g., with infinite loop or panic)",
                "isCorrect": true
              },
              {
                "id": "36ac0c02-4626-4d5b-a414-fad7aa3b1df3",
                "title": "Async functions",
                "isCorrect": false
              },
              {
                "id": "9b4fa342-d663-42ea-91ea-a63cec373f90",
                "title": "Generic functions",
                "isCorrect": false
              }
            ],
            "descriptionText": "Functions with ! are called diverging — they never return control",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "96b586a5-79d9-4ec8-bd08-bd09ff9a81ee",
            "title": "What is DST (Dynamically Sized Type)?",
            "answers": [
              {
                "id": "f045f97d-0d90-49ff-929b-ae9e2edd9d00",
                "title": "Fixed-size type",
                "isCorrect": false
              },
              {
                "id": "478ab878-c990-46ac-a616-4c369ef34e32",
                "title": "Type whose size is only known at runtime",
                "isCorrect": true
              },
              {
                "id": "d86c8528-1408-4a50-8eb5-383138371430",
                "title": "Generic type",
                "isCorrect": false
              },
              {
                "id": "a662d437-56ae-4973-a897-61effabefbae",
                "title": "Type for dynamic memory",
                "isCorrect": false
              }
            ],
            "descriptionText": "DST is a type whose size can only be known at runtime",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "39aefa2c-657a-40a8-ac33-520d3075b749",
            "title": "Is str (without &) a DST?",
            "answers": [
              {
                "id": "6b5328a9-c6ff-4ed1-862d-15e84da2bae0",
                "title": "No, it's regular type",
                "isCorrect": false
              },
              {
                "id": "51d3cc1a-c560-4e5e-8627-c94fb5c8d2f2",
                "title": "Yes",
                "isCorrect": true
              },
              {
                "id": "cae0c776-7129-44fa-98ab-ab56742040e9",
                "title": "Depends on context",
                "isCorrect": false
              },
              {
                "id": "9c74566b-0ece-40e9-9794-4cdf2a49b188",
                "title": "Only in unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "str without reference is a DST since string length is only known at runtime",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "61bde7cf-aae6-4522-882c-89b4fe725d77",
            "title": "How to work with DST?",
            "answers": [
              {
                "id": "d9e74c5c-476d-40d8-95c7-317a8b7aed22",
                "title": "Directly",
                "isCorrect": false
              },
              {
                "id": "0997c72b-dcf3-4649-ae39-e54a25888ad1",
                "title": "Through pointer (reference or Box)",
                "isCorrect": true
              },
              {
                "id": "bca6e2f8-1e0c-41a1-bb04-ae96ae084b99",
                "title": "Only in unsafe",
                "isCorrect": false
              },
              {
                "id": "f7796eb3-e428-4573-8adb-7a0724e5b0fb",
                "title": "Cannot work",
                "isCorrect": false
              }
            ],
            "descriptionText": "DST must be used through pointer: &str, Box<str>, &dyn Trait, etc",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dbffbfa1-0c4d-4bbe-adcd-6003d8d85dd8",
            "title": "What is the Sized trait?",
            "answers": [
              {
                "id": "b4204727-4d0f-44e6-93e0-42fa1af374e7",
                "title": "Trait for large types",
                "isCorrect": false
              },
              {
                "id": "74ac60c2-d8be-4dd7-8156-76b8687ea280",
                "title": "Automatic trait for types with known size at compile time",
                "isCorrect": true
              },
              {
                "id": "e27a1053-b148-44ae-9bc2-b00d763a4e08",
                "title": "Trait for DST",
                "isCorrect": false
              },
              {
                "id": "ddc430f4-d704-415d-ace8-22f324fb490d",
                "title": "Trait for optimization",
                "isCorrect": false
              }
            ],
            "descriptionText": "Sized is automatically implemented for types with known size at compile time",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "af660dd9-2fd0-4671-a151-622ce77c4ba9",
            "title": "What does ?Sized mean in trait bound?",
            "answers": [
              {
                "id": "17676243-9dba-4987-9d4b-3afa7bea2a11",
                "title": "Type must be Sized",
                "isCorrect": false
              },
              {
                "id": "db362867-4625-446e-8e27-9d80c7e61fe9",
                "title": "Type may or may not be Sized",
                "isCorrect": true
              },
              {
                "id": "20c6e8e1-f6e1-4c11-9a92-c5d9e86fea96",
                "title": "Type must not be Sized",
                "isCorrect": false
              },
              {
                "id": "9a998af8-3da8-460e-9f40-68b69af32a09",
                "title": "Syntax error",
                "isCorrect": false
              }
            ],
            "descriptionText": "?Sized means type may or may not be Sized, relaxing default requirement",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6809609d-076a-4a39-9ffd-11425b3325e7",
            "title": "What is a function pointer (fn)?",
            "answers": [
              {
                "id": "8d1fab25-6200-4b0c-94cd-9f89c635b9bc",
                "title": "Pointer to any function",
                "isCorrect": false
              },
              {
                "id": "ae287179-a0b6-4352-b58f-9e5d5202b3cb",
                "title": "Type for passing functions as values",
                "isCorrect": true
              },
              {
                "id": "984ddf42-a22d-4ebf-b5ef-9660853b101e",
                "title": "Closure",
                "isCorrect": false
              },
              {
                "id": "a8bfe6f9-c316-49bc-a59c-96c9c0376dec",
                "title": "Trait for functions",
                "isCorrect": false
              }
            ],
            "descriptionText": "fn is function pointer type for passing functions as values",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e50314ae-492c-401d-9557-d263d7653000",
            "title": "Do function pointers implement closure traits?",
            "answers": [
              {
                "id": "01f207f7-f492-4a2a-b2af-3837f8384f42",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "667a5394-ffee-46eb-88b9-986dda3060b9",
                "title": "Yes, all three (Fn, FnMut, FnOnce)",
                "isCorrect": true
              },
              {
                "id": "38ac10c8-0af9-4579-bce0-ab7eb6b0c481",
                "title": "Only Fn",
                "isCorrect": false
              },
              {
                "id": "7757ad3d-aad6-4fdc-beee-99207c3f947a",
                "title": "Depends on function",
                "isCorrect": false
              }
            ],
            "descriptionText": "Function pointers implement all three closure traits",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "df047629-a5df-40d0-9226-67bcfbfe20f3",
            "title": "How to return closure from function?",
            "answers": [
              {
                "id": "40bff4b8-e274-4dd2-839a-0b126e21e0a0",
                "title": "fn() -> Fn",
                "isCorrect": false
              },
              {
                "id": "909d0ec2-bf1c-417c-bc08-9c221e562c3e",
                "title": "fn() -> impl Fn",
                "isCorrect": true
              },
              {
                "id": "a39aab7a-45e2-4498-ad1d-a77c3871161e",
                "title": "fn() -> closure",
                "isCorrect": false
              },
              {
                "id": "e39164d2-a50d-419f-a0dd-bd2b9701d681",
                "title": "Cannot return",
                "isCorrect": false
              }
            ],
            "descriptionText": "Closures are returned via impl Trait syntax",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2add5dc3-4286-4dd2-8b1a-dafd7de4936f",
            "title": "When is Box<dyn Fn> needed for returning closure?",
            "answers": [
              {
                "id": "d5583ff6-d53e-4922-8e32-bc9e9a783027",
                "title": "Always",
                "isCorrect": false
              },
              {
                "id": "bb9a93ba-7ca3-45ef-96cd-cabc1b37c2ee",
                "title": "When need to return different closure types from one collection",
                "isCorrect": true
              },
              {
                "id": "dec20df3-3d44-4587-b35b-bfefe420ac3b",
                "title": "Never",
                "isCorrect": false
              },
              {
                "id": "86ba1384-3fe7-4ae3-9d9b-be6040b1a686",
                "title": "Only in unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Box<dyn Fn> is needed to work with different closures of one trait as one type",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7bbb636b-9f82-4fd7-9f93-5d3b5b4f3a4a",
            "title": "What is metaprogramming?",
            "answers": [
              {
                "id": "f38434b2-a269-4979-80ef-5df0ef6bc1dd",
                "title": "AI programming",
                "isCorrect": false
              },
              {
                "id": "1af34f55-908e-42cc-9e45-f46e1ceffdfc",
                "title": "Code that writes other code",
                "isCorrect": true
              },
              {
                "id": "4afcd84c-10b8-46a2-bb67-fc4d34e725f5",
                "title": "Parallel programming",
                "isCorrect": false
              },
              {
                "id": "e9457f8c-a5cd-4217-ab09-a115ff1e93aa",
                "title": "Low-level programming",
                "isCorrect": false
              }
            ],
            "descriptionText": "Metaprogramming is writing code that generates other code",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a0ce21b2-945d-43e0-9eb7-8b8495cb1bf2",
            "title": "How do macros differ from functions?",
            "answers": [
              {
                "id": "b1f16e0d-4505-4736-997c-59740a77dfb2",
                "title": "Nothing",
                "isCorrect": false
              },
              {
                "id": "55f97cc2-bfee-46a8-b288-d28d090057c4",
                "title": "Macros expand before compilation and can take variable arguments",
                "isCorrect": true
              },
              {
                "id": "70a3c1f6-eb9b-4c2d-af4e-ec965a892714",
                "title": "Macros are faster",
                "isCorrect": false
              },
              {
                "id": "522b8728-9fb0-4ce2-825e-0f5e811685b2",
                "title": "Functions are deprecated",
                "isCorrect": false
              }
            ],
            "descriptionText": "Macros expand before compilation and are more flexible than functions",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9860f315-78e0-4cb4-a252-4c90b19fe9c6",
            "title": "What is a declarative macro?",
            "answers": [
              {
                "id": "b372d7ac-30c0-4682-b154-6a512eae46e0",
                "title": "Macro with declaration",
                "isCorrect": false
              },
              {
                "id": "0a1fc824-e65f-437b-b757-6379cbbb6fde",
                "title": "Macro with macro_rules!, working via pattern matching",
                "isCorrect": true
              },
              {
                "id": "cc8b8307-dfdb-4242-b907-b771db23bf66",
                "title": "Procedural macro",
                "isCorrect": false
              },
              {
                "id": "861997e1-2660-494e-b06d-e9d44858d7f8",
                "title": "Deprecated macro type",
                "isCorrect": false
              }
            ],
            "descriptionText": "Declarative macros are created with macro_rules! and use pattern matching",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "47060bd7-e4b2-45fd-a539-c2b019b51734",
            "title": "How many types of procedural macros exist?",
            "answers": [
              {
                "id": "d087ff2f-e90f-4d5d-a22c-11f84338cc7e",
                "title": "One",
                "isCorrect": false
              },
              {
                "id": "1e7b6caa-7c4d-4e51-a392-ce1d1c8e632f",
                "title": "Two",
                "isCorrect": false
              },
              {
                "id": "5c4548fd-4412-44eb-b863-a5bd1807ee06",
                "title": "Three",
                "isCorrect": true
              },
              {
                "id": "0a162ba6-9bb4-4776-ba71-39709aaa7f30",
                "title": "Four",
                "isCorrect": false
              }
            ],
            "descriptionText": "Three types: custom derive, attribute-like, and function-like macros",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "52c490fb-91a9-4e6a-ba8b-bbd9b99bce87",
            "title": "What is a custom derive macro?",
            "answers": [
              {
                "id": "ea2bae58-d5c6-4310-993b-01715514a5d8",
                "title": "Macro for deriving",
                "isCorrect": false
              },
              {
                "id": "a9b66801-4f81-4e75-ba01-e6d743f30d80",
                "title": "Macro generating code with #[derive] attribute",
                "isCorrect": true
              },
              {
                "id": "38cf3e7b-601f-4c22-8448-1fad7e6da7ed",
                "title": "Macro for structs",
                "isCorrect": false
              },
              {
                "id": "2dcc36ca-4243-4221-9821-f29b19348422",
                "title": "Macro for traits",
                "isCorrect": false
              }
            ],
            "descriptionText": "Custom derive macros generate code when using #[derive(YourMacro)]",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5e244256-f015-408d-8da2-6ab43a968a65",
            "title": "What does procedural macro accept and return?",
            "answers": [
              {
                "id": "b7f2569b-bc2f-44b9-9c12-20cce79046c6",
                "title": "String and String",
                "isCorrect": false
              },
              {
                "id": "960cf477-dc07-459c-97cc-b2adb131b0fb",
                "title": "TokenStream and TokenStream",
                "isCorrect": true
              },
              {
                "id": "63115cfe-fb5f-404d-bf46-7a177a68f379",
                "title": "AST and AST",
                "isCorrect": false
              },
              {
                "id": "655e0d0d-fc1c-4632-a3f6-fd25df9b1929",
                "title": "Code and Code",
                "isCorrect": false
              }
            ],
            "descriptionText": "Procedural macros work with TokenStream as input and output",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2138c369-94f1-4899-851e-c1bbe58ae35e",
            "title": "What does #[macro_export] attribute do?",
            "answers": [
              {
                "id": "0709e883-e6c2-41ea-b126-f40926dcc4a8",
                "title": "Exports macro to file",
                "isCorrect": false
              },
              {
                "id": "8e87cd3c-eeb5-4e79-a3f7-143810c799b3",
                "title": "Makes macro available when importing crate",
                "isCorrect": true
              },
              {
                "id": "d39c0c22-f633-4e8f-b6de-7c2c394f5e24",
                "title": "Compiles macro",
                "isCorrect": false
              },
              {
                "id": "275adc81-7b13-4d86-8953-77b5a179a37f",
                "title": "Removes macro",
                "isCorrect": false
              }
            ],
            "descriptionText": "#[macro_export] makes macro public when importing crate",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a71ad2dd-0a46-4379-9da1-3c88027708c6",
            "title": "Where must procedural macros be located?",
            "answers": [
              {
                "id": "b9041e7e-d410-43b9-8454-ab2f2f5f96f2",
                "title": "Anywhere",
                "isCorrect": false
              },
              {
                "id": "31575826-fa56-4ad6-84b3-3c61f2d9f39d",
                "title": "In separate crate with special type",
                "isCorrect": true
              },
              {
                "id": "afdf84b6-1fff-441d-acca-8b4add41658a",
                "title": "In main.rs",
                "isCorrect": false
              },
              {
                "id": "d9744959-3789-4f3e-972d-bd21d9d25fef",
                "title": "In lib.rs",
                "isCorrect": false
              }
            ],
            "descriptionText": "Procedural macros require separate crate with type proc-macro = true",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c733d44c-d6d1-4825-838d-53f01793d3a7",
            "title": "What does the syn crate do?",
            "answers": [
              {
                "id": "f57baab3-a8af-4b91-8f14-327c6b5ff1fe",
                "title": "Synchronizes code",
                "isCorrect": false
              },
              {
                "id": "b5322139-7bbd-4af6-86b5-af8d26d0327d",
                "title": "Parses Rust code from string into data structure",
                "isCorrect": true
              },
              {
                "id": "18db3050-c83c-4533-9ac0-9ec51c144c5b",
                "title": "Compiles macros",
                "isCorrect": false
              },
              {
                "id": "2a8e754e-d23c-42fd-a751-1a60b66b99cb",
                "title": "Checks syntax",
                "isCorrect": false
              }
            ],
            "descriptionText": "syn parses Rust code into data structure for manipulation",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f7227ecc-b9d6-4d69-b37f-00f398be65f2",
            "title": "What does the quote crate do?",
            "answers": [
              {
                "id": "35591355-8ca3-4885-a621-fe2b191aead0",
                "title": "Quotes code",
                "isCorrect": false
              },
              {
                "id": "42def9c9-10d2-41f7-82ba-dd823cfb6b85",
                "title": "Converts data structures back to Rust code",
                "isCorrect": true
              },
              {
                "id": "efe1a876-0a63-49d3-9da4-bb17495de6e4",
                "title": "Parses code",
                "isCorrect": false
              },
              {
                "id": "17b45a3b-44b6-4e26-9784-1f65628545df",
                "title": "Documents macros",
                "isCorrect": false
              }
            ],
            "descriptionText": "quote converts syntax structures back to Rust code",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6b5fb26d-55ea-4f51-bfe2-ef0db2cf5413",
            "title": "What is an attribute-like macro?",
            "answers": [
              {
                "id": "2a6d600b-c074-4c18-932f-0d6ba17dd383",
                "title": "Macro for attributes",
                "isCorrect": false
              },
              {
                "id": "341898b8-8dd1-4c0c-b74c-412871ed12ca",
                "title": "Macro creating new attributes for any elements",
                "isCorrect": true
              },
              {
                "id": "c617d0cf-fdc7-4c7d-87b2-af2338936578",
                "title": "Derive macro",
                "isCorrect": false
              },
              {
                "id": "90d0740b-a47f-4925-9820-b7bf82b823c6",
                "title": "Function macro",
                "isCorrect": false
              }
            ],
            "descriptionText": "Attribute-like macros allow creating custom attributes for functions, struct, and other elements",
            "descriptionLink": "advanced_features_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      }
    ]
  },
  {
    "id": "0df8b65f-1c9c-4c6c-bcc9-15838c07b405",
    "title": "Patterns",
    "priority": 2,
    "quizzes": [
      {
        "id": "daa02794-8064-4374-8fcd-d66fa3ace29b",
        "theme": "Idioms",
        "priority": 1,
        "questions": [
          {
            "id": "c99a2eca-37df-49bd-97d5-dad2d706bc7d",
            "title": "What is the primary benefit of using &str instead of &String as a function parameter?",
            "answers": [
              {
                "id": "b44f02e4-2a47-4779-8e8e-94b6de213a6e",
                "title": "The function accepts more input types due to deref coercion",
                "isCorrect": true
              },
              {
                "id": "867f091d-220e-4074-a256-b23b66c58a39",
                "title": "The function runs faster",
                "isCorrect": false
              },
              {
                "id": "3c06e5b2-f94c-4d73-aebb-a479f3a6beca",
                "title": "The function uses less memory",
                "isCorrect": false
              },
              {
                "id": "d43ed216-f9ae-4a68-a9c9-449a4703f61f",
                "title": "The function is easier to write",
                "isCorrect": false
              }
            ],
            "descriptionText": "Using borrowed types like &str increases flexibility by accepting both &String and &str through automatic coercion",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c53c1b71-de86-4d21-8d65-fae80d9a9c73",
            "title": "How many levels of indirection does &String have?",
            "answers": [
              {
                "id": "40e41f80-84c0-472e-8a5e-a8d9f1f5eff1",
                "title": "Two levels",
                "isCorrect": true
              },
              {
                "id": "0806da90-4086-4bb1-ada2-83db4b93451b",
                "title": "One level",
                "isCorrect": false
              },
              {
                "id": "738eac49-7072-4b08-86c9-03b15026f7fc",
                "title": "Three levels",
                "isCorrect": false
              },
              {
                "id": "dcc4202f-17e4-49a4-90a7-7c680c6b3c4d",
                "title": "Zero levels",
                "isCorrect": false
              }
            ],
            "descriptionText": "String already has one level of indirection, so &String has two levels total",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ca148ecb-8bd4-4308-b39f-9b6b28faf4dc",
            "title": "Can &str be automatically converted to &String?",
            "answers": [
              {
                "id": "3b13f58d-37de-41fc-92b7-e6fe86416c62",
                "title": "No, it requires allocation",
                "isCorrect": true
              },
              {
                "id": "bea7f1d5-757b-4a8c-bff5-47d040ab64a3",
                "title": "Yes, automatically",
                "isCorrect": false
              },
              {
                "id": "faf75a43-77a9-45db-9604-3a333fb2a5b3",
                "title": "Yes, but only for static strings",
                "isCorrect": false
              },
              {
                "id": "84e72b4a-89f4-4f6d-9d88-0f2e34ffd3fe",
                "title": "Yes, with explicit cast",
                "isCorrect": false
              }
            ],
            "descriptionText": "&str cannot be implicitly converted to &String because it would require allocation which is not automatic",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8ea0f18b-8c7c-42ce-b309-64133ca5c825",
            "title": "Can &String be automatically converted to &str?",
            "answers": [
              {
                "id": "41386633-dc68-4b55-8429-9a93cefe9237",
                "title": "Yes, cheaply and implicitly",
                "isCorrect": true
              },
              {
                "id": "25e2e9d9-f04a-4b26-a14c-ad35f2ab5f4f",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "ea9e8b9b-8c7f-414b-b027-cfcb548c734b",
                "title": "Only with explicit conversion",
                "isCorrect": false
              },
              {
                "id": "af846efc-201b-449b-98a4-d37dda072101",
                "title": "Yes, but it requires allocation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Converting from String to &str is cheap and implicit thanks to deref coercion",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "aed8d80d-94d4-4ce2-94c0-13545b0fded9",
            "title": "What type does the split() method return for String?",
            "answers": [
              {
                "id": "77f83a70-1ef7-4f6b-ab79-b21b1e8f06a4",
                "title": "Iterator of &str slices",
                "isCorrect": true
              },
              {
                "id": "699933fa-3a28-4b68-946a-948058602494",
                "title": "Iterator of &String",
                "isCorrect": false
              },
              {
                "id": "50f7dec5-7e52-4576-82e4-41da9d5c227e",
                "title": "Vec<String>",
                "isCorrect": false
              },
              {
                "id": "1a8aab3f-d5ce-4812-9402-aff116a9c224",
                "title": "Vec<&str>",
                "isCorrect": false
              }
            ],
            "descriptionText": "The split() method returns an iterator that yields slices of type &str",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7c65f5be-4e23-4a26-97d7-7a38fcd65492",
            "title": "Which is the correct borrowed type to prefer over &Vec<T>?",
            "answers": [
              {
                "id": "5f1012a4-d0db-4fd0-97b0-2ba412b81ab6",
                "title": "&[T]",
                "isCorrect": true
              },
              {
                "id": "a806b2f3-ddc6-4b62-96e2-3a04ccdc5d70",
                "title": "&Vec<T>",
                "isCorrect": false
              },
              {
                "id": "14a3d663-86fe-4834-a48e-108cbda5c5e2",
                "title": "Vec<T>",
                "isCorrect": false
              },
              {
                "id": "94c14fe3-e187-47be-a56c-602e04c2858a",
                "title": "&mut Vec<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Slice &[T] is more flexible than &Vec<T> and avoids extra levels of indirection",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2962dc10-3289-4455-acba-09f9bf41fdb4",
            "title": "Which is the correct borrowed type to prefer over &Box<T>?",
            "answers": [
              {
                "id": "564e1e17-1e64-4f81-9e1f-04d80976abd2",
                "title": "&T",
                "isCorrect": true
              },
              {
                "id": "4702c98d-91a3-442b-b185-678b3e8d7cb4",
                "title": "&Box<T>",
                "isCorrect": false
              },
              {
                "id": "f3baf248-5eaf-46c1-869e-c7e2e74adec1",
                "title": "Box<T>",
                "isCorrect": false
              },
              {
                "id": "27adcbc6-f300-492c-98b2-188fcccc4f6a",
                "title": "&mut Box<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Using &T instead of &Box<T> avoids unnecessary levels of indirection",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "18e5a6eb-7335-4ab0-9723-4690b305bbdb",
            "title": "When accepting C strings via FFI, what should you do with foreign strings?",
            "answers": [
              {
                "id": "27c381db-178e-4fa6-aa9f-665964eb757b",
                "title": "Keep them borrowed rather than copying",
                "isCorrect": true
              },
              {
                "id": "db6a8596-8311-4636-a9a5-6057aa5d3c37",
                "title": "Always copy them to owned memory",
                "isCorrect": false
              },
              {
                "id": "7156e7ef-6067-4251-b1ef-6eb55c456976",
                "title": "Convert them to String immediately",
                "isCorrect": false
              },
              {
                "id": "3fa57412-73ca-40d4-a66d-fbe861c2b36c",
                "title": "Store them in Vec<u8>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Keeping foreign strings borrowed allows zero-cost operations when passing between Rust and C",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d58b874f-ba4d-4bac-9c89-c9e97bf4eeb8",
            "title": "What type should you use for borrowed C strings in Rust?",
            "answers": [
              {
                "id": "9ce3b24a-cfc8-4066-8614-0d73ea0af166",
                "title": "&CStr",
                "isCorrect": true
              },
              {
                "id": "9a9e07c5-4dcc-4e39-b99f-60951a9b4af8",
                "title": "&String",
                "isCorrect": false
              },
              {
                "id": "356f318f-b47b-435e-b250-7832f45edce9",
                "title": "CString",
                "isCorrect": false
              },
              {
                "id": "3cd86553-fa5a-47db-a72a-e6831a816e0d",
                "title": "*const c_char",
                "isCorrect": false
              }
            ],
            "descriptionText": "&CStr is the borrowed version of C strings, allowing safe and efficient operations",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "89a408fe-0433-43a1-b86a-3ed53633ca6c",
            "title": "What is the main difference between C strings and Rust strings?",
            "answers": [
              {
                "id": "5e15d04d-1d14-4812-a403-d16ee737ca75",
                "title": "C strings are null-terminated, Rust strings store their length",
                "isCorrect": true
              },
              {
                "id": "52f0a963-9a6b-41b9-afdc-5b0d6da315f1",
                "title": "C strings are faster",
                "isCorrect": false
              },
              {
                "id": "b267da88-cce9-4b8f-bc74-614a4a87f726",
                "title": "Rust strings are null-terminated",
                "isCorrect": false
              },
              {
                "id": "190a2206-c2cd-4d2c-bebb-613ced258390",
                "title": "C strings store their length",
                "isCorrect": false
              }
            ],
            "descriptionText": "C uses null termination while Rust stores the length explicitly, which is a fundamental difference",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "960f2e66-4c96-44ae-b446-0281d3243f4b",
            "title": "How do you safely convert a C string pointer to &str in FFI?",
            "answers": [
              {
                "id": "6badedb2-c2f9-446a-903c-6ae3a831869d",
                "title": "Use CStr::from_ptr() then to_str()",
                "isCorrect": true
              },
              {
                "id": "881286c3-78b9-4e61-8dbb-489059b835d6",
                "title": "Cast directly to &str",
                "isCorrect": false
              },
              {
                "id": "46704865-781e-4591-baad-c40149c8f678",
                "title": "Use String::from_raw_parts()",
                "isCorrect": false
              },
              {
                "id": "88b7596a-6c58-43fa-92a3-fff670e15919",
                "title": "Use ptr::read()",
                "isCorrect": false
              }
            ],
            "descriptionText": "CStr::from_ptr() creates a CStr from the pointer, then to_str() converts it to &str with UTF-8 validation",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7653e306-de6b-4c99-ac47-9168bc24204a",
            "title": "What attribute prevents struct construction and exhaustive matching in external crates?",
            "answers": [
              {
                "id": "60cdc5d1-c308-4b06-a5f7-abfdf52c5fa9",
                "title": "#[non_exhaustive]",
                "isCorrect": true
              },
              {
                "id": "35b537d2-fbc2-4dfe-87fa-da48a238c635",
                "title": "#[private]",
                "isCorrect": false
              },
              {
                "id": "d58ea8b8-3c47-49d5-a64c-9622d812905a",
                "title": "#[sealed]",
                "isCorrect": false
              },
              {
                "id": "9ad46df2-2db7-4418-a582-9604dce624fc",
                "title": "#[final]",
                "isCorrect": false
              }
            ],
            "descriptionText": "#[non_exhaustive] allows adding fields or variants in a backwards compatible way",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9140fb53-2acd-4174-9db4-c064871799ac",
            "title": "What must you use when pattern matching a #[non_exhaustive] struct?",
            "answers": [
              {
                "id": "ee8bc2bf-2df8-43a5-bfdf-cf06b2bc66e8",
                "title": ".. in the pattern",
                "isCorrect": true
              },
              {
                "id": "8f16e58a-99df-4c00-874a-2f3341f8561f",
                "title": "* wildcard",
                "isCorrect": false
              },
              {
                "id": "89971da1-a636-4d69-9469-49b491e6a025",
                "title": "_ underscore",
                "isCorrect": false
              },
              {
                "id": "3c89bb9e-f748-4068-b7eb-8eddb5931259",
                "title": "Nothing special",
                "isCorrect": false
              }
            ],
            "descriptionText": "The .. syntax is required because the struct may have additional fields added in future versions",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0d6e82da-c15f-4e72-a671-8e2e3f8c6b62",
            "title": "Can #[non_exhaustive] be applied to enum variants?",
            "answers": [
              {
                "id": "2371e681-3766-41e1-962c-365a63f937f0",
                "title": "Yes",
                "isCorrect": true
              },
              {
                "id": "bd2b656c-9208-46cc-a2c7-f7fbf8debf3d",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "fbc27382-fb72-408c-8ca0-7a253b1d2723",
                "title": "Only on tuple variants",
                "isCorrect": false
              },
              {
                "id": "41750b94-c8e8-490a-ac77-2c397bae633b",
                "title": "Only on struct variants",
                "isCorrect": false
              }
            ],
            "descriptionText": "#[non_exhaustive] can be applied to individual enum variants as well as the enum itself",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "08c88bd2-fb46-4ec7-af0d-9bfd36883488",
            "title": "What is an alternative to #[non_exhaustive] for preventing direct struct instantiation within a crate?",
            "answers": [
              {
                "id": "30c3b16a-23c3-45eb-915c-49955f24207b",
                "title": "Adding a private field",
                "isCorrect": true
              },
              {
                "id": "c2a0beba-c006-4b00-b0d5-a55e07125ec5",
                "title": "Making all fields private",
                "isCorrect": false
              },
              {
                "id": "94f4828c-03b9-488e-88d3-b3c838e0774c",
                "title": "Using a macro",
                "isCorrect": false
              },
              {
                "id": "ece7d4eb-43af-4549-98d7-243c8ebd5823",
                "title": "Using unsafe",
                "isCorrect": false
              }
            ],
            "descriptionText": "A private field forces users to use constructors and prevents exhaustive pattern matching",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b65a6d22-875a-435e-bca6-1f205050c11a",
            "title": "What is the recommended way to combine strings in Rust?",
            "answers": [
              {
                "id": "8f5cc153-deb4-4add-8de8-3514afbd1883",
                "title": "Using format! macro",
                "isCorrect": true
              },
              {
                "id": "717b5026-7f4f-413e-baf3-68129e3bc8a5",
                "title": "Using + operator repeatedly",
                "isCorrect": false
              },
              {
                "id": "459e287f-4473-4e29-9b82-57feecc88d99",
                "title": "Using push_str in a loop",
                "isCorrect": false
              },
              {
                "id": "8b5a0c99-5674-4b57-b76a-19d387a8b75a",
                "title": "Using String::from",
                "isCorrect": false
              }
            ],
            "descriptionText": "format! is usually the most succinct and readable way to combine strings",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5f90ce4d-d756-4353-b28e-805ab8961494",
            "title": "What is the conventional name for a constructor function in Rust?",
            "answers": [
              {
                "id": "41035297-3c4f-4a05-b1d9-eaf2c15b3b4c",
                "title": "new",
                "isCorrect": true
              },
              {
                "id": "d4ece08f-a164-4141-b149-5d974899092e",
                "title": "create",
                "isCorrect": false
              },
              {
                "id": "990523f1-4f5d-44a3-ab39-f905a3a1d3a5",
                "title": "make",
                "isCorrect": false
              },
              {
                "id": "32903e4f-0440-435a-972f-f2214bd43f0b",
                "title": "constructor",
                "isCorrect": false
              }
            ],
            "descriptionText": "The convention is to use an associated function named new to create objects",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2f008556-6f52-43e1-aa14-735002a3cf56",
            "title": "What trait provides default constructors in Rust?",
            "answers": [
              {
                "id": "bf9878db-3cd2-49cf-b347-e77a9e034d47",
                "title": "Default",
                "isCorrect": true
              },
              {
                "id": "4f117e98-1298-4ab5-bbb3-07c9ba255279",
                "title": "New",
                "isCorrect": false
              },
              {
                "id": "e494c44e-020a-457f-b284-4ab68cb5eff4",
                "title": "Constructor",
                "isCorrect": false
              },
              {
                "id": "4f5dc69e-3477-4b3f-9384-e75b5b30253c",
                "title": "Create",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Default trait provides a default() method for creating default instances",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f70b6e8a-49b2-4c5a-a01a-bf3812bd1514",
            "title": "Can a type implement both Default and new()?",
            "answers": [
              {
                "id": "32e8f9f0-51dd-4f5a-978d-6ff8262942c9",
                "title": "Yes, it's common and expected",
                "isCorrect": true
              },
              {
                "id": "0738d574-c7aa-42c3-b19c-b30c67032e36",
                "title": "No, only one is allowed",
                "isCorrect": false
              },
              {
                "id": "abb8718a-af07-4270-a07f-30c2d045db22",
                "title": "Only if new() takes no arguments",
                "isCorrect": false
              },
              {
                "id": "e391645b-a851-4622-9418-4fd592eadfb7",
                "title": "Only for primitive types",
                "isCorrect": false
              }
            ],
            "descriptionText": "It's common for types to implement both Default and an empty new() constructor",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8dda9481-6651-4493-92ab-aac8cf88261e",
            "title": "What does implementing Deref for Vec<T> allow?",
            "answers": [
              {
                "id": "bfaf95ff-4703-4efd-bad5-8f44c0a01727",
                "title": "Implicit dereferencing from &Vec<T> to &[T]",
                "isCorrect": true
              },
              {
                "id": "f50952f8-b3b5-460b-a30b-c1575cdbce51",
                "title": "Converting Vec to slice without reference",
                "isCorrect": false
              },
              {
                "id": "2fc12194-b4ea-4366-9b03-20c72a345ede",
                "title": "Automatic cloning",
                "isCorrect": false
              },
              {
                "id": "d67b3ed0-6d7f-46bb-a7f7-5ba9be36d5a1",
                "title": "Stack allocation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref allows &Vec<T> to automatically coerce to &[T], making slice methods available",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b3217486-8f51-45ba-b844-e0b522dc01f5",
            "title": "What is the relationship between String and &str through Deref?",
            "answers": [
              {
                "id": "6ad5db02-6634-449d-83f1-fa4e8de86de8",
                "title": "&String can automatically deref to &str",
                "isCorrect": true
              },
              {
                "id": "52f560b9-06af-4b63-99a4-14cbc95d8cfa",
                "title": "String can automatically become str",
                "isCorrect": false
              },
              {
                "id": "ba4b7965-a586-4463-8636-441f6b584719",
                "title": "&str can automatically become &String",
                "isCorrect": false
              },
              {
                "id": "bbab220a-9fa4-4c53-912a-332bdc1d3898",
                "title": "They have no deref relationship",
                "isCorrect": false
              }
            ],
            "descriptionText": "String implements Deref<Target=str>, allowing automatic conversion from &String to &str",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "358bf65d-1d89-47fb-a239-0bd434b353b9",
            "title": "What is Rust's equivalent to finally blocks?",
            "answers": [
              {
                "id": "be1338ef-e53b-4b62-94c0-00cee6adebcb",
                "title": "Destructors (Drop trait)",
                "isCorrect": true
              },
              {
                "id": "21d10964-0ca3-4689-8536-8cd13f1c3019",
                "title": "defer keyword",
                "isCorrect": false
              },
              {
                "id": "1c6dd14b-0324-49ca-ab9a-267ea160a2e0",
                "title": "finally blocks",
                "isCorrect": false
              },
              {
                "id": "d175532a-a383-4b8d-beaa-0d75744754da",
                "title": "cleanup! macro",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust uses destructors via the Drop trait to run cleanup code when values go out of scope",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ad77024d-ca2e-411a-a768-ed03ef8af03e",
            "title": "When do destructors run in Rust?",
            "answers": [
              {
                "id": "e4b25e86-6e84-43aa-abec-0f5834673a18",
                "title": "When an object goes out of scope",
                "isCorrect": true
              },
              {
                "id": "9f8e9ae2-2c0d-4fe0-9adb-f498512a8355",
                "title": "Only at program exit",
                "isCorrect": false
              },
              {
                "id": "66d465cf-5c67-414e-94ef-61eef9950bac",
                "title": "Only on explicit drop() call",
                "isCorrect": false
              },
              {
                "id": "5ca16d20-c247-4e25-8e0a-7d236f86c2b6",
                "title": "Only during normal returns",
                "isCorrect": false
              }
            ],
            "descriptionText": "Destructors run automatically when an object goes out of scope, including during panics",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "27d3e947-da54-4d89-9ca8-97c6ee458c13",
            "title": "Are destructors guaranteed to run in all cases?",
            "answers": [
              {
                "id": "34e5a832-bf52-4c81-beda-7ca4bfffac0e",
                "title": "No, they may not run during infinite loops or aborts",
                "isCorrect": true
              },
              {
                "id": "7dd12a78-b9d0-4efb-8a93-b52c62a38baa",
                "title": "Yes, always",
                "isCorrect": false
              },
              {
                "id": "c3446dcb-84f2-44bb-acca-a84d83b20f0c",
                "title": "Only if there's no panic",
                "isCorrect": false
              },
              {
                "id": "2a7f80ea-b6b4-4aa9-83bd-9c4f81115556",
                "title": "Only in release mode",
                "isCorrect": false
              }
            ],
            "descriptionText": "Destructors are not absolutely guaranteed - they won't run in infinite loops or when a panicking destructor causes an abort",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "939a7545-3de9-44d4-bd27-7cebadca329e",
            "title": "What happens if a destructor panics during unwinding?",
            "answers": [
              {
                "id": "3a147a7c-cfff-4d1d-b39d-5aa974a13ca4",
                "title": "Rust aborts the thread immediately",
                "isCorrect": true
              },
              {
                "id": "924524fc-1542-4074-b206-477a6747132d",
                "title": "The panic is caught",
                "isCorrect": false
              },
              {
                "id": "c57ec3ac-8090-4919-9cad-f0d6defea993",
                "title": "Other destructors still run",
                "isCorrect": false
              },
              {
                "id": "27ddf61e-3460-423a-a3df-1b992b79fb3d",
                "title": "The program continues normally",
                "isCorrect": false
              }
            ],
            "descriptionText": "If a destructor panics while unwinding, Rust has no good option and aborts immediately",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "857a06cf-93a6-4ced-b30e-68e736549090",
            "title": "What does mem::take() do?",
            "answers": [
              {
                "id": "b6c01c95-c49a-4035-9f2b-764b50d64c12",
                "title": "Replaces a value with its Default, returning the original",
                "isCorrect": true
              },
              {
                "id": "cb1d49db-9b7b-4994-9dd9-2aa15f734ef7",
                "title": "Copies a value",
                "isCorrect": false
              },
              {
                "id": "72310e10-5409-4f4a-8f64-80dd0ccb0bd7",
                "title": "Moves a value without replacement",
                "isCorrect": false
              },
              {
                "id": "cea08ac4-5de7-47a5-ba85-eecef95e5d43",
                "title": "Clones a value",
                "isCorrect": false
              }
            ],
            "descriptionText": "mem::take swaps the value with Default::default() and returns the original value",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f2559344-1e9e-4493-b6d9-4cb52e3afc9a",
            "title": "What does mem::replace() do differently from mem::take()?",
            "answers": [
              {
                "id": "9aa9483f-b7bb-4c59-b6a8-de3646cd4e8b",
                "title": "It lets you specify what to replace the value with",
                "isCorrect": true
              },
              {
                "id": "650319f6-367a-4d18-8576-68c568091af6",
                "title": "It doesn't return the original value",
                "isCorrect": false
              },
              {
                "id": "ee2ce3e5-4f20-41b8-a169-9b35c1a45489",
                "title": "It requires Clone",
                "isCorrect": false
              },
              {
                "id": "06c7c7d5-8910-45de-83d2-e0c6612d789a",
                "title": "It only works with Option",
                "isCorrect": false
              }
            ],
            "descriptionText": "mem::replace allows specifying a replacement value, while mem::take uses Default",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ae438656-9dfb-4b77-8517-71500c7da80a",
            "title": "When is mem::take() useful with enums?",
            "answers": [
              {
                "id": "cec4fb6d-510a-4dd0-ae3f-7c7c165e9e0e",
                "title": "When changing an enum variant while keeping owned values",
                "isCorrect": true
              },
              {
                "id": "024570b7-7f7f-4064-ac17-6cdcbeb1fbb8",
                "title": "When copying enum values",
                "isCorrect": false
              },
              {
                "id": "a5e0a91a-6278-46fa-b98b-c5ef0a4ed368",
                "title": "When comparing enums",
                "isCorrect": false
              },
              {
                "id": "e6668a92-6b28-4138-a036-99acdd07a015",
                "title": "When serializing enums",
                "isCorrect": false
              }
            ],
            "descriptionText": "mem::take avoids cloning when transforming enum variants by swapping values with their defaults",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d67acac5-c465-4163-83bf-d68b35176a3d",
            "title": "What trait must a type implement to use mem::take()?",
            "answers": [
              {
                "id": "3c7189ce-a925-4654-829f-b5ba07642f04",
                "title": "Default",
                "isCorrect": true
              },
              {
                "id": "20145fbd-6976-4253-8ce6-5ca5649a2bc7",
                "title": "Clone",
                "isCorrect": false
              },
              {
                "id": "7e27e93c-825a-4430-92e0-d18ac894d27a",
                "title": "Copy",
                "isCorrect": false
              },
              {
                "id": "1e3b5284-3ff0-4eff-ab35-49d327942ac4",
                "title": "Move",
                "isCorrect": false
              }
            ],
            "descriptionText": "mem::take requires the type to implement Default to provide a replacement value",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1932b2bc-a689-4dc5-a33d-cc35a36b6a96",
            "title": "Since Rust 1.79.0, what happens with temporary values in & or &mut expressions?",
            "answers": [
              {
                "id": "7bd92331-1225-4a64-b58d-def3180107f8",
                "title": "Lifetimes are extended as long as possible within the function scope",
                "isCorrect": true
              },
              {
                "id": "bca17937-2c6c-4373-adf5-138d9bd38535",
                "title": "They are dropped immediately",
                "isCorrect": false
              },
              {
                "id": "283933a4-324e-458c-9865-4ff0913f9f24",
                "title": "They must be assigned to let bindings",
                "isCorrect": false
              },
              {
                "id": "d8a4a846-47b0-4c81-963d-5d8cb41038f6",
                "title": "They cause compilation errors",
                "isCorrect": false
              }
            ],
            "descriptionText": "The compiler now automatically extends temporary lifetimes, eliminating the need for deferred initialization",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "878ab8d9-8b0a-4f8b-a66d-62f7d2e06be8",
            "title": "What is the benefit of on-stack dynamic dispatch?",
            "answers": [
              {
                "id": "8cdd8397-041b-4194-8918-d7d964837541",
                "title": "No heap allocation needed for dynamic dispatch",
                "isCorrect": true
              },
              {
                "id": "53ac8696-cef0-4ef7-bda5-b31614d743a2",
                "title": "Faster than static dispatch",
                "isCorrect": false
              },
              {
                "id": "ff94bc3d-08e0-4d18-a6ad-9b72ed60bdb1",
                "title": "Smaller binary size",
                "isCorrect": false
              },
              {
                "id": "b0832e55-104a-4daa-a795-b935e48851ac",
                "title": "Better type safety",
                "isCorrect": false
              }
            ],
            "descriptionText": "On-stack dynamic dispatch avoids Box allocation while still providing runtime polymorphism",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3c64e2e9-ea9d-41d0-b594-97d539a21bb6",
            "title": "How should flat enums be exposed in FFI?",
            "answers": [
              {
                "id": "dc15e201-1114-4444-b122-2af7d5ae6503",
                "title": "Converted to integers and returned as codes",
                "isCorrect": true
              },
              {
                "id": "874077a5-8504-4ef5-a590-6be1d557fbee",
                "title": "As strings",
                "isCorrect": false
              },
              {
                "id": "96076498-6dff-4e30-aec9-8e9f466624f9",
                "title": "As boolean values",
                "isCorrect": false
              },
              {
                "id": "cc6a7211-eead-42e6-9215-255f251ee5bc",
                "title": "As void pointers",
                "isCorrect": false
              }
            ],
            "descriptionText": "Flat enums should be converted to integer codes for simple C-compatible error handling",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fd965e5d-3764-4e4c-9d59-b97939df1f0d",
            "title": "How should structured enums with data be exposed in FFI?",
            "answers": [
              {
                "id": "38aa134d-a852-4d1f-8a2c-09ca55eb460c",
                "title": "As integer code with a string error message for details",
                "isCorrect": true
              },
              {
                "id": "8181f470-ca02-48a6-936c-2f00a6dced9e",
                "title": "As complete Rust enums",
                "isCorrect": false
              },
              {
                "id": "f18a4a1c-60e9-4338-a0f1-41ab27ff206c",
                "title": "As integer code only",
                "isCorrect": false
              },
              {
                "id": "f12cdfc2-e481-4ee6-8ff8-4431cef52c8b",
                "title": "As JSON strings",
                "isCorrect": false
              }
            ],
            "descriptionText": "Structured enums need both an integer code and a way to get detailed error messages",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7f512804-d1d9-4acf-86c6-249a4b7d62e2",
            "title": "What should custom error types use for FFI representation?",
            "answers": [
              {
                "id": "669a5a0a-9fdd-4f38-8622-07905ae8e69e",
                "title": "#[repr(C)] for C-compatible layout",
                "isCorrect": true
              },
              {
                "id": "bd1cd211-cfbc-4daa-ba41-940478f98f68",
                "title": "#[repr(Rust)]",
                "isCorrect": false
              },
              {
                "id": "3b1acdbb-e6cc-42fb-80a9-b24ccadac873",
                "title": "#[repr(packed)]",
                "isCorrect": false
              },
              {
                "id": "30f2aaa1-ba4c-4559-b414-fc57fe8a1f2a",
                "title": "No special representation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Custom error types should use #[repr(C)] to ensure C-compatible memory layout",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "74717e11-105a-4cdc-b853-dd41f5651547",
            "title": "What is the first principle when passing strings to FFI?",
            "answers": [
              {
                "id": "f285bf9c-1dc1-49f7-bfbc-5bfefdf81db7",
                "title": "Make the lifetime of owned strings as long as possible",
                "isCorrect": true
              },
              {
                "id": "c4e37e2e-1eeb-4fdc-add1-7b55018efc8f",
                "title": "Always clone strings",
                "isCorrect": false
              },
              {
                "id": "de85714e-2466-4da8-9320-7c0a1a0706a1",
                "title": "Convert to raw pointers immediately",
                "isCorrect": false
              },
              {
                "id": "8f8ceea0-2a17-4b1e-9a45-8efb8e1169ef",
                "title": "Use static strings only",
                "isCorrect": false
              }
            ],
            "descriptionText": "Maximizing string lifetimes prevents dangling pointers and ensures safety in FFI",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0c41d37f-d5a5-46f0-8a00-9a283dc8d28d",
            "title": "What should you use if C code can modify string data in FFI?",
            "answers": [
              {
                "id": "e40de26e-23be-4a68-a933-fe8583166973",
                "title": "Vec<u8> instead of CString",
                "isCorrect": true
              },
              {
                "id": "2dce00ae-242c-4948-9fe6-eea660f5fc4b",
                "title": "CString with mut",
                "isCorrect": false
              },
              {
                "id": "9d652d03-237d-4af8-90e9-3d0b6376cd0e",
                "title": "String",
                "isCorrect": false
              },
              {
                "id": "96368063-9b6b-4f10-95fc-7d0b67677567",
                "title": "&mut str",
                "isCorrect": false
              }
            ],
            "descriptionText": "Vec<u8> provides mutable buffer for C code to modify, while CString is for read-only data",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "43a54450-cfff-4e55-b194-0c53b3768ebf",
            "title": "Can Option be used as an iterator?",
            "answers": [
              {
                "id": "c1685467-25a6-4f32-ac97-f64704a1ce8f",
                "title": "Yes, it implements IntoIterator",
                "isCorrect": true
              },
              {
                "id": "d32b68aa-3dbf-41d2-8fdc-f8141566cc8d",
                "title": "No",
                "isCorrect": false
              },
              {
                "id": "c1fdd1d7-1efb-4335-be66-c807f9784cd6",
                "title": "Only Some variants",
                "isCorrect": false
              },
              {
                "id": "b4114c7d-124c-49f7-aa45-e7dabe1b18d8",
                "title": "Only with iter() method",
                "isCorrect": false
              }
            ],
            "descriptionText": "Option implements IntoIterator, yielding zero or one element",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2b4a7597-73a7-41af-9b25-be2e98ad30ff",
            "title": "What does Option::iter() return for Some(value)?",
            "answers": [
              {
                "id": "84ca3435-4d1c-4ddb-9251-be8170bd734e",
                "title": "An iterator with one element",
                "isCorrect": true
              },
              {
                "id": "c323faab-3cb8-4906-ba23-711698ba24d6",
                "title": "The value directly",
                "isCorrect": false
              },
              {
                "id": "c424b622-35ed-4eb5-9499-3b7163e535d8",
                "title": "A Vec with one element",
                "isCorrect": false
              },
              {
                "id": "7a9428ce-7a58-4387-8060-5d5a7d85078e",
                "title": "An empty iterator",
                "isCorrect": false
              }
            ],
            "descriptionText": "Option as an iterator yields the contained value once if Some, or nothing if None",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "da809848-a61b-4a7d-866b-0f4f14954791",
            "title": "How can you add an Option to the end of an iterator?",
            "answers": [
              {
                "id": "9727f16f-c134-4a9e-b160-966c854edcd6",
                "title": "Using .chain(option.iter())",
                "isCorrect": true
              },
              {
                "id": "a4b43332-c0e9-4d01-8f0a-40fbddcfd786",
                "title": "Using .push(option)",
                "isCorrect": false
              },
              {
                "id": "0dceb67d-6ec0-4759-ba50-e634f8416e63",
                "title": "Using .append(option)",
                "isCorrect": false
              },
              {
                "id": "9bc7e747-2d05-4c3d-a071-96424457347c",
                "title": "Using .extend_one(option)",
                "isCorrect": false
              }
            ],
            "descriptionText": "The chain() method can combine an iterator with an Option's iterator",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "374778ca-dc7b-464d-901e-c768ca0e7259",
            "title": "How do you move just some variables into a closure while borrowing others?",
            "answers": [
              {
                "id": "3d911788-f2f5-489d-b741-5773bd9be6ee",
                "title": "Use variable rebinding in a separate scope before the closure",
                "isCorrect": true
              },
              {
                "id": "003d5515-ae72-45ce-8786-8e6712cfa907",
                "title": "Use multiple move keywords",
                "isCorrect": false
              },
              {
                "id": "6f410302-184f-4a9c-820d-c3d3453df09b",
                "title": "Use mut keyword",
                "isCorrect": false
              },
              {
                "id": "225144eb-23f7-4b79-a08a-2a20e7061121",
                "title": "Impossible in Rust",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rebinding variables in a block scope allows selective moving, cloning, and borrowing into closures",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1ef6090f-1b2f-4a61-bc86-38834ea52c55",
            "title": "What is the pattern for cloning only specific values into a move closure?",
            "answers": [
              {
                "id": "5b3c9c13-8e45-4c80-be5e-76f8f959b63e",
                "title": "Clone in a block scope, then use move closure",
                "isCorrect": true
              },
              {
                "id": "a1059e5c-38fc-4560-8467-818d421ba42e",
                "title": "Use clone inside the closure",
                "isCorrect": false
              },
              {
                "id": "6e8467bf-5a3d-4afa-b97e-ec9c0312c589",
                "title": "Don't use move keyword",
                "isCorrect": false
              },
              {
                "id": "41fc8751-38a2-4dce-b41c-fa157c3b609e",
                "title": "Pass as closure parameters",
                "isCorrect": false
              }
            ],
            "descriptionText": "Cloning before the closure in a separate scope keeps the clone operation explicit and localized",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "327fba1b-ab22-48b0-868d-111b1cd1427b",
            "title": "What is the benefit of using a helper function in doc examples?",
            "answers": [
              {
                "id": "2b8018ba-7eee-4d0f-8f9f-eace9d6ce84c",
                "title": "Reduces boilerplate in documentation examples",
                "isCorrect": true
              },
              {
                "id": "350398d7-6236-482a-8692-04b675ebb059",
                "title": "Makes tests run faster",
                "isCorrect": false
              },
              {
                "id": "ee35a237-8e2b-43ac-b39e-7aab3e48cb96",
                "title": "Improves code coverage",
                "isCorrect": false
              },
              {
                "id": "876bd06a-2c6a-448d-ac61-56f5d457d515",
                "title": "Enables runtime testing",
                "isCorrect": false
              }
            ],
            "descriptionText": "Helper functions that take structs as parameters eliminate repetitive setup code in examples",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7670b2f8-0bd9-4ae1-9c05-6f41218e4012",
            "title": "What is the downside of using helper functions in doc examples?",
            "answers": [
              {
                "id": "816843a9-93b9-4930-bcd1-3fa9c753d78b",
                "title": "The example code won't actually execute during tests",
                "isCorrect": true
              },
              {
                "id": "3b69c0ae-5503-4212-b23b-2c1c3798b544",
                "title": "The code won't compile",
                "isCorrect": false
              },
              {
                "id": "98022c1a-10c5-4c5c-b834-06069aac159e",
                "title": "It's harder to read",
                "isCorrect": false
              },
              {
                "id": "2925c2ab-f06d-402b-ac54-314ada662f7d",
                "title": "It requires more dependencies",
                "isCorrect": false
              }
            ],
            "descriptionText": "Code inside helper functions isn't invoked during testing, only checked for compilation",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1c795212-ddfc-4b05-9724-6a0e6600dbd2",
            "title": "How do you make a variable immutable after initial mutation?",
            "answers": [
              {
                "id": "4b23538a-cc06-44cc-bd82-3c5f38644490",
                "title": "Rebind it without mut keyword or use a nested block",
                "isCorrect": true
              },
              {
                "id": "71b105ad-3741-4283-a318-fdc9aabf4762",
                "title": "Call freeze() method",
                "isCorrect": false
              },
              {
                "id": "8d7ba8cc-642e-4960-b704-dd0b6101e92d",
                "title": "Use const keyword",
                "isCorrect": false
              },
              {
                "id": "d60fbf7a-c100-40fb-a689-61ac592c013e",
                "title": "Use immutable! macro",
                "isCorrect": false
              }
            ],
            "descriptionText": "Variable shadowing allows redeclaring a variable as immutable after initial processing",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f0962102-c12e-4ade-8c48-f8edbc323119",
            "title": "What is the benefit of the temporary mutability pattern?",
            "answers": [
              {
                "id": "f4b25cec-4fc6-477d-b116-69408b05472e",
                "title": "Compiler prevents accidental mutations after processing",
                "isCorrect": true
              },
              {
                "id": "fa8b8b44-bd3a-4f79-9565-de16af22e1ad",
                "title": "Code runs faster",
                "isCorrect": false
              },
              {
                "id": "c3190a1b-4f7c-464a-8936-b3eba6a19207",
                "title": "Uses less memory",
                "isCorrect": false
              },
              {
                "id": "81fceda8-3e35-4405-8bf5-7ff7134bfc3b",
                "title": "Simplifies borrowing rules",
                "isCorrect": false
              }
            ],
            "descriptionText": "Making data immutable after processing makes intent explicit and prevents bugs",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f85aff93-8a8e-44a8-9514-73d8ecacf056",
            "title": "Why should fallible functions return consumed arguments on error?",
            "answers": [
              {
                "id": "b7be3806-918b-4eef-9c2b-4f438199e571",
                "title": "Allows retry without cloning",
                "isCorrect": true
              },
              {
                "id": "823fbe63-ba2f-4275-a928-839195786b63",
                "title": "Required by the borrow checker",
                "isCorrect": false
              },
              {
                "id": "246a44af-6f97-4169-9eed-bc766ae2b5fc",
                "title": "Improves error messages",
                "isCorrect": false
              },
              {
                "id": "82684146-4ac5-485f-9774-8f8c5939a68c",
                "title": "Reduces binary size",
                "isCorrect": false
              }
            ],
            "descriptionText": "Returning the consumed argument avoids expensive cloning when retrying operations",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ee6c7c38-17fb-49e2-9526-24dda03f151a",
            "title": "What standard library method uses the pattern of returning consumed arguments on error?",
            "answers": [
              {
                "id": "d123018b-2de2-4b8e-aa2e-0bbdd3d33abf",
                "title": "String::from_utf8",
                "isCorrect": true
              },
              {
                "id": "98eeb03e-5b4e-4b70-94a5-5ba86c7a65a9",
                "title": "Vec::push",
                "isCorrect": false
              },
              {
                "id": "c485964e-2cd2-4d79-a9c6-582dc9659da9",
                "title": "Option::unwrap",
                "isCorrect": false
              },
              {
                "id": "037318b6-ea3a-4465-8454-c5b78c88fabc",
                "title": "Result::expect",
                "isCorrect": false
              }
            ],
            "descriptionText": "String::from_utf8 returns FromUtf8Error which contains the original Vec<u8> on failure",
            "descriptionLink": "idioms_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "66dcd4a5-0c63-4f56-8dd2-e58b8701ff05",
        "theme": "Design Patterns",
        "priority": 2,
        "questions": [
          {
            "id": "6f824969-c70d-4d02-960f-28a5eeb8fc92",
            "title": "What is the main purpose of the Command pattern?",
            "answers": [
              {
                "id": "fdcf2f50-b3a6-4a4c-a791-3e1ccdecbbd4",
                "title": "Separate actions into objects and pass them as parameters",
                "isCorrect": true
              },
              {
                "id": "2d13bbc7-16a7-4ce3-b336-10fd92854dd5",
                "title": "Create multiple instances of the same object",
                "isCorrect": false
              },
              {
                "id": "bdea0146-5542-4dc6-b515-f98013e2555a",
                "title": "Handle errors in a centralized way",
                "isCorrect": false
              },
              {
                "id": "e4c710f1-1b02-4a1a-83df-0cf28eb9f13e",
                "title": "Optimize memory usage",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Command pattern encapsulates actions as objects, allowing them to be executed or invoked later",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2660df42-d26e-4f56-aae3-5edb9777854b",
            "title": "What are the two main operations in the Command pattern trait?",
            "answers": [
              {
                "id": "710e5c5d-3eb7-465c-ada5-1cf21add8800",
                "title": "execute and rollback",
                "isCorrect": true
              },
              {
                "id": "f1bdf59d-1d9f-4766-84e3-82b22f14bc0e",
                "title": "run and undo",
                "isCorrect": false
              },
              {
                "id": "5d48dc46-824b-4ce8-8873-feab0708fbf3",
                "title": "apply and revert",
                "isCorrect": false
              },
              {
                "id": "a4afe495-d673-4cba-815b-8f881ecf3a02",
                "title": "start and stop",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Command pattern typically implements execute to perform an action and rollback to undo it",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "eef15caa-fb5f-4d1b-a333-b0b63e69f762",
            "title": "Which approach stores commands as trait objects in the Command pattern?",
            "answers": [
              {
                "id": "9ac4afb6-b0d9-4a69-bda0-b048df29431f",
                "title": "Vec<Box<dyn Migration>>",
                "isCorrect": true
              },
              {
                "id": "fb70f780-c3e6-4f76-8c12-4e640c5f19f7",
                "title": "Vec<fn()>",
                "isCorrect": false
              },
              {
                "id": "4c0effb5-ae6f-4c59-857a-a46140322cd1",
                "title": "Vec<Command>",
                "isCorrect": false
              },
              {
                "id": "7a7d944b-e25d-4983-abff-fcc50557e39c",
                "title": "HashMap<String, Box<Command>>",
                "isCorrect": false
              }
            ],
            "descriptionText": "Using Box<dyn Trait> allows storing different types that implement the same trait in a collection",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d06d3835-2799-4cfa-b752-19cf07058a1d",
            "title": "What is an alternative to trait objects for implementing the Command pattern?",
            "answers": [
              {
                "id": "ae69352f-3ff5-44f3-9d8f-dca2c98eb023",
                "title": "Function pointers",
                "isCorrect": true
              },
              {
                "id": "4d5317f5-4d10-4d74-9f53-8d758ec494c9",
                "title": "Macros",
                "isCorrect": false
              },
              {
                "id": "5e06da02-0475-4c1c-b8b0-dc6d2a4ced77",
                "title": "Generics only",
                "isCorrect": false
              },
              {
                "id": "aa26ac27-24c4-455e-b57c-737bbdebff6e",
                "title": "Enum variants",
                "isCorrect": false
              }
            ],
            "descriptionText": "Function pointers can store references to functions and closures for command execution",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2a05efdd-c0fa-4d82-8807-7b7f899b4996",
            "title": "What is the main idea behind the Strategy pattern?",
            "answers": [
              {
                "id": "de543fa7-f2d3-441e-8270-f9bceb64e278",
                "title": "Define algorithm skeleton at abstract level, separate specific implementations",
                "isCorrect": true
              },
              {
                "id": "b6d29110-4a1d-4f11-b750-ccead0a0f13b",
                "title": "Execute commands in sequence",
                "isCorrect": false
              },
              {
                "id": "5c146ee1-89a0-4200-b76d-b32bc0d457b2",
                "title": "Create multiple copies of data",
                "isCorrect": false
              },
              {
                "id": "fd851e4b-9719-4501-977d-3b821735a7e7",
                "title": "Handle concurrent operations",
                "isCorrect": false
              }
            ],
            "descriptionText": "Strategy pattern separates the algorithm structure from its concrete implementations through abstraction",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cc507198-ba2f-40d4-baf4-c5cce9291e93",
            "title": "What principle does the Strategy pattern enable?",
            "answers": [
              {
                "id": "5bb5baa3-7f87-43f7-adc6-6d2522fd5169",
                "title": "Dependency Inversion",
                "isCorrect": true
              },
              {
                "id": "73359b34-9bfa-4de4-8c46-58a1fcd3da29",
                "title": "Single Responsibility",
                "isCorrect": false
              },
              {
                "id": "a01e7de4-a439-49a7-ad88-517cc1b19849",
                "title": "Interface Segregation",
                "isCorrect": false
              },
              {
                "id": "79a51e1f-947a-4573-aa31-84392bed0a4a",
                "title": "Open/Closed only",
                "isCorrect": false
              }
            ],
            "descriptionText": "Strategy pattern implements Dependency Inversion by having abstractions not depend on concrete implementations",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "096270a4-88c2-4a85-8123-cc86f93d6109",
            "title": "In the Strategy pattern example, what do Text and Json represent?",
            "answers": [
              {
                "id": "e8c5c1d6-e943-422c-b20d-1085346edcbd",
                "title": "Strategy structs implementing the Formatter trait",
                "isCorrect": true
              },
              {
                "id": "eb06bfbc-9dd7-494b-88c6-a51f7c6fd0be",
                "title": "Data types",
                "isCorrect": false
              },
              {
                "id": "57474b2a-e07f-4087-aaa6-4721a3154935",
                "title": "Abstract classes",
                "isCorrect": false
              },
              {
                "id": "dbc1ddb0-cd51-49a5-a981-201e054486ba",
                "title": "Error types",
                "isCorrect": false
              }
            ],
            "descriptionText": "Text and Json are concrete strategy implementations that format data differently",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1e3a9191-30da-470a-9056-1e544ac04bb0",
            "title": "Can the Strategy pattern be implemented without traits in Rust?",
            "answers": [
              {
                "id": "59d093dd-cdfd-4e65-879a-499dfd9f22ba",
                "title": "Yes, using closures",
                "isCorrect": true
              },
              {
                "id": "3df453aa-c363-4c97-8676-9b19485f912d",
                "title": "No, traits are required",
                "isCorrect": false
              },
              {
                "id": "e02a550e-392b-4c59-9831-8bea09623a9b",
                "title": "Only with macros",
                "isCorrect": false
              },
              {
                "id": "f00f2f22-8c5c-4976-9d2c-424228c0536a",
                "title": "Only with enums",
                "isCorrect": false
              }
            ],
            "descriptionText": "Closures can be used to implement strategy pattern by passing functions as parameters",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "93779a57-13a2-45d3-a317-90c4c0fd8bed",
            "title": "What standard library method demonstrates the Strategy pattern?",
            "answers": [
              {
                "id": "7893ed1e-a237-4822-b084-9927706c2a88",
                "title": "Option::map",
                "isCorrect": true
              },
              {
                "id": "58be69dc-eff3-4561-bfd2-f118250bcf3a",
                "title": "Vec::push",
                "isCorrect": false
              },
              {
                "id": "522c3ebf-df8c-4190-bd92-49162a07cae4",
                "title": "String::new",
                "isCorrect": false
              },
              {
                "id": "bbeed664-0100-4579-bdc8-7db8e9b87f1f",
                "title": "Result::unwrap",
                "isCorrect": false
              }
            ],
            "descriptionText": "Option::map takes a closure as a strategy for transforming the contained value",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "112450e1-81d1-4773-b1d0-70e2187e7972",
            "title": "What is the main advantage of the Strategy pattern?",
            "answers": [
              {
                "id": "650db683-4ef7-4463-b27f-705d6e21cfb6",
                "title": "Separation of concerns",
                "isCorrect": true
              },
              {
                "id": "66488913-712c-4a2c-8514-f92b9c9e384f",
                "title": "Faster execution",
                "isCorrect": false
              },
              {
                "id": "3ed6efb8-36c5-439f-895c-58df1c655a41",
                "title": "Less memory usage",
                "isCorrect": false
              },
              {
                "id": "3394b2a2-70e5-44a1-837b-40f76afe36c7",
                "title": "Simpler syntax",
                "isCorrect": false
              }
            ],
            "descriptionText": "Strategy pattern separates the algorithm interface from its implementation details",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b7e0b07a-a1f0-4e7e-9817-548642a7a84e",
            "title": "What does the Fold pattern do?",
            "answers": [
              {
                "id": "626a6397-0c0e-4661-b4cb-4ab79b02d044",
                "title": "Run an algorithm over each item to create a new collection",
                "isCorrect": true
              },
              {
                "id": "bd06bc12-6a2d-4a2d-8e3f-db8f11b82b83",
                "title": "Combine items into a single value",
                "isCorrect": false
              },
              {
                "id": "c54df808-24e3-4f34-a04b-7e19b4a97e33",
                "title": "Filter items from a collection",
                "isCorrect": false
              },
              {
                "id": "57f0f428-8a34-4907-b3ba-f36233a4ed29",
                "title": "Sort items in place",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Fold pattern transforms each node in a data structure to create a new structure",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6dd70828-df51-4b75-9d87-03e0939f514e",
            "title": "In the Fold pattern, what does a Folder trait typically contain?",
            "answers": [
              {
                "id": "04ece60d-edde-45ec-901f-214bb7b1d488",
                "title": "Methods for folding different node types",
                "isCorrect": true
              },
              {
                "id": "2ec875cb-1369-4aa9-931d-440a98ce28ec",
                "title": "A single fold method",
                "isCorrect": false
              },
              {
                "id": "888ef609-99ff-4fb4-aecd-598d5850becc",
                "title": "Iterator implementation",
                "isCorrect": false
              },
              {
                "id": "29b0e8a7-4e07-405b-9b77-0546d4ab635a",
                "title": "Clone implementation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Folder trait has specific methods for each type of node in the data structure",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5be5d15f-c83b-437b-83bf-2f510f4d6228",
            "title": "What is the advantage of using fresh data structures in the Fold pattern?",
            "answers": [
              {
                "id": "0de98c13-9d08-48f1-a273-2dc02454876b",
                "title": "Easier reasoning about code due to immutability",
                "isCorrect": true
              },
              {
                "id": "f3d840ab-271c-4208-95fa-5f494427367f",
                "title": "Better performance",
                "isCorrect": false
              },
              {
                "id": "b5112c2b-70ee-4518-aa4e-6fb94e472903",
                "title": "Less memory usage",
                "isCorrect": false
              },
              {
                "id": "f5be1ae8-a509-4ed2-af9f-e8e67195690d",
                "title": "Simpler implementation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Immutable transformations make code easier to understand and less prone to bugs",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "47d8336f-6869-403c-9d72-35c37f54b505",
            "title": "How does the Fold pattern relate to the Visitor pattern?",
            "answers": [
              {
                "id": "3f01fa06-973a-4e48-b282-521680f3b9cf",
                "title": "Both walk data structures, but Fold creates new structures",
                "isCorrect": true
              },
              {
                "id": "2d068283-d92f-468b-ac35-73687353bf52",
                "title": "They are the same pattern",
                "isCorrect": false
              },
              {
                "id": "ce05d54a-11af-4e66-b777-d8ad047be943",
                "title": "Visitor is faster than Fold",
                "isCorrect": false
              },
              {
                "id": "f1664f67-7a0f-4e10-bcf3-5355cab49a16",
                "title": "Fold can only work with trees",
                "isCorrect": false
              }
            ],
            "descriptionText": "Visitor and Fold both traverse structures, but Fold produces new data while Visitor operates on existing data",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4721a92a-0b55-41d6-8908-4c0306ec9053",
            "title": "What problem does struct decomposition solve?",
            "answers": [
              {
                "id": "d9132375-b0b9-4480-99f4-2f62af8e53e2",
                "title": "Borrow checker issues with large structs",
                "isCorrect": true
              },
              {
                "id": "24859d17-7631-4aa8-aa0c-ade88ad48e72",
                "title": "Performance problems",
                "isCorrect": false
              },
              {
                "id": "4f8156ce-53bf-47dd-9127-7a2561c35345",
                "title": "Memory leaks",
                "isCorrect": false
              },
              {
                "id": "040ded9d-4788-4f0d-a57b-0147352ff79a",
                "title": "Compilation errors",
                "isCorrect": false
              }
            ],
            "descriptionText": "Decomposing structs allows borrowing fields independently, avoiding borrow checker conflicts",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "3bd42add-6755-4d15-b104-66c448736918",
            "title": "What is the solution to borrow checker issues with large structs?",
            "answers": [
              {
                "id": "abbd0bf7-2103-4a40-bd7b-d2dbcaa85355",
                "title": "Decompose into smaller structs",
                "isCorrect": true
              },
              {
                "id": "36e4bc9d-b2ba-40d3-b90e-9e72e3f6dcc3",
                "title": "Use unsafe code",
                "isCorrect": false
              },
              {
                "id": "3bc321ec-2c80-4515-a214-2faee8ca93d1",
                "title": "Use RefCell",
                "isCorrect": false
              },
              {
                "id": "adad744e-5100-43b7-8db5-9ae5709fe85f",
                "title": "Clone the struct",
                "isCorrect": false
              }
            ],
            "descriptionText": "Breaking a large struct into smaller ones allows independent borrowing of each component",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7a85834f-4cb8-45f3-af3d-fea3c0dbb261",
            "title": "Can the borrow checker borrow struct fields independently?",
            "answers": [
              {
                "id": "4096a93a-be54-4027-95e8-4988c4eb6c7b",
                "title": "Yes, if they are separate fields",
                "isCorrect": true
              },
              {
                "id": "4b6fd929-bcde-4657-847a-7084adadfae2",
                "title": "No, never",
                "isCorrect": false
              },
              {
                "id": "08e25521-e11d-442a-8c66-151d1eda48ea",
                "title": "Only with RefCell",
                "isCorrect": false
              },
              {
                "id": "25486965-f3c8-4517-add4-15a5dc857dc1",
                "title": "Only in unsafe code",
                "isCorrect": false
              }
            ],
            "descriptionText": "The borrow checker can borrow different fields independently as long as they don't overlap",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "074eb11c-20d6-4b3c-b7b1-4d577673b7e5",
            "title": "What benefit does struct decomposition often reveal?",
            "answers": [
              {
                "id": "432929d7-6405-419f-87e3-4f2530e1da42",
                "title": "Smaller units of functionality and better design",
                "isCorrect": true
              },
              {
                "id": "1d88f766-6809-4b0c-bb0e-7e79621e605f",
                "title": "Faster code execution",
                "isCorrect": false
              },
              {
                "id": "c613cf2c-1330-41ec-8305-ac60dfcbc896",
                "title": "Smaller binary size",
                "isCorrect": false
              },
              {
                "id": "bdc842c9-1125-4481-9f56-74f26d416418",
                "title": "Easier testing only",
                "isCorrect": false
              }
            ],
            "descriptionText": "Decomposition often leads to discovering more logical separation of concerns",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4a2736fc-a87e-470e-9522-7f6759979ad8",
            "title": "What are the two types of data in Object-Based APIs?",
            "answers": [
              {
                "id": "956ba8ec-0655-406f-9344-568318ef1541",
                "title": "Encapsulated types and Transactional types",
                "isCorrect": true
              },
              {
                "id": "bc137bd9-e1ed-42d4-91c5-e7585feac53c",
                "title": "Public types and Private types",
                "isCorrect": false
              },
              {
                "id": "101cf0db-2044-45f6-865a-44e0f41b477d",
                "title": "Mutable types and Immutable types",
                "isCorrect": false
              },
              {
                "id": "060729c2-d09a-423a-b929-25ca630b8966",
                "title": "Safe types and Unsafe types",
                "isCorrect": false
              }
            ],
            "descriptionText": "Encapsulated types are opaque and owned by Rust, Transactional types are transparent and owned by the user",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "cd7de160-f00e-42a4-bac7-a80a80aa9607",
            "title": "Who owns encapsulated types in Object-Based APIs?",
            "answers": [
              {
                "id": "bf1d2c97-f1c3-46c5-9c93-eac9d7592197",
                "title": "Rust library, managed by the user",
                "isCorrect": true
              },
              {
                "id": "c626d52e-1775-46c1-9e46-d5d986651216",
                "title": "The user completely",
                "isCorrect": false
              },
              {
                "id": "aa68876e-c773-455a-9279-ab31fcadc88e",
                "title": "The operating system",
                "isCorrect": false
              },
              {
                "id": "235025f4-3fdd-4f54-be32-0662d5d884f2",
                "title": "Both equally",
                "isCorrect": false
              }
            ],
            "descriptionText": "Encapsulated types are owned by the library with users managing lifecycle through functions",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "37ec5035-f805-41db-a2ca-0e4963ae32b1",
            "title": "Who owns transactional types in Object-Based APIs?",
            "answers": [
              {
                "id": "3db6b92f-fbae-45b0-967f-918093ee5a95",
                "title": "The user",
                "isCorrect": true
              },
              {
                "id": "e6633941-8e98-4d39-a958-71167dc8fec4",
                "title": "The Rust library",
                "isCorrect": false
              },
              {
                "id": "2b84012e-e4a3-4523-befe-c18d48a9391c",
                "title": "The operating system",
                "isCorrect": false
              },
              {
                "id": "1dd10f97-1b58-453b-89f8-581269b4c79d",
                "title": "They are shared",
                "isCorrect": false
              }
            ],
            "descriptionText": "Transactional types are transparent and fully owned by the user",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9dc8b8e4-9383-472e-a9e6-190a3a237083",
            "title": "What is the main goal of Object-Based API design?",
            "answers": [
              {
                "id": "3cd6952a-f971-41a6-b13b-b322cf91da3b",
                "title": "Minimize memory safety guarantees users must uphold",
                "isCorrect": true
              },
              {
                "id": "2d504022-b0c5-43b4-a759-19fbb7dcacc6",
                "title": "Maximize performance",
                "isCorrect": false
              },
              {
                "id": "6a97d529-96cc-4e44-b96d-eebd180212c5",
                "title": "Simplify implementation",
                "isCorrect": false
              },
              {
                "id": "61084d17-9246-4a26-9505-cbe5ae4d3cb3",
                "title": "Reduce binary size",
                "isCorrect": false
              }
            ],
            "descriptionText": "Object-based design creates clear boundaries between safe and unsafe code",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "62b96720-192a-48ee-97a9-ffdc66d56236",
            "title": "Why is wrapping iterators into FFI difficult?",
            "answers": [
              {
                "id": "28db4974-725b-4e62-91bf-cc56f16b6df5",
                "title": "Lifetime management and aliasing rules are hard to maintain",
                "isCorrect": true
              },
              {
                "id": "0d2f4018-8afd-4068-b78c-6a2b0d8b8e7f",
                "title": "Iterators are too slow",
                "isCorrect": false
              },
              {
                "id": "dbfec101-8be8-4eb1-9163-cd0c86a6b9cb",
                "title": "FFI doesn't support iterators",
                "isCorrect": false
              },
              {
                "id": "9b231ba3-ba43-467f-9ca0-4384256b50e8",
                "title": "Memory allocation issues",
                "isCorrect": false
              }
            ],
            "descriptionText": "Iterators have complex lifetime relationships that are difficult to express safely in FFI",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "91a658c8-5d13-4caf-ad68-5002648ea765",
            "title": "What is Type Consolidation?",
            "answers": [
              {
                "id": "925c6620-df9b-44d4-9736-62a919488efb",
                "title": "Wrapping multiple related types into a single wrapper type",
                "isCorrect": true
              },
              {
                "id": "1f75bee4-8bf4-4bf4-9f36-efdeb1929ff9",
                "title": "Combining traits into one",
                "isCorrect": false
              },
              {
                "id": "ca5ee03d-3017-4ece-b6cb-4b0fd11b3043",
                "title": "Merging structs together",
                "isCorrect": false
              },
              {
                "id": "5534998d-17d3-44b8-8249-0b02c0ef4a66",
                "title": "Using type aliases",
                "isCorrect": false
              }
            ],
            "descriptionText": "Type consolidation wraps related functionality into one object to minimize unsafe surface area",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c443c6bc-47c2-4c24-bdf2-7855dcb5be6a",
            "title": "Why is Type Consolidation useful for FFI?",
            "answers": [
              {
                "id": "76aafed5-6648-401f-a520-0f5e0c91aafd",
                "title": "It minimizes surface area for memory unsafety",
                "isCorrect": true
              },
              {
                "id": "ed968011-81eb-4a23-88b8-c99f72e88ec9",
                "title": "It makes code faster",
                "isCorrect": false
              },
              {
                "id": "9fa64726-18cb-4efd-b3f2-2a9268ba04cf",
                "title": "It reduces binary size",
                "isCorrect": false
              },
              {
                "id": "54be8e8e-2406-4c3c-a206-7f668c3104d1",
                "title": "It simplifies trait implementations",
                "isCorrect": false
              }
            ],
            "descriptionText": "Consolidating types reduces the number of lifetime and safety invariants that must be maintained",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0491689a-fcfb-47ea-b5fc-caa0bfe8c9e1",
            "title": "What happens if you store an iterator while mutating the collection in FFI?",
            "answers": [
              {
                "id": "8b80620c-8efc-4a7e-b3ca-d8c8940d0d5c",
                "title": "Undefined behavior due to aliasing rule violation",
                "isCorrect": true
              },
              {
                "id": "48d884e1-ac9b-4b5c-af9d-0d94fc439196",
                "title": "Compilation error",
                "isCorrect": false
              },
              {
                "id": "d6a229fc-1b74-4ff6-a885-aa7cc153d4e3",
                "title": "Runtime panic",
                "isCorrect": false
              },
              {
                "id": "5af3ddc2-4422-4778-8d1b-d45a3a7a3fa9",
                "title": "Nothing, it's safe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Having a shared iterator reference while taking a mutable reference violates Rust's aliasing rules",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "dd5d95ff-c9ce-421f-92d4-8021e8015fd2",
            "title": "What is the Interpreter pattern used for?",
            "answers": [
              {
                "id": "d4d211e8-7547-4d13-9e33-3a33006f3f7a",
                "title": "Solving recurring problems by interpreting a domain-specific language",
                "isCorrect": true
              },
              {
                "id": "6c75ff72-3f89-47ea-887b-8fd2c1670dd6",
                "title": "Translating between programming languages",
                "isCorrect": false
              },
              {
                "id": "2a77e446-8017-408c-b779-c9d57e1998f2",
                "title": "Optimizing code execution",
                "isCorrect": false
              },
              {
                "id": "37fda084-6bed-47b0-be0e-730c6e38f6fe",
                "title": "Managing memory",
                "isCorrect": false
              }
            ],
            "descriptionText": "Interpreter pattern defines a language and grammar to solve problem instances",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "567ad502-03f6-418f-a2b8-89df7c875400",
            "title": "What does the Interpreter pattern example convert?",
            "answers": [
              {
                "id": "323ddcd3-5892-4abf-bf93-9f28a1a7e7d3",
                "title": "Infix expressions to postfix notation",
                "isCorrect": true
              },
              {
                "id": "ce91bd24-7fb8-43e2-bbd4-127497104bb7",
                "title": "Binary to decimal",
                "isCorrect": false
              },
              {
                "id": "10ffc5cf-d877-4263-9602-00684d98444e",
                "title": "Strings to integers",
                "isCorrect": false
              },
              {
                "id": "ecadadfc-9941-4953-8db6-1e5bdc295df4",
                "title": "JSON to XML",
                "isCorrect": false
              }
            ],
            "descriptionText": "The example interprets infix mathematical expressions and outputs them in postfix (RPN) format",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "77b5a2ae-5663-4c70-80aa-0c9d83653d1d",
            "title": "What Rust feature is mentioned as related to the Interpreter pattern?",
            "answers": [
              {
                "id": "a76a3128-2b76-4581-9f13-0abc15bedd84",
                "title": "macro_rules!",
                "isCorrect": true
              },
              {
                "id": "022b9c3d-189f-4579-b4ff-9659ef70aaf2",
                "title": "traits",
                "isCorrect": false
              },
              {
                "id": "a163e274-bafe-4995-8444-68add9b62831",
                "title": "async/await",
                "isCorrect": false
              },
              {
                "id": "99dd1ce1-dcb2-429b-9ec7-92097f778833",
                "title": "generics",
                "isCorrect": false
              }
            ],
            "descriptionText": "macro_rules! allows defining custom syntax and expansion rules, similar to interpreter pattern concepts",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "218f2df4-c431-4074-9e32-3958cdc42b67",
            "title": "What is the Newtype pattern?",
            "answers": [
              {
                "id": "f78b7e15-f651-485c-849b-220725a775f3",
                "title": "A tuple struct with a single field wrapping another type",
                "isCorrect": true
              },
              {
                "id": "cb32f841-7690-43d6-83af-287cc39bb0f2",
                "title": "A type alias",
                "isCorrect": false
              },
              {
                "id": "9970484d-5610-4a32-8f9b-85f1d45fd3c1",
                "title": "A generic type",
                "isCorrect": false
              },
              {
                "id": "95ea055a-8a57-41e0-a231-05a8cf12c9f1",
                "title": "An enum with one variant",
                "isCorrect": false
              }
            ],
            "descriptionText": "Newtype uses a tuple struct to create a distinct type that wraps an existing type",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "04c384c6-4050-47a2-b81a-70ae0b2d9b3e",
            "title": "What is the primary motivation for newtypes?",
            "answers": [
              {
                "id": "1449a4a1-5138-4897-848c-eac46fef8320",
                "title": "Abstraction and type safety",
                "isCorrect": true
              },
              {
                "id": "0757cc22-9305-4945-9f8d-3f7935b20d50",
                "title": "Performance optimization",
                "isCorrect": false
              },
              {
                "id": "225ad4b9-4cc1-495f-8c9d-28fb50b214b2",
                "title": "Memory efficiency",
                "isCorrect": false
              },
              {
                "id": "279556b5-bf03-44be-a3f0-9403872e7379",
                "title": "Easier syntax",
                "isCorrect": false
              }
            ],
            "descriptionText": "Newtypes provide abstraction while hiding implementation details and ensuring type safety",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f3c7c552-2b0b-4031-9f83-b8293fe926ba",
            "title": "Are newtypes zero-cost abstractions?",
            "answers": [
              {
                "id": "04b64ab0-ba8c-4048-80aa-9b116c443ac1",
                "title": "Yes, no runtime overhead",
                "isCorrect": true
              },
              {
                "id": "741c5985-7a8a-424f-8f68-72c1deda34ba",
                "title": "No, they add memory overhead",
                "isCorrect": false
              },
              {
                "id": "a2ca1786-da47-4d7c-8819-beaeba69cc3d",
                "title": "No, they add CPU overhead",
                "isCorrect": false
              },
              {
                "id": "5db69b12-92e5-4681-8cb1-971a8ea1a34d",
                "title": "Only in release mode",
                "isCorrect": false
              }
            ],
            "descriptionText": "Newtypes have no runtime cost as they're compiled away to the underlying type",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "320fd186-d267-4f48-83ab-d2b2a4df622e",
            "title": "What is a disadvantage of newtypes?",
            "answers": [
              {
                "id": "84ab91a4-b811-403c-b2fd-ca266ebfad4a",
                "title": "Requires boilerplate for pass-through methods and trait impls",
                "isCorrect": true
              },
              {
                "id": "989f2782-c9ec-42d9-8ede-3e327237590c",
                "title": "Runtime overhead",
                "isCorrect": false
              },
              {
                "id": "3c15c203-2932-47d0-827c-83bfcdee92fc",
                "title": "Memory overhead",
                "isCorrect": false
              },
              {
                "id": "0bd0571c-ca69-4776-993c-e046d761a925",
                "title": "Compilation errors",
                "isCorrect": false
              }
            ],
            "descriptionText": "Each method and trait on the wrapped type must be manually implemented on the newtype",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2c2024fe-8b87-4281-a233-184ada138943",
            "title": "What does RAII stand for?",
            "answers": [
              {
                "id": "af90909f-89be-4592-86dc-6fe1156172e1",
                "title": "Resource Acquisition Is Initialisation",
                "isCorrect": true
              },
              {
                "id": "b8e13c81-e9ae-4d33-b283-aec39f4ae401",
                "title": "Resource Allocation Is Initialization",
                "isCorrect": false
              },
              {
                "id": "4d7fe0f7-f718-4d4b-96f9-19cbd929f284",
                "title": "Rust Automatic Instance Initialization",
                "isCorrect": false
              },
              {
                "id": "9d52d784-061e-4260-8145-caf815224481",
                "title": "Reference And Initialization Interface",
                "isCorrect": false
              }
            ],
            "descriptionText": "RAII is a pattern where resource initialization happens in constructor and cleanup in destructor",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e3b058d1-2bf4-4c5c-8011-12413ca9c6f8",
            "title": "What is the classic example of RAII guards in std?",
            "answers": [
              {
                "id": "11f96a8d-e164-487b-a825-944008516c53",
                "title": "Mutex guards",
                "isCorrect": true
              },
              {
                "id": "a26d9c2c-2d52-4c31-9aeb-b6613012636d",
                "title": "Box",
                "isCorrect": false
              },
              {
                "id": "b2a75207-c873-4099-9dd3-e8ad534be8ae",
                "title": "Vec",
                "isCorrect": false
              },
              {
                "id": "3aae7e5b-16e8-4371-9e4d-5cc629f4f4a9",
                "title": "String",
                "isCorrect": false
              }
            ],
            "descriptionText": "MutexGuard is a guard that automatically unlocks the mutex when dropped",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "033faabb-0170-404d-85e6-4a909d40164b",
            "title": "When is the RAII guard's destructor called?",
            "answers": [
              {
                "id": "0141b8ab-7e5f-4cf1-bda8-03081a9a4588",
                "title": "When it goes out of scope",
                "isCorrect": true
              },
              {
                "id": "2c4f5727-55eb-4cd6-a43a-ef1880bfc1b2",
                "title": "Only when explicitly called",
                "isCorrect": false
              },
              {
                "id": "cc61d334-e681-4cd5-a8d3-0cf2677ba151",
                "title": "At program exit",
                "isCorrect": false
              },
              {
                "id": "c6436e2d-d509-4cd0-800e-b59b3fb41833",
                "title": "When the mutex is locked again",
                "isCorrect": false
              }
            ],
            "descriptionText": "Destructors run automatically when the value goes out of scope, ensuring cleanup",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ae4f0039-3de5-4494-b82e-91012cda7dd4",
            "title": "What trait is commonly implemented on RAII guards?",
            "answers": [
              {
                "id": "3c3f96f9-b3b8-4df1-bab0-1c98fb705503",
                "title": "Deref",
                "isCorrect": true
              },
              {
                "id": "45486c42-265e-4931-8d77-6fe3e9d2eedc",
                "title": "Clone",
                "isCorrect": false
              },
              {
                "id": "c48e1fd8-941b-499e-b8b6-707ab702d0f2",
                "title": "Copy",
                "isCorrect": false
              },
              {
                "id": "868d1155-b369-4822-9387-735a91627b4e",
                "title": "Default",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref allows treating the guard like a pointer to the protected resource",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2fde3f58-eec3-49fb-9155-a6661753c8ab",
            "title": "What does the Visitor pattern separate?",
            "answers": [
              {
                "id": "06177fc0-d8e0-47a4-8d5a-5e739d6f9a0b",
                "title": "Traversal of data from operations performed on each node",
                "isCorrect": true
              },
              {
                "id": "0847a302-44d3-4a19-9799-fd7e00436ae4",
                "title": "Data from methods",
                "isCorrect": false
              },
              {
                "id": "b99446dd-afb7-4ba7-b8ce-767dc20a3701",
                "title": "Public from private interfaces",
                "isCorrect": false
              },
              {
                "id": "12368e40-2c7e-452a-8c6d-db5fd7c2bda4",
                "title": "Mutable from immutable data",
                "isCorrect": false
              }
            ],
            "descriptionText": "Visitor separates the algorithm for traversing from the operations on each element",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9b823b07-f361-44a4-b73e-359660faa8d2",
            "title": "What is the advantage of the Visitor pattern?",
            "answers": [
              {
                "id": "8985f643-7a79-4020-839b-e7b706806fab",
                "title": "Multiple algorithms can be written over the same data without modifying it",
                "isCorrect": true
              },
              {
                "id": "90d0aa74-5842-40c6-9e89-720424b740c3",
                "title": "Faster execution",
                "isCorrect": false
              },
              {
                "id": "f99759c0-202c-4f02-a18c-d91b5934fff8",
                "title": "Less memory usage",
                "isCorrect": false
              },
              {
                "id": "f7205b18-9774-420b-951e-86e9848779fe",
                "title": "Simpler code",
                "isCorrect": false
              }
            ],
            "descriptionText": "Visitor allows adding new operations without changing the data structures themselves",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "57d7afbb-c953-42b0-ae06-10a36f57a235",
            "title": "What helper functions are common in Visitor implementations?",
            "answers": [
              {
                "id": "f98a1470-2abc-4b53-939b-f44beaa39872",
                "title": "walk_* functions for each datum type",
                "isCorrect": true
              },
              {
                "id": "64fcbe6e-d740-4269-820f-d9003aee8f79",
                "title": "build_* functions",
                "isCorrect": false
              },
              {
                "id": "b66f17f9-87f2-448f-bda4-f89be30981b3",
                "title": "create_* functions",
                "isCorrect": false
              },
              {
                "id": "3af533d3-3fff-4f75-91a2-e9404bf0d020",
                "title": "init_* functions",
                "isCorrect": false
              }
            ],
            "descriptionText": "walk_* functions provide default traversal behavior that can be shared between visitors",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c37c7fb2-563e-4652-93af-982275516b85",
            "title": "What is the Builder pattern used for?",
            "answers": [
              {
                "id": "e03b5f72-309e-4610-bfaf-edb824f13517",
                "title": "Constructing objects with calls to a builder helper",
                "isCorrect": true
              },
              {
                "id": "02f31c26-5347-4985-85a1-048bd9cbf65b",
                "title": "Creating multiple instances quickly",
                "isCorrect": false
              },
              {
                "id": "e3006e78-d9eb-460b-bfc1-7fecc1cb89c6",
                "title": "Cloning objects",
                "isCorrect": false
              },
              {
                "id": "37656777-a96b-49d5-bea6-3c0f865532d7",
                "title": "Serializing objects",
                "isCorrect": false
              }
            ],
            "descriptionText": "Builder pattern constructs complex objects step by step through a helper object",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5fc351d3-89db-49f4-99e3-7e745e57cff3",
            "title": "Why is the Builder pattern useful in Rust?",
            "answers": [
              {
                "id": "1f964287-b8f9-4d05-911c-80cc882a1228",
                "title": "Rust lacks method overloading so multiple constructors are difficult",
                "isCorrect": true
              },
              {
                "id": "17708185-52f8-4663-b44f-8d6ec31cf9cd",
                "title": "Rust doesn't allow constructors",
                "isCorrect": false
              },
              {
                "id": "abc71d0a-dfe9-476c-b215-c1cc6a016f4a",
                "title": "Memory safety requirements",
                "isCorrect": false
              },
              {
                "id": "910783ff-5759-4bcc-a0d2-b02bc16adbf9",
                "title": "Performance optimization",
                "isCorrect": false
              }
            ],
            "descriptionText": "Since Rust doesn't have overloading, builders provide a cleaner way to handle multiple construction patterns",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "29ecd784-13fe-4c25-9da5-1bb97d01fd6c",
            "title": "What does the builder's build() method typically do?",
            "answers": [
              {
                "id": "9e9cec21-220a-431d-8939-ae2e29f45ed8",
                "title": "Consumes the builder and creates the final object",
                "isCorrect": true
              },
              {
                "id": "b1df1746-8d87-4a77-818d-d4bcc59eb64d",
                "title": "Returns a reference to the builder",
                "isCorrect": false
              },
              {
                "id": "6426defb-9c73-44ea-af32-3e95a95132ae",
                "title": "Clones the builder",
                "isCorrect": false
              },
              {
                "id": "0bdf7384-b912-4608-aec1-a6ed4e87ae3b",
                "title": "Resets the builder",
                "isCorrect": false
              }
            ],
            "descriptionText": "The build method usually takes self by value and produces the constructed object",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0f8c919c-0cdd-48b7-94c2-91d1ca79dcbe",
            "title": "What is an advantage of taking builder methods by mutable reference?",
            "answers": [
              {
                "id": "85a7b009-d781-4ec9-bfcf-29fa09af96b5",
                "title": "Can reuse the builder as a template",
                "isCorrect": true
              },
              {
                "id": "b510c5d3-1872-4aa2-85f6-2a4cf92f57f0",
                "title": "Better performance",
                "isCorrect": false
              },
              {
                "id": "32bb41a9-d590-45f4-b7f2-05e1490bc825",
                "title": "Less memory usage",
                "isCorrect": false
              },
              {
                "id": "5f9d49dc-a336-41b5-a791-2264dbcc3402",
                "title": "Required by borrow checker",
                "isCorrect": false
              }
            ],
            "descriptionText": "Taking &mut self allows building multiple objects from the same builder configuration",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "03a4050b-33cc-4348-b2c7-6e42cb2cd565",
            "title": "What is the recommendation about crate size?",
            "answers": [
              {
                "id": "e5e8fd7f-f454-4a44-af00-467cc48bb7a9",
                "title": "Prefer small crates that do one thing well",
                "isCorrect": true
              },
              {
                "id": "33c7efd4-0526-487c-9cf0-ffc24633e15b",
                "title": "Make crates as large as possible",
                "isCorrect": false
              },
              {
                "id": "0b60bb67-c4e5-4fb7-bb9a-4062f67edd3b",
                "title": "Always combine related functionality",
                "isCorrect": false
              },
              {
                "id": "df51e09f-ce20-4973-991d-6e5ea7fc32f4",
                "title": "Size doesn't matter",
                "isCorrect": false
              }
            ],
            "descriptionText": "Small, focused crates are easier to understand and promote modularity",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d402febb-9e5b-4eea-9455-865ae2929893",
            "title": "What advantage do small crates provide for compilation?",
            "answers": [
              {
                "id": "cf4d4705-c188-4520-afa3-d1d6a19bef90",
                "title": "More code can be built in parallel",
                "isCorrect": true
              },
              {
                "id": "35ce641b-07bf-43de-a38f-cb407075bf11",
                "title": "Faster single-threaded compilation",
                "isCorrect": false
              },
              {
                "id": "a9f0afec-1e2c-4a8f-ad5a-5c20715b4e4a",
                "title": "Smaller binary size",
                "isCorrect": false
              },
              {
                "id": "9fc2220c-04db-42db-bf5d-005790b6d526",
                "title": "Better optimization",
                "isCorrect": false
              }
            ],
            "descriptionText": "Since the crate is Rust's compilation unit, multiple crates can be compiled simultaneously",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "5720d4da-2f94-4f88-ba53-3ccaf9ce4eec",
            "title": "What is a disadvantage of many small crates?",
            "answers": [
              {
                "id": "bac14911-9478-4203-be98-59adaa052c48",
                "title": "Can lead to dependency hell with conflicting versions",
                "isCorrect": true
              },
              {
                "id": "92de09da-a3e1-4eb3-a535-a9543430d71f",
                "title": "Slower compilation",
                "isCorrect": false
              },
              {
                "id": "8d0b9754-22e9-4df9-b585-094caa831421",
                "title": "More memory usage",
                "isCorrect": false
              },
              {
                "id": "faace485-f2a9-4220-853a-36c08e8c8c8e",
                "title": "Larger binaries",
                "isCorrect": false
              }
            ],
            "descriptionText": "Projects may depend on multiple incompatible versions of the same crate",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4f804412-049e-41f2-817d-e84b77ec3a77",
            "title": "Why might multiple small crates be less optimized than one large crate?",
            "answers": [
              {
                "id": "47ade25f-c47e-4aa3-88d4-9105e29e01c2",
                "title": "Compiler doesn't perform LTO by default",
                "isCorrect": true
              },
              {
                "id": "72f500b2-be84-46a6-a532-16c9fa10f9bf",
                "title": "Small crates can't be optimized",
                "isCorrect": false
              },
              {
                "id": "8b60c9f1-1af5-4428-b935-1b009fc85331",
                "title": "More crates means slower code",
                "isCorrect": false
              },
              {
                "id": "e0b311fe-c773-4a88-8ee3-819807fc8847",
                "title": "The borrow checker is less effective",
                "isCorrect": false
              }
            ],
            "descriptionText": "Link-time optimization across crate boundaries is not enabled by default",
            "descriptionLink": "patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "2fb35ee4-9438-480e-8226-81cfa0784c1a",
        "theme": "Anti-patterns",
        "priority": 3,
        "questions": [
          {
            "id": "1cfd8a0a-a444-43e3-9903-8a357d5d3442",
            "title": "What is the Clone to satisfy the borrow checker anti-pattern?",
            "answers": [
              {
                "id": "5eb043cd-7a3f-42c6-9ad2-b8f1ff4b59d7",
                "title": "Using .clone() to make compiler errors disappear without understanding ownership",
                "isCorrect": true
              },
              {
                "id": "72b628e4-18d6-49d3-921f-d3fbab08faf7",
                "title": "Cloning data for performance optimization",
                "isCorrect": false
              },
              {
                "id": "89fdc5ed-3581-4578-a938-1ffb137c5cce",
                "title": "Using clone() for type conversion",
                "isCorrect": false
              },
              {
                "id": "255f0ac4-2510-4152-adf2-cdd2cd6ec63e",
                "title": "Deliberately copying data when needed",
                "isCorrect": false
              }
            ],
            "descriptionText": "This anti-pattern occurs when beginners clone variables to resolve borrow checker errors without understanding the underlying issue",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0dde3cda-7d96-4ae0-9cea-a86aead17c79",
            "title": "What is the main consequence of using .clone() to satisfy the borrow checker?",
            "answers": [
              {
                "id": "2401b9d1-6e10-4260-8c05-44e6ed30dac5",
                "title": "Changes between the original and clone are not synchronized",
                "isCorrect": true
              },
              {
                "id": "fc630aa8-edaa-46a6-bf56-d62445ea1f13",
                "title": "Compilation fails",
                "isCorrect": false
              },
              {
                "id": "e3a814fd-576c-43ac-a236-bb81edda28da",
                "title": "Runtime panic occurs",
                "isCorrect": false
              },
              {
                "id": "86e3d957-8d33-4059-b9a9-c70479134baa",
                "title": "Memory leak happens",
                "isCorrect": false
              }
            ],
            "descriptionText": "Cloning creates a separate copy of data, so modifications to one don't affect the other",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d5b2c46f-1ab0-457a-b735-f5a307d087fa",
            "title": "Which type is designed to handle clones intelligently?",
            "answers": [
              {
                "id": "82701669-485e-4a0e-bee9-6ea8846f2466",
                "title": "Rc<T>",
                "isCorrect": true
              },
              {
                "id": "d7a70c23-49ff-4c92-8b3a-34c0acd36340",
                "title": "Box<T>",
                "isCorrect": false
              },
              {
                "id": "dbe4969d-97b2-4e25-abe2-4d1adaba7c45",
                "title": "Vec<T>",
                "isCorrect": false
              },
              {
                "id": "ea0c5ea6-c376-41a0-9277-f426221f2f8e",
                "title": "String",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rc<T> internally manages one copy of data and increases reference count when cloned",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d72223d5-51af-4618-8c42-3920c956e8d7",
            "title": "When might using .clone() be acceptable?",
            "answers": [
              {
                "id": "6d5c0a6f-2c7e-4d8a-a5f7-dedee1deebb3",
                "title": "For prototypes or when the developer is learning ownership",
                "isCorrect": true
              },
              {
                "id": "b96845bf-c513-4eb4-b78c-15c07f47f241",
                "title": "In all production code",
                "isCorrect": false
              },
              {
                "id": "57de46d4-11d0-49aa-8ba8-e9967306a216",
                "title": "When performance is critical",
                "isCorrect": false
              },
              {
                "id": "8cd117d4-40a5-4be1-b67d-01c859dd7540",
                "title": "To avoid using references",
                "isCorrect": false
              }
            ],
            "descriptionText": "Clone may be acceptable in learning situations, prototypes, or when readability is prioritized over performance",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8f3ffa0d-596e-4f5a-bf70-fdf9f205ae5b",
            "title": "What tool can detect unnecessary .clone() calls?",
            "answers": [
              {
                "id": "f94a2ec8-297a-4863-82b8-b91b95de00dd",
                "title": "cargo clippy",
                "isCorrect": true
              },
              {
                "id": "68cca157-757d-4123-a887-fa4730464a74",
                "title": "cargo check",
                "isCorrect": false
              },
              {
                "id": "c36ed6ee-9570-4190-bfef-694abf7ddfa9",
                "title": "cargo test",
                "isCorrect": false
              },
              {
                "id": "6a3d2b55-f1fd-4cc6-afb9-774fe514c6e2",
                "title": "cargo build",
                "isCorrect": false
              }
            ],
            "descriptionText": "Clippy is a linting tool that can identify cases where .clone() is not necessary",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fc0ba1f8-8237-403f-bd6a-e73a63c039b3",
            "title": "What is wrong with using #![deny(warnings)] in crate root?",
            "answers": [
              {
                "id": "5a213a8f-0870-4616-8eb5-9e5895e563ed",
                "title": "It opts out of Rust's stability by breaking builds on new warnings",
                "isCorrect": true
              },
              {
                "id": "60a7d0a6-b86d-4124-98f8-8e235af66942",
                "title": "It makes code run slower",
                "isCorrect": false
              },
              {
                "id": "07c6e9de-2e07-4646-84b9-ca2173bff087",
                "title": "It prevents compilation",
                "isCorrect": false
              },
              {
                "id": "de948a3f-3178-44f1-8be0-25667b41179d",
                "title": "It increases binary size",
                "isCorrect": false
              }
            ],
            "descriptionText": "New lints or deprecations can cause builds to fail when warnings become errors",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b14202ac-3bc8-4462-87db-10183cdb48d2",
            "title": "What command-line argument can mitigate #![deny(warnings)] issues?",
            "answers": [
              {
                "id": "09a0964d-2364-4afc-9f36-82e95306310c",
                "title": "--cap-lints=warn",
                "isCorrect": true
              },
              {
                "id": "501e29f9-ab4d-48bc-92b1-026406022846",
                "title": "--allow-warnings",
                "isCorrect": false
              },
              {
                "id": "d668c92a-5c1a-4023-ac03-d456bd32b90b",
                "title": "--ignore-lints",
                "isCorrect": false
              },
              {
                "id": "f025d3ca-f984-4ce9-9865-d2ead8ccdff2",
                "title": "--disable-deny",
                "isCorrect": false
              }
            ],
            "descriptionText": "--cap-lints=warn turns all deny lint errors into warnings",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "48d852dc-f343-4d4f-8227-f39fa365d2da",
            "title": "What is a better alternative to #![deny(warnings)]?",
            "answers": [
              {
                "id": "0ace1035-bf7d-490b-9866-bc452930ae2a",
                "title": "Explicitly deny specific lints by name",
                "isCorrect": true
              },
              {
                "id": "4dfaf242-26c7-48ed-bb39-7b1f9b1408d3",
                "title": "Use #![allow(warnings)]",
                "isCorrect": false
              },
              {
                "id": "92e38e37-36ed-436f-890c-81f9edf3a203",
                "title": "Don't use any lint attributes",
                "isCorrect": false
              },
              {
                "id": "5fcdcb2e-db70-4440-ab1c-608c47b371c7",
                "title": "Only use warn level",
                "isCorrect": false
              }
            ],
            "descriptionText": "Naming specific lints to deny gives more control and prevents unexpected build failures",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ceda1e3f-1f32-4d52-870e-242250d9ab9c",
            "title": "How can you deny warnings without modifying code?",
            "answers": [
              {
                "id": "3e84faad-9da8-4044-a1c0-f6acaf42f958",
                "title": "RUSTFLAGS=\"-D warnings\" cargo build",
                "isCorrect": true
              },
              {
                "id": "9dbbe129-5f3b-4d85-8dd6-35da450630d1",
                "title": "cargo build --strict",
                "isCorrect": false
              },
              {
                "id": "61cf7b68-24fe-4367-af52-81f1b8679e0f",
                "title": "cargo build --deny-warnings",
                "isCorrect": false
              },
              {
                "id": "d8758518-6fd7-4b7c-a966-d7f533b9cda7",
                "title": "Add to Cargo.toml",
                "isCorrect": false
              }
            ],
            "descriptionText": "Setting RUSTFLAGS environment variable allows denying warnings without code changes",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6742afb7-6044-4029-a87d-da753c4ebce0",
            "title": "What is Deref polymorphism?",
            "answers": [
              {
                "id": "2484a81a-6f14-4a93-9a7b-c39003b297ce",
                "title": "Misusing Deref trait to emulate inheritance between structs",
                "isCorrect": true
              },
              {
                "id": "c026d96b-6358-439c-b5de-2585caf3dcd5",
                "title": "Using Deref for custom pointer types",
                "isCorrect": false
              },
              {
                "id": "49a94cb6-f79b-4787-8e0d-1303d62eff7c",
                "title": "Implementing Deref for performance",
                "isCorrect": false
              },
              {
                "id": "ca263f8d-0d38-4d08-99e0-b176b436bb6c",
                "title": "A legitimate polymorphism technique",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref polymorphism is an anti-pattern where Deref is abused to simulate OO inheritance",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1c8d78c4-39ea-42bd-9fd0-f5e961e801be",
            "title": "What is the intended purpose of the Deref trait?",
            "answers": [
              {
                "id": "6bc1c9bc-24e7-4507-b1fa-d8b8562ac3df",
                "title": "Implementation of custom pointer types",
                "isCorrect": true
              },
              {
                "id": "f46390af-bbc7-4a46-b1e8-3cc2ccb61d7a",
                "title": "Emulating inheritance",
                "isCorrect": false
              },
              {
                "id": "aebf4b61-6197-4497-a4ed-05b46a159638",
                "title": "Type conversion",
                "isCorrect": false
              },
              {
                "id": "917b7285-412f-4924-b2ae-f5825696abaf",
                "title": "Method forwarding",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref is designed for custom pointers to convert pointer-to-T to T, not for inheritance",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "22468e3b-f829-49db-ae97-a294bf54eef0",
            "title": "What is a disadvantage of Deref polymorphism?",
            "answers": [
              {
                "id": "ddc9b3d8-d5dd-44e0-a425-7e2e2b1be865",
                "title": "It's a surprising idiom that misuses Deref's intended purpose",
                "isCorrect": true
              },
              {
                "id": "f8f1ee60-b5e2-4747-9577-efbe77fde62b",
                "title": "It causes memory leaks",
                "isCorrect": false
              },
              {
                "id": "5b804261-a198-44fd-a033-9a89dc135a9b",
                "title": "It's slower than alternatives",
                "isCorrect": false
              },
              {
                "id": "1286199a-e133-42a1-9770-ef6a1a0d5bf1",
                "title": "It doesn't compile",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref polymorphism is unexpected and uses implicit mechanisms that can confuse readers",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "784f5b8a-5c09-4da5-bc4f-b05520c4b830",
            "title": "Does Deref polymorphism introduce real subtyping?",
            "answers": [
              {
                "id": "dacb6816-a796-4fd4-b21b-5852aab3b95a",
                "title": "No, it doesn't create true subtyping like in OO languages",
                "isCorrect": true
              },
              {
                "id": "998d821b-fd88-443e-bc48-865f63a1a85d",
                "title": "Yes, full subtyping",
                "isCorrect": false
              },
              {
                "id": "dc2518dc-7904-4c3e-b611-47cff4f7ddf0",
                "title": "Yes, but only for methods",
                "isCorrect": false
              },
              {
                "id": "7fdc76d4-fbc3-40ff-bd85-41eac0fff305",
                "title": "Yes, but only for traits",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref polymorphism doesn't create subtyping relationships and doesn't automatically implement traits",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "38a5a2a6-00f3-4060-9c34-4423659f389b",
            "title": "What inheritance model does Deref polymorphism support?",
            "answers": [
              {
                "id": "adbe1a23-afc3-4e02-b94b-0b8e240c4d0d",
                "title": "Only single inheritance",
                "isCorrect": true
              },
              {
                "id": "5bd13691-ea29-4809-a7cc-b973f44009a1",
                "title": "Multiple inheritance",
                "isCorrect": false
              },
              {
                "id": "c1e74abb-08f1-438a-b819-72596a25de16",
                "title": "Interface-based inheritance",
                "isCorrect": false
              },
              {
                "id": "94a17132-76a0-4682-912d-8c479a76fcde",
                "title": "All inheritance types",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deref polymorphism only supports single inheritance and has no interface concept",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d7e57e2d-d815-43f5-bb26-6dd1e9c01803",
            "title": "What is a better alternative to Deref polymorphism?",
            "answers": [
              {
                "id": "10598b44-dfdb-4ffc-8694-0655e28280b0",
                "title": "Use traits or write explicit facade methods",
                "isCorrect": true
              },
              {
                "id": "c83f0d12-376a-41d4-9097-9a91097896a8",
                "title": "Use more Deref implementations",
                "isCorrect": false
              },
              {
                "id": "ef0442a0-6330-46d5-96a5-98c29c15ddb4",
                "title": "Use unsafe code",
                "isCorrect": false
              },
              {
                "id": "0b0f31cc-c573-4759-9f14-3b0c3ddc601d",
                "title": "Use macros for code generation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Traits or explicit method forwarding provide clearer and more idiomatic solutions",
            "descriptionLink": "anti_patterns_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "1d7b6c8b-e4e8-4555-822b-6d5bae16ddd2",
        "theme": "Functional Programming",
        "priority": 4,
        "questions": [
          {
            "id": "37ccbdf8-817d-452c-abc7-1f8564a3c776",
            "title": "How do Rust's generic types differ from C++ templates?",
            "answers": [
              {
                "id": "3ae763fe-d0f1-4af9-8fe8-c6f6da38ed49",
                "title": "Rust creates distinct types for each parameter, C++ creates copies of boilerplate",
                "isCorrect": true
              },
              {
                "id": "f4fd2b34-6035-49f7-8cc4-564539e56ccb",
                "title": "They work exactly the same way",
                "isCorrect": false
              },
              {
                "id": "f706cda9-89b2-457d-8a4b-9fc064087dc4",
                "title": "Rust templates are faster",
                "isCorrect": false
              },
              {
                "id": "6f344e64-3301-45c8-bca1-65c44c717506",
                "title": "C++ has better type checking",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust uses monomorphization to create distinct types, while C++ templates are meta-programming constructs",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "2e02fbc0-7362-4541-a5f5-cac1b77e91f3",
            "title": "What is monomorphization?",
            "answers": [
              {
                "id": "a92f4133-48fa-4665-98bb-9524c50790e9",
                "title": "Creating different types from polymorphic code",
                "isCorrect": true
              },
              {
                "id": "b99a72fd-d7d3-41ee-b8ce-c74b760ab5b0",
                "title": "Combining multiple types into one",
                "isCorrect": false
              },
              {
                "id": "c759e52a-2137-4428-a3bf-790ce9723453",
                "title": "Runtime type conversion",
                "isCorrect": false
              },
              {
                "id": "9f2a6939-8ce0-4f8a-a7eb-44f4ab65e16b",
                "title": "Type erasure",
                "isCorrect": false
              }
            ],
            "descriptionText": "Monomorphization generates concrete types from generic definitions at compile time",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f3811b61-292e-4cb9-b73b-efeb1a3b0be3",
            "title": "Are Vec<isize> and Vec<char> the same type in Rust?",
            "answers": [
              {
                "id": "360f8416-d600-4570-b539-e8052c3214b9",
                "title": "No, they are distinct types",
                "isCorrect": true
              },
              {
                "id": "c1414f32-86d0-4164-a877-b06e61a78c71",
                "title": "Yes, they are the same type",
                "isCorrect": false
              },
              {
                "id": "3fee234f-2930-485e-99ae-ac1707838a77",
                "title": "Only at runtime they differ",
                "isCorrect": false
              },
              {
                "id": "3aba5cfb-714b-4d6b-95da-4f6e2b3df8d6",
                "title": "Only in debug mode they differ",
                "isCorrect": false
              }
            ],
            "descriptionText": "Generic type parameters create different types that are recognized as distinct by the type system",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e7fe6391-1882-4b86-9fff-f96fe0b0845c",
            "title": "What does using generics as type classes allow?",
            "answers": [
              {
                "id": "203ffd26-74bd-4f62-9ffe-cdb727975930",
                "title": "Different impl blocks for different generic parameters",
                "isCorrect": true
              },
              {
                "id": "7014e46f-590b-46df-a080-4bd19aa43977",
                "title": "Runtime polymorphism",
                "isCorrect": false
              },
              {
                "id": "ba82dd11-bd1d-4b22-80ea-6aa4b7d59578",
                "title": "Dynamic dispatch",
                "isCorrect": false
              },
              {
                "id": "b8057fa3-ff78-4131-89fb-8a5c5478b3d8",
                "title": "Inheritance",
                "isCorrect": false
              }
            ],
            "descriptionText": "Different values for generic types cause different types which can have different implementations",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4b8e77b5-8011-42ac-bd50-d5e99c181d1f",
            "title": "What problem does the generics as type classes pattern solve?",
            "answers": [
              {
                "id": "4db1c079-c67c-4362-a31a-c1fa0075a39b",
                "title": "Moves protocol decisions from runtime to compile time",
                "isCorrect": true
              },
              {
                "id": "2474f33d-c8e7-4c8d-a38f-94046f2c1ae5",
                "title": "Improves runtime performance only",
                "isCorrect": false
              },
              {
                "id": "1f239b7d-c9c5-468f-b44f-ef5f1f30b932",
                "title": "Reduces code size",
                "isCorrect": false
              },
              {
                "id": "a425706c-934d-4b11-ad0f-875e08eb1f31",
                "title": "Simplifies error handling",
                "isCorrect": false
              }
            ],
            "descriptionText": "Using generics allows compile-time verification instead of runtime checks with Option",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e1cfef4c-8b14-464d-ba1d-c774e4911cd7",
            "title": "In the FileDownloadRequest example, what does the generic parameter P represent?",
            "answers": [
              {
                "id": "b2460ecb-af8a-4d35-9b1d-68d7fb932034",
                "title": "The protocol kind (NFS or BOOTP)",
                "isCorrect": true
              },
              {
                "id": "134b5611-583f-4b3f-96de-9f5a81ea307f",
                "title": "The file path",
                "isCorrect": false
              },
              {
                "id": "1e895041-3833-4762-a8dd-71b4a735b66d",
                "title": "The authentication method",
                "isCorrect": false
              },
              {
                "id": "279a84bb-37ce-413e-b9fb-1032f568c773",
                "title": "The request type",
                "isCorrect": false
              }
            ],
            "descriptionText": "The generic P constrains the type to a specific protocol, enabling protocol-specific methods",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a56a7bf6-b14f-4edf-80ae-510036dcba0a",
            "title": "What happens if you call mount_point() on FileDownloadRequest<Bootp>?",
            "answers": [
              {
                "id": "966efe26-80fd-4f22-be2c-d4e5aa03b34a",
                "title": "Compilation error - method doesn't exist for that type",
                "isCorrect": true
              },
              {
                "id": "78a2d264-1db1-4a40-9787-1ddd4ed0fdf7",
                "title": "Returns None",
                "isCorrect": false
              },
              {
                "id": "08fa8225-61ae-46e9-b646-ed2520af43c8",
                "title": "Runtime panic",
                "isCorrect": false
              },
              {
                "id": "dbbb8dcd-0b50-4892-a1cd-e78b1c37def9",
                "title": "Returns empty path",
                "isCorrect": false
              }
            ],
            "descriptionText": "mount_point() is only implemented for FileDownloadRequest<Nfs>, not Bootp",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f637aa9c-79fd-4f00-b6db-35e0e8d89c8c",
            "title": "What is an advantage of using generics as type classes?",
            "answers": [
              {
                "id": "7452db84-7f48-4301-ba16-e5f297ed0683",
                "title": "Common fields are de-duplicated across states",
                "isCorrect": true
              },
              {
                "id": "b0ba354f-bf06-4627-a26e-c603acafa33e",
                "title": "Smaller binary size",
                "isCorrect": false
              },
              {
                "id": "b5f8b642-f905-45b5-a87f-79d3a7c73f76",
                "title": "Faster compilation",
                "isCorrect": false
              },
              {
                "id": "50183a76-39ca-471b-8d19-015352f75daa",
                "title": "Simpler syntax",
                "isCorrect": false
              }
            ],
            "descriptionText": "Shared fields are implemented once generically while state-specific fields remain separate",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ec620b62-95de-4d1f-9ebc-5183f14f43c2",
            "title": "What is a disadvantage of generics as type classes?",
            "answers": [
              {
                "id": "8509689d-1a32-4968-b645-6d77b73b386b",
                "title": "Increases binary size due to monomorphization",
                "isCorrect": true
              },
              {
                "id": "df62d9fc-c3aa-4b7b-8f8b-9938d7b808ee",
                "title": "Slower runtime performance",
                "isCorrect": false
              },
              {
                "id": "49cf8dc2-634b-4967-8f76-5e0821580b28",
                "title": "More complex error messages only",
                "isCorrect": false
              },
              {
                "id": "bab713e7-1673-41ae-afb8-03d77444b942",
                "title": "Cannot be used with traits",
                "isCorrect": false
              }
            ],
            "descriptionText": "Monomorphization creates separate code for each concrete type, increasing binary size",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ac530e5d-6ece-4130-ba2a-907f7fcf9bb3",
            "title": "Which standard library type uses this pattern with to_string()?",
            "answers": [
              {
                "id": "dd6253b8-7858-45a4-903f-e9102fafd80a",
                "title": "Cow only when it contains str",
                "isCorrect": true
              },
              {
                "id": "3b3650d3-82a6-4306-96b6-e5acfe84344b",
                "title": "All Cow types",
                "isCorrect": false
              },
              {
                "id": "be794501-7102-42e8-8798-66747df91d76",
                "title": "Vec<T> for any T",
                "isCorrect": false
              },
              {
                "id": "2ec57675-018d-4ac4-868d-4236e7836171",
                "title": "Option<T>",
                "isCorrect": false
              }
            ],
            "descriptionText": "The to_string method was specialized for Cow<str> specifically",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c42c732b-eef5-4025-81ae-115b146c79e9",
            "title": "What ecosystem uses this pattern for device register configuration?",
            "answers": [
              {
                "id": "37740642-85ee-4008-b4e8-5d38e0433e46",
                "title": "embedded-hal for embedded devices",
                "isCorrect": true
              },
              {
                "id": "3cc7e840-0721-46b5-a38b-f12a5df10157",
                "title": "tokio for async runtime",
                "isCorrect": false
              },
              {
                "id": "da869eb0-9f65-4744-ba4c-6390447415ec",
                "title": "rocket for web frameworks",
                "isCorrect": false
              },
              {
                "id": "c558a19b-79c3-4c93-b9cd-50da17bdd4b1",
                "title": "diesel for databases",
                "isCorrect": false
              }
            ],
            "descriptionText": "embedded-hal uses generics to statically verify pin mode configurations",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bd797201-4d32-4413-9379-15146402e88a",
            "title": "What is the Iso optic?",
            "answers": [
              {
                "id": "2534d03d-cfff-49da-b28e-83d2da0b17ec",
                "title": "A value transformer between two fixed types",
                "isCorrect": true
              },
              {
                "id": "202c86a4-d1d2-47c3-9033-cbbbaef0236e",
                "title": "A generic type converter",
                "isCorrect": false
              },
              {
                "id": "56a9c52b-b2a7-4495-85ce-6294c0eabef2",
                "title": "An error handler",
                "isCorrect": false
              },
              {
                "id": "1987d24f-782f-4380-bcf7-f78862fd76e8",
                "title": "A trait bound",
                "isCorrect": false
              }
            ],
            "descriptionText": "Iso is a pair of functions (serialize/deserialize) that convert between two specific types",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "79b9c007-a4b2-4cff-8246-9efac566a394",
            "title": "What does a Poly Iso do?",
            "answers": [
              {
                "id": "3fec4fc2-5d61-47ba-9c01-5dc3a4b4b5ce",
                "title": "Allows an operation to be generic over any type while returning a single type",
                "isCorrect": true
              },
              {
                "id": "b50ab94b-b977-4600-a649-9e13f2bd7ea0",
                "title": "Converts between two fixed types",
                "isCorrect": false
              },
              {
                "id": "db4da41c-58fe-43db-b4d8-64d66b753e7f",
                "title": "Handles multiple formats",
                "isCorrect": false
              },
              {
                "id": "b0c9a440-b868-44ac-874c-f364c5595ee6",
                "title": "Creates new types dynamically",
                "isCorrect": false
              }
            ],
            "descriptionText": "Poly Iso extends Iso with generics, allowing conversion for any type T",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9b8ab33e-e919-4266-aa61-23ff1523aa17",
            "title": "Which standard library traits represent a Poly Iso?",
            "answers": [
              {
                "id": "e54ce40c-f862-493f-add7-b20117cd149f",
                "title": "FromStr and ToString",
                "isCorrect": true
              },
              {
                "id": "444840ef-7cf0-4cf1-b780-cbcdd5287abc",
                "title": "From and Into",
                "isCorrect": false
              },
              {
                "id": "d84425b8-4460-4d7c-880f-23c20976dbe9",
                "title": "Deref and DerefMut",
                "isCorrect": false
              },
              {
                "id": "1b10e696-6f6c-48c3-b768-d3da8a1e620b",
                "title": "Iterator and IntoIterator",
                "isCorrect": false
              }
            ],
            "descriptionText": "FromStr and ToString form a Poly Iso for string conversion with generic type T",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a53ddaad-5b7a-467d-86ed-4ccc616236fa",
            "title": "What problem does Serde's independent data model solve?",
            "answers": [
              {
                "id": "081a923d-d718-441c-841e-7abd932cfd8a",
                "title": "Scaling issue where every type needs custom serialization code",
                "isCorrect": true
              },
              {
                "id": "224235b2-7063-4ddc-9d83-eeec0905ed2d",
                "title": "Performance optimization",
                "isCorrect": false
              },
              {
                "id": "ce1ca27c-86bc-418e-80e2-8f8ae96ea855",
                "title": "Memory usage",
                "isCorrect": false
              },
              {
                "id": "547eac23-6ec7-442e-a7e3-253c77588d33",
                "title": "Compilation speed",
                "isCorrect": false
              }
            ],
            "descriptionText": "The data model allows code generation to create conversions instead of manual implementation",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "c5313056-0781-49d2-b03b-0e00c93ca3f3",
            "title": "What is a Prism optic?",
            "answers": [
              {
                "id": "de1a5e7d-5526-4795-9de1-77a77c8995e7",
                "title": "One level higher in generics than Poly Isos with an intersecting type",
                "isCorrect": true
              },
              {
                "id": "5440bdc7-81fc-418a-9317-1b8e5959cef1",
                "title": "A simple type converter",
                "isCorrect": false
              },
              {
                "id": "f0deb7f5-c286-474a-9666-e2395700054e",
                "title": "An error handling pattern",
                "isCorrect": false
              },
              {
                "id": "8a5a2ebf-120e-46b6-9f84-61613e4b7fbf",
                "title": "A visitor implementation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Prism adds another generic dimension (like format F) to enable more flexible composition",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "29b421e4-bc7c-451a-b958-a9f1f95ce8ba",
            "title": "What are the three layers in Serde's design?",
            "answers": [
              {
                "id": "45993994-614b-4a24-8a02-9557464de228",
                "title": "Deserialize/Serialize trait, Visitor, and Deserializer",
                "isCorrect": true
              },
              {
                "id": "e2d3b508-64c5-4fa5-a7df-ed99edbcf095",
                "title": "Parser, Formatter, and Writer",
                "isCorrect": false
              },
              {
                "id": "da1caee3-b40b-400d-a08c-79e164690a97",
                "title": "Reader, Processor, and Writer",
                "isCorrect": false
              },
              {
                "id": "764a6341-e636-4168-87e1-653aa0f67e8a",
                "title": "Input, Transform, and Output",
                "isCorrect": false
              }
            ],
            "descriptionText": "These three layers work together to achieve a Prism through indirection",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "76ef2b34-f423-4edc-903f-3bd41b4731cc",
            "title": "What does the Visitor in Serde do?",
            "answers": [
              {
                "id": "67b68db6-ccd5-4f45-a5ac-fa494b1c5cc3",
                "title": "Bridges the data type and format-specific implementations",
                "isCorrect": true
              },
              {
                "id": "b54ce365-0ded-4ec6-896d-3189367d8db0",
                "title": "Parses JSON directly",
                "isCorrect": false
              },
              {
                "id": "6a4e9749-772a-4ff2-828f-facfa01aa1ab",
                "title": "Stores serialized data",
                "isCorrect": false
              },
              {
                "id": "600c68cf-af2e-46cb-9947-98b96261b69b",
                "title": "Handles errors only",
                "isCorrect": false
              }
            ],
            "descriptionText": "Visitor contains logic to construct/destruct between data type and Serde's data model",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e73a2cc5-cda9-4750-8990-bb825451604d",
            "title": "How is a Visitor typically created in Serde?",
            "answers": [
              {
                "id": "bf603d35-a743-444e-9f3f-fcb95b6f0436",
                "title": "Through code generation with a derive macro",
                "isCorrect": true
              },
              {
                "id": "ad444f54-f41e-4a83-b2ee-3474912c255b",
                "title": "Manually implemented for each type",
                "isCorrect": false
              },
              {
                "id": "96e2c684-92c0-4836-a2ab-f22b00803739",
                "title": "Automatically by the compiler",
                "isCorrect": false
              },
              {
                "id": "207120b7-7096-41e7-bd67-db2817528d73",
                "title": "By the Deserializer",
                "isCorrect": false
              }
            ],
            "descriptionText": "The derive macro generates a Visitor implementation based on struct fields",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "76db52b3-bc37-4836-adfa-5c6edc8f7db1",
            "title": "What does the Deserializer trait handle?",
            "answers": [
              {
                "id": "38757607-02ef-49d0-a1f5-946ac59ce047",
                "title": "Format-specific parsing details",
                "isCorrect": true
              },
              {
                "id": "886cce40-c29a-4ce9-a735-845bd12e288a",
                "title": "Type-specific construction",
                "isCorrect": false
              },
              {
                "id": "ff83c6f8-1e84-4b8f-99e7-d240a06ce312",
                "title": "Error messages",
                "isCorrect": false
              },
              {
                "id": "86e65bec-e0c2-409c-9247-ae00794cabb6",
                "title": "Memory allocation",
                "isCorrect": false
              }
            ],
            "descriptionText": "Deserializer implements the format (JSON, TOML, etc.) and is driven by the Visitor",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "fc2f835e-f077-4c2b-a98d-c3fb3dbfe60c",
            "title": "What programming paradigm difference is highlighted at the beginning?",
            "answers": [
              {
                "id": "2ffeee02-a186-426f-aa98-f4e6c32be70a",
                "title": "Imperative describes how, declarative describes what",
                "isCorrect": true
              },
              {
                "id": "b625780c-2a46-4096-aee1-3aa5d2a95ccd",
                "title": "Imperative is faster than declarative",
                "isCorrect": false
              },
              {
                "id": "90ffaa77-72a8-493b-929a-536b622152f7",
                "title": "Declarative uses more memory",
                "isCorrect": false
              },
              {
                "id": "36454415-3039-434c-b0a4-0cbbf2bad704",
                "title": "Imperative is more type-safe",
                "isCorrect": false
              }
            ],
            "descriptionText": "Imperative focuses on step-by-step instructions while declarative focuses on the end result",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "8833c2aa-a3cd-4b94-a880-0f262f7acf93",
            "title": "In the imperative example, how is the sum calculated?",
            "answers": [
              {
                "id": "1c74904d-0538-44b0-886d-1c796f832340",
                "title": "Using a mutable variable and a for loop",
                "isCorrect": true
              },
              {
                "id": "636002ab-0772-44fc-b0cd-f21c1951bf90",
                "title": "Using fold function",
                "isCorrect": false
              },
              {
                "id": "0fe4fa62-8432-4502-bf5f-5f7414fd62a3",
                "title": "Using recursion",
                "isCorrect": false
              },
              {
                "id": "efddccf6-dd55-4f84-bd5d-a1b03f912571",
                "title": "Using map and reduce",
                "isCorrect": false
              }
            ],
            "descriptionText": "The imperative approach explicitly iterates and accumulates the sum step by step",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4347736f-ee92-48a2-a0de-b8d63e262480",
            "title": "What function is used in the declarative example?",
            "answers": [
              {
                "id": "cdbc63b8-3616-458d-aead-4b1a57be98ca",
                "title": "fold",
                "isCorrect": true
              },
              {
                "id": "a4c8fe7f-ff84-4dec-8bcf-f733c162cc63",
                "title": "map",
                "isCorrect": false
              },
              {
                "id": "d221cbdc-85d7-4df9-9123-d2e7d43083e1",
                "title": "filter",
                "isCorrect": false
              },
              {
                "id": "560158be-2b03-4276-b905-6f1b6f3e75c6",
                "title": "reduce",
                "isCorrect": false
              }
            ],
            "descriptionText": "fold is a higher-order function that composes operations, describing what to do rather than how",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f1e3de44-56f4-4cfb-879c-87d35d4cc705",
            "title": "What is currying mentioned in the functional programming context?",
            "answers": [
              {
                "id": "d80ec211-debb-4568-97b0-9af2094d8f19",
                "title": "Creating specialized functions based on type reflection",
                "isCorrect": true
              },
              {
                "id": "2ee47dd7-b7fd-441c-9d94-3f88c78c99d1",
                "title": "Error handling pattern",
                "isCorrect": false
              },
              {
                "id": "eff9c2a4-97c3-4ed8-9c59-d604c17dfdfe",
                "title": "Memory optimization technique",
                "isCorrect": false
              },
              {
                "id": "f079a3ec-1395-47e5-8353-6bc37b3c74ec",
                "title": "Concurrency pattern",
                "isCorrect": false
              }
            ],
            "descriptionText": "Currying allows partial application of functions, which Rust doesn't directly support",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "202acbb3-296f-4c24-8ef4-16a9bcd102a3",
            "title": "Why does Serde need derive macros?",
            "answers": [
              {
                "id": "f0fbaf7d-f8f8-4153-8ff4-82975be9d083",
                "title": "Rust doesn't support currying, so code generation is needed per type",
                "isCorrect": true
              },
              {
                "id": "7af1f8ad-161a-4beb-ac47-4fffc3925d84",
                "title": "For better performance",
                "isCorrect": false
              },
              {
                "id": "9dce6171-abad-4ea3-8006-b73b8257a1d4",
                "title": "To reduce binary size",
                "isCorrect": false
              },
              {
                "id": "2c5026f1-4179-4b29-bc52-40c37f0dee26",
                "title": "For runtime type reflection",
                "isCorrect": false
              }
            ],
            "descriptionText": "Since Rust can't automatically generate type-specific code through currying, macros fill that gap",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "a1737599-32c9-4662-b1e1-7c77eb54ac8c",
            "title": "What does #[derive(Deserialize)] generate?",
            "answers": [
              {
                "id": "09758bd9-30cd-4d96-b064-9fcc8a8981cf",
                "title": "An impl block implementing the Deserialize trait",
                "isCorrect": true
              },
              {
                "id": "e580d16c-3eeb-4a7a-b8a0-8dc9680d5138",
                "title": "A new struct",
                "isCorrect": false
              },
              {
                "id": "2aad6f91-2f04-458d-ba41-2aa86ed5ffe9",
                "title": "A Deserializer implementation",
                "isCorrect": false
              },
              {
                "id": "fb7fa0ac-21c2-4f97-ad4b-9826b80d7112",
                "title": "JSON parsing code",
                "isCorrect": false
              }
            ],
            "descriptionText": "The derive macro generates code to implement Deserialize based on the struct's fields",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "9f1da625-acc5-44c8-9ec2-0cd139a132b9",
            "title": "What is the benefit of Serde's three-layer design?",
            "answers": [
              {
                "id": "e1e9ee9d-32c5-4e01-9d67-ccdc58d81cf5",
                "title": "Types and formats can work together without direct dependencies",
                "isCorrect": true
              },
              {
                "id": "90e1ba9e-f335-4875-9fd0-0a1af6195fe9",
                "title": "Faster serialization",
                "isCorrect": false
              },
              {
                "id": "9594ab74-9e8b-4081-a9b2-5f899e5f9ba7",
                "title": "Smaller memory footprint",
                "isCorrect": false
              },
              {
                "id": "6e70c4c8-2a28-4e34-bf2e-c3471aa81714",
                "title": "Simpler API",
                "isCorrect": false
              }
            ],
            "descriptionText": "Types implement the top layer, formats implement the bottom, and they interoperate through visitors",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "51dc56a9-6b1b-4d2c-8949-454a42b78134",
            "title": "When does the Deserializer call the Visitor?",
            "answers": [
              {
                "id": "b2ed58af-5c2d-4781-ab21-34d1959d583b",
                "title": "As it parses items from the input",
                "isCorrect": true
              },
              {
                "id": "f7ec0706-1936-44e8-a2b5-513570f0198b",
                "title": "Before parsing starts",
                "isCorrect": false
              },
              {
                "id": "d624d91d-adcb-4b11-a7b6-b8261d99bd44",
                "title": "After parsing completes",
                "isCorrect": false
              },
              {
                "id": "79148667-12fa-43d5-8a72-44bd9c55fa0a",
                "title": "Only on errors",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Deserializer drives the Visitor by calling its methods as data elements are encountered",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "591dab2a-77f8-4f71-b441-c5765cabaf0c",
            "title": "What does the Visitor do if unexpected items are found?",
            "answers": [
              {
                "id": "d3a09533-9ad1-4a15-b8c9-9b06c90e3e73",
                "title": "Raise an error to indicate deserialization failed",
                "isCorrect": true
              },
              {
                "id": "e6ca7fad-d485-4fed-a9b8-98d26cbe0cd7",
                "title": "Ignore the items",
                "isCorrect": false
              },
              {
                "id": "0173419d-c838-4f61-9a65-3102bb5dfab3",
                "title": "Create default values",
                "isCorrect": false
              },
              {
                "id": "e4730484-b494-48f7-bfad-b153122cd37e",
                "title": "Continue silently",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Visitor validates that the data structure matches expectations and reports errors",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "6439810e-dd9e-4a58-9272-38f06a0d78fe",
            "title": "What determines the observation pattern expected by the Visitor?",
            "answers": [
              {
                "id": "2ef42942-0528-4c45-9747-c49392c9b83b",
                "title": "The structure and fields of the type being deserialized",
                "isCorrect": true
              },
              {
                "id": "b23c8b14-b57e-470e-a89e-3175dd86b5b0",
                "title": "The format being parsed",
                "isCorrect": false
              },
              {
                "id": "d879e7c7-9f18-47ac-ac8b-82c3c225b549",
                "title": "Runtime configuration",
                "isCorrect": false
              },
              {
                "id": "9694e2dd-12d0-477e-a783-1dcc82e1fde5",
                "title": "User input",
                "isCorrect": false
              }
            ],
            "descriptionText": "The Visitor's expected pattern is based on the type's structure, typically generated by macros",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "41290ff9-eea7-4417-bf47-4e52734664ec",
            "title": "Why doesn't direct Poly Iso work well for multiple formats?",
            "answers": [
              {
                "id": "ac085ed4-4142-4313-aff4-6e56ab102ac1",
                "title": "Would require rewriting all code generation for each format",
                "isCorrect": true
              },
              {
                "id": "b9b96b90-0548-4215-9040-5ff85663b504",
                "title": "Too slow at runtime",
                "isCorrect": false
              },
              {
                "id": "bb397977-fe71-495b-b4df-57c5efb24f99",
                "title": "Uses too much memory",
                "isCorrect": false
              },
              {
                "id": "60e79100-3878-4540-b34c-3c822f1b806e",
                "title": "Doesn't compile",
                "isCorrect": false
              }
            ],
            "descriptionText": "Without an intermediate layer, each format would need its own separate implementation",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "4b3520b9-9cc4-4b14-8df4-89d947c81c14",
            "title": "What Rust limitation makes implementing Prism directly difficult?",
            "answers": [
              {
                "id": "9d1876a4-5981-458b-90e0-62732513a299",
                "title": "Lack of support for certain generic type boundaries",
                "isCorrect": true
              },
              {
                "id": "f0857136-fc95-4632-84eb-7a4381f00a57",
                "title": "No trait support",
                "isCorrect": false
              },
              {
                "id": "638fe5fe-b113-4893-96dc-d174c7eefd63",
                "title": "No generic support",
                "isCorrect": false
              },
              {
                "id": "e4c2c935-6b7d-4ad5-9af4-869f2984665c",
                "title": "No macro support",
                "isCorrect": false
              }
            ],
            "descriptionText": "The required generic type boundaries for direct Prism implementation aren't supported in Rust",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "b2ecdc55-6a71-4f9a-bad2-419e31943de1",
            "title": "What is the main takeaway about Rust's type system from these patterns?",
            "answers": [
              {
                "id": "811d0db2-5bc0-46b3-9d44-2cdde2150d8d",
                "title": "It's designed more like functional languages than imperative ones",
                "isCorrect": true
              },
              {
                "id": "a380a80d-6b02-4d3e-8799-d89302dd30df",
                "title": "It's identical to C++",
                "isCorrect": false
              },
              {
                "id": "d73bbe9a-ec12-4c2b-a1da-f82a640d137b",
                "title": "It doesn't support generic programming",
                "isCorrect": false
              },
              {
                "id": "fc2657ab-a308-42f7-8cf7-bb9104fa59c8",
                "title": "It requires runtime type checking",
                "isCorrect": false
              }
            ],
            "descriptionText": "Rust's type system takes inspiration from functional programming, enabling compile-time guarantees",
            "descriptionLink": "functional_programming_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      },
      {
        "id": "ab1c751d-ceb0-4a0e-b74f-f573a9cd05b5",
        "theme": "Design Principles",
        "priority": 5,
        "questions": [
          {
            "id": "7468bfc4-fc0e-4994-a991-b4e60442fccb",
            "title": "What does the Single Responsibility Principle (SRP) state?",
            "answers": [
              {
                "id": "8ec52cff-5e55-44c2-b34e-5bff50974fb3",
                "title": "A class should only have a single responsibility",
                "isCorrect": true
              },
              {
                "id": "4b79e02d-c182-427d-a9af-d166fa39fac9",
                "title": "A class should have multiple responsibilities",
                "isCorrect": false
              },
              {
                "id": "48ba2d7c-25a4-4526-a969-fabcba9e6de5",
                "title": "A class should never change",
                "isCorrect": false
              },
              {
                "id": "2de28df9-b9ae-4024-8715-1ed62e00c811",
                "title": "A class should be as small as possible",
                "isCorrect": false
              }
            ],
            "descriptionText": "SRP states that only changes to one part of the software's specification should affect the class",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "46739c36-16a0-41b5-8f71-f58a569f26c9",
            "title": "What does the Open/Closed Principle (OCP) mean?",
            "answers": [
              {
                "id": "10c7f264-fb2c-49e2-a7a5-88892fda11ae",
                "title": "Software entities should be open for extension but closed for modification",
                "isCorrect": true
              },
              {
                "id": "bfe96c0d-eb54-40fe-8e10-819d12bb2b53",
                "title": "Classes should always be open to modification",
                "isCorrect": false
              },
              {
                "id": "bdb332a5-c12b-48df-a048-6aaf6649445a",
                "title": "Interfaces should be closed to extension",
                "isCorrect": false
              },
              {
                "id": "f177e31a-4880-4b0a-b087-3c5e9ddb587c",
                "title": "Code should be open source",
                "isCorrect": false
              }
            ],
            "descriptionText": "OCP allows extending behavior without modifying existing code",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "1b801d7d-c758-44b2-ba7a-78b11c0312f4",
            "title": "What is the Liskov Substitution Principle (LSP)?",
            "answers": [
              {
                "id": "d71f36ff-411f-4023-9e31-4a7a9af9d8ff",
                "title": "Objects should be replaceable with instances of their subtypes without altering correctness",
                "isCorrect": true
              },
              {
                "id": "2aa6edb5-82c6-4434-85d3-792846bb268a",
                "title": "Subtypes must have more methods than parent types",
                "isCorrect": false
              },
              {
                "id": "9f419200-cd10-4798-b8a9-1b1d3ff50545",
                "title": "Objects cannot be substituted",
                "isCorrect": false
              },
              {
                "id": "245fd99d-99ea-4a5f-9f0c-eecbde665c8e",
                "title": "Only interfaces can be substituted",
                "isCorrect": false
              }
            ],
            "descriptionText": "LSP ensures that subtypes can stand in for their parent types without breaking the program",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "41333fdf-6d93-4c17-8ff9-a92eab583dc7",
            "title": "What does the Interface Segregation Principle (ISP) recommend?",
            "answers": [
              {
                "id": "98a0047a-9b66-4eba-b93c-5ca41ee4d1dc",
                "title": "Many client-specific interfaces are better than one general-purpose interface",
                "isCorrect": true
              },
              {
                "id": "f6427e97-eb94-47f5-bac4-6a0d9427662c",
                "title": "One large interface is better than many small ones",
                "isCorrect": false
              },
              {
                "id": "31af515b-1c05-40d2-b9db-cbedffe554df",
                "title": "Interfaces should never be split",
                "isCorrect": false
              },
              {
                "id": "73d1ec2e-52bd-488f-abf5-a5b798870e81",
                "title": "All interfaces should have the same methods",
                "isCorrect": false
              }
            ],
            "descriptionText": "ISP prevents forcing clients to depend on interfaces they don't use",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e41f32f1-b3c2-4466-bc60-67dbd9648ce0",
            "title": "What is the Dependency Inversion Principle (DIP)?",
            "answers": [
              {
                "id": "8bc0cbbd-323c-42f1-ae2b-bd506d737763",
                "title": "Depend upon abstractions, not concretions",
                "isCorrect": true
              },
              {
                "id": "b22a34bf-c86c-4c7b-ad1f-623496f87da4",
                "title": "Depend on concrete implementations",
                "isCorrect": false
              },
              {
                "id": "55febd77-cabb-49b9-aa36-00c284fde14d",
                "title": "Never use abstractions",
                "isCorrect": false
              },
              {
                "id": "4adc34a2-1f6c-4378-b574-789552348684",
                "title": "Dependencies should be circular",
                "isCorrect": false
              }
            ],
            "descriptionText": "DIP states that high-level modules should not depend on low-level modules, both should depend on abstractions",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "7b7192ce-e5af-4e36-8608-217c3b18695d",
            "title": "What does Composition over Inheritance mean?",
            "answers": [
              {
                "id": "f381ee06-5dce-4822-94c4-dd0913a1e1c2",
                "title": "Classes should favor composition for code reuse over inheritance",
                "isCorrect": true
              },
              {
                "id": "5f5db3a2-3325-427a-8f2e-5d1e2af83f82",
                "title": "Always use inheritance instead of composition",
                "isCorrect": false
              },
              {
                "id": "c7e4d4c6-d057-4e06-9e4f-0c4e7c878fc8",
                "title": "Never use composition",
                "isCorrect": false
              },
              {
                "id": "5db0731e-f226-4e13-9fb3-4d9d036e0eec",
                "title": "Inheritance is always better",
                "isCorrect": false
              }
            ],
            "descriptionText": "Composition provides more flexibility by containing instances of other classes rather than inheriting",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "e05d1fe0-1de8-4e1f-aa0d-31184e169f05",
            "title": "What is the DRY principle?",
            "answers": [
              {
                "id": "515eb62f-ca4f-4ce4-8022-682a3346f4a1",
                "title": "Don't Repeat Yourself - every piece of knowledge must have a single representation",
                "isCorrect": true
              },
              {
                "id": "6adab3ec-8335-4ec6-bc00-8d140ed46d08",
                "title": "Duplicate code for better performance",
                "isCorrect": false
              },
              {
                "id": "af397a18-0cc5-41f1-a127-9dde3dc1c3ce",
                "title": "Repeat important code for clarity",
                "isCorrect": false
              },
              {
                "id": "f094d997-efe8-4822-9f7c-17c7342211fe",
                "title": "Don't Reuse Yourself",
                "isCorrect": false
              }
            ],
            "descriptionText": "DRY ensures each piece of knowledge has a single, unambiguous, authoritative representation",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f7f54c99-af8f-4a04-9468-29655c980e22",
            "title": "What does the KISS principle stand for?",
            "answers": [
              {
                "id": "dc626e46-f056-473d-a647-add0fb3996b0",
                "title": "Keep It Simple, Stupid",
                "isCorrect": true
              },
              {
                "id": "a7efeb74-415f-4f16-a5f7-8443be6e9e9a",
                "title": "Keep Implementing Smart Solutions",
                "isCorrect": false
              },
              {
                "id": "670b3462-a87b-4168-a5de-37839451160b",
                "title": "Knowledge Is Super Smart",
                "isCorrect": false
              },
              {
                "id": "d4a7dbb6-14dc-4373-b67b-70f5c154be20",
                "title": "Keep Iterating Simple Structures",
                "isCorrect": false
              }
            ],
            "descriptionText": "KISS states that simplicity should be a key goal and unnecessary complexity should be avoided",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "d1a124a8-0181-44d4-84a4-1eb2b43cb475",
            "title": "What is the Law of Demeter (LoD)?",
            "answers": [
              {
                "id": "91b41579-0f64-4d70-9c64-95ee70eb877d",
                "title": "An object should assume as little as possible about the structure of anything else",
                "isCorrect": true
              },
              {
                "id": "6719b679-ae60-4a90-842b-760002fb0cee",
                "title": "Objects should know everything about each other",
                "isCorrect": false
              },
              {
                "id": "85a0dc43-c03e-4bf4-9589-901bd121fda6",
                "title": "All objects must be public",
                "isCorrect": false
              },
              {
                "id": "b372ba12-4d5f-436e-a18b-0ecd23ad32b7",
                "title": "Objects should share all their data",
                "isCorrect": false
              }
            ],
            "descriptionText": "LoD is also known as the principle of least knowledge or information hiding",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "841a81ad-2fed-41d3-b093-745d0a50976a",
            "title": "What does Design by Contract (DbC) require?",
            "answers": [
              {
                "id": "7e631436-9cd5-4d36-8208-ea659e34d9f2",
                "title": "Define formal interface specifications with preconditions, postconditions and invariants",
                "isCorrect": true
              },
              {
                "id": "a9cb1d5f-23ad-4289-901f-cbb97d7ce3cb",
                "title": "No documentation is needed",
                "isCorrect": false
              },
              {
                "id": "6e6ee7fc-ea2a-4297-b82e-58e1e40b3b6f",
                "title": "Only write tests",
                "isCorrect": false
              },
              {
                "id": "e18a0cde-8d52-4af0-9bc1-af7184731b9b",
                "title": "Contracts are optional",
                "isCorrect": false
              }
            ],
            "descriptionText": "DbC extends abstract data types with formal specifications that define expected behavior",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "46f97122-66ae-4e6d-b283-504a25613e9f",
            "title": "What is Encapsulation?",
            "answers": [
              {
                "id": "a4a14cd9-1ab0-4160-b9b1-87a19f150a7d",
                "title": "Bundling data with methods that operate on it and restricting direct access",
                "isCorrect": true
              },
              {
                "id": "d6e93fc3-c5c8-4a76-90d9-2ab72221d233",
                "title": "Making all fields public",
                "isCorrect": false
              },
              {
                "id": "b288d57c-82bb-424d-a218-7df90c0421e2",
                "title": "Never using methods",
                "isCorrect": false
              },
              {
                "id": "d8ba040f-5e53-4c61-bd5a-430a3573c133",
                "title": "Exposing all internal state",
                "isCorrect": false
              }
            ],
            "descriptionText": "Encapsulation hides internal state and prevents unauthorized direct access to components",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "bcd0d78a-33cf-4565-8100-72c57ad87717",
            "title": "What does Command-Query Separation (CQS) state?",
            "answers": [
              {
                "id": "acd77254-32ce-43f8-9af7-2c296f6141fb",
                "title": "Functions should not produce side effects, only commands may produce side effects",
                "isCorrect": true
              },
              {
                "id": "df49e2c0-7fef-41a2-bbc0-8f066af66826",
                "title": "All functions should have side effects",
                "isCorrect": false
              },
              {
                "id": "c9f9a954-84fc-4146-b621-3c2856b99e09",
                "title": "Queries and commands should be mixed",
                "isCorrect": false
              },
              {
                "id": "03514cf4-3bae-47f4-afe8-23de04e9f2e7",
                "title": "Side effects are always good",
                "isCorrect": false
              }
            ],
            "descriptionText": "CQS separates methods that change state (commands) from those that return data (queries)",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ef47a426-f3af-41ce-a02d-f05fe080743a",
            "title": "What is the Principle of Least Astonishment (POLA)?",
            "answers": [
              {
                "id": "fbbdaf41-ee57-495e-a6b2-0c61bf26b27c",
                "title": "A component should behave in a way that most users expect",
                "isCorrect": true
              },
              {
                "id": "e41b9023-388c-4afe-9315-c0be0a5b6379",
                "title": "Components should always surprise users",
                "isCorrect": false
              },
              {
                "id": "c79a496e-83ec-4ec0-9e2a-c9961f40d485",
                "title": "Behavior should be unpredictable",
                "isCorrect": false
              },
              {
                "id": "84d830a2-cecf-416f-af8b-5338d141e66a",
                "title": "Users should never understand the system",
                "isCorrect": false
              }
            ],
            "descriptionText": "POLA ensures behavior should not astonish or surprise users, meeting their expectations",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "84b1a270-bf70-430d-bac9-ab0f028071b1",
            "title": "What is the Linguistic-Modular-Units principle?",
            "answers": [
              {
                "id": "c54a5281-c427-416b-94a7-df937b5c4fd8",
                "title": "Modules must correspond to syntactic units in the language used",
                "isCorrect": true
              },
              {
                "id": "2cdd6c37-026f-4efc-8fe8-ff1d8f747efa",
                "title": "Modules can be randomly organized",
                "isCorrect": false
              },
              {
                "id": "e28f6cf9-e939-4b48-bce7-a883b08542dc",
                "title": "Language syntax doesn't matter",
                "isCorrect": false
              },
              {
                "id": "3df248f8-1869-4587-9cc2-73aa1b7a3a54",
                "title": "Modules should ignore language features",
                "isCorrect": false
              }
            ],
            "descriptionText": "Modules should align with the language's natural structure and syntax",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "23f68c9e-a2d4-4f24-9a97-4bd472e17c27",
            "title": "What does Self-Documentation mean?",
            "answers": [
              {
                "id": "0b94cd3c-b510-4171-a05b-cfa59876fd89",
                "title": "All information about a module should be part of the module itself",
                "isCorrect": true
              },
              {
                "id": "8f155d62-4173-4532-9f25-b644e84f83d5",
                "title": "Never write any documentation",
                "isCorrect": false
              },
              {
                "id": "cdfe3d73-b358-41e5-b422-b76c62b9b56f",
                "title": "Documentation should be separate from code",
                "isCorrect": false
              },
              {
                "id": "3f73c053-4208-43d8-b196-7a1f181241f6",
                "title": "Modules should have no information",
                "isCorrect": false
              }
            ],
            "descriptionText": "The module should contain all necessary information within itself for understanding",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "f8ab3a06-6ce6-4258-936f-39f04ec07095",
            "title": "What is Uniform-Access principle?",
            "answers": [
              {
                "id": "dc748bd6-216b-41c4-911c-95cf7d5aa66a",
                "title": "All services should be available through uniform notation regardless of implementation",
                "isCorrect": true
              },
              {
                "id": "6997fe1c-28a0-4e55-96c4-463b9e718445",
                "title": "Storage and computation must use different notations",
                "isCorrect": false
              },
              {
                "id": "22e7814f-1f2c-4cd9-ba4d-8e41572aa578",
                "title": "Services should reveal their implementation",
                "isCorrect": false
              },
              {
                "id": "94e0a917-b114-4157-930e-d70534ddbe04",
                "title": "Each service needs unique access syntax",
                "isCorrect": false
              }
            ],
            "descriptionText": "Users shouldn't know whether a service is implemented through storage or computation",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "99c73255-f29e-4532-b7b6-4139669f2345",
            "title": "What does Single-Choice principle state?",
            "answers": [
              {
                "id": "6ee1f80e-44db-4d1b-a5d6-db9dbb058046",
                "title": "One and only one module should know the exhaustive list of alternatives",
                "isCorrect": true
              },
              {
                "id": "516297cd-587c-47ef-b1a4-871c29c4bbe2",
                "title": "Every module should know all alternatives",
                "isCorrect": false
              },
              {
                "id": "f0078e25-2c0d-4feb-981c-a9a4ca5b2eb7",
                "title": "No module should know alternatives",
                "isCorrect": false
              },
              {
                "id": "9b1ebed1-aee1-41af-9d90-73f9c323eda6",
                "title": "Multiple modules should duplicate alternative lists",
                "isCorrect": false
              }
            ],
            "descriptionText": "When supporting alternatives, centralize the knowledge in a single module",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "733a3631-aab7-4316-855c-f4a9a5aa008e",
            "title": "What is Persistence-Closure principle?",
            "answers": [
              {
                "id": "89894bdf-d366-4fc8-bb7a-12c785f1db17",
                "title": "When storing an object, store its dependents; when retrieving, retrieve its dependents",
                "isCorrect": true
              },
              {
                "id": "84d03487-3688-46cd-940b-0fb059a313d0",
                "title": "Never store dependent objects",
                "isCorrect": false
              },
              {
                "id": "919352de-c05c-4365-9555-add1a7ce0359",
                "title": "Objects should be stored independently always",
                "isCorrect": false
              },
              {
                "id": "2b17c23c-f7f1-4950-bf72-9ead80e61efb",
                "title": "Dependents are not important",
                "isCorrect": false
              }
            ],
            "descriptionText": "Storage and retrieval mechanisms must handle object dependencies consistently",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ae69dd7d-bf29-48ba-ab45-3b044cc327b9",
            "title": "Which SOLID principle prevents interface pollution?",
            "answers": [
              {
                "id": "dd7e0943-ec5c-455f-944b-7b9f75184fdc",
                "title": "Interface Segregation Principle (ISP)",
                "isCorrect": true
              },
              {
                "id": "3e7f19cb-a663-45b0-b57a-13dae53902ed",
                "title": "Single Responsibility Principle (SRP)",
                "isCorrect": false
              },
              {
                "id": "141e2398-e880-4b01-8ddc-8c45fa25812b",
                "title": "Dependency Inversion Principle (DIP)",
                "isCorrect": false
              },
              {
                "id": "67ee8a5f-b724-4f35-a2a8-88482b6dd4be",
                "title": "Open/Closed Principle (OCP)",
                "isCorrect": false
              }
            ],
            "descriptionText": "ISP prevents clients from being forced to implement interfaces they don't use",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ea72e9a6-1e89-40b3-a121-ecbe111d488b",
            "title": "Which principle helps with code maintainability by reducing duplication?",
            "answers": [
              {
                "id": "1cc1d080-3411-4001-9174-cf4a252bf30c",
                "title": "DRY (Don't Repeat Yourself)",
                "isCorrect": true
              },
              {
                "id": "52eeefad-0301-4bfa-b371-2a50f9ff8add",
                "title": "KISS",
                "isCorrect": false
              },
              {
                "id": "fff4ac6e-30be-478e-97dc-44c942a35d0c",
                "title": "YAGNI",
                "isCorrect": false
              },
              {
                "id": "b09dc17c-173c-44eb-b29e-cecb75ff0265",
                "title": "POLA",
                "isCorrect": false
              }
            ],
            "descriptionText": "DRY eliminates redundancy by ensuring single authoritative representations of knowledge",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "09adf56f-7c9a-4618-b4e8-ce3bb25e0cb3",
            "title": "What benefit does the Law of Demeter provide?",
            "answers": [
              {
                "id": "d0ba6bf1-b0df-4767-a18d-901d13d12947",
                "title": "Reduces coupling between objects",
                "isCorrect": true
              },
              {
                "id": "ebe37dc9-8614-4993-9ac6-769973f6e836",
                "title": "Increases dependencies",
                "isCorrect": false
              },
              {
                "id": "8ed1d081-3f38-4568-916f-b6f918b5b1b7",
                "title": "Makes all fields public",
                "isCorrect": false
              },
              {
                "id": "529cb4b0-a987-4e1b-bd53-4f4576158fcf",
                "title": "Requires more documentation",
                "isCorrect": false
              }
            ],
            "descriptionText": "LoD reduces coupling by limiting knowledge about other objects' structures",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "16acdd86-f23d-4ba0-a178-9b2a1f0b83aa",
            "title": "How does Encapsulation improve security?",
            "answers": [
              {
                "id": "9017d31d-b33a-4437-83bf-d6d90c2c0323",
                "title": "By hiding internal state and preventing unauthorized access",
                "isCorrect": true
              },
              {
                "id": "64183577-c2e9-4963-a792-a11cd26a2e44",
                "title": "By making everything public",
                "isCorrect": false
              },
              {
                "id": "b166ddbf-cbbd-4cbc-9208-ec46ab8d667b",
                "title": "By removing all methods",
                "isCorrect": false
              },
              {
                "id": "12969c19-9aac-49ae-96ee-dcd31d39a315",
                "title": "By exposing implementation details",
                "isCorrect": false
              }
            ],
            "descriptionText": "Encapsulation restricts direct access to internal components, protecting data integrity",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "372f84fc-54fe-476d-9e1f-6ac60851cf12",
            "title": "What is the main goal of Command-Query Separation?",
            "answers": [
              {
                "id": "64165051-3b88-4c65-b376-db8ec5721708",
                "title": "Separate methods that change state from those that return data",
                "isCorrect": true
              },
              {
                "id": "7bc2fde2-8706-499e-b9f3-49f0291504d2",
                "title": "Combine all operations into one method",
                "isCorrect": false
              },
              {
                "id": "a335c7fd-c7ca-484b-8472-4d4e878e461a",
                "title": "Make all methods have side effects",
                "isCorrect": false
              },
              {
                "id": "cf029014-4385-4c48-a8f6-85a78895e728",
                "title": "Prevent any state changes",
                "isCorrect": false
              }
            ],
            "descriptionText": "CQS improves predictability by clearly distinguishing between commands and queries",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "ab45c447-217c-46d3-8bfa-d0723425f3a7",
            "title": "Why is the Principle of Least Astonishment important for UX?",
            "answers": [
              {
                "id": "05d415b7-0b72-4f49-9a57-04f7ed055433",
                "title": "Users can work more efficiently when behavior matches expectations",
                "isCorrect": true
              },
              {
                "id": "f66c73ce-71e5-4400-b7f6-c3e49d031570",
                "title": "Surprising behavior is always better",
                "isCorrect": false
              },
              {
                "id": "1a2fb004-b86c-45bc-956e-52bc3bf5daa9",
                "title": "It makes systems more complex",
                "isCorrect": false
              },
              {
                "id": "ad93a96d-926f-42f0-b4fc-b79afd167cee",
                "title": "Users should always be confused",
                "isCorrect": false
              }
            ],
            "descriptionText": "POLA reduces cognitive load by making systems behave as users naturally expect",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          },
          {
            "id": "0683cd2c-4ff3-42d5-9764-ddb45999d564",
            "title": "How does Composition over Inheritance improve flexibility?",
            "answers": [
              {
                "id": "3c856a8c-3083-4997-911c-4279a012b999",
                "title": "Allows runtime behavior changes by composing different objects",
                "isCorrect": true
              },
              {
                "id": "9da81197-b123-4f88-86dd-6a8152ed6aa2",
                "title": "Makes code harder to change",
                "isCorrect": false
              },
              {
                "id": "13a38514-56b1-449b-ba71-81398f92b8da",
                "title": "Requires deep inheritance hierarchies",
                "isCorrect": false
              },
              {
                "id": "f6553236-c578-45a0-aeee-206c14dafb14",
                "title": "Prevents code reuse",
                "isCorrect": false
              }
            ],
            "descriptionText": "Composition provides greater flexibility than inheritance by allowing dynamic behavior assembly",
            "descriptionLink": "design_principles_link",
            "hasUserAnswered": false,
            "isUserAnswerCorrect": false
          }
        ]
      }
    ]
  }
]