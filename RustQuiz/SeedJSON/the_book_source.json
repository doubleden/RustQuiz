{
  "id": "38f194cf-7c21-4f39-8a14-f85487b71127",
  "title": "The Book",
  "priority": 1,
  "quizzes": [
    {
      "id": "36ff1126-8f6e-4b2e-a1bd-f3aea9e861f8",
      "theme": "Common Programming Concepts",
      "priority": 1,
      "questions": [
        {
          "id": "97a0fa57-58ab-461f-94f2-0c00703f7b79",
          "title": "How are variables declared by default in Rust?",
          "answers": [
            {
              "id": "9c47aee0-1deb-4b1e-92da-dfc54eb29943",
              "title": "Mutable",
              "isCorrect": false
            },
            {
              "id": "4392a1fa-7d0d-4b2a-983b-95cd8bbe1afe",
              "title": "Immutable",
              "isCorrect": true
            },
            {
              "id": "0e3266ab-b3d5-4022-ac98-ea7178ee62ca",
              "title": "Dynamic",
              "isCorrect": false
            },
            {
              "id": "073456d5-a614-4d9b-ab67-020baa21d326",
              "title": "By Reference",
              "isCorrect": false
            }
          ],
          "descriptionText": "let creates an immutable binding mutability is only via mut",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "01993e17-8147-4c50-993c-19c5f3abe434",
          "title": "To make a variable mutable, you need:",
          "answers": [
            {
              "id": "68681e70-70c7-413f-bf00-a0c2acef53ab",
              "title": "var",
              "isCorrect": false
            },
            {
              "id": "956a8d9d-f612-4371-bb3b-40f6b0a2341e",
              "title": "mut",
              "isCorrect": true
            },
            {
              "id": "0ddfaf2b-dd7c-4d06-8e78-1556cf24bf68",
              "title": ":=",
              "isCorrect": false
            },
            {
              "id": "3e6d7a63-c27e-4124-8fb8-2bdd363d68c5",
              "title": "Nothing",
              "isCorrect": false
            }
          ],
          "descriptionText": "let mut x = ... is the only syntax to allow mutation",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "672aa6f7-e6ca-4c64-9446-1fc0db7a02f0",
          "title": "What will happen?\n\nlet x = 5\nx = 10;",
          "answers": [
            {
              "id": "1c1bed1f-4e57-40be-8d0d-5f02d094f04d",
              "title": "Compilation error because of missing semicolon after 5",
              "isCorrect": false
            },
            {
              "id": "6b559a5c-e847-4626-8d0b-703ebe214e36",
              "title": "Will print 10",
              "isCorrect": false
            },
            {
              "id": "0716f51d-9aa2-42b9-b91a-dbf9d0e7ccbc",
              "title": "Compilation error: assignment to immutable variable",
              "isCorrect": true
            },
            {
              "id": "29a1cbf5-88e2-427b-a367-3ad1d64e2d1c",
              "title": "Automatically becomes mut",
              "isCorrect": false
            }
          ],
          "descriptionText": "x without mut is immutable. Rust requires explicit mut; also, a ; after 5 is needed",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b383fd23-0085-4005-9387-6a5d86de981d",
          "title": "How does const differ from let?",
          "answers": [
            {
              "id": "5681fbdf-d390-42c9-b6bc-5d48c56986d7",
              "title": "const requires explicit type annotation",
              "isCorrect": true
            },
            {
              "id": "a0a27315-6c2a-4b43-a2e2-28c2f3771d88",
              "title": "const can only be declared inside functions",
              "isCorrect": false
            },
            {
              "id": "013c2fa7-ad0a-4b88-96d4-30d7ab16bbf3",
              "title": "const can be made mut",
              "isCorrect": false
            },
            {
              "id": "9f63a8f4-16a9-4bb9-846d-73698d8fc5a1",
              "title": "let is evaluated only at compile-time",
              "isCorrect": false
            }
          ],
          "descriptionText": "const NAME: Type = expr; - constants always have an explicit type and a constexpr value",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f5c52fae-301b-4825-8645-28267c337eab",
          "title": "Valid constant declaration:",
          "answers": [
            {
              "id": "5bfef9bb-0d05-4b5c-9605-94884a217ba2",
              "title": "const PI = 3.14;",
              "isCorrect": false
            },
            {
              "id": "a9c25ab2-5022-4661-896c-f6a24c675dad",
              "title": "const PI: f64 = 3.14;",
              "isCorrect": true
            },
            {
              "id": "1ef4bde2-6bdd-45ac-92d8-2897c6109ef0",
              "title": "let const PI: f64 = 3.14;",
              "isCorrect": false
            },
            {
              "id": "84f28f28-3ef6-4d10-9d5b-89855542996b",
              "title": "constant PI = 3.14;",
              "isCorrect": false
            }
          ],
          "descriptionText": "Type after : is required - that's the language syntax",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "adb1dc81-5da2-4a93-bc3c-09a404e52fee",
          "title": "What is shadowing?",
          "answers": [
            {
              "id": "497bdf7c-4c95-4a15-8e1b-4d6d9e393502",
              "title": "Assignment without mut",
              "isCorrect": false
            },
            {
              "id": "cde77f0b-9bd0-4c83-b2bf-88caaedf448e",
              "title": "Re-declaring with let using the same name",
              "isCorrect": true
            },
            {
              "id": "a6f09026-b2e6-408a-905a-638dc2b7328d",
              "title": "Value erasure",
              "isCorrect": false
            },
            {
              "id": "4ae32e97-219d-484e-a0de-fc9af09441af",
              "title": "Automatic type casting",
              "isCorrect": false
            }
          ],
          "descriptionText": "let x = ...; let x = ...; creates a new binding",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "19f4af4f-449f-446b-914b-6f617abfd277",
          "title": "What can you do with shadowing but not with mut?",
          "answers": [
            {
              "id": "6ce7950d-58f4-4292-96a7-11e607c9a20f",
              "title": "Change type with the same name",
              "isCorrect": true
            },
            {
              "id": "56befcda-4153-4d96-bf0d-897851067aba",
              "title": "Change value",
              "isCorrect": false
            },
            {
              "id": "07335b7b-572d-4df8-bdb1-3ebf71dc8d8d",
              "title": "Use in a loop",
              "isCorrect": false
            },
            {
              "id": "87371207-b514-4383-a77f-383233ff293c",
              "title": "Pass to a function",
              "isCorrect": false
            }
          ],
          "descriptionText": "A new let can have a different type - it's actually a new variable",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "77ed9f74-8d67-42f1-a045-a3c49db56ca7",
          "title": "What will this print?\n\nlet x = 5;\nlet x = x + 2;\nlet x = x * 3;\nprintln!(\"{x}\");",
          "answers": [
            {
              "id": "c3a16af7-d86f-4bf1-a7d2-3a2b5eb84468",
              "title": "5",
              "isCorrect": false
            },
            {
              "id": "b0600af4-c06b-4b79-945c-0099a2a6f49d",
              "title": "7",
              "isCorrect": false
            },
            {
              "id": "ea3a8c74-3fde-4de1-8339-3fd9e3a2096f",
              "title": "15",
              "isCorrect": false
            },
            {
              "id": "f9fb9c06-5995-4277-8a6f-9d64dc12e36d",
              "title": "21",
              "isCorrect": true
            }
          ],
          "descriptionText": "7 → 21. Each line creates a new x",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1d721fe4-0c7f-41b1-9b31-f398cce43d76",
          "title": "What will happen?\n\nlet mut s = \"hi\";\ns = s.len();",
          "answers": [
            {
              "id": "ce12a9f3-c52a-4f1e-8a9f-0ae5ef4dee57",
              "title": "Type error",
              "isCorrect": true
            },
            {
              "id": "3253986a-4104-4b90-bd31-2f0878100692",
              "title": "Becomes 2",
              "isCorrect": false
            },
            {
              "id": "d345de05-a315-4694-b4f9-6c30a1591336",
              "title": "Becomes \"2\"",
              "isCorrect": false
            },
            {
              "id": "c55fb8a5-67d4-418f-939c-e4d9fdac3801",
              "title": "Panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "&'static str → usize without shadowing is invalid. mut does not change type",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "38779438-3850-4eb4-9527-87702803aebc",
          "title": "Default integer type:",
          "answers": [
            {
              "id": "97ecad9c-f4bc-4399-9d71-0bd3098f3f01",
              "title": "i32",
              "isCorrect": true
            },
            {
              "id": "0bb9545e-46bb-420e-9179-f7e193abac8b",
              "title": "i64",
              "isCorrect": false
            },
            {
              "id": "35ca526e-ac6e-4bd3-a3c6-e491877f1036",
              "title": "usize",
              "isCorrect": false
            },
            {
              "id": "af168c81-dd1e-4443-8bfc-99b415e6012b",
              "title": "depends",
              "isCorrect": false
            }
          ],
          "descriptionText": "Default is i32",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "08dc756c-2c13-43cf-b3a3-8a3b07d16429",
          "title": "Range of u8:",
          "answers": [
            {
              "id": "0b0a679d-bf75-40ce-b06f-d26b46632932",
              "title": "−128..127",
              "isCorrect": false
            },
            {
              "id": "8f1128f4-ff7e-45ed-87b8-94331ce1dd1c",
              "title": "0..255",
              "isCorrect": true
            },
            {
              "id": "351c814b-f29b-4e7d-9a1e-78e4bcd9b95d",
              "title": "−255..255",
              "isCorrect": false
            },
            {
              "id": "e5392101-22c3-44e3-880c-b80f13971258",
              "title": "depends",
              "isCorrect": false
            }
          ],
          "descriptionText": "8 bits unsigned",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "55be6baa-8f6d-46ef-a8b7-deb6c83831bb",
          "title": "What about let x: u8 = 256; (debug)?",
          "answers": [
            {
              "id": "e9458087-2d42-4780-a92c-af3ef0976733",
              "title": "Becomes 0",
              "isCorrect": false
            },
            {
              "id": "ecf02446-4390-4e6e-8448-09027ae161d9",
              "title": "Compilation error",
              "isCorrect": true
            },
            {
              "id": "cf632d77-594d-4d90-98f0-07abb5deace0",
              "title": "Runtime panic",
              "isCorrect": false
            },
            {
              "id": "10564ca9-0b17-4b53-ad7b-6566e6652742",
              "title": "Truncated to 255",
              "isCorrect": false
            }
          ],
          "descriptionText": "Constant out-of-range. 256 is outside u8 range",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c50deefa-2929-478f-9611-7707d63ba94d",
          "title": "Type of 57u8:",
          "answers": [
            {
              "id": "521d398e-b119-4d4a-b19b-2bbcbd07f921",
              "title": "i32",
              "isCorrect": false
            },
            {
              "id": "c97b395f-c0c4-43fd-a3bc-cb180d40c125",
              "title": "u32",
              "isCorrect": false
            },
            {
              "id": "cbd20d80-2472-4388-b39a-c8a35b9fbf5a",
              "title": "u8",
              "isCorrect": true
            },
            {
              "id": "16d5d254-ad33-4bd7-975d-78fada2a5ef4",
              "title": "usize",
              "isCorrect": false
            }
          ],
          "descriptionText": "Literal suffix sets type",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8abbb359-dc23-45de-96ec-421e2bbc2d40",
          "title": "What does 0b1111_0000 mean?",
          "answers": [
            {
              "id": "3fa7201b-e13c-48bd-a0c9-6977347e64af",
              "title": "Error",
              "isCorrect": false
            },
            {
              "id": "ee12facc-39bc-4cfe-aa7d-14750425b933",
              "title": "Binary literal",
              "isCorrect": true
            },
            {
              "id": "2f1723fe-6710-4f0e-a7b4-ef9c4c692177",
              "title": "String",
              "isCorrect": false
            },
            {
              "id": "564ac492-1ec0-4c9a-98d8-f2f262bcb902",
              "title": "Char",
              "isCorrect": false
            }
          ],
          "descriptionText": "Underscores allowed for readability",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "17c1d7eb-c004-4343-9e5d-cb4700829154",
          "title": "Default float type:",
          "answers": [
            {
              "id": "07d050a0-29c5-498a-8784-0a56e9a11e7a",
              "title": "f32",
              "isCorrect": false
            },
            {
              "id": "64790390-433f-4db0-9be1-6e349ced1947",
              "title": "f64",
              "isCorrect": true
            },
            {
              "id": "8d8b688c-312c-4256-95c1-2839683301c3",
              "title": "decimal",
              "isCorrect": false
            },
            {
              "id": "d6fc783e-764b-49fa-8365-52806155d192",
              "title": "depends",
              "isCorrect": false
            }
          ],
          "descriptionText": "More precision at similar cost",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ba1977ed-367b-425f-914b-98f0170811d8",
          "title": "Result (integers): -5 / 3",
          "answers": [
            {
              "id": "f96a9820-ee8f-4628-8fc4-b4c29a142b2a",
              "title": "−2",
              "isCorrect": false
            },
            {
              "id": "ec78d6f8-ccb6-4ad0-a181-275f60e3e5cc",
              "title": "−1",
              "isCorrect": true
            },
            {
              "id": "94aa7baa-7235-4f90-b282-4a39c015dac0",
              "title": "0",
              "isCorrect": false
            },
            {
              "id": "89fdac52-8e0a-470f-9086-2f7b237115cf",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Division rounds toward zero",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d68b7003-ceb4-4f28-845f-520e1cc0000d",
          "title": "Boolean literal:",
          "answers": [
            {
              "id": "22f91cdb-0b0d-4959-ace3-31574b1f976a",
              "title": "\"true\"",
              "isCorrect": false
            },
            {
              "id": "e90228d2-4473-4fc9-b5df-c6b460ba4164",
              "title": "True",
              "isCorrect": false
            },
            {
              "id": "1dd811fb-bdc7-4887-b94e-877bb38f5a28",
              "title": "false",
              "isCorrect": true
            },
            {
              "id": "2704fa82-02ed-42e5-9271-f3cc9e6b32fc",
              "title": "1",
              "isCorrect": false
            }
          ],
          "descriptionText": "Lowercase, not a string",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9e93b8a1-1d4d-48f6-9dea-1a85dcdc6ebb",
          "title": "char in Rust:",
          "answers": [
            {
              "id": "a6f4de87-f130-4881-9b65-3d8359f77c7c",
              "title": "1 byte ASCII",
              "isCorrect": false
            },
            {
              "id": "4da52b01-acad-4a3d-9402-2cd77f19ef1b",
              "title": "2 bytes UTF-16",
              "isCorrect": false
            },
            {
              "id": "4a6408f1-be96-45f8-ba4e-6226409c81d8",
              "title": "4 bytes Unicode scalar value",
              "isCorrect": true
            },
            {
              "id": "fe3811a9-79ab-4a6f-b49f-5f00a78b9411",
              "title": "Variable length",
              "isCorrect": false
            }
          ],
          "descriptionText": "One Unicode scalar",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b4fde5e9-bdf4-494e-aff1-179006953944",
          "title": "About tuples:",
          "answers": [
            {
              "id": "4c364e0d-83f1-42ea-9747-a3c347c13099",
              "title": "Fixed length",
              "isCorrect": false
            },
            {
              "id": "dad56183-d550-4003-903d-df45468130a6",
              "title": "Different types allowed",
              "isCorrect": false
            },
            {
              "id": "275bbf20-ada7-4264-b8b2-7c11d3b4f855",
              "title": "Indexed by .0",
              "isCorrect": false
            },
            {
              "id": "f35834a4-f3de-4151-b4d1-5915c81b5a6c",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "All true",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2352513c-c7a2-441a-9d78-fd633c9a4293",
          "title": "What will this print?\n\nlet t = (1, 2.0, 'c');\nprintln!(\"{}\", t.1);",
          "answers": [
            {
              "id": "7f5dbad5-cf86-41b2-94df-d6ed017b35d2",
              "title": "1",
              "isCorrect": false
            },
            {
              "id": "23bbf7f3-de02-42be-b5bc-a074653df63e",
              "title": "2.0",
              "isCorrect": true
            },
            {
              "id": "a8961e1e-52db-4094-b0e9-392620f6c2c0",
              "title": "c",
              "isCorrect": false
            },
            {
              "id": "c5e0e22f-bdcd-4d35-a0f9-8563d1f31e90",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Index 1 → second element",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d05b5cfc-3a1e-44d6-add5-43cf53a92e6f",
          "title": "About [i32; 5]:",
          "answers": [
            {
              "id": "04aeb9dd-861f-499f-89cf-b6661b013434",
              "title": "Only i32",
              "isCorrect": false
            },
            {
              "id": "6d61a7b8-04ca-4445-93a8-6fe3b5cf00f9",
              "title": "Fixed length",
              "isCorrect": false
            },
            {
              "id": "09f3c57c-4204-4743-ada5-c5f834dfc40a",
              "title": "Length is part of type",
              "isCorrect": false
            },
            {
              "id": "d55d83bc-ab15-4b3c-a2b8-2e9a8cc02bfd",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "[T; N]",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dde6b0e0-ae50-4800-b0ce-a4ff5b677fc4",
          "title": "What does let a = [3; 4]; create?",
          "answers": [
            {
              "id": "8652976b-4c8c-4a38-8691-3048f0c12143",
              "title": "[3]",
              "isCorrect": false
            },
            {
              "id": "f600ab5d-2035-4ea1-8bf4-3325ebc9ef7b",
              "title": "[3,3,3,3]",
              "isCorrect": true
            },
            {
              "id": "2933f03f-d52b-485c-a4d9-51403fc03a6f",
              "title": "[4,4,4]",
              "isCorrect": false
            },
            {
              "id": "6fcbfeea-b5a3-4b0b-bfd1-0cb20440c686",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Repetition syntax",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b00f5419-b762-47d8-bf2c-0be485b1948a",
          "title": "Accessing a[10] when length is 5:",
          "answers": [
            {
              "id": "93a88048-373a-4e7d-a129-209d519d3cdd",
              "title": "UB",
              "isCorrect": false
            },
            {
              "id": "46d665bf-8b83-4ae7-a5d5-92591dc53302",
              "title": "Compilation error",
              "isCorrect": false
            },
            {
              "id": "7fd34dae-a5e9-4bae-8634-dbb79f0646f5",
              "title": "Runtime panic",
              "isCorrect": true
            },
            {
              "id": "0fd3af9d-bd09-4ba2-9eed-f13d13016d21",
              "title": "None",
              "isCorrect": false
            }
          ],
          "descriptionText": "Bounds checked at runtime",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5e08cf48-d7fd-4c7b-a12d-330567b62ad0",
          "title": "Function declaration:",
          "answers": [
            {
              "id": "95a66e50-fbdc-4679-bae5-981bcbd7e399",
              "title": "func name() {}",
              "isCorrect": false
            },
            {
              "id": "5a3d1f9d-eed4-491b-ae11-022e8c4ccbf1",
              "title": "fn name() {}",
              "isCorrect": true
            },
            {
              "id": "557137d1-7f43-492d-b551-445a08cb6cc1",
              "title": "function name() {}",
              "isCorrect": false
            },
            {
              "id": "4350034c-4965-4e0f-a3f7-030af181d944",
              "title": "def name() {}",
              "isCorrect": false
            }
          ],
          "descriptionText": "Keyword fn",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6d7ecf7f-5c8e-4c53-909b-bf458923647a",
          "title": "Function parameters:",
          "answers": [
            {
              "id": "40fe4e73-9028-488f-b028-6567fb8bf139",
              "title": "Name only",
              "isCorrect": false
            },
            {
              "id": "dee6c376-4d4a-4423-ab4f-51c63b9cb162",
              "title": "Type only",
              "isCorrect": false
            },
            {
              "id": "5b46b29d-b0f1-4f02-acdf-1e12fc442a3f",
              "title": "Name and type",
              "isCorrect": true
            },
            {
              "id": "278b4d1b-ee2c-4f01-930d-c3ce922de0b2",
              "title": "Nothing",
              "isCorrect": false
            }
          ],
          "descriptionText": "Type annotations are mandatory",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2c51b10b-0c8b-423d-be18-21a52caf7b56",
          "title": "Default return:",
          "answers": [
            {
              "id": "b3018f79-02cf-4b79-9741-95afc0aa253e",
              "title": "Always return",
              "isCorrect": false
            },
            {
              "id": "97854632-642d-4c6a-86e9-94b0bb54564e",
              "title": "Last expression without ;",
              "isCorrect": true
            },
            {
              "id": "99c5d755-ac6d-4332-bf37-2ada2f6f6146",
              "title": "Last expression with ;",
              "isCorrect": false
            },
            {
              "id": "ca9ef935-cb49-4451-a6f7-5724dcb5d0fd",
              "title": "Always ()",
              "isCorrect": false
            }
          ],
          "descriptionText": "Tail expression",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b2de39f4-4586-4223-bb29-689f5b2f4f6d",
          "title": "If you put ; after x + 1 in function with -> i32:",
          "answers": [
            {
              "id": "6f15267b-ac60-4add-8214-891051ea8ab5",
              "title": "Returns x+1",
              "isCorrect": false
            },
            {
              "id": "3d342b48-a880-4daa-86ca-b03404349259",
              "title": "Type error (())",
              "isCorrect": true
            },
            {
              "id": "20c1f740-78ee-4b09-bab0-1281c1f6b189",
              "title": "Auto-return",
              "isCorrect": false
            },
            {
              "id": "d54cd753-cc03-431b-b5df-0ce471188cde",
              "title": "Panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "; turns it into a statement",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3ffec49a-8bfe-4581-b87e-aabbd1bd9b3b",
          "title": "Statement vs expression:",
          "answers": [
            {
              "id": "4e9d9daf-5e5e-4f31-9ec3-99befae2f82a",
              "title": "Statement returns a value",
              "isCorrect": false
            },
            {
              "id": "3e06cf20-ea0b-4412-9386-e69a767fc55f",
              "title": "Expression computes a value",
              "isCorrect": true
            },
            {
              "id": "fff2c663-5720-4fa0-8676-8ac9e3692c80",
              "title": "Both return",
              "isCorrect": false
            },
            {
              "id": "a2ed5eaf-122d-4be4-9caa-b64696a61853",
              "title": "No difference",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust is expression-oriented",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "12e2280d-8d36-4a1d-b012-fe1ef063fae9",
          "title": "What happens?\n\nlet x = (let y = 6);",
          "answers": [
            {
              "id": "aeffc345-493b-404f-aacb-407c604fde70",
              "title": "Compilation error",
              "isCorrect": true
            },
            {
              "id": "3bc5dbf3-a9aa-42db-888b-84275eb84050",
              "title": "x and y are 6",
              "isCorrect": false
            },
            {
              "id": "f03088b7-e55a-4f21-9c46-83991aa0bd7f",
              "title": "Panic",
              "isCorrect": false
            },
            {
              "id": "be2bba00-830d-491c-9f8d-68e18d04a234",
              "title": "UB",
              "isCorrect": false
            }
          ],
          "descriptionText": "let y = 6 is not an expression",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d38f3c3c-85bf-4c2e-a3c2-6e91e12644c5",
          "title": "Type of if condition:",
          "answers": [
            {
              "id": "0f931c4b-a231-40b1-a8ea-dc09a6493a61",
              "title": "Any nonzero",
              "isCorrect": false
            },
            {
              "id": "d010ad12-208a-4d40-99cf-c438a82d6df2",
              "title": "Only bool",
              "isCorrect": true
            },
            {
              "id": "5b415268-943a-4ce5-bea1-53cb85a42202",
              "title": "int or bool",
              "isCorrect": false
            },
            {
              "id": "99675f5a-ffc5-48af-aefd-4c3e14ce9651",
              "title": "Any scalar",
              "isCorrect": false
            }
          ],
          "descriptionText": "No implicit conversions",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "18b97b93-df99-44f0-9a32-344268cadb45",
          "title": "About if/else as an expression:",
          "answers": [
            {
              "id": "0232c66a-76ba-44b9-9ab5-7668f9d1eaca",
              "title": "Different types allowed",
              "isCorrect": false
            },
            {
              "id": "1df0cc8b-c466-41f3-8d3d-d6d3c01ca747",
              "title": "Branch types must match",
              "isCorrect": false
            },
            {
              "id": "d3201cc0-562a-4a86-b5a8-fa1f6632cef5",
              "title": "else is optional",
              "isCorrect": false
            },
            {
              "id": "5298b23c-62d2-42fc-b506-b50f815fd479",
              "title": "b and c",
              "isCorrect": true
            }
          ],
          "descriptionText": "if is an expression; else is optional",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1d5fbc2b-8f3c-40cf-9f00-11cba0fc7b3f",
          "title": "What will this print?\n\nlet n = if true { 1 } else { 2 };\nprintln!(\"{n}\");",
          "answers": [
            {
              "id": "a8029708-d25d-45ee-9601-86466ed942d3",
              "title": "1",
              "isCorrect": true
            },
            {
              "id": "290a4774-ea0f-4815-b224-bc4689ad30ef",
              "title": "2",
              "isCorrect": false
            },
            {
              "id": "0bcfcedb-782d-4440-baee-16096684a325",
              "title": "true",
              "isCorrect": false
            },
            {
              "id": "d99e39e9-d1a8-4beb-bf64-15978d7f62a5",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Took the value of true branch",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "838e818c-1960-4a1b-acf8-b95a7754cd99",
          "title": "Infinite loop until break:",
          "answers": [
            {
              "id": "46b3b0bc-c8a1-47cf-b43c-f69ee546840a",
              "title": "loop",
              "isCorrect": true
            },
            {
              "id": "9a1b4d63-7457-4376-b6e8-b70da0bde5d0",
              "title": "while",
              "isCorrect": false
            },
            {
              "id": "214d58fd-8d65-46d7-8dd5-f2364f765301",
              "title": "for",
              "isCorrect": false
            },
            {
              "id": "285ecc98-0994-4a3e-a405-96bdcba7b707",
              "title": "repeat",
              "isCorrect": false
            }
          ],
          "descriptionText": "loop has no condition",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b81a3614-18cc-4d65-a32d-fff74bbe0295",
          "title": "break value; in loop:",
          "answers": [
            {
              "id": "6508a3ae-310c-4eae-b9bd-da4ed485f9f9",
              "title": "Skip iteration",
              "isCorrect": false
            },
            {
              "id": "1ba883df-f4d2-475e-9ed7-7a8a1c55068a",
              "title": "Exit loop and return value",
              "isCorrect": true
            },
            {
              "id": "a132e871-115a-4883-a767-9dd5912635b5",
              "title": "Error",
              "isCorrect": false
            },
            {
              "id": "3cd4f13c-09e1-467b-9594-0dbf4739a4eb",
              "title": "Return ()",
              "isCorrect": false
            }
          ],
          "descriptionText": "loop is an expression",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9b34205f-5810-4d13-ae2c-ee5ba54db8d7",
          "title": "Loop labels 'label:",
          "answers": [
            {
              "id": "d57b0daf-eb8b-4a5f-bbae-5ca5f877a2c9",
              "title": "Comments",
              "isCorrect": false
            },
            {
              "id": "275eeeac-9a6c-44c0-bded-733c3db9705c",
              "title": "Target for break/continue",
              "isCorrect": true
            },
            {
              "id": "e77f1128-c8ce-4bf3-997a-f98b765102bb",
              "title": "Optimization",
              "isCorrect": false
            },
            {
              "id": "5e486d3f-2ff4-4a30-8b78-7f505cbf41c0",
              "title": "Counter",
              "isCorrect": false
            }
          ],
          "descriptionText": "e.g. break 'outer;",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5ca91e99-eb44-4edf-b8d6-b1bb720e5816",
          "title": "About while:",
          "answers": [
            {
              "id": "b2064f8c-f904-4230-8049-f11b59c9e960",
              "title": "While condition is true",
              "isCorrect": false
            },
            {
              "id": "d5a576cb-ba80-4b9c-8a03-c930c822129f",
              "title": "Can be infinite",
              "isCorrect": false
            },
            {
              "id": "fb67616f-fdf3-4d84-8edc-214ffda7e738",
              "title": "Condition is bool",
              "isCorrect": false
            },
            {
              "id": "5adece7f-7a1a-435d-9cd0-276a08ab35ed",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "Depends on condition",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8efbd048-f49f-4e85-821f-556dea32a901",
          "title": "About for:",
          "answers": [
            {
              "id": "700e2db8-aff9-49dd-bff2-9c65b70d6063",
              "title": "Iterates IntoIterator",
              "isCorrect": false
            },
            {
              "id": "d621d7e6-ec75-453c-9345-e1e8cde8b019",
              "title": "Works with ranges",
              "isCorrect": false
            },
            {
              "id": "4646be55-642d-407f-8fa8-7f567e08143c",
              "title": "Safer than manual indexing",
              "isCorrect": false
            },
            {
              "id": "e292db37-5975-4c74-9c21-8ee852087073",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "Idiomatic iteration",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2c9c42d2-a075-446e-9b52-4b2ec02888ee",
          "title": "Countdown 3..1:",
          "answers": [
            {
              "id": "c0e27e76-51af-43ce-9ee2-79ba337a170c",
              "title": "for n in (1..=3).rev()",
              "isCorrect": true
            },
            {
              "id": "a530e434-e3a8-4a17-9175-4bdf261cd97c",
              "title": "for n in (3..=1).rev()",
              "isCorrect": false
            },
            {
              "id": "7d793183-e378-4164-aa94-7d916f5e5971",
              "title": "for n in 1..3",
              "isCorrect": false
            },
            {
              "id": "8590f35d-1925-45dd-acce-cecfd836f798",
              "title": "for n in (0..3).rev()",
              "isCorrect": false
            }
          ],
          "descriptionText": "1..=3 gives 1..3, rev() → 3..1",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e39eeff5-e053-43d2-866b-79b70ff52832",
          "title": "Comments:",
          "answers": [
            {
              "id": "7307c357-16a8-4ce0-a902-f38fdd25d708",
              "title": "#",
              "isCorrect": false
            },
            {
              "id": "e444b4a5-fc24-4065-82be-a28af171de2c",
              "title": "//",
              "isCorrect": false
            },
            {
              "id": "4db534ee-3ec3-4349-98a9-03cd9de969e1",
              "title": "/* */",
              "isCorrect": false
            },
            {
              "id": "0872c40e-d0c5-48c3-ac8e-3ab1a0338882",
              "title": "b and c",
              "isCorrect": true
            }
          ],
          "descriptionText": "Rust supports both",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c00ecae0-730d-4201-bd62-e2d812d85ff8",
          "title": "Valid comment:",
          "answers": [
            {
              "id": "c9203b8d-b829-43d7-b8f0-2a68cff2c8d0",
              "title": "// this is a comment",
              "isCorrect": true
            },
            {
              "id": "39ae1231-56b6-403c-a8f4-94b4477cc2ca",
              "title": "– this is a comment",
              "isCorrect": false
            },
            {
              "id": "76c86a68-eb94-47e7-a33c-bddef11c8f53",
              "title": "%% this is a comment",
              "isCorrect": false
            },
            {
              "id": "543982fa-1616-41b6-8fd3-ac097e5d6531",
              "title": "# this is a comment",
              "isCorrect": false
            }
          ],
          "descriptionText": "# is not for comments (used for attributes)",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5433ab36-47e7-4f03-9f99-73e4dcc93673",
          "title": "About usize:",
          "answers": [
            {
              "id": "3f5a422d-2bca-4f51-a0c3-b7511bdc4d1d",
              "title": "Size depends on architecture",
              "isCorrect": false
            },
            {
              "id": "12b553cd-8672-472d-9846-d7532f1cf2c5",
              "title": "Used for indices/sizes",
              "isCorrect": false
            },
            {
              "id": "9023787e-4014-42a9-a021-0df883383fb7",
              "title": "Unsigned",
              "isCorrect": false
            },
            {
              "id": "664c7917-a99f-4cbf-a76a-c8b0a113b0b5",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "Platform-dependent index type",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "49a5382c-7387-45f3-b620-7b518960ce2e",
          "title": "Tuple of three elements:",
          "answers": [
            {
              "id": "b037849d-bae4-4ebe-870e-f643b1429956",
              "title": "(1, \"a\", true)",
              "isCorrect": true
            },
            {
              "id": "1b953c6d-0757-4ba4-8296-e8563e50fb74",
              "title": "{1, \"a\", true}",
              "isCorrect": false
            },
            {
              "id": "f2f2c825-88bc-4b81-a47e-5d26e1b786e1",
              "title": "[1, \"a\", true]",
              "isCorrect": false
            },
            {
              "id": "0404a2d8-2c9f-4196-bcf3-4da699da1db3",
              "title": "<1, \"a\", true>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Parentheses → tuple",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "deb72682-f514-4e57-8012-6cdcf62f97c7",
          "title": "What does b'A' mean?",
          "answers": [
            {
              "id": "84ebec76-8473-495b-bf53-d8b2c2585cc9",
              "title": "char 'A'",
              "isCorrect": false
            },
            {
              "id": "d8170163-0a57-4043-99f1-33152832f1b5",
              "title": "u8 with ASCII value",
              "isCorrect": true
            },
            {
              "id": "607ae3f4-fc36-4015-8c29-351071500299",
              "title": "\"A\"",
              "isCorrect": false
            },
            {
              "id": "9fa9783a-61ec-4905-b553-82a65eed9872",
              "title": "bool",
              "isCorrect": false
            }
          ],
          "descriptionText": "Prefix b → byte literal",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b6d28aaf-ad29-49be-9c5f-b1e2ea07a074",
          "title": "Range of i16:",
          "answers": [
            {
              "id": "2f7bbb48-f123-415d-8f50-55caea1246dc",
              "title": "−32768..32767",
              "isCorrect": true
            },
            {
              "id": "db3d363c-8d12-41f6-b182-e09f3f6f7aa8",
              "title": "−65536..65535",
              "isCorrect": false
            },
            {
              "id": "48b97d0a-996b-4d74-8fb5-65be8cfce679",
              "title": "0..32767",
              "isCorrect": false
            },
            {
              "id": "dd4de682-d282-4e7f-81ed-a32ee6806c98",
              "title": "0..65535",
              "isCorrect": false
            }
          ],
          "descriptionText": "16-bit signed",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "02783371-4332-45d2-bc7b-f5d0767e11e4",
          "title": "Unit type ()…",
          "answers": [
            {
              "id": "3e4770d3-f503-479d-bde4-d6ae35833586",
              "title": "Empty value",
              "isCorrect": false
            },
            {
              "id": "58220504-bbaf-464f-bea9-4c2186c4d4db",
              "title": "Empty tuple",
              "isCorrect": false
            },
            {
              "id": "2cae733a-ba49-4da6-8ead-5aa9cc06063d",
              "title": "Functions without return type return it",
              "isCorrect": false
            },
            {
              "id": "60851480-03e5-4fd8-8364-e88238180de2",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "All properties of ()",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4aeb2b1b-c5f9-4ebb-865d-1a0e84002b39",
          "title": "Valid function with parameter:",
          "answers": [
            {
              "id": "1f0f7dcf-a5e4-418f-bb5e-59c6642321d1",
              "title": "fn f(x) { }",
              "isCorrect": false
            },
            {
              "id": "748ed7be-387c-4ae9-912c-edeac7fdc235",
              "title": "fn f(x: i32) { }",
              "isCorrect": true
            },
            {
              "id": "30900438-4cc9-4df3-8257-c6e219ec5f00",
              "title": "fn f(i32 x) { }",
              "isCorrect": false
            },
            {
              "id": "8befcb29-fca4-417d-86f0-eab46d773444",
              "title": "function f(x: i32) { }",
              "isCorrect": false
            }
          ],
          "descriptionText": "Type required after :",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f5155236-e05f-45d6-ac2b-3956c80a4b73",
          "title": "What will this print?\n\nfn main() {\n    let x = {\n        let y = 2;\n        y + 3\n    };\n    println!(\"{x}\");\n}",
          "answers": [
            {
              "id": "f6cce124-c946-4c75-91a1-e026e5161dac",
              "title": "2",
              "isCorrect": false
            },
            {
              "id": "8432523b-23c8-49ee-8535-dd2fcd352922",
              "title": "3",
              "isCorrect": false
            },
            {
              "id": "b55ebd8d-2be9-4ad8-916e-23e82cf03f99",
              "title": "5",
              "isCorrect": true
            },
            {
              "id": "e3ee9824-59ad-4b65-bdd0-0015ae824c9f",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Block is an expression, returns y+3",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5df1d2a8-1b3a-4a7a-af12-1dab4b42aaa6",
          "title": "What will happen?\n\nlet number = if false { 10 } else { \"ten\" };",
          "answers": [
            {
              "id": "e39506ca-ec05-4291-a388-17e154af987d",
              "title": "Becomes a string",
              "isCorrect": false
            },
            {
              "id": "bb6a5662-1d25-4418-badd-1706142336e4",
              "title": "Compilation error (different branch types)",
              "isCorrect": true
            },
            {
              "id": "85c939e3-653e-4344-893e-bac07160751c",
              "title": "Becomes Option",
              "isCorrect": false
            },
            {
              "id": "68b95566-6f34-4d83-bedc-280058ec53f0",
              "title": "Panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "if-expression must have a single type",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "787a7342-1284-4ceb-8052-480ed1adee5b",
          "title": "How to exit an infinite loop properly?",
          "answers": [
            {
              "id": "ee0fdc61-b134-4a54-932f-d5b2e4e9aa40",
              "title": "break",
              "isCorrect": false
            },
            {
              "id": "d8a8e262-28f4-42fe-b02a-3910b99458d3",
              "title": "return",
              "isCorrect": false
            },
            {
              "id": "509799f5-c347-4d2e-85c8-62807f60d462",
              "title": "exit()",
              "isCorrect": false
            },
            {
              "id": "c38cd756-4c7a-43de-b963-0a82a236aaab",
              "title": "All of the above possible",
              "isCorrect": true
            }
          ],
          "descriptionText": "All terminate (loop/function/process), but idiomatic is break",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a0b49419-27e5-45d1-b4a1-dd5b8a7e3a91",
          "title": "About keywords:",
          "answers": [
            {
              "id": "b61703b4-0de5-4680-864b-059d5d221e7f",
              "title": "Can be used as names",
              "isCorrect": false
            },
            {
              "id": "fb441cdd-f8a9-4562-8f82-e41834216bde",
              "title": "Reserved",
              "isCorrect": true
            },
            {
              "id": "4f3efe53-f655-45bc-8191-3e64c6965f4c",
              "title": "Ignored",
              "isCorrect": false
            },
            {
              "id": "6eb09daf-2780-4b5f-a41a-8e50c873ad2e",
              "title": "Usable with @",
              "isCorrect": false
            }
          ],
          "descriptionText": "See Appendix A",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fda358be-9190-4ff4-a129-20065fc24755",
          "title": "What about let guess: u32 = \"42\".parse().unwrap();?",
          "answers": [
            {
              "id": "77410f77-fd2e-4f71-88c8-407ac0bd8d32",
              "title": "String",
              "isCorrect": false
            },
            {
              "id": "45dcecae-8cc7-46c0-b31c-cfe707999bad",
              "title": "u32 = 42",
              "isCorrect": true
            },
            {
              "id": "e9749ee4-de92-4b0f-8995-9f18e8e9f5e4",
              "title": "Compilation error",
              "isCorrect": false
            },
            {
              "id": "dd78e1d1-8d85-4395-9d7d-81d9af9467e0",
              "title": "bool",
              "isCorrect": false
            }
          ],
          "descriptionText": "Type annotation directs parse()",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "79002566-caf6-46d2-9d5e-43f19db6edb1",
          "title": "What does .len() do on [i32; 5]?",
          "answers": [
            {
              "id": "eb3c8979-a8d9-4798-b5e0-99187d94261c",
              "title": "5",
              "isCorrect": true
            },
            {
              "id": "2c2a0fde-abcf-4e68-8860-7e5b3552fa84",
              "title": "Last element",
              "isCorrect": false
            },
            {
              "id": "d3dbf2a1-2b3d-42c7-83f8-117f4fea104e",
              "title": "Option",
              "isCorrect": false
            },
            {
              "id": "aef58749-8271-4bd7-8a31-7b212564deb0",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Array length",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "28f9717b-75fb-4d7b-9929-257148c6c82c",
          "title": "Overflow of u8 in release:",
          "answers": [
            {
              "id": "16648569-8fee-4343-9536-8b0a4a590943",
              "title": "Panic",
              "isCorrect": false
            },
            {
              "id": "3b8be188-952c-49f9-8fc5-48602c51e054",
              "title": "Compilation error",
              "isCorrect": false
            },
            {
              "id": "a4ae6bdd-ba69-40a9-9d6a-52d322c3952e",
              "title": "Wrapping",
              "isCorrect": true
            },
            {
              "id": "e9162805-4727-4542-af1d-84620446b4ea",
              "title": "Auto type promotion",
              "isCorrect": false
            }
          ],
          "descriptionText": "Two's complement wrapping",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1c2cd8c3-eada-4682-8624-9954cea42233",
          "title": "Modulo operator:",
          "answers": [
            {
              "id": "6398e208-2be9-4659-a939-91357a6f5ef7",
              "title": "mod",
              "isCorrect": false
            },
            {
              "id": "298e716e-f02a-4038-b0d8-1553c32fef88",
              "title": "%",
              "isCorrect": true
            },
            {
              "id": "39210851-f57b-49bf-be56-ba8ee6dd6022",
              "title": "rem",
              "isCorrect": false
            },
            {
              "id": "01108550-0cfb-41ce-b419-3f67c2ede9e4",
              "title": "div",
              "isCorrect": false
            }
          ],
          "descriptionText": "Standard syntax",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e4026387-421a-445f-86a1-8fc33047c798",
          "title": "Function with return value:",
          "answers": [
            {
              "id": "dcbfb648-9e2a-4d05-8021-b0fabe4e93e1",
              "title": "fn f() { return 5 }",
              "isCorrect": false
            },
            {
              "id": "ceac4b7f-5392-4e38-b996-5d2cc75f4b79",
              "title": "fn f() -> i32 { 5 }",
              "isCorrect": true
            },
            {
              "id": "2f4edc96-c406-4dca-af09-f95f3a961f34",
              "title": "fn f() => i32 { 5 }",
              "isCorrect": false
            },
            {
              "id": "42838859-fa86-47c9-a12e-e5b384483562",
              "title": "fn f() = 5;",
              "isCorrect": false
            }
          ],
          "descriptionText": "-> Type + tail expression",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "051f76cf-b4be-4e08-932d-f79b6be645a0",
          "title": "About for in Rust:",
          "answers": [
            {
              "id": "bd142f96-31a6-40e2-a1c2-99d10726f6ac",
              "title": "Can iterate chars of string (for ch in \"ab\".chars())",
              "isCorrect": false
            },
            {
              "id": "69e16999-27fd-4af8-9fa5-a1d4b428f85c",
              "title": "Can iterate ranges",
              "isCorrect": false
            },
            {
              "id": "ca102817-16f7-4e69-bbf8-1872b3a663ec",
              "title": "Safer than manual indexing",
              "isCorrect": false
            },
            {
              "id": "2ffec4bd-be47-4d3f-8d0a-e70c1d625a7a",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "Works with any IntoIterator",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9a9560b0-6f3e-4613-81a8-dcfadef168d3",
          "title": "Hex literal:",
          "answers": [
            {
              "id": "948bf648-04dd-4150-bd17-704a6c2fbf07",
              "title": "0xFF",
              "isCorrect": true
            },
            {
              "id": "32b1df56-aedc-42dd-b2bd-c06829fbe209",
              "title": "#FF",
              "isCorrect": false
            },
            {
              "id": "5071a2f3-c6ab-4baf-9304-55f7a76582b8",
              "title": "$FF",
              "isCorrect": false
            },
            {
              "id": "f14ef78a-769f-4cf6-b3cf-2b9f9748d556",
              "title": "xFF",
              "isCorrect": false
            }
          ],
          "descriptionText": "0x is valid prefix",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5716accd-fff4-4148-9959-ab4a7027becc",
          "title": "What will this print?\n\nlet months = [\"Jan\", \"Feb\", \"Mar\"];\nprintln!(\"{}\", months[2]);",
          "answers": [
            {
              "id": "3978dc21-6cf8-4b66-8023-29b2c4bf4745",
              "title": "Jan",
              "isCorrect": false
            },
            {
              "id": "18b3e207-e83d-4147-9202-fdfe011275cb",
              "title": "Feb",
              "isCorrect": false
            },
            {
              "id": "73bc0985-d2f0-41d8-b7be-e6c6215d69f9",
              "title": "Mar",
              "isCorrect": true
            },
            {
              "id": "c33efbeb-d03b-45f3-ae32-6968a58b9757",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Index 2",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "26cd8ef2-9b4b-4e76-a5d9-039b3d060425",
          "title": "About continue:",
          "answers": [
            {
              "id": "a81b7352-8a28-471a-87eb-916bcb59a6f2",
              "title": "Breaks the whole loop",
              "isCorrect": false
            },
            {
              "id": "e326d79e-fa89-4507-8d40-55e68813b69d",
              "title": "Skips current iteration",
              "isCorrect": true
            },
            {
              "id": "a36e704b-6861-4bd5-ae4a-d43a844419be",
              "title": "Panic",
              "isCorrect": false
            },
            {
              "id": "7fd1d99c-8e7b-4dfc-ba0b-5211ef9037d1",
              "title": "Only in while",
              "isCorrect": false
            }
          ],
          "descriptionText": "Moves to next iteration",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f0e6adf0-c0b8-40b9-ac89-19b9066f29f9",
          "title": "About rev():",
          "answers": [
            {
              "id": "ad48ec50-b0d6-43ab-9eb4-5ecd6b1e2e02",
              "title": "Applies to ranges",
              "isCorrect": false
            },
            {
              "id": "6a509703-c49b-4317-988b-7fc741eff38b",
              "title": "Reverses iteration order",
              "isCorrect": false
            },
            {
              "id": "7b35d8ab-b882-4bbe-9bb0-152815cce107",
              "title": "Works with for",
              "isCorrect": false
            },
            {
              "id": "e2acc45a-5f65-4267-a5a7-a8cc7e8bc6d3",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "It's an iterator adapter",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f4bafae7-9daa-40d7-baa5-a55e97848f49",
          "title": "Explicit type for variable:",
          "answers": [
            {
              "id": "4a586ac9-df74-4391-a8f4-6bf0c505f21a",
              "title": "let x = 5;",
              "isCorrect": false
            },
            {
              "id": "c8acf612-74be-40c3-9de9-c95c2e227397",
              "title": "let x: i32 = 5;",
              "isCorrect": true
            },
            {
              "id": "8c4e41ba-2d9f-49d6-ba83-4222c2e651eb",
              "title": "var x: i32 = 5;",
              "isCorrect": false
            },
            {
              "id": "d7c243aa-1357-4712-b3d8-5b3287d4171e",
              "title": "def x: i32 = 5;",
              "isCorrect": false
            }
          ],
          "descriptionText": "let name: Type = expr;",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f33f1d60-541f-4fd5-b295-691c540d26a4",
          "title": "Function naming style:",
          "answers": [
            {
              "id": "e8b347ad-abfa-4b6d-93b1-f6442aef0c20",
              "title": "CamelCase",
              "isCorrect": false
            },
            {
              "id": "c163ede7-7fea-4fa6-9d06-68da94cd8fcf",
              "title": "snake_case",
              "isCorrect": true
            },
            {
              "id": "6df3fa40-dc18-4fde-a001-93823e4d8def",
              "title": "PascalCase",
              "isCorrect": false
            },
            {
              "id": "bd7ca21e-7ec1-4e07-b1e4-91d232a7560c",
              "title": "kebab-case",
              "isCorrect": false
            }
          ],
          "descriptionText": "Idiomatic Rust style",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5cfa1b15-dc85-464a-9792-83e1508aecd4",
          "title": "What will happen?\n\nfn plus(x: i32) -> i32 {\n    x + 1\n}\nprintln!(\"{}\", plus(4));",
          "answers": [
            {
              "id": "aa5484a2-9780-4ae6-86be-8d5848f9b51a",
              "title": "4",
              "isCorrect": false
            },
            {
              "id": "4acb25d7-7f97-43e5-99ba-983c53d6d44f",
              "title": "5",
              "isCorrect": true
            },
            {
              "id": "8d329889-1bda-414f-8be7-492e249f9013",
              "title": "Error",
              "isCorrect": false
            },
            {
              "id": "f49ae73a-640b-4188-a51e-070fc15ac051",
              "title": "()",
              "isCorrect": false
            }
          ],
          "descriptionText": "Returns 5 as tail expression",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6fc0b167-4658-4899-ac21-fa31eef49539",
          "title": "About comments:",
          "answers": [
            {
              "id": "e1cb8ee7-a886-4105-b726-23c12417a5c3",
              "title": "// — single line",
              "isCorrect": false
            },
            {
              "id": "0d1015e9-f3e0-4127-9d35-a155ac1c2468",
              "title": "/* */ — multi-line (including nested)",
              "isCorrect": false
            },
            {
              "id": "9cbc9f95-eec1-4b6e-afc9-7bd32aa291b9",
              "title": "Ignored by compiler",
              "isCorrect": false
            },
            {
              "id": "5a6f8915-87ea-40d5-91a1-6efb769eb344",
              "title": "All of the above",
              "isCorrect": true
            }
          ],
          "descriptionText": "Both syntaxes valid; block comments nest",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ee70acf8-2a49-4741-af2d-20faae11f745",
          "title": "Result of 43 % 5:",
          "answers": [
            {
              "id": "16c5af00-70c3-4588-94ce-cb1b66ec17c7",
              "title": "3",
              "isCorrect": true
            },
            {
              "id": "99ce45f5-4100-491c-8bd6-3528ef0f1ee3",
              "title": "4",
              "isCorrect": false
            },
            {
              "id": "870e5cc3-6d8e-4205-ad95-a4fcf5d1ab99",
              "title": "5",
              "isCorrect": false
            },
            {
              "id": "cc62d1e1-0ca5-412a-b34a-998832d3e1f9",
              "title": "8",
              "isCorrect": false
            }
          ],
          "descriptionText": "43 = 5×8 + 3",
          "descriptionLink": "common_programming_concepts_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "b2b00d0a-2588-494c-a590-1b5bb53d26d1",
      "theme": "Understanding Ownership",
      "priority": 2,
      "questions": [
        {
          "id": "bf175753-0854-4159-87d0-1f2e45aa7982",
          "title": "What is ownership in Rust?",
          "answers": [
            {
              "id": "470b63f5-37ae-442f-83a7-e3a48b8bfcdf",
              "title": "Background GC",
              "isCorrect": false
            },
            {
              "id": "2ed1bb97-32a8-46f5-81f7-5cd17cfff00c",
              "title": "A set of compiler-checked rules for memory management",
              "isCorrect": true
            },
            {
              "id": "7477a12f-0f98-40e9-b79a-1b17b2e7cdf2",
              "title": "Manual freeing via free()",
              "isCorrect": false
            },
            {
              "id": "91ca9c4c-e777-4388-88a8-c13307a280d3",
              "title": "A compile-time optimization",
              "isCorrect": false
            }
          ],
          "descriptionText": "Ownership is rules the compiler checks - it provides safety without a GC",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cb98f2dd-0b25-49f5-9d2c-d4bf5237da47",
          "title": "Which rule about a value's owner is true?",
          "answers": [
            {
              "id": "7b0dc847-82cb-4dce-b659-abfbc833cf8b",
              "title": "A value can have many owners",
              "isCorrect": false
            },
            {
              "id": "1ad35044-015b-46d9-9dd5-12b71cf5b1f5",
              "title": "A value may have no owner",
              "isCorrect": false
            },
            {
              "id": "c2da4cc9-2260-4646-9c9c-a7ae9be85ae4",
              "title": "At any moment there is exactly one owner",
              "isCorrect": true
            },
            {
              "id": "d7f18d9a-9c0a-4a28-b953-8a4091d9b6e4",
              "title": "Owners exist only for heap data",
              "isCorrect": false
            }
          ],
          "descriptionText": "One owner at a time - prevents double drop",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "746b1be4-aed0-48d9-a150-8e466949c3ea",
          "title": "What happens when the owner goes out of scope?",
          "answers": [
            {
              "id": "b4ac0587-d0c6-441a-bdfe-fbe60d48a6a3",
              "title": "Nothing",
              "isCorrect": false
            },
            {
              "id": "7ccb94e3-5b10-44ba-b346-12c0edaaf7e7",
              "title": "Memory leaks",
              "isCorrect": false
            },
            {
              "id": "319106fb-3d36-462e-bbda-b401f931de33",
              "title": "drop is called and the resource is released",
              "isCorrect": true
            },
            {
              "id": "e5f15848-a96f-4ea0-a713-26f3598e630f",
              "title": "The value becomes 'static",
              "isCorrect": false
            }
          ],
          "descriptionText": "Automatic drop - Rust uses RAII",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "22edd6c2-a1d5-4266-baf4-ea282400fb45",
          "title": "Where do fixed-size types (e.g., i32) live entirely?",
          "answers": [
            {
              "id": "d484fe52-f686-4d9e-a7e3-7cefc6a8c0e6",
              "title": "On the heap",
              "isCorrect": false
            },
            {
              "id": "f1268f88-e938-48f1-9e99-6a4f0e8fc75e",
              "title": "On the stack",
              "isCorrect": true
            },
            {
              "id": "07efa739-6886-4c3b-a8f8-c675cdfa3ade",
              "title": "Always in static memory",
              "isCorrect": false
            },
            {
              "id": "db06d192-0edc-4f87-8e93-b46f5e90228a",
              "title": "In the binary file",
              "isCorrect": false
            }
          ],
          "descriptionText": "Scalars are on the stack - size known at compile time",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4ea975e7-40dd-4e3b-bdd6-9b985bfc324c",
          "title": "How does &str differ from String?",
          "answers": [
            {
              "id": "21d1efc6-83a3-4026-b0ee-befa9d52141d",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "995d5d7e-b852-41a3-a7e4-eed12fa7d761",
              "title": "&str is an immutable slice; String owns and mutably manages heap data",
              "isCorrect": true
            },
            {
              "id": "fdc2a6e8-31fc-4e33-a332-4d3b9c4b2f18",
              "title": "&str is always on the heap",
              "isCorrect": false
            },
            {
              "id": "9f5507d9-ba12-417d-a06b-e87a2ab08ebb",
              "title": "String is always on the stack",
              "isCorrect": false
            }
          ],
          "descriptionText": "&str is a slice, String is an owning buffer - different memory models",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f54d1551-ae79-40e7-a0ab-8ff121dff9fb",
          "title": "What will happen?\n\nlet s1 = String::from(\"hi\");\nlet s2 = s1;\nprintln!(\"{s1}\");",
          "answers": [
            {
              "id": "1d9d2bd8-a97d-4937-830a-f529730029ae",
              "title": "Prints \"hi\"",
              "isCorrect": false
            },
            {
              "id": "1b262c21-e4f7-4dea-9121-ca04296e7866",
              "title": "Compile error: use of moved value",
              "isCorrect": true
            },
            {
              "id": "2b131bfc-64cb-4e8e-b90c-1dc2984dcb64",
              "title": "Runtime panic",
              "isCorrect": false
            },
            {
              "id": "0464e18d-78c1-43ad-8588-b6f0675262fe",
              "title": "s1 is automatically cloned",
              "isCorrect": false
            }
          ],
          "descriptionText": "s1 was moved - String is not Copy",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0ed1aadb-e40d-4f7b-bc2c-834be13b7298",
          "title": "What is the name of the ownership transfer in let s2 = s1;?",
          "answers": [
            {
              "id": "07684325-43a3-4919-b107-8e3561b20ec3",
              "title": "Borrowing",
              "isCorrect": false
            },
            {
              "id": "dc30ca3c-9d78-4263-b0a5-9881ac023deb",
              "title": "Moving",
              "isCorrect": true
            },
            {
              "id": "0329eece-6d01-4a63-bea2-c77d4af3f29d",
              "title": "Cloning",
              "isCorrect": false
            },
            {
              "id": "6b1e3441-4f9a-496f-a09d-6190c16cfb9e",
              "title": "Aliasing",
              "isCorrect": false
            }
          ],
          "descriptionText": "That's a move - ownership is transferred to the new name",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "896dc679-34bb-4572-89c6-83051fd390de",
          "title": "What is copied in let s2 = s1; for String?",
          "answers": [
            {
              "id": "8237cecd-2823-4363-8b03-4a92a2f6987c",
              "title": "Heap data",
              "isCorrect": false
            },
            {
              "id": "c413405e-f388-42b2-a945-12a2485e2bc9",
              "title": "Only the length",
              "isCorrect": false
            },
            {
              "id": "75b1d71b-3e0d-45fb-8fcd-f01777c04936",
              "title": "Pointer, length, and capacity (stack part)",
              "isCorrect": true
            },
            {
              "id": "570cf876-0c57-4f6f-bc01-b244eadc537f",
              "title": "Nothing",
              "isCorrect": false
            }
          ],
          "descriptionText": "Stack metadata - no deep copy is performed",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "35ece3f9-86b2-45c7-ad1b-2d002f926514",
          "title": "Why does Rust invalidate the old variable after a move?",
          "answers": [
            {
              "id": "89aff809-425f-4a46-8c12-345348c02bec",
              "title": "To speed up compilation",
              "isCorrect": false
            },
            {
              "id": "57fe6f2b-7964-46f5-b371-3af6379ba266",
              "title": "To avoid double free",
              "isCorrect": true
            },
            {
              "id": "b3f9dc17-7768-4773-9c97-e7ada540e078",
              "title": "To make debugging easier",
              "isCorrect": false
            },
            {
              "id": "f69ae406-60ed-486e-90c8-b18ff145edad",
              "title": "To speed up memory access",
              "isCorrect": false
            }
          ],
          "descriptionText": "No two owners of one buffer - memory safety",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "abd89fb8-8c24-4a6e-9406-5c0cf1fe078c",
          "title": "What does clone() do for String?",
          "answers": [
            {
              "id": "1c74b5a4-39b5-406c-8553-f881751f8a58",
              "title": "Copies only the pointer",
              "isCorrect": false
            },
            {
              "id": "348b0c43-8105-4d01-8938-77db37b51e42",
              "title": "Moves ownership",
              "isCorrect": false
            },
            {
              "id": "a797808d-8ef8-43c3-bf64-7753e1921a69",
              "title": "Performs a deep copy of heap data",
              "isCorrect": true
            },
            {
              "id": "b685899f-8f97-420f-8ebc-6a3236e348d7",
              "title": "Frees the original",
              "isCorrect": false
            }
          ],
          "descriptionText": "Deep copy - duplicates the bytes",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2f62a4d2-307e-4dc6-bbc2-40892e5290c1",
          "title": "Which types typically implement Copy?",
          "answers": [
            {
              "id": "0e074b9c-fcf6-4f7e-bcff-dcc3dc91bb2d",
              "title": "All heap types",
              "isCorrect": false
            },
            {
              "id": "c937c125-c452-48ea-ad5c-dcb49ac729b9",
              "title": "Scalars and tuples composed entirely of Copy types",
              "isCorrect": true
            },
            {
              "id": "063e59a3-ba76-4185-88de-4167de2c7e02",
              "title": "Only String",
              "isCorrect": false
            },
            {
              "id": "ce06f1c1-4b85-4105-8aea-f95a6e77cd27",
              "title": "Any structs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Simple stack types - copying is trivial",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "549b7394-5333-43a8-86ad-8d7cc925fff7",
          "title": "Why isn't String Copy?",
          "answers": [
            {
              "id": "f4110c33-d779-4561-9eae-d56cebca8efe",
              "title": "It's &str",
              "isCorrect": false
            },
            {
              "id": "bee8b5aa-2cbd-460a-825c-3b533489b228",
              "title": "It manages a heap resource (Drop)",
              "isCorrect": true
            },
            {
              "id": "cfb76375-899b-4e14-9e17-a69ddc2c79e2",
              "title": "It's too long",
              "isCorrect": false
            },
            {
              "id": "bd821e9b-67fb-40c0-8b23-3a6bee8ed26b",
              "title": "It requires 'static",
              "isCorrect": false
            }
          ],
          "descriptionText": "Has a resource and Drop - copying would be unsafe",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dfba8770-3c90-4cf2-aefe-164e11523068",
          "title": "Passing arguments to a function by value…",
          "answers": [
            {
              "id": "7abd963b-148b-4769-ac80-fe62c65516c9",
              "title": "Is always a deep copy",
              "isCorrect": false
            },
            {
              "id": "9392b0c4-8702-4731-9de7-a29244eca587",
              "title": "Behaves like assignment: move or copy",
              "isCorrect": true
            },
            {
              "id": "fae27ea9-9652-4ed9-8c66-8f0e78ec26f3",
              "title": "Is always by reference",
              "isCorrect": false
            },
            {
              "id": "0c1f240b-6fe9-4baf-9254-07423cc0c627",
              "title": "Never moves",
              "isCorrect": false
            }
          ],
          "descriptionText": "Same rules - unified ownership model",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bdec307d-7b7d-45cb-9cab-3f6fad006531",
          "title": "Which is true?\n\nfn takes(s: String) {}\nlet x = String::from(\"hi\");\ntakes(x);\n// here x ...",
          "answers": [
            {
              "id": "5ffc2b0e-dad6-4136-a6f7-1903f7f3f95b",
              "title": "x is available",
              "isCorrect": false
            },
            {
              "id": "2bf4cf2a-8169-4620-8ad2-ba82fc8c1a17",
              "title": "x is unavailable (moved)",
              "isCorrect": true
            },
            {
              "id": "ea529605-7fd1-4373-a25c-0b3346d52ab7",
              "title": "x is Copy",
              "isCorrect": false
            },
            {
              "id": "f6f96527-8820-489c-a697-c6ce5d84ee1e",
              "title": "There will be a panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "Move into the function - String passed by ownership",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "949478cc-f19e-487c-95cf-bc8d47d12c82",
          "title": "How to return a value without return?",
          "answers": [
            {
              "id": "2dac048c-7de8-42e3-900a-de9eaf065396",
              "title": "You can't",
              "isCorrect": false
            },
            {
              "id": "900e00bf-72ca-40ff-928d-c1d784daf616",
              "title": "Make it the last expression without ;",
              "isCorrect": true
            },
            {
              "id": "9f1fc769-11cb-492f-98bc-ad25c01632a8",
              "title": "Use yield",
              "isCorrect": false
            },
            {
              "id": "8b7b5b0e-4cc1-4af9-9072-d794b965ea54",
              "title": "Use give_back",
              "isCorrect": false
            }
          ],
          "descriptionText": "Tail expression - expressions return values",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "793e640c-1959-477a-a083-b0862ba064f2",
          "title": "Why use references &T?",
          "answers": [
            {
              "id": "b0fd23c2-604b-446b-8b10-0bd84855a165",
              "title": "To speed up compilation",
              "isCorrect": false
            },
            {
              "id": "f1e93ad8-2761-4be1-bd46-1d4eb452afe5",
              "title": "To temporarily \"borrow\" a value without transferring ownership",
              "isCorrect": true
            },
            {
              "id": "5b51a649-724f-4fdb-8173-abcbfe7f8e3b",
              "title": "For deep copy",
              "isCorrect": false
            },
            {
              "id": "7c5a5069-e414-4435-bef3-d94bdacabb73",
              "title": "To make it 'static",
              "isCorrect": false
            }
          ],
          "descriptionText": "Use without move - borrowing",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9b6ad57f-74e8-4f13-a085-69b0ecbd979b",
          "title": "What is true about &String?",
          "answers": [
            {
              "id": "5c9745b8-e305-4d6c-83d1-ae7caa884e88",
              "title": "Allows modifying the string",
              "isCorrect": false
            },
            {
              "id": "79efc44b-0365-459e-9934-dc61bdf0813c",
              "title": "Immutable reference; read without owning",
              "isCorrect": true
            },
            {
              "id": "f6928fd6-6163-452a-8276-c84ffd761292",
              "title": "Extends the owner's lifetime",
              "isCorrect": false
            },
            {
              "id": "2b2a7e66-86ff-4072-8b23-0b6c19d900f6",
              "title": "Calls drop on the owner",
              "isCorrect": false
            }
          ],
          "descriptionText": "Read-only - need &mut for mutation",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7921a214-13ef-4800-9cc8-2089a318c395",
          "title": "How to allow modifying a borrowed String?",
          "answers": [
            {
              "id": "84338179-2d32-4f2c-8675-2d6d0a424168",
              "title": "Accept &mut String and pass &mut s",
              "isCorrect": true
            },
            {
              "id": "50820466-b335-41ae-802e-50592fbaae49",
              "title": "Accept &&String",
              "isCorrect": false
            },
            {
              "id": "7a9b9f82-5348-4aa1-b767-3de61a245adc",
              "title": "Accept String",
              "isCorrect": false
            },
            {
              "id": "de71bf50-f05a-40f1-82b9-57938e9d674d",
              "title": "Accept &Box<String>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Need a mutable reference - explicit write permission",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d9b5911b-8c60-4ab5-bb63-b056da743c15",
          "title": "Constraint on references:",
          "answers": [
            {
              "id": "b9c6e2cc-b022-48a1-9e07-16e192e42b8a",
              "title": "Many &mut at the same time are allowed",
              "isCorrect": false
            },
            {
              "id": "d505b0b2-3495-49c7-bdee-5a54fa113b48",
              "title": "Either one &mut or any number of &, but not both simultaneously",
              "isCorrect": true
            },
            {
              "id": "28afcd14-7c96-44f5-bd45-6d3121847a23",
              "title": "One &mut and one & are allowed together",
              "isCorrect": false
            },
            {
              "id": "c94a5b25-9733-4cc1-9759-a043b39ef04c",
              "title": "No constraints",
              "isCorrect": false
            }
          ],
          "descriptionText": "Anti–data race rule - prevents races",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6dbfe578-bfaa-4d82-9f00-3c92e5868158",
          "title": "What happens with simultaneous & and &mut to the same object?",
          "answers": [
            {
              "id": "2021498a-505f-4826-9262-af54b6ddba74",
              "title": "Compiles",
              "isCorrect": false
            },
            {
              "id": "4768c756-e834-4788-acb6-6c6f6d8ac143",
              "title": "Compile error (E0502)",
              "isCorrect": true
            },
            {
              "id": "1a293461-b735-41fd-a641-3390fbeab4dc",
              "title": "Runtime panic",
              "isCorrect": false
            },
            {
              "id": "b2422e69-db7a-4fa9-996e-767ad77ab53e",
              "title": "UB",
              "isCorrect": false
            }
          ],
          "descriptionText": "Borrowing conflict - violates rules",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4f552218-cd29-44f6-bc93-c844bc256a2c",
          "title": "When does a reference's lifetime end in simple cases (NLL)?",
          "answers": [
            {
              "id": "dbed0bf1-8c8c-46fe-b102-e1dd0757ec36",
              "title": "Always at the end of the block",
              "isCorrect": false
            },
            {
              "id": "3e2f45cd-aa6e-40a0-b53c-c83150e2b488",
              "title": "When the owner is dropped",
              "isCorrect": false
            },
            {
              "id": "a4243fb5-7f25-419c-b06b-b8a9f1d7a2d1",
              "title": "After its last use",
              "isCorrect": true
            },
            {
              "id": "5f534610-50d0-4b9b-9e28-b32f502db734",
              "title": "Never",
              "isCorrect": false
            }
          ],
          "descriptionText": "Non-lexical lifetimes shorten it - safer and more flexible",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b861978b-4470-4c95-a466-352a5eddbf42",
          "title": "What is a \"dangling\" reference?",
          "answers": [
            {
              "id": "669d7e97-e9c6-4d52-8400-380957bc939b",
              "title": "A reference to another type",
              "isCorrect": false
            },
            {
              "id": "4b10d4f8-ccc9-4ce3-adbb-95151e2d8bd8",
              "title": "A reference to already freed memory",
              "isCorrect": true
            },
            {
              "id": "75e9e397-a746-4e12-85f0-1aca1a71fe65",
              "title": "A reference always on the stack",
              "isCorrect": false
            },
            {
              "id": "b0fdb36b-af29-419d-8f12-b7a1c2a33d38",
              "title": "A reference to an empty array",
              "isCorrect": false
            }
          ],
          "descriptionText": "Dangling reference - object already dropped",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "207911ff-e81f-40dc-b114-a6aeb2fba4af",
          "title": "Why doesn't this compile:\nfn dangle() -> &String { let s = String::from(\"x\"); &s }?",
          "answers": [
            {
              "id": "7a64ce71-2285-4824-9784-d0c12256b33f",
              "title": "You can't return references",
              "isCorrect": false
            },
            {
              "id": "b43528e6-1936-46cf-8398-2811622f413d",
              "title": "s will be dropped; the reference becomes invalid",
              "isCorrect": true
            },
            {
              "id": "e8cb20fd-1008-4e79-9f1a-93e6c41de5e7",
              "title": "You can't allocate in a function",
              "isCorrect": false
            },
            {
              "id": "a6f6a914-415b-4ab3-9360-9a65b492db9f",
              "title": "You need a GC",
              "isCorrect": false
            }
          ],
          "descriptionText": "Returning a reference to a local - dangling references are forbidden",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2517af39-e9af-484f-8200-9907073cdced",
          "title": "How to fix dangle?",
          "answers": [
            {
              "id": "31c83708-4dd0-4039-bf8f-6785995ebd18",
              "title": "Return String by ownership",
              "isCorrect": true
            },
            {
              "id": "d05a32de-23f1-4317-be40-7b793d91e85c",
              "title": "Always return &'static String",
              "isCorrect": false
            },
            {
              "id": "c44b4bfb-d41f-4eab-8513-ee9e11d18e60",
              "title": "Return &&String",
              "isCorrect": false
            },
            {
              "id": "ba4c8265-103a-48c6-9a4c-8b0e67c422b3",
              "title": "Use unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Move the value out - the owner lives outside",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d2e0688c-eea9-4a49-9d60-16bebf6ff926",
          "title": "What is a slice (&str, &[T])?",
          "answers": [
            {
              "id": "97fb923d-1be2-48af-8d61-91e861d7eaa1",
              "title": "Ownership of part of a collection",
              "isCorrect": false
            },
            {
              "id": "a391995b-f385-48c5-87b9-768d7bc1ef94",
              "title": "A non-owning reference to a contiguous region of data",
              "isCorrect": true
            },
            {
              "id": "7e763a39-2098-4778-adad-2a55e635153d",
              "title": "A copied range",
              "isCorrect": false
            },
            {
              "id": "4bfbc1c8-a267-48dc-87bf-c3eca44411fa",
              "title": "A smart pointer with auto-drop",
              "isCorrect": false
            }
          ],
          "descriptionText": "Slice = pointer + length - no ownership",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "16586237-8b2e-4258-b046-990339ab67d0",
          "title": "Why is returning a usize index from first_word risky?",
          "answers": [
            {
              "id": "bcfc189a-2f4a-483d-9d48-a7e61e4bb8d3",
              "title": "The index can be negative",
              "isCorrect": false
            },
            {
              "id": "1eb3ad99-cd45-47bc-8673-901e195f5d9e",
              "title": "The index isn't tied to the data and becomes stale after modifications",
              "isCorrect": true
            },
            {
              "id": "d0b98e55-47da-43af-9f61-f8fc947bc061",
              "title": "usize is too small",
              "isCorrect": false
            },
            {
              "id": "bd461a5f-7fa2-4526-9cd1-47bae166ff24",
              "title": "You can't compute string length",
              "isCorrect": false
            }
          ],
          "descriptionText": "Detached index breaks after clear() - no coupling to data",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dae5cf8b-5eb9-43dc-af6b-3296e61ee3ea",
          "title": "Which signature is more general?",
          "answers": [
            {
              "id": "1c32732d-4378-451c-9523-c5e2f46aa885",
              "title": "fn first_word(s: &String) -> &str",
              "isCorrect": false
            },
            {
              "id": "54dc434e-6b5b-437f-9d4e-8a111d836182",
              "title": "fn first_word(s: &str) -> &str",
              "isCorrect": true
            },
            {
              "id": "5b879a9c-5c88-4348-b48c-6bf6b0743bc8",
              "title": "fn first_word(s: String) -> &str",
              "isCorrect": false
            },
            {
              "id": "f0eb1ff0-5e2b-49c0-84b1-9baafa66a8dd",
              "title": "fn first_word<T>(s: T) -> &str",
              "isCorrect": false
            }
          ],
          "descriptionText": "Works with &String and literals - more general slice",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "862e39f5-057b-4a43-9f98-2fb14ec83265",
          "title": "What does the slice &s[3..7] of a String store?",
          "answers": [
            {
              "id": "d6f9f79a-4da2-4423-98d8-c152e5afa6a9",
              "title": "A copy of the bytes",
              "isCorrect": false
            },
            {
              "id": "abe0c412-3bf6-4629-8018-21fbe3c90253",
              "title": "A pointer to the start and a length",
              "isCorrect": true
            },
            {
              "id": "300b4df8-18d3-431d-8612-bbf3a4774f88",
              "title": "A new String",
              "isCorrect": false
            },
            {
              "id": "58dae2e1-f4b1-4f7e-80e5-e05e1ee1f9eb",
              "title": "'static data",
              "isCorrect": false
            }
          ],
          "descriptionText": "Pointer + len - no copying",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6116316e-0408-4414-87e0-2515430a25a9",
          "title": "What slice bounds are valid for a string?",
          "answers": [
            {
              "id": "17173000-bd40-4801-ada7-19b054c258bc",
              "title": "Any byte offsets",
              "isCorrect": false
            },
            {
              "id": "b4813288-62f6-4a80-847b-15e0c5275ca6",
              "title": "Only at valid UTF-8 boundaries",
              "isCorrect": true
            },
            {
              "id": "8f054282-8efa-49cd-9089-4567e2864005",
              "title": "Only on Unicode (grapheme) boundaries",
              "isCorrect": false
            },
            {
              "id": "d4898262-4a8c-43f9-bcb5-cd909193f58d",
              "title": "Only multiples of 4",
              "isCorrect": false
            }
          ],
          "descriptionText": "By Unicode scalar boundaries - otherwise runtime error",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bfd8b9dd-ccbe-4569-96bc-8bdd1983e6f8",
          "title": "What will happen?\n\nlet mut s = String::from(\"hello world\");\nlet w = first_word(&s);\ns.clear();\nprintln!(\"{w}\");",
          "answers": [
            {
              "id": "c9917696-8f3d-4b1a-bdf2-7daa7d715ffb",
              "title": "Prints empty",
              "isCorrect": false
            },
            {
              "id": "580f26d0-b054-4636-b2e3-5cfb6807d499",
              "title": "Compiles and crashes",
              "isCorrect": false
            },
            {
              "id": "32774623-3c9d-4d10-8464-855dc9d8c4b5",
              "title": "Compile error (borrow conflict)",
              "isCorrect": true
            },
            {
              "id": "3d327cc2-53d0-4a08-8bad-7e9aec6786df",
              "title": "It's fine; w isn't tied to s",
              "isCorrect": false
            }
          ],
          "descriptionText": "Cannot have & and &mut simultaneously - clear() needs &mut while w is alive",
          "descriptionLink": "understanding_ownership_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "2be568ee-c7cb-4d67-91d7-7f5efdd8be9e",
      "theme": "Using Structs to Structure Related Data",
      "priority": 3,
      "questions": [
        {
          "id": "83c4e7e5-b9e1-4f2a-8897-22fb6413eb1c",
          "title": "How is a struct defined in Rust?",
          "answers": [
            {
              "id": "4f59daad-feaa-4c2d-819d-d815fd45a114",
              "title": "class User { … }",
              "isCorrect": false
            },
            {
              "id": "67f49901-c234-4670-9e9a-b55a43a4df6a",
              "title": "struct User { … }",
              "isCorrect": true
            },
            {
              "id": "3eb3b5f0-6818-43ea-8416-da486013bc9f",
              "title": "object User { … }",
              "isCorrect": false
            },
            {
              "id": "94741915-ae36-4618-8d6c-7152a0caca48",
              "title": "data User { … }",
              "isCorrect": false
            }
          ],
          "descriptionText": "Use the struct keyword with braces. Rust has no Java/Kotlin-style class or object",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4c0c222d-2a55-4dfe-bfe2-4b5b64619a90",
          "title": "What are fields in a struct?",
          "answers": [
            {
              "id": "0f77a247-58d1-440e-ac2c-08f6ff04de0d",
              "title": "Default values",
              "isCorrect": false
            },
            {
              "id": "61994bf6-179e-4175-9306-5d4414c07d8f",
              "title": "Variables inside a function",
              "isCorrect": false
            },
            {
              "id": "eff80625-a3a9-43bb-b721-b1ea513dabea",
              "title": "Named data inside a struct",
              "isCorrect": true
            },
            {
              "id": "4b6f4964-5263-48b8-b103-f4441f5594b1",
              "title": "Separate methods of the struct",
              "isCorrect": false
            }
          ],
          "descriptionText": "Fields are the components of a struct, each with its own name and type. Unlike tuples, a struct gives names to data",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4c3b61ca-62c6-4c1c-85a6-6fd3ac98151c",
          "title": "What must be specified when declaring a field?",
          "answers": [
            {
              "id": "cb10d244-a2c4-408a-8488-fe1c8a157305",
              "title": "Only the name",
              "isCorrect": false
            },
            {
              "id": "48c41dce-5c33-4fac-b298-a7e4ed79b808",
              "title": "Only the type",
              "isCorrect": false
            },
            {
              "id": "9a689f73-7472-4a83-a89d-73255ceeb270",
              "title": "Name and type",
              "isCorrect": true
            },
            {
              "id": "c5b084be-227c-43ec-9294-55d5450cb6c9",
              "title": "Nothing; Rust infers it",
              "isCorrect": false
            }
          ],
          "descriptionText": "Struct fields always specify both name and type. A struct defines a data schema",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9ff81999-ce42-4513-8d0a-45a0426989e9",
          "title": "How do you create a struct instance?",
          "answers": [
            {
              "id": "7fed5303-30f5-413c-bb36-af595e6146c8",
              "title": "User(true, \"name\", \"email\", 1)",
              "isCorrect": false
            },
            {
              "id": "9e7ae7b6-85c1-4812-aba3-ba19e8d1c0f4",
              "title": "User { active: true, username: ..., email: ..., sign_in_count: 1 }",
              "isCorrect": true
            },
            {
              "id": "c0fb6679-225b-4fbf-8960-c7a735d53c0c",
              "title": "new User(...)",
              "isCorrect": false
            },
            {
              "id": "6d000a8e-c2b3-4873-8871-a8c798333980",
              "title": "User::new(...) — always",
              "isCorrect": false
            }
          ],
          "descriptionText": "A struct instance is created with { key: value }. There's no default constructor",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5a23381b-248a-4a8e-a625-3f92fe54c83e",
          "title": "Can you change the fields of a struct instance?",
          "answers": [
            {
              "id": "a1418099-275d-4b3a-b2aa-1e9f6654f49a",
              "title": "Always",
              "isCorrect": false
            },
            {
              "id": "bae0299b-fe35-46ec-8246-8858d8b99b83",
              "title": "Only if the field itself is mut",
              "isCorrect": false
            },
            {
              "id": "8ae47d12-79bb-4e73-b6dd-ec31aee07fe6",
              "title": "Only if the binding (the whole variable) is mut",
              "isCorrect": true
            },
            {
              "id": "c5fa39fa-7df8-4683-92fd-b105c07fe757",
              "title": "Never",
              "isCorrect": false
            }
          ],
          "descriptionText": "In Rust, mutability is set for the whole instance. Individual fields can't be declared mut",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f380b271-68cc-470e-9bb7-1fab4b9ed672",
          "title": "How do you access a struct field?",
          "answers": [
            {
              "id": "8fc73520-a822-4bfd-9d87-fdeb24fe5518",
              "title": "user[\"email\"]",
              "isCorrect": false
            },
            {
              "id": "c369b4e5-e30f-49dc-b898-d60442527f3a",
              "title": "user->email",
              "isCorrect": false
            },
            {
              "id": "d6674844-addb-45cb-8111-d28be4d2f721",
              "title": "user.email",
              "isCorrect": true
            },
            {
              "id": "4af6b8bf-29d8-4119-a8a0-300561aafd42",
              "title": "email(user)",
              "isCorrect": false
            }
          ],
          "descriptionText": "Use dot notation. Similar to C/Java in this respect",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "37b63492-9a5c-4b99-b651-542a152ca893",
          "title": "What does \"field init shorthand\" do?",
          "answers": [
            {
              "id": "27219555-4a76-44ba-ac3c-c8348d2e9bc8",
              "title": "Automatically creates getters",
              "isCorrect": false
            },
            {
              "id": "f6f82bb6-e171-4510-8334-f117972d73bb",
              "title": "Lets you omit the field name if it matches the parameter name",
              "isCorrect": true
            },
            {
              "id": "3e6b0871-e83b-4037-bd08-764a2fe85ab0",
              "title": "Automatically makes all fields mut",
              "isCorrect": false
            },
            {
              "id": "0962f72c-c9a8-46ae-8b1c-ae19aba5564f",
              "title": "Duplicates all fields",
              "isCorrect": false
            }
          ],
          "descriptionText": "If a parameter and a field share a name, you can write it once. Reduces duplication",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "326e90d0-9daf-46c7-a265-3c6a4a50f3bd",
          "title": "What does the shorthand call look like?",
          "answers": [
            {
              "id": "b36f1e46-95dd-45ad-9374-9f8e87180f97",
              "title": "User { email: email, username: username }",
              "isCorrect": false
            },
            {
              "id": "3dfb7692-2c0a-4f10-9918-c9332c6d5954",
              "title": "User { email, username }",
              "isCorrect": true
            },
            {
              "id": "c4e7b136-4be5-4535-b7f3-e536ea159f67",
              "title": "User(email, username)",
              "isCorrect": false
            },
            {
              "id": "5aafdf22-a388-4561-afdb-fbc9312a0975",
              "title": "User::from(email, username)",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust expands email to email: email. It's syntactic sugar",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "35134eb0-1935-4efa-8e21-b805b9f4d78c",
          "title": "What does the \"struct update syntax\" do?",
          "answers": [
            {
              "id": "01139876-ac60-4c73-89b3-b5025507e936",
              "title": "Clones a struct",
              "isCorrect": false
            },
            {
              "id": "c46442ac-f6e1-402e-9702-3ad0740230e6",
              "title": "Creates a new instance by changing some fields and copying the rest from another instance",
              "isCorrect": true
            },
            {
              "id": "7804c3a2-6283-4f86-b784-be359b5cacbe",
              "title": "Mutates the struct in place",
              "isCorrect": false
            },
            {
              "id": "02d09d84-38c0-422a-8c4c-b9f6caafdeda",
              "title": "Deletes fields",
              "isCorrect": false
            }
          ],
          "descriptionText": "Use ..other_struct. Saves code when creating new instances",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "43026d0a-b19f-44e8-a438-69414fc04a9f",
          "title": "How is the update syntax written?",
          "answers": [
            {
              "id": "ccb75996-0003-4a1e-a1d4-1cf9fc526d1e",
              "title": "User { email: \"x\", user1 }",
              "isCorrect": false
            },
            {
              "id": "752b905e-5391-4a1e-a623-0e1b1d5d2e17",
              "title": "User { email: \"x\", ..user1 }",
              "isCorrect": true
            },
            {
              "id": "39a00803-35a9-46f6-8d76-159a54d2dd86",
              "title": "User::update(user1, \"x\")",
              "isCorrect": false
            },
            {
              "id": "ec42b502-2a3e-4833-a3bf-3054497933bd",
              "title": "User(..user1, email=\"x\")",
              "isCorrect": false
            }
          ],
          "descriptionText": "..user1 copies the remaining fields. Built-in Rust syntax",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c368ac50-4366-4de2-8f38-288a203431d7",
          "title": "What happens to user1.username when using ..user1?",
          "answers": [
            {
              "id": "7375bb69-0a50-43e0-a64d-331914d936d4",
              "title": "It's cloned",
              "isCorrect": false
            },
            {
              "id": "99f4969b-44b0-4caa-8623-76816d9f223a",
              "title": "It's moved",
              "isCorrect": true
            },
            {
              "id": "caa53249-695b-4217-b140-9f011b0db355",
              "title": "It remains accessible",
              "isCorrect": false
            },
            {
              "id": "4f468d83-57c7-4475-8ff1-cdb884243302",
              "title": "It's always copied, even if it's a String",
              "isCorrect": false
            }
          ],
          "descriptionText": "String fields are moved. String is not Copy",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0d359a55-b7a5-4dce-871b-10616249c124",
          "title": "What happens to user1.active if it's a bool?",
          "answers": [
            {
              "id": "d4f7a2f9-1dd5-4229-8c1a-0ba50a09abe3",
              "title": "It's moved",
              "isCorrect": false
            },
            {
              "id": "0d5402b5-3e05-4001-96f0-04d65538e481",
              "title": "It's copied",
              "isCorrect": true
            },
            {
              "id": "0f315810-8a0b-4774-ba4c-84d2ad6d0e10",
              "title": "Compile error",
              "isCorrect": false
            },
            {
              "id": "5aad5548-2d92-4ffe-909a-21dcaf46e0a3",
              "title": "Dropped",
              "isCorrect": false
            }
          ],
          "descriptionText": "bool implements Copy. Simple types are copied",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "527d925f-716b-4272-a1f7-53434b61f5f6",
          "title": "What is a tuple struct?",
          "answers": [
            {
              "id": "c3c62c26-271a-4f6a-8e2e-0dd4469853fe",
              "title": "A struct without fields",
              "isCorrect": false
            },
            {
              "id": "ef7e7dca-1b8a-48f8-a675-b680b5cfadca",
              "title": "A struct with a name but without field names",
              "isCorrect": true
            },
            {
              "id": "9b4a6273-3df3-48ba-805a-d84f118f69b7",
              "title": "A struct of only bools",
              "isCorrect": false
            },
            {
              "id": "c1280b00-d742-4583-9238-b8c924e2b2f7",
              "title": "A struct with dynamic fields",
              "isCorrect": false
            }
          ],
          "descriptionText": "Fields are specified only by types. It's a mix of tuple and struct",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "88a35bd2-32fa-4035-817c-93a12d6fe23d",
          "title": "How do you declare a tuple struct?",
          "answers": [
            {
              "id": "d07db724-05de-4f7f-ab09-ef246bec819f",
              "title": "struct Color { i32, i32, i32 }",
              "isCorrect": false
            },
            {
              "id": "b1743ec3-442c-41f8-b808-2d494a33da98",
              "title": "struct Color(i32, i32, i32);",
              "isCorrect": true
            },
            {
              "id": "22e0d5cf-63e5-44c6-8432-b427332beb7a",
              "title": "tuple Color(i32, i32, i32);",
              "isCorrect": false
            },
            {
              "id": "ed15e642-e000-4be4-ab93-e4199d4e11a3",
              "title": "struct Color: (i32, i32, i32);",
              "isCorrect": false
            }
          ],
          "descriptionText": "Provide the name and types in parentheses. That's Rust syntax",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e1ac62d9-39f2-4998-bb19-810a68de94cb",
          "title": "How do Color and Point differ?",
          "answers": [
            {
              "id": "beebfb21-688f-4bf8-b133-876267f96ecf",
              "title": "No difference; they're aliases",
              "isCorrect": false
            },
            {
              "id": "7b6f1a6b-86fd-44ed-a65c-199319057925",
              "title": "They're different types even if they have identical fields",
              "isCorrect": true
            },
            {
              "id": "bc8d217f-9c3e-48e5-8063-6cc9f5d537a1",
              "title": "The only difference is variable names",
              "isCorrect": false
            },
            {
              "id": "73c3b699-5b38-4211-88e5-a556c171a88d",
              "title": "Point can be used in place of Color",
              "isCorrect": false
            }
          ],
          "descriptionText": "Each struct is a distinct type. Rust is strongly typed",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e81e3037-09dd-44ed-bf19-5ce8ce1d1ab3",
          "title": "What is a unit-like struct?",
          "answers": [
            {
              "id": "d3ed92c7-f831-433c-9907-3c2b41f30950",
              "title": "A struct with one field",
              "isCorrect": false
            },
            {
              "id": "fdc4e1f8-8ba7-479a-bfca-bf96a36a6998",
              "title": "A struct with no fields",
              "isCorrect": true
            },
            {
              "id": "7d438684-002c-42a2-9f6c-0c3d95c36148",
              "title": "A struct with &str",
              "isCorrect": false
            },
            {
              "id": "84c1bc08-475c-4388-a494-cf0652d4c0d8",
              "title": "A struct that's always mut",
              "isCorrect": false
            }
          ],
          "descriptionText": "Written as struct Name;. It's analogous to the unit ()",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cf8463f6-7289-4169-9fb4-b8a8155d5c13",
          "title": "What are unit-like structs used for?",
          "answers": [
            {
              "id": "8654a8b1-2f5b-4555-ac1a-46af589e99bd",
              "title": "Storing an empty string",
              "isCorrect": false
            },
            {
              "id": "e42376a1-8d6f-477a-a4a0-3d29bcff3703",
              "title": "Implementing traits without storing data",
              "isCorrect": true
            },
            {
              "id": "f98153e8-8e3b-48a0-9d27-f69c6c0e0553",
              "title": "Saving memory",
              "isCorrect": false
            },
            {
              "id": "e9a84f94-e47c-41b7-9b79-1747f93171b3",
              "title": "Replacing enums",
              "isCorrect": false
            }
          ],
          "descriptionText": "Used for behavior, not data. Handy when implementing a trait",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "269bd97c-dc2a-4584-9478-9e5c51ae3b6a",
          "title": "Why do structs usually use String instead of &str?",
          "answers": [
            {
              "id": "647c4366-7c29-432b-b869-a7c39e9f6a4a",
              "title": "String is faster",
              "isCorrect": false
            },
            {
              "id": "ee5be08d-fcc4-4e41-b750-35c9b9ed0f9a",
              "title": "String is always smaller in memory",
              "isCorrect": false
            },
            {
              "id": "bb611b97-45fe-44f1-bebf-e5224e753d95",
              "title": "So the struct owns its data",
              "isCorrect": true
            },
            {
              "id": "6a1976ad-8986-4054-88f2-f5b40fd35cb4",
              "title": "To avoid writing lifetimes",
              "isCorrect": false
            }
          ],
          "descriptionText": "String owns data; &str requires a lifetime. Simplifies lifetime management",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2337ec79-d4fa-4dec-a172-5654791b2ecc",
          "title": "What happens if you put &str in a struct without a lifetime?",
          "answers": [
            {
              "id": "732d508a-3889-4037-aefa-242b9c95fd8f",
              "title": "Compiles",
              "isCorrect": false
            },
            {
              "id": "b213fb0d-f606-41ca-8c62-417ef43bcda0",
              "title": "Error: missing lifetime specifier",
              "isCorrect": true
            },
            {
              "id": "ce9356bc-dc8d-4628-9f2e-4a86cd358013",
              "title": "Always works",
              "isCorrect": false
            },
            {
              "id": "77b5c59a-fa60-431d-98ef-fd8e28bd2ac7",
              "title": "Automatically becomes String",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust requires lifetime parameters for references. Prevents dangling references",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8399b26c-8f61-477b-a7ba-54bedf93fa01",
          "title": "How do you fix a struct with &str?",
          "answers": [
            {
              "id": "1d211a86-8075-4e36-b207-8ade3c8bfee3",
              "title": "struct User { username: &str }",
              "isCorrect": false
            },
            {
              "id": "cf51d4ca-acf1-4954-899c-e37ac116b8be",
              "title": "struct User<'a> { username: &'a str }",
              "isCorrect": true
            },
            {
              "id": "a9979bcf-4849-47e9-b73a-27486cf7c22f",
              "title": "struct User(username: str)",
              "isCorrect": false
            },
            {
              "id": "9c8548b5-68be-4ee4-be87-714049a7f180",
              "title": "struct User { &'static str }",
              "isCorrect": false
            }
          ],
          "descriptionText": "References need a lifetime. The compiler requires 'a",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4ef92a52-2480-4f74-a10e-264228c5a82e",
          "title": "Why is area(width, height) inconvenient?",
          "answers": [
            {
              "id": "2cb59938-169c-4151-be1f-36d20d3b1484",
              "title": "The call is too long",
              "isCorrect": false
            },
            {
              "id": "0ad5c5fb-95ea-44e6-a954-4cd020db19ea",
              "title": "There's no relationship between the parameters",
              "isCorrect": true
            },
            {
              "id": "7f449de0-82ec-4e36-bdaa-83f57f97e212",
              "title": "Rust doesn't support two-parameter functions",
              "isCorrect": false
            },
            {
              "id": "22539945-dae3-4d60-8e7c-075e4af00c57",
              "title": "It's slower",
              "isCorrect": false
            }
          ],
          "descriptionText": "width and height aren't tied together. Better to group them in a struct",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2b733eb4-b4ec-4146-a44d-95a40d512244",
          "title": "Why is a tuple inconvenient for a rectangle?",
          "answers": [
            {
              "id": "f33e0510-b493-405f-85f3-cedd7e79d8bc",
              "title": "No field names, only indices",
              "isCorrect": true
            },
            {
              "id": "675cf19f-fd8d-4751-9074-c7079fd42ed6",
              "title": "Doesn't support multiplication",
              "isCorrect": false
            },
            {
              "id": "8de82c18-5f67-462c-8e17-ae4417834e7d",
              "title": "Slower than a struct",
              "isCorrect": false
            },
            {
              "id": "d364831e-6417-4459-bbf7-134e20c6a483",
              "title": "Doesn't store numbers",
              "isCorrect": false
            }
          ],
          "descriptionText": "With tuples you must remember indices. Hurts readability",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6c98875d-e528-4282-9be3-05878ffcb39c",
          "title": "Why is struct Rectangle better than a tuple?",
          "answers": [
            {
              "id": "b37f9e9a-dbc3-418d-bfeb-342a4a8abe72",
              "title": "Stores data on the heap",
              "isCorrect": false
            },
            {
              "id": "dab7d583-938b-41a1-90f8-c1a1fc739d20",
              "title": "Gives field names width and height",
              "isCorrect": true
            },
            {
              "id": "1ca58607-d1c2-4e18-82a3-1a440ac2f805",
              "title": "Can only be used in main",
              "isCorrect": false
            },
            {
              "id": "c5c6e8d2-4b57-4966-b9a9-1a2f58adac8c",
              "title": "Always gets copied",
              "isCorrect": false
            }
          ],
          "descriptionText": "A struct adds semantics. Code becomes clearer",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3855d2f7-982e-4c71-b3aa-d14ba3e34d30",
          "title": "What happens with println!(\"{rect1}\")?",
          "answers": [
            {
              "id": "1ee6708f-cc99-476c-b664-9694c2b1b0ed",
              "title": "It prints the struct",
              "isCorrect": false
            },
            {
              "id": "dbca2a18-1b51-46bd-88d2-93411e342cca",
              "title": "Error: no Display",
              "isCorrect": true
            },
            {
              "id": "58788b28-f7ad-4610-bc44-910f655690e2",
              "title": "Panic",
              "isCorrect": false
            },
            {
              "id": "aa3e4b80-b0b3-4574-ac88-f7f9bb5d004e",
              "title": "Always works",
              "isCorrect": false
            }
          ],
          "descriptionText": "Structs don't have Display by default. Rust can't guess how to print it",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8fb7c1b8-7488-4ac4-b9b1-858da9384817",
          "title": "What's needed for debug formatting?",
          "answers": [
            {
              "id": "f0ba4a51-4afb-4e8a-9a8d-39f8d7e751ad",
              "title": "Implement Display",
              "isCorrect": false
            },
            {
              "id": "b1320e4d-93b7-4e3b-8f8f-0cb56c54b4b8",
              "title": "Use {:?} and #[derive(Debug)]",
              "isCorrect": true
            },
            {
              "id": "f5053d09-2080-4764-8124-780d8b05cdf2",
              "title": "Just println!(\"{:?}\")",
              "isCorrect": false
            },
            {
              "id": "7a078f7a-4c56-4aa2-9371-4c9ffe0d3b92",
              "title": "dbg! is enough",
              "isCorrect": false
            }
          ],
          "descriptionText": "Debug must be explicitly enabled. Without derive there's no debug output",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "12d73b2f-ead2-43cf-a5cc-bd0ae89dfc4d",
          "title": "How does dbg! differ from println!?",
          "answers": [
            {
              "id": "22dcc4fe-0fff-448c-a567-ac338817c2cc",
              "title": "dbg! always colors text",
              "isCorrect": false
            },
            {
              "id": "9990e6a9-d61d-4978-a137-f1bf99145b35",
              "title": "dbg! prints to stderr and returns the value",
              "isCorrect": true
            },
            {
              "id": "564df02b-5474-4d0e-9e7d-d22befd4a435",
              "title": "dbg! works only for numbers",
              "isCorrect": false
            },
            {
              "id": "6248741e-473f-4edf-9f88-bbb0361a0cd8",
              "title": "println! is faster",
              "isCorrect": false
            }
          ],
          "descriptionText": "dbg! is handy for debugging. It prints and also returns the value",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f63f9e32-d606-4618-9aeb-2477896fdf3e",
          "title": "How do you declare a method for a struct?",
          "answers": [
            {
              "id": "5302a98b-6184-496c-bcc0-dd7ffe5ff073",
              "title": "fn area(self) { … }",
              "isCorrect": false
            },
            {
              "id": "7ab39703-4496-4429-bdfa-e33ba8934083",
              "title": "impl Rectangle { fn area(&self) { … } }",
              "isCorrect": true
            },
            {
              "id": "6494104d-4b92-425e-a8f5-a7d1aaa10dff",
              "title": "Rectangle::area = fn() { … }",
              "isCorrect": false
            },
            {
              "id": "d39f4161-2fa7-45d2-ab1e-12334ed2bb24",
              "title": "method Rectangle::area { … }",
              "isCorrect": false
            }
          ],
          "descriptionText": "Methods live inside impl blocks. That's Rust syntax",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "59ff298b-0e81-4a6e-a37e-fc7b92195d93",
          "title": "How does a function differ from a method?",
          "answers": [
            {
              "id": "3866194b-4249-4596-ba93-c2fa37528cb8",
              "title": "A method always returns self",
              "isCorrect": false
            },
            {
              "id": "39f0df61-c909-4bb7-8fd4-fc3199a3ab6f",
              "title": "A method is always public",
              "isCorrect": false
            },
            {
              "id": "5ed6ba0c-2499-4686-96f6-9bb976617152",
              "title": "A method is inside impl and takes self",
              "isCorrect": true
            },
            {
              "id": "ca96cbf2-251b-4de0-b098-977c622b6b7d",
              "title": "A function works only in main",
              "isCorrect": false
            }
          ],
          "descriptionText": "A method is a function bound to a type. self is the first parameter",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d4ddbc13-b5b5-448c-9a81-0446d19947da",
          "title": "What does &self mean?",
          "answers": [
            {
              "id": "6700e001-ab00-4696-a987-8a9b5a7a97b4",
              "title": "The method takes a copy",
              "isCorrect": false
            },
            {
              "id": "a6deed54-96f6-486c-a1da-cff7df4d73ea",
              "title": "The method takes a reference to itself",
              "isCorrect": true
            },
            {
              "id": "f441567d-07bd-4d2e-bcf8-4c6df42429c1",
              "title": "The method requires mut",
              "isCorrect": false
            },
            {
              "id": "02cbc890-ba3d-4d50-a2bd-af0c21132ae2",
              "title": "The method transfers ownership",
              "isCorrect": false
            }
          ],
          "descriptionText": "&self is sugar for self: &Self. It borrows",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "61e70ada-a3fb-485b-8482-a2d793ab3023",
          "title": "How do you declare a method that changes fields?",
          "answers": [
            {
              "id": "46311e69-e754-40bf-9c5e-b266b29ed787",
              "title": "fn change(&self) { … }",
              "isCorrect": false
            },
            {
              "id": "837a0d12-3beb-4e4a-917e-1ce72a4c906d",
              "title": "fn change(mut self) { … }",
              "isCorrect": false
            },
            {
              "id": "fc243fca-e58d-40a1-8cae-0f4f1023beea",
              "title": "fn change(&mut self) { … }",
              "isCorrect": true
            },
            {
              "id": "58f56cfe-2e5f-4c86-b9b5-0e795f6f9c05",
              "title": "fn change(self&) { … }",
              "isCorrect": false
            }
          ],
          "descriptionText": "You need &mut self. It's a mutable borrow",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "15c71406-f55a-4279-b56e-8705256e2374",
          "title": "What does the can_hold() method do?",
          "answers": [
            {
              "id": "2ecbb40f-0c80-4c47-9ad2-fe4faa1c0761",
              "title": "Compares two numbers",
              "isCorrect": false
            },
            {
              "id": "4cb82fe9-43ed-4f2f-8c1a-10f0d88c99b1",
              "title": "Checks whether one Rectangle fits inside another",
              "isCorrect": true
            },
            {
              "id": "ee3f4a26-b79a-4ab1-a999-e55225741da0",
              "title": "Creates a new Rectangle",
              "isCorrect": false
            },
            {
              "id": "58357830-4c70-4b0b-9029-6f781787be87",
              "title": "Checks Debug",
              "isCorrect": false
            }
          ],
          "descriptionText": "Compares width and height. Example from the chapter",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "17dfdfaf-ef78-411c-a544-de782818950d",
          "title": "How do you call a method?",
          "answers": [
            {
              "id": "b635f5f8-731e-4ef2-b874-f1ab1ee77a5d",
              "title": "Rectangle.area(rect)",
              "isCorrect": false
            },
            {
              "id": "62468e44-f8fb-46f3-aa91-9a7a4f21d162",
              "title": "rect.area()",
              "isCorrect": true
            },
            {
              "id": "b16e2b38-4aa6-42e9-897f-b3461a38fd64",
              "title": "area(rect)",
              "isCorrect": false
            },
            {
              "id": "e1c6e4c4-a16f-433b-94b6-36b2f709bbcc",
              "title": "rect->area()",
              "isCorrect": false
            }
          ],
          "descriptionText": "Use instance.method(). Rust performs auto-ref",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2390bf29-a5ca-4642-945f-704ac6d3e3b8",
          "title": "What is an associated function?",
          "answers": [
            {
              "id": "bae7a279-1000-4fd0-83be-4aea82d30083",
              "title": "Always a static method",
              "isCorrect": false
            },
            {
              "id": "752accc5-c050-477c-b234-43306c233085",
              "title": "Any function inside impl",
              "isCorrect": false
            },
            {
              "id": "3157010a-7b4b-481c-9358-c7dcf06f2c4b",
              "title": "A function without self",
              "isCorrect": true
            },
            {
              "id": "4c925c02-b9cb-43ea-9d81-194bd9168e6e",
              "title": "Only a constructor",
              "isCorrect": false
            }
          ],
          "descriptionText": "An associated function doesn't take self. Called with ::",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "447be90d-8186-4d4d-9b7d-32018241ecdd",
          "title": "How do you call an associated function?",
          "answers": [
            {
              "id": "51eb89ec-98b7-4b09-9c2e-164e54c23efb",
              "title": "Rectangle::square(3)",
              "isCorrect": true
            },
            {
              "id": "57735e25-dc03-42ed-9474-33011d9df407",
              "title": "rect.square(3)",
              "isCorrect": false
            },
            {
              "id": "18b05492-191b-4cf1-a10d-5168e2eb93b0",
              "title": "new Rectangle(3)",
              "isCorrect": false
            },
            {
              "id": "0db6f868-6094-4efb-aabe-1b99e6e2c1ce",
              "title": "square Rectangle(3)",
              "isCorrect": false
            }
          ],
          "descriptionText": "Use Type::func(). There's no instance binding",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b264b010-13cb-402a-995b-0c0c58d3eb93",
          "title": "What does Self refer to in an impl?",
          "answers": [
            {
              "id": "0ff0eea6-4d7b-41e0-a41d-012db5f06d82",
              "title": "()",
              "isCorrect": false
            },
            {
              "id": "418db767-268f-467b-9a17-aa72d10a9b0b",
              "title": "The struct's type name",
              "isCorrect": true
            },
            {
              "id": "c718f3d8-50a4-4441-b54a-6be9fbe89cfb",
              "title": "&'static struct",
              "isCorrect": false
            },
            {
              "id": "6ee22209-cb35-4bbf-ac16-4ff72dfb46ea",
              "title": "void",
              "isCorrect": false
            }
          ],
          "descriptionText": "Self equals the type being implemented. Syntax shorthand",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "608b6c00-eab4-4aa1-a5c6-803851619f8d",
          "title": "Can you have multiple impl blocks for one struct?",
          "answers": [
            {
              "id": "df675b4c-c5fc-4239-8e7a-35c6ca511f83",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "e92590f5-c319-4e63-8b0b-e1ec9f453c90",
              "title": "Yes, and that's valid syntax",
              "isCorrect": true
            },
            {
              "id": "806adb4a-3951-4e3f-8a78-cba9ae1cbd6b",
              "title": "Only when using a trait",
              "isCorrect": false
            },
            {
              "id": "f8ba3f56-00b5-408d-9ae8-b0932c3e14d1",
              "title": "Only on nightly",
              "isCorrect": false
            }
          ],
          "descriptionText": "You can split impls. Useful for generics/traits organization",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "23ca89d9-2af9-4df1-92da-dc51c63d8ba0",
          "title": "What happens if a method and a field share a name?",
          "answers": [
            {
              "id": "b1bc5104-c086-4938-8149-fbac4dcbb2a9",
              "title": "Error",
              "isCorrect": false
            },
            {
              "id": "4cb2dcca-65ae-40ec-b626-08cf1cc00b24",
              "title": "Rust distinguishes them: rect.width (field) vs rect.width() (method)",
              "isCorrect": true
            },
            {
              "id": "ac7f9219-286b-45bb-93a9-714cf8543f19",
              "title": "The method overwrites the field",
              "isCorrect": false
            },
            {
              "id": "8b828c6e-7586-4439-bfdf-d89a05299394",
              "title": "The field becomes private",
              "isCorrect": false
            }
          ],
          "descriptionText": "Parentheses indicate a method call. Rust disambiguates by syntax",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bacb6500-0f49-4549-beba-40af3425f963",
          "title": "What is a getter in Rust?",
          "answers": [
            {
              "id": "d688ccd2-4f8c-4b4a-b2e2-fa0c8b2a45ff",
              "title": "Generated automatically",
              "isCorrect": false
            },
            {
              "id": "60041a49-8856-400f-98bf-050094b762a5",
              "title": "You write it manually, typically returning a field",
              "isCorrect": true
            },
            {
              "id": "f1cb3bcc-f6ef-48c6-b418-f02e0bc7f818",
              "title": "Not supported",
              "isCorrect": false
            },
            {
              "id": "9b99e57c-afd6-4663-91c9-a691f8173fb2",
              "title": "Created via a macro",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust doesn't auto-generate getters. The language is minimalist",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ad6b2a5b-1336-4905-b486-9128e834098f",
          "title": "How does Rust replace -> from C++?",
          "answers": [
            {
              "id": "c8d57574-d5c8-48de-b748-762f732ea945",
              "title": "Rust also uses ->",
              "isCorrect": false
            },
            {
              "id": "0718a228-a4ef-4d02-87cf-e04ee8411d67",
              "title": "Rust uses auto ref/deref when calling methods",
              "isCorrect": true
            },
            {
              "id": "aadfdae3-166d-4cab-a68f-0d9757d0a4da",
              "title": "Rust requires * before the call",
              "isCorrect": false
            },
            {
              "id": "cd0e7827-dade-4d44-9a87-88490eadf2af",
              "title": "Rust always copies",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust auto-references as needed. Convenience for method calls",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "13995474-6de5-419e-a0cf-a6fb764245ad",
          "title": "What does dbg! print for dbg!(30 * 2)?",
          "answers": [
            {
              "id": "89721d8a-5f23-4f7a-9fd2-0ce3b74fb3ca",
              "title": "Only the number",
              "isCorrect": false
            },
            {
              "id": "9d359d3a-bffe-443c-9d3b-05a016904735",
              "title": "File, line, and result",
              "isCorrect": true
            },
            {
              "id": "a49ce044-4007-48fa-923e-433415fcf86f",
              "title": "Nothing",
              "isCorrect": false
            },
            {
              "id": "d0c1634a-4da4-433a-ad55-4d4010edd83b",
              "title": "Compiler error",
              "isCorrect": false
            }
          ],
          "descriptionText": "dbg! prints context + value. For debugging",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a14e6515-de8c-479f-9b0c-6e56c39ac04d",
          "title": "What is the pretty debug syntax?",
          "answers": [
            {
              "id": "019368e6-13e8-4e37-82ee-e6712a46d8b6",
              "title": "{:#?}",
              "isCorrect": true
            },
            {
              "id": "be2bd578-a075-4646-8bc6-ff5b611d9ae9",
              "title": "{:debug}",
              "isCorrect": false
            },
            {
              "id": "d1938b0e-c9a7-411f-a0f0-fc3ecb0b1ecd",
              "title": "{::?}",
              "isCorrect": false
            },
            {
              "id": "fd9a785a-aae9-4147-9b55-4db513c8e770",
              "title": "{~?}",
              "isCorrect": false
            }
          ],
          "descriptionText": "Pretty-print is {:#?}. Standard Rust format",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4bafffd5-bfa8-4c0d-8e34-bf22905ecf54",
          "title": "What does impl Rectangle { fn new() -> Self { … } } do?",
          "answers": [
            {
              "id": "211ed15e-13a8-4fa9-a52c-dd419012f851",
              "title": "Not allowed",
              "isCorrect": false
            },
            {
              "id": "53ed553a-48fe-4da1-8427-b46d517f598d",
              "title": "Defines an associated-function constructor",
              "isCorrect": true
            },
            {
              "id": "3726a092-3ab2-4e9d-81fd-2f743f626219",
              "title": "Defines a method",
              "isCorrect": false
            },
            {
              "id": "f9c535d0-dffa-4520-951a-d3ae988ec862",
              "title": "Nothing",
              "isCorrect": false
            }
          ],
          "descriptionText": "A constructor via new. Rust has no built-in constructors",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "477174b9-a424-466b-93c1-c8a509a25675",
          "title": "Bottom line: why use structs?",
          "answers": [
            {
              "id": "16f1435d-4a5e-4733-8c4f-a7ff0ec044e7",
              "title": "To replace enums",
              "isCorrect": false
            },
            {
              "id": "7918e90e-ae37-4bc1-a974-e92fc5ec0ccc",
              "title": "To store values like an array",
              "isCorrect": false
            },
            {
              "id": "2ba52f01-66e3-458f-897e-1126bbbe2130",
              "title": "To group related data with names and behavior",
              "isCorrect": true
            },
            {
              "id": "0f16844d-0785-4ff9-b76d-af345a30f6d9",
              "title": "To speed up compilation",
              "isCorrect": false
            }
          ],
          "descriptionText": "A struct groups data and methods. It's Rust's primary modeling tool",
          "descriptionLink": "using_structs_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "fcad77a8-a3ca-4c4f-ab24-0c61cf392895",
      "theme": "Enums and Pattern Matching",
      "priority": 4,
      "questions": [
        {
          "id": "95059954-6b22-4689-af63-79e213373f0b",
          "title": "What does an enum do in Rust?",
          "answers": [
            {
              "id": "88a0de58-606c-493d-9519-0c913fd19a29",
              "title": "Creates an array of values",
              "isCorrect": false
            },
            {
              "id": "c2182dbb-8fa0-4a4e-8d1c-771fd9965062",
              "title": "Lets you list the possible variants of a type",
              "isCorrect": true
            },
            {
              "id": "414f28ef-6d36-45e9-9093-83a483843de5",
              "title": "Stores only numbers",
              "isCorrect": false
            },
            {
              "id": "5aacc6a3-27c8-4942-841b-6410dd09ddf3",
              "title": "Works like a struct without fields",
              "isCorrect": false
            }
          ],
          "descriptionText": "An enum defines a type that can be one of several variants. It's an expressive alternative to structs when modeling choices",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c4d4959b-4dac-4e8c-ad2c-0adac8306612",
          "title": "How do you declare an enum IpAddrKind with variants V4 and V6?",
          "answers": [
            {
              "id": "44d4615e-7d90-4da4-9c04-03d17ccb513c",
              "title": "enum IpAddrKind { V4, V6 }",
              "isCorrect": true
            },
            {
              "id": "b7013c3e-39d6-4992-9c4f-6e422137392c",
              "title": "enum IpAddrKind(V4, V6)",
              "isCorrect": false
            },
            {
              "id": "89285bc8-20ce-4927-b10d-5386a4a2b0fe",
              "title": "struct IpAddrKind { V4, V6 }",
              "isCorrect": false
            },
            {
              "id": "fa28b260-d294-4dea-8209-f9ecf5953a5f",
              "title": "type IpAddrKind = V4 | V6",
              "isCorrect": false
            }
          ],
          "descriptionText": "Enums use braces with listed variants. That's standard Rust syntax",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "19d8b9c5-431b-4760-b03f-d5ba5b580fbd",
          "title": "How do you create an enum instance?",
          "answers": [
            {
              "id": "f69f871d-6bb3-4355-88f6-dc0c07884d9f",
              "title": "let x = V4;",
              "isCorrect": false
            },
            {
              "id": "a3554bfb-8a6b-4673-b5d5-517ecc69dda6",
              "title": "let x = IpAddrKind::V4;",
              "isCorrect": true
            },
            {
              "id": "1368fa07-752c-43c0-9807-a3f23710b79a",
              "title": "let x = IpAddrKind.V4;",
              "isCorrect": false
            },
            {
              "id": "ce3a8bf5-c397-4e06-9f25-e4874f25c611",
              "title": "let x = new IpAddrKind(V4);",
              "isCorrect": false
            }
          ],
          "descriptionText": "Variants are accessed with ::. Rust namespacing",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "097c1374-8f22-4745-990c-a8402141e5de",
          "title": "Can variants of an enum hold data?",
          "answers": [
            {
              "id": "9b17aba5-e16c-44af-8dde-0a3cb73d1900",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "85a4ab84-ce19-433e-9518-d61eac9e4b92",
              "title": "Only numbers",
              "isCorrect": false
            },
            {
              "id": "57b377ff-a182-4110-b5bb-8dd8a0644c26",
              "title": "Yes, any type",
              "isCorrect": true
            },
            {
              "id": "ac43e9dd-238d-4102-9ae6-a4e62eae88ec",
              "title": "Only strings",
              "isCorrect": false
            }
          ],
          "descriptionText": "Enums can contain different kinds of data, e.g., V4(u8, u8, u8, u8)",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c3ba3234-7a4d-4e46-b4f8-8232efa6f764",
          "title": "Why is enum IpAddr better than struct IpAddrKind + String?",
          "answers": [
            {
              "id": "90cfed3c-60f1-4b1e-9871-3c6a37453fb7",
              "title": "Enums are faster",
              "isCorrect": false
            },
            {
              "id": "73321207-b634-48a1-95e3-36609729a0e7",
              "title": "Enums are clearer and shorter",
              "isCorrect": true
            },
            {
              "id": "5d0d1a77-161a-48c6-8889-d707d21cb474",
              "title": "Enums always use less memory",
              "isCorrect": false
            },
            {
              "id": "636e846c-35d3-46aa-88ca-669fd164a203",
              "title": "There's no difference",
              "isCorrect": false
            }
          ],
          "descriptionText": "An enum stores the kind and the data together. Less code, more expressive",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5148f06f-18a8-4411-a30b-2c3543d91821",
          "title": "Can different enum variants have different amounts and types of data?",
          "answers": [
            {
              "id": "10cda9ff-7874-4367-8b84-b8834fbcf63a",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "06b98552-9037-41b9-89f6-beb12e8633a8",
              "title": "Yes",
              "isCorrect": true
            },
            {
              "id": "e09a883d-e18c-47a0-820a-426d5dd1c171",
              "title": "Only the same types",
              "isCorrect": false
            },
            {
              "id": "d63b9d40-de5a-43ce-a8c4-93fee2444aa7",
              "title": "Only the same arity",
              "isCorrect": false
            }
          ],
          "descriptionText": "V4(u8,u8,u8,u8) and V6(String) are valid together. Enums support heterogeneous data",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "40db5716-9f7b-465a-9ae7-7cd049ef914b",
          "title": "How do Message::Quit and Message::Write(String) differ?",
          "answers": [
            {
              "id": "b15efadf-16f7-41e1-b554-89a961df1a4b",
              "title": "The first has no data; the second carries data",
              "isCorrect": true
            },
            {
              "id": "a7757c5e-a919-446f-b1bf-aaa18b81ea19",
              "title": "They're the same",
              "isCorrect": false
            },
            {
              "id": "06a7f3fd-5ad7-4064-a977-6aa9a8004587",
              "title": "Quit is always a String",
              "isCorrect": false
            },
            {
              "id": "5812dab1-493c-487f-8268-58dc213129bc",
              "title": "Write can't be used",
              "isCorrect": false
            }
          ],
          "descriptionText": "Quit is unit-like; Write stores a String. Variants may or may not contain data",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "593c3adf-d108-4e88-af0e-aa371d0b203a",
          "title": "Can you add methods to an enum?",
          "answers": [
            {
              "id": "d39b717f-08e9-4c9c-84b3-3576e71ccf37",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "86bab836-34e5-4694-b0ef-43a1d54319fb",
              "title": "Yes, via impl",
              "isCorrect": true
            },
            {
              "id": "a3378e8e-2b45-4e56-9e0b-2d3979bea69d",
              "title": "Only to variants",
              "isCorrect": false
            },
            {
              "id": "4fa9866e-6483-4dde-9b9c-ecafcaa891d1",
              "title": "Only if the enum is empty",
              "isCorrect": false
            }
          ],
          "descriptionText": "Enums support impl blocks. Methods work like with structs",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d423bbea-a6fd-4407-ac5b-9bbd3be5f4c3",
          "title": "What is Option?",
          "answers": [
            {
              "id": "878dd62f-f8e5-44fe-a318-17769c4617c8",
              "title": "An enum for storing a bool",
              "isCorrect": false
            },
            {
              "id": "30d0273d-0588-48fb-88ed-fbd73b622e9f",
              "title": "An enum representing presence or absence of a value",
              "isCorrect": true
            },
            {
              "id": "cb04b683-4151-401f-9b18-39a3c9015c41",
              "title": "Null in Rust",
              "isCorrect": false
            },
            {
              "id": "00a7988f-6720-410f-9331-27c7d3e8851d",
              "title": "A special numeric type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Option is Some(T) or None. A safe alternative to null",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4e0a8971-5c28-4d14-8c82-a927b7c14e95",
          "title": "What is true about Option?",
          "answers": [
            {
              "id": "78686bb0-37a7-48c9-9098-eb42fcdf4853",
              "title": "Option<T> and T are the same type",
              "isCorrect": false
            },
            {
              "id": "f6360e1a-c716-41ca-a633-14fa5e2ccd8f",
              "title": "Option<T> and T are different types",
              "isCorrect": true
            },
            {
              "id": "872cf21f-fa70-4635-9ce2-5529c5999223",
              "title": "You can add Option<T> to T directly",
              "isCorrect": false
            },
            {
              "id": "06a4bc61-3e12-4b68-b0c3-b4a70f37ad4b",
              "title": "Option is always compiled as null",
              "isCorrect": false
            }
          ],
          "descriptionText": "You mustn't confuse Option<T> with T. The compiler forces explicit None handling",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "246f3d28-7f9a-4d20-be35-f5455cba4f2b",
          "title": "Why doesn't Rust have null?",
          "answers": [
            {
              "id": "5192b841-03a4-4036-aae6-325eb9748f8f",
              "title": "To save memory",
              "isCorrect": false
            },
            {
              "id": "fe84a49b-f8fc-46cf-99e8-5ea69ea163ea",
              "title": "Personal preference of the authors",
              "isCorrect": false
            },
            {
              "id": "bd69621b-6629-440d-aab3-7102bc8708f2",
              "title": "To avoid errors (the \"billion dollar mistake\")",
              "isCorrect": true
            },
            {
              "id": "60fb28b9-9d3d-4b1e-8559-42c9b5a9ed98",
              "title": "Rust has hidden nulls",
              "isCorrect": false
            }
          ],
          "descriptionText": "Null often leads to bugs. Option is the safe alternative",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "38c7b404-5f95-457e-8934-a17b199df889",
          "title": "How do you get a value out of an Option?",
          "answers": [
            {
              "id": "6ee1d522-35fb-42e2-91f0-9ab118b681b0",
              "title": "Always unwrap()",
              "isCorrect": false
            },
            {
              "id": "127a5641-1602-4d95-937b-d4e8f4f27b51",
              "title": "With match or helper methods",
              "isCorrect": true
            },
            {
              "id": "d7f26312-172c-4730-a87e-877c662aeb41",
              "title": "Automatically when adding",
              "isCorrect": false
            },
            {
              "id": "bce04f8a-9cf8-44a4-86f8-680f7939e2a0",
              "title": "Using a null-check",
              "isCorrect": false
            }
          ],
          "descriptionText": "Typically use match, if let, or methods. Rust requires handling None",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "97a85aab-1818-4795-aa63-1b77c5324035",
          "title": "What does the match construct do?",
          "answers": [
            {
              "id": "4f60c9f1-446f-42c7-aad9-27befb42aadc",
              "title": "Checks only bool",
              "isCorrect": false
            },
            {
              "id": "04b3f92f-3560-4f4a-a7e3-efa55c3a7edc",
              "title": "Compares a value against patterns",
              "isCorrect": true
            },
            {
              "id": "4961538c-0ec1-43d5-afcb-20fbd07aa92f",
              "title": "Always replaces if",
              "isCorrect": false
            },
            {
              "id": "2ad5fbbf-2250-4b1c-a04c-31b2ace5b2e9",
              "title": "Works only with numbers",
              "isCorrect": false
            }
          ],
          "descriptionText": "match matches a value to patterns. It's Rust's primary pattern-matching tool",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c692a366-d0c7-43cf-aa1a-836177427f62",
          "title": "How does match differ from if?",
          "answers": [
            {
              "id": "0f15fe1b-d3a4-4b37-aa38-d21ebc024256",
              "title": "match is faster",
              "isCorrect": false
            },
            {
              "id": "09fea228-4dd8-4143-a73d-69499fda0191",
              "title": "if checks a bool; match works with any value",
              "isCorrect": true
            },
            {
              "id": "968a9649-d4ae-4260-a104-ee102eff5b0e",
              "title": "if requires all branches; match doesn't",
              "isCorrect": false
            },
            {
              "id": "3bbed4ff-180b-47cc-b37b-182cc5616db5",
              "title": "if can store data, match can't",
              "isCorrect": false
            }
          ],
          "descriptionText": "match works with many types, not just bool. General-purpose matching",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d459a002-b0e7-409c-bc7d-d71d6101e1de",
          "title": "What does the arrow => mean in match?",
          "answers": [
            {
              "id": "191eb59c-77f3-43ce-acf7-708818c6733e",
              "title": "Assignment",
              "isCorrect": false
            },
            {
              "id": "983df348-2ee9-46d4-a2e1-1816b313a9d5",
              "title": "Condition",
              "isCorrect": false
            },
            {
              "id": "ebaa6dc0-2e8a-40b4-83ad-91125cce2aab",
              "title": "Separates the pattern from its arm's code",
              "isCorrect": true
            },
            {
              "id": "f17f5c37-1a74-4839-98b3-56a924ae2407",
              "title": "Typing",
              "isCorrect": false
            }
          ],
          "descriptionText": "Code for the arm goes after =>. It's part of match syntax",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "54d7ebf2-66e8-4462-9241-438c7e46b661",
          "title": "What happens if you don't cover all enum variants in a match?",
          "answers": [
            {
              "id": "80adc26a-c9ab-43af-a33a-ec171c431e56",
              "title": "Compiles with a warning",
              "isCorrect": false
            },
            {
              "id": "1f54fd11-f417-4655-baf2-9f805ffd14ad",
              "title": "Compile error",
              "isCorrect": true
            },
            {
              "id": "1ece5def-aadd-4cb4-a05c-a98966d7e606",
              "title": "A default is added automatically",
              "isCorrect": false
            },
            {
              "id": "bf4d3b19-e063-4267-bf5b-80e07b8ae746",
              "title": "Runtime panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "match must be exhaustive in Rust. Safety guarantee",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0a4a2bbc-8f7a-42b8-a5bd-4db06a4656e9",
          "title": "What is _ used for in match?",
          "answers": [
            {
              "id": "24487907-7d32-4bee-bd4c-b2eda741bea6",
              "title": "Printing a value",
              "isCorrect": false
            },
            {
              "id": "faea5cec-59c1-435a-a977-aeb8303e2bc2",
              "title": "Catch-all (any remaining case)",
              "isCorrect": true
            },
            {
              "id": "fbdc5cd8-4973-431e-a546-a4f3dabb5d88",
              "title": "Comments",
              "isCorrect": false
            },
            {
              "id": "9060e968-d75d-4768-bdd3-65628a73ae5a",
              "title": "Calling a method",
              "isCorrect": false
            }
          ],
          "descriptionText": "_ ignores the value and matches anything. Closes remaining cases",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3c43923f-c11b-4f3f-a38e-faee5f69e6c9",
          "title": "What does match x { Some(i) => i, _ => 0 } do?",
          "answers": [
            {
              "id": "c67f5b79-945e-44df-8bc6-3dfb09897274",
              "title": "Always returns i",
              "isCorrect": false
            },
            {
              "id": "a360d10f-446b-4329-8f8a-934067e61c14",
              "title": "Returns i or 0 if None",
              "isCorrect": true
            },
            {
              "id": "e85b3206-6684-4183-b60e-d4fe84f8b720",
              "title": "Compile error",
              "isCorrect": false
            },
            {
              "id": "1372996b-4275-425c-9c74-84aeab610589",
              "title": "Returns null",
              "isCorrect": false
            }
          ],
          "descriptionText": "_ covers the None case. Safe Option handling",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "37b07352-007c-4b80-b778-83a4271e905a",
          "title": "What's the advantage of if let over match?",
          "answers": [
            {
              "id": "d050a2c2-d60c-4703-a545-71ed26e5d5c6",
              "title": "Ensures exhaustiveness",
              "isCorrect": false
            },
            {
              "id": "00ae7336-26f7-4728-8bd1-f8ed1aba54c4",
              "title": "Shorter when handling a single variant",
              "isCorrect": true
            },
            {
              "id": "1d481ad5-2ebf-4396-9fa4-895d19903b22",
              "title": "Works only with numbers",
              "isCorrect": false
            },
            {
              "id": "faacf664-51a0-47cb-8035-45e3649956d3",
              "title": "No advantage",
              "isCorrect": false
            }
          ],
          "descriptionText": "if let is handy when you care about one case. Less boilerplate",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5a1d1985-4b45-4fa6-b474-f6e0f5872e01",
          "title": "What do you lose when using if let instead of match?",
          "answers": [
            {
              "id": "33b43ff4-9183-470a-b181-9aab93d6b951",
              "title": "Performance",
              "isCorrect": false
            },
            {
              "id": "393d3a34-589c-4da5-800c-815dfd4901f6",
              "title": "Automatic coverage of all cases",
              "isCorrect": true
            },
            {
              "id": "f62f6502-3f1b-4c79-9b7e-048b224b0e54",
              "title": "Ability to use Option",
              "isCorrect": false
            },
            {
              "id": "e4039571-0a02-4d55-accc-26d1f1fcca12",
              "title": "The call method",
              "isCorrect": false
            }
          ],
          "descriptionText": "if let doesn't require handling all variants. Exhaustiveness only with match",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8742f9f3-5b50-412d-9e07-d28925072fe4",
          "title": "How does let…else differ from if let?",
          "answers": [
            {
              "id": "61aa8b8a-db7a-4204-ba65-5e9013c81b67",
              "title": "let…else is always faster",
              "isCorrect": false
            },
            {
              "id": "85cc6ddf-afd6-433b-830d-c7c1ae957d91",
              "title": "let…else requires the else branch to exit (e.g., return)",
              "isCorrect": true
            },
            {
              "id": "7b75dcd0-80e1-42ef-a189-b1ab7582b92b",
              "title": "let…else works only with Option",
              "isCorrect": false
            },
            {
              "id": "4d54a2a6-5d83-4c61-a1d1-8f8af35c28d7",
              "title": "No difference",
              "isCorrect": false
            }
          ],
          "descriptionText": "In let…else, the else must terminate the function. Convenient for \"happy path\" code",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "33c6a67e-ae01-4812-bb5a-ba504fa0c324",
          "title": "How does data binding work in match?",
          "answers": [
            {
              "id": "ead7e283-7437-47c3-a193-8925159221eb",
              "title": "You can't extract data",
              "isCorrect": false
            },
            {
              "id": "fc6ec9f8-bad5-49af-bb7c-7f4c004458e4",
              "title": "Through variables in the pattern",
              "isCorrect": true
            },
            {
              "id": "fed30ba1-66b3-4162-bdab-7dd146d92e49",
              "title": "Only via unwrap",
              "isCorrect": false
            },
            {
              "id": "62aeef96-0ffe-43f4-9752-e7d5e10261b7",
              "title": "Only via Option methods",
              "isCorrect": false
            }
          ],
          "descriptionText": "Coin::Quarter(state) => println!(\"{state:?}\"). match can destructure and bind",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "04e14e40-ccfc-4381-ae85-13563de11a0c",
          "title": "What does this code do?\n\nif let Some(x) = y {\n    println!(\"{x}\");\n}",
          "answers": [
            {
              "id": "9acffc51-72f6-45ed-90ab-554026c6c077",
              "title": "Always prints y",
              "isCorrect": false
            },
            {
              "id": "3429bd42-6a7e-4696-a4d0-92046354618b",
              "title": "Prints x if y = Some(x)",
              "isCorrect": true
            },
            {
              "id": "5d9517ed-43c8-4339-98c5-10206533fcd9",
              "title": "Compile error",
              "isCorrect": false
            },
            {
              "id": "cd5d0565-7820-45fb-9173-110a52e40838",
              "title": "Works only for numbers",
              "isCorrect": false
            }
          ],
          "descriptionText": "if let extracts the value from Some. A condensed form of match",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "50a80eee-61b3-4f86-a6fe-a113f8baf53e",
          "title": "Bottom line: why use enum + match?",
          "answers": [
            {
              "id": "9aa4f184-1823-4836-9ecb-72cddfff05f9",
              "title": "To replace structs",
              "isCorrect": false
            },
            {
              "id": "6c6b7d4d-963f-4135-b946-e9e2d45f539b",
              "title": "To store only strings",
              "isCorrect": false
            },
            {
              "id": "24d5f622-ce9b-49b9-9577-9b0c7f59e747",
              "title": "To express a set of variants and handle them safely",
              "isCorrect": true
            },
            {
              "id": "d1e926b3-13f9-4b1f-ba47-ce46b8431229",
              "title": "To speed up println!",
              "isCorrect": false
            }
          ],
          "descriptionText": "Enums describe variants; match handles them reliably. It's the Rust foundation for choice and control flow",
          "descriptionLink": "enums_and_pattern_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "85744213-2417-4a95-9a1f-4f9f22dafb07",
      "theme": "Managing Growing Projects with Packages, Crates, and Modules",
      "priority": 5,
      "questions": [
        {
          "id": "2d7baaba-ddfb-453e-b537-ab19dec148f1",
          "title": "What is a crate in Rust?",
          "answers": [
            {
              "id": "92a6c2ec-e3c8-4ed5-bf16-370dded88d45",
              "title": "The Cargo.toml file",
              "isCorrect": false
            },
            {
              "id": "937a55b4-699c-4ca2-a512-c4b0903f0ca8",
              "title": "The smallest unit of code for compilation",
              "isCorrect": true
            },
            {
              "id": "287994fe-f183-4788-bd6f-0d456ff30c7f",
              "title": "Only a binary executable",
              "isCorrect": false
            },
            {
              "id": "dfe404c7-a371-4802-842a-ee312a89897d",
              "title": "A separate package with dependencies",
              "isCorrect": false
            }
          ],
          "descriptionText": "A crate is the minimal compilation unit. Even a single .rs file compiles as a crate",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b6675034-fbb6-4253-a9d7-c9d949505dd2",
          "title": "What kinds of crates exist?",
          "answers": [
            {
              "id": "82c1e25f-b792-4f0e-9f4e-c629e5d602c0",
              "title": "Library only",
              "isCorrect": false
            },
            {
              "id": "33962fde-0b05-49bb-b206-87335810ed69",
              "title": "Binary only",
              "isCorrect": false
            },
            {
              "id": "f702565f-1b5e-4e29-afd8-4dd5649647a5",
              "title": "Binary and library",
              "isCorrect": true
            },
            {
              "id": "5f1cf211-3809-4b02-89d4-6e81b58ae459",
              "title": "Module only",
              "isCorrect": false
            }
          ],
          "descriptionText": "Crates come in two types: binary (with main) and library (without main)",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0c1b54f2-bc30-45f2-ad79-2f7664e5ef4d",
          "title": "What must a binary crate contain?",
          "answers": [
            {
              "id": "801e8db4-300f-4fa9-98bc-d82acf4bffdd",
              "title": "A Cargo.toml file",
              "isCorrect": false
            },
            {
              "id": "902e484c-efe7-44f0-a0db-77124fac6bb1",
              "title": "main.rs",
              "isCorrect": false
            },
            {
              "id": "ce05f71b-7f54-4567-890f-50312cea65bb",
              "title": "A main function",
              "isCorrect": true
            },
            {
              "id": "c39b3b7e-4edd-4607-8c3e-7741a96ab38c",
              "title": "A lib module",
              "isCorrect": false
            }
          ],
          "descriptionText": "A binary crate requires fn main() as the entry point",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7bb7dc66-14c1-458f-b294-6148c83d71ae",
          "title": "What does a library crate conventionally specify?",
          "answers": [
            {
              "id": "631ee598-6857-4f95-b513-0256dc2a6820",
              "title": "A main entry point",
              "isCorrect": false
            },
            {
              "id": "72c70475-07fd-4afc-9b6e-acb01e3fc974",
              "title": "The file src/lib.rs",
              "isCorrect": true
            },
            {
              "id": "d41f878d-cdda-45fd-b44a-a7c0b3c3dfd1",
              "title": "Cargo.lock",
              "isCorrect": false
            },
            {
              "id": "d9bd611e-7416-4d37-998a-6cac3a88e8bd",
              "title": "A separate front_of_house module",
              "isCorrect": false
            }
          ],
          "descriptionText": "By convention, a library starts at src/lib.rs",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "71530f82-eeeb-4d6e-8f22-dda5e985abec",
          "title": "What is the crate root?",
          "answers": [
            {
              "id": "8df4826f-ba1c-4ac2-b10c-e5e10d671cc0",
              "title": "The project's root directory",
              "isCorrect": false
            },
            {
              "id": "8cc438a6-7fd8-419d-acc5-865ce2aee01c",
              "title": "The first module where the compiler starts",
              "isCorrect": true
            },
            {
              "id": "9cf5f27a-d21b-450e-abfe-575ce6dba11d",
              "title": "Cargo.toml",
              "isCorrect": false
            },
            {
              "id": "3c0f85ee-f566-4388-acfa-3f78d336ebeb",
              "title": "The target folder",
              "isCorrect": false
            }
          ],
          "descriptionText": "src/main.rs or src/lib.rs is the crate root from which the module tree is built",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f83b0381-a810-42c0-81c3-4144387b9984",
          "title": "What is a package?",
          "answers": [
            {
              "id": "a7f2b13d-87d9-47e2-9584-aa0b23deb313",
              "title": "Any binary crate",
              "isCorrect": false
            },
            {
              "id": "7ca1f84f-9e83-4415-883a-cf60ebd27667",
              "title": "A group of modules",
              "isCorrect": false
            },
            {
              "id": "fdf321c9-d616-46f2-8315-5f2f9a157118",
              "title": "A bundle of one or more crates with a Cargo.toml",
              "isCorrect": true
            },
            {
              "id": "f13cbb06-cf92-4428-b7ae-0af1b9f07454",
              "title": "A workspace",
              "isCorrect": false
            }
          ],
          "descriptionText": "A package is a set of crates + Cargo.toml describing how to build them",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "790ab64f-c74a-4565-9b50-d74ae4470961",
          "title": "How many library crates can a package have?",
          "answers": [
            {
              "id": "597b285c-7dd1-4786-8f93-e92c778c3232",
              "title": "Any number",
              "isCorrect": false
            },
            {
              "id": "1027f15e-a234-4f94-8e59-1dd2e4d65643",
              "title": "At most one",
              "isCorrect": true
            },
            {
              "id": "fb54f68f-e813-4ed5-95e9-9accc58c63d3",
              "title": "Only if there are no binaries",
              "isCorrect": false
            },
            {
              "id": "e1e08abd-dc5f-4c11-a1ef-9fbcc22a2321",
              "title": "Depends on Cargo.toml",
              "isCorrect": false
            }
          ],
          "descriptionText": "A package may contain many binary crates but only one library crate",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "85dc599e-0e5b-4c46-b36a-9a4c24a36ef2",
          "title": "Where does Cargo look for the binary crate root?",
          "answers": [
            {
              "id": "e0a00ab2-f72d-44fa-be15-53db7f3e85db",
              "title": "src/bin.rs",
              "isCorrect": false
            },
            {
              "id": "d9a16c25-6589-4709-b11e-a1351bc5a311",
              "title": "src/bin/mod.rs",
              "isCorrect": false
            },
            {
              "id": "99a1836d-8781-44fe-9c66-d78c2494ee81",
              "title": "src/main.rs",
              "isCorrect": true
            },
            {
              "id": "52d4eedb-c90b-424a-a517-3964a36bc00e",
              "title": "src/root.rs",
              "isCorrect": false
            }
          ],
          "descriptionText": "By default a binary crate starts at src/main.rs",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "88df2e43-3088-4d20-be1a-72c95f8f0857",
          "title": "Where does Cargo look for the library crate root?",
          "answers": [
            {
              "id": "72ea7390-6f1e-460a-8707-ea258598c201",
              "title": "src/main.rs",
              "isCorrect": false
            },
            {
              "id": "f1aaf177-f816-49fe-96d1-9ad08fb4a69c",
              "title": "src/root.rs",
              "isCorrect": false
            },
            {
              "id": "fead51bb-1097-49f0-bfad-a1acd3aecddb",
              "title": "src/lib.rs",
              "isCorrect": true
            },
            {
              "id": "ff949de0-50f3-4dd4-b9c5-ed2e79d26dcd",
              "title": "lib.toml",
              "isCorrect": false
            }
          ],
          "descriptionText": "A library crate is defined in src/lib.rs",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "419c4c2e-e49f-4486-b1d5-2929530ec29c",
          "title": "How do you create a new project with a binary crate?",
          "answers": [
            {
              "id": "df546677-56b1-4119-b3e6-1541a72d00a3",
              "title": "cargo create",
              "isCorrect": false
            },
            {
              "id": "eee78d5b-3f6c-4dc2-8c93-4f08ed129d77",
              "title": "cargo new myproj",
              "isCorrect": true
            },
            {
              "id": "8ac35413-69d7-4dde-bb87-f5354343d9b4",
              "title": "cargo init lib",
              "isCorrect": false
            },
            {
              "id": "563b4833-b0ba-49a3-bc7a-751b5bdc2ee9",
              "title": "cargo bin myproj",
              "isCorrect": false
            }
          ],
          "descriptionText": "cargo new creates a binary crate by default",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9bf37187-df33-4567-85d4-5a608e144919",
          "title": "How do you create a new project with a library crate?",
          "answers": [
            {
              "id": "b9cca2a5-5ed2-48e0-9152-09beb56cff10",
              "title": "cargo new mylib",
              "isCorrect": false
            },
            {
              "id": "f2c68361-b924-4d37-b9ce-2f57634b03b6",
              "title": "cargo new mylib --lib",
              "isCorrect": true
            },
            {
              "id": "566ac516-8efd-493b-bec7-2d1db837d21f",
              "title": "cargo lib mylib",
              "isCorrect": false
            },
            {
              "id": "0c2ea254-754d-4cfb-95ff-84b801bc615f",
              "title": "cargo init bin",
              "isCorrect": false
            }
          ],
          "descriptionText": "The --lib flag tells Cargo to create a library",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1116918c-23d9-4cb2-8d58-6537f9ba81a5",
          "title": "What does the mod keyword do?",
          "answers": [
            {
              "id": "3489129b-e810-4858-9b47-bb5cd683f210",
              "title": "Brings in an external crate",
              "isCorrect": false
            },
            {
              "id": "42b04762-e859-452f-b763-9d25c4457308",
              "title": "Declares a module",
              "isCorrect": true
            },
            {
              "id": "45598f50-30bd-47c4-a805-9f4020e9b7f2",
              "title": "Makes a function public",
              "isCorrect": false
            },
            {
              "id": "8127ba54-5a9f-4c7c-acf1-9ba034f87353",
              "title": "Adds a dependency",
              "isCorrect": false
            }
          ],
          "descriptionText": "mod is used to declare a module",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bfab0433-1c91-4bcf-a8e0-173b00ea3974",
          "title": "Where is code for mod garden; searched?",
          "answers": [
            {
              "id": "ce46eb6a-e8b9-4a3b-bf31-a19047dddbb2",
              "title": "Only in src/garden.rs",
              "isCorrect": false
            },
            {
              "id": "add4b4c0-fc06-43db-ad67-1bad5102e74f",
              "title": "src/garden.rs or src/garden/mod.rs",
              "isCorrect": true
            },
            {
              "id": "be8a0ff1-2fc2-42ee-9b45-fc6ba45e9514",
              "title": "Only inside main.rs",
              "isCorrect": false
            },
            {
              "id": "788e80ee-3835-434a-9898-1a23754a2b5a",
              "title": "Only in Cargo.toml",
              "isCorrect": false
            }
          ],
          "descriptionText": "The compiler checks two paths: garden.rs or garden/mod.rs",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "310617b0-6459-4496-84aa-fbd1ed8e573c",
          "title": "What does pub mod mean?",
          "answers": [
            {
              "id": "b330c82a-d636-4109-a361-d4b69326ea77",
              "title": "Makes the module and all its contents public",
              "isCorrect": false
            },
            {
              "id": "2c860ee8-111f-4507-b83b-062f840de46e",
              "title": "Makes the module accessible from outside",
              "isCorrect": true
            },
            {
              "id": "0e7c785d-4cd2-4257-a289-40d15b67c8cd",
              "title": "Removes privacy from all functions",
              "isCorrect": false
            },
            {
              "id": "f3298fef-88db-4de4-a5d9-c8e64273e43b",
              "title": "Creates a new binary crate",
              "isCorrect": false
            }
          ],
          "descriptionText": "pub mod exposes the module; its contents remain private by default",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "42cbe42b-479a-4f02-ae57-e439f5dedf9f",
          "title": "What's the default visibility for modules and functions?",
          "answers": [
            {
              "id": "52d7372f-4f58-4ad0-af1d-233a6edbc420",
              "title": "Public",
              "isCorrect": false
            },
            {
              "id": "94b0ade6-f092-48de-a68c-c3dfb465d760",
              "title": "Private",
              "isCorrect": true
            },
            {
              "id": "29dd2ead-9a78-4808-a982-bba77344913d",
              "title": "Protected",
              "isCorrect": false
            },
            {
              "id": "6b4b07f5-f2a7-4dbf-83fa-f86e0d73ff74",
              "title": "Internal",
              "isCorrect": false
            }
          ],
          "descriptionText": "In Rust, everything is private by default",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "402c33c1-0b9a-4ef0-8088-7b7b55516829",
          "title": "What is true of an absolute path?",
          "answers": [
            {
              "id": "937b0f41-96ac-42ff-98a4-11efbae54bff",
              "title": "Starts with self",
              "isCorrect": false
            },
            {
              "id": "6a3da3b6-9113-47ae-9f47-41cb1738b951",
              "title": "Starts with super",
              "isCorrect": false
            },
            {
              "id": "c1da17a5-de3a-4bdf-bcfc-1a93bc2fa518",
              "title": "Starts with crate",
              "isCorrect": true
            },
            {
              "id": "1c01202e-25a4-4947-9752-89a1cbcb05c5",
              "title": "Always starts with lib",
              "isCorrect": false
            }
          ],
          "descriptionText": "An absolute path starts with crate or an external crate name",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6083164d-3674-4deb-945b-9fd2073bd8f7",
          "title": "What is true of a relative path?",
          "answers": [
            {
              "id": "4a6d60e5-d2e7-483f-ab99-1812c0c5d532",
              "title": "Starts with crate",
              "isCorrect": false
            },
            {
              "id": "c438b7a2-351c-4ccf-8fe4-99ecb20e6dfc",
              "title": "Starts with self or super",
              "isCorrect": true
            },
            {
              "id": "1e1b7a70-059e-408c-9496-0a94b25d1045",
              "title": "Always starts with pub",
              "isCorrect": false
            },
            {
              "id": "a70ebf29-e6d5-4102-92d3-04f9e4631b67",
              "title": "Can only be used in lib.rs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Relative paths are built from the current module via self, super, or identifiers",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "95329d57-f52a-4984-931a-03d57c056d68",
          "title": "How does use differ from pub use?",
          "answers": [
            {
              "id": "094dc1ea-1d67-4579-a1f3-fb424f1c62fe",
              "title": "use works only in binaries",
              "isCorrect": false
            },
            {
              "id": "886a874f-d3ef-475e-bae8-366e56985119",
              "title": "pub use performs a re-export",
              "isCorrect": true
            },
            {
              "id": "c165b59f-a6ab-42b0-b4f1-cf76192a8c6b",
              "title": "pub use is only for std",
              "isCorrect": false
            },
            {
              "id": "d19f318a-972a-47eb-a63e-c37ba5c8947a",
              "title": "use can't be used in lib.rs",
              "isCorrect": false
            }
          ],
          "descriptionText": "use brings a name into scope; pub use also makes it accessible to external users",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0a68c6c2-4305-4b12-af71-756efe6e2bd5",
          "title": "Which privacy rule is correct?",
          "answers": [
            {
              "id": "56b30eb9-f737-4cab-b465-29d2aff6c5dc",
              "title": "A parent sees a child's private items",
              "isCorrect": false
            },
            {
              "id": "26960008-1132-459a-bf3b-1b609ee9058e",
              "title": "A child sees its parent",
              "isCorrect": true
            },
            {
              "id": "43cc529b-0606-4ff1-84b0-60a8dd48b24d",
              "title": "Everyone sees everyone",
              "isCorrect": false
            },
            {
              "id": "7621246e-6555-4d93-b11f-86dbcadc8ab5",
              "title": "Privacy applies only to functions",
              "isCorrect": false
            }
          ],
          "descriptionText": "A parent cannot access a child's private items, but the child can access the parent",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9c45f129-90ca-4d9e-b5a9-df22f448e6d2",
          "title": "What does the keyword super do?",
          "answers": [
            {
              "id": "81d145ba-e27d-4915-9feb-7c9e95999d3e",
              "title": "Brings in std",
              "isCorrect": false
            },
            {
              "id": "2ff55fed-bd1f-4272-8f77-a53db0f91f66",
              "title": "Refers to the parent module",
              "isCorrect": true
            },
            {
              "id": "570bf838-be7c-47f6-8b7f-728eb304688e",
              "title": "Makes a struct public",
              "isCorrect": false
            },
            {
              "id": "f0b2e4ff-a04c-4e0c-a6db-d0ac2d088940",
              "title": "Overrides pub",
              "isCorrect": false
            }
          ],
          "descriptionText": "super means \"go up one level\" in the module tree",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "06538242-279c-4ca7-8ef9-51616c225102",
          "title": "How do struct and enum differ with pub?",
          "answers": [
            {
              "id": "7b81e494-e9d7-4022-81e2-273e9691a1ff",
              "title": "Struct fields are public by default",
              "isCorrect": false
            },
            {
              "id": "f16f5bf6-30f4-4ad6-be1a-0311fcebeb48",
              "title": "All enum variants become public",
              "isCorrect": true
            },
            {
              "id": "3dc6b7e0-5c25-477d-a6b3-6a814212a288",
              "title": "Enum variants are private",
              "isCorrect": false
            },
            {
              "id": "0e647b35-ad94-48cc-bd59-db6801ae91c6",
              "title": "Struct fields can't be made private",
              "isCorrect": false
            }
          ],
          "descriptionText": "If an enum is public, all its variants are public",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9238c6c7-8605-472a-ae1b-2af37d2fb745",
          "title": "What happens with pub struct S { x: i32 }?",
          "answers": [
            {
              "id": "885f4966-165d-4ab7-9ac5-1e69b3225a9d",
              "title": "Field x is public",
              "isCorrect": false
            },
            {
              "id": "5b0137c7-433c-4230-a9b9-843ad71511d8",
              "title": "Field x is private",
              "isCorrect": true
            },
            {
              "id": "7e2df00b-9bd4-448a-be22-75ef7a2a4015",
              "title": "Compile error",
              "isCorrect": false
            },
            {
              "id": "3be1ba19-36c5-4d4b-94a5-0fb31848144e",
              "title": "Everything is public",
              "isCorrect": false
            }
          ],
          "descriptionText": "Even with pub struct, fields are private by default",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d5e15f2e-c895-4221-9585-e1480f7c12ca",
          "title": "What does use std::collections::HashMap do?",
          "answers": [
            {
              "id": "a8b7a9ab-db1c-4a22-8fb1-28f3ee5ab3c1",
              "title": "Imports all of std",
              "isCorrect": false
            },
            {
              "id": "5ecade66-4b49-497e-8365-66f3992cdead",
              "title": "Makes HashMap available by its name",
              "isCorrect": true
            },
            {
              "id": "797cd54b-b18d-460e-a4b3-30b083e0fcac",
              "title": "Creates a new crate",
              "isCorrect": false
            },
            {
              "id": "5a02cc0c-c06e-47a8-83f5-02f744a429d0",
              "title": "Imports the entire collections module",
              "isCorrect": false
            }
          ],
          "descriptionText": "use shortens the path to refer to HashMap directly",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1887d7bd-2e27-4e70-9a1d-cea0acdf36ec",
          "title": "How to import two items from std correctly?",
          "answers": [
            {
              "id": "31c61a7d-4bb9-403f-9282-a0cbc6c6d4d6",
              "title": "use std::io; use std::cmp;",
              "isCorrect": false
            },
            {
              "id": "acb3f450-c83d-4bd7-a3a5-105b831bdf4f",
              "title": "use std::{io, cmp};",
              "isCorrect": true
            },
            {
              "id": "73802690-0568-45c1-8f70-688813796260",
              "title": "use std::io, cmp;",
              "isCorrect": false
            },
            {
              "id": "b4835048-f008-4bcd-a5ef-d480766938d5",
              "title": "use std::(io, cmp);",
              "isCorrect": false
            }
          ],
          "descriptionText": "Nested paths reduce repetition",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9a2aaa9e-0d8f-434a-a1f5-12097bb468f1",
          "title": "What does use std::io::{self, Write}; do?",
          "answers": [
            {
              "id": "b0a36e3e-d852-47e5-a1c1-9b8efa481d93",
              "title": "Imports only Write",
              "isCorrect": false
            },
            {
              "id": "8c1cb7ac-54b0-4669-b62a-81c563e62fea",
              "title": "Imports io and Write",
              "isCorrect": true
            },
            {
              "id": "6efb0e19-cb7e-4e16-b761-3f8f405ea02c",
              "title": "Imports everything from io",
              "isCorrect": false
            },
            {
              "id": "c06caded-d5a5-46c7-8246-d8472258c89c",
              "title": "Compile error",
              "isCorrect": false
            }
          ],
          "descriptionText": "self refers to the module itself; you import both io and Write",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5a5a5977-315d-4ce4-8bb4-02d6af926564",
          "title": "What does * do with use?",
          "answers": [
            {
              "id": "ef18a77c-6d4d-4658-82e8-b23a4ad748cb",
              "title": "Imports only pub use",
              "isCorrect": false
            },
            {
              "id": "4021bf4e-0edb-4292-b58f-9bba7b5701ab",
              "title": "Imports all public items",
              "isCorrect": true
            },
            {
              "id": "3dff6de9-5a95-45e7-b6bf-705af594a248",
              "title": "Imports private items",
              "isCorrect": false
            },
            {
              "id": "60448ce8-beea-41a9-aa8d-5a069a2a5df1",
              "title": "Creates an alias",
              "isCorrect": false
            }
          ],
          "descriptionText": "* imports all public items from a module",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3aeebf44-1ac9-41d1-88a6-b2b1e8292e08",
          "title": "When is glob (*) often used?",
          "answers": [
            {
              "id": "43172a7e-cb61-45aa-b2a5-ff26ceea31cc",
              "title": "In main.rs",
              "isCorrect": false
            },
            {
              "id": "e10f1579-8dc7-456d-b4a1-0595daa46905",
              "title": "In tests",
              "isCorrect": true
            },
            {
              "id": "d1c1895a-ad41-4ebd-80af-28d23f786a7a",
              "title": "In Cargo.toml",
              "isCorrect": false
            },
            {
              "id": "240df171-7d27-4529-8cb2-3016eb0b9b7f",
              "title": "In enums",
              "isCorrect": false
            }
          ],
          "descriptionText": "* is commonly used in a tests module",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dc9825ba-8813-4c8a-a859-2ced9b7de87b",
          "title": "What does as do in use?",
          "answers": [
            {
              "id": "4ef2de45-bf27-4baf-85f8-8f1c89c6a5c7",
              "title": "Makes it private",
              "isCorrect": false
            },
            {
              "id": "5d4f8920-e539-4222-8c86-3b67d85b6fdc",
              "title": "Creates an alias",
              "isCorrect": true
            },
            {
              "id": "5bfb9655-ff27-4bef-ab9a-bffd01ec68d4",
              "title": "Exports it outward",
              "isCorrect": false
            },
            {
              "id": "ff5edff8-6175-4ead-9c04-c99236ab4419",
              "title": "Replaces super",
              "isCorrect": false
            }
          ],
          "descriptionText": "as lets you rename an import",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0c4d7900-09e8-4501-b0f7-7d0ef5aca8b2",
          "title": "What happens on a name conflict?",
          "answers": [
            {
              "id": "1917ecb1-d70c-4c99-b5cc-a9e12312a060",
              "title": "Compile error",
              "isCorrect": true
            },
            {
              "id": "43e489a8-3000-413c-9c4a-71c3d8bdf9b5",
              "title": "Rust takes the first",
              "isCorrect": false
            },
            {
              "id": "5cef703d-7363-4ff7-b020-d90c6e557f90",
              "title": "Rust takes the last",
              "isCorrect": false
            },
            {
              "id": "6f2501c5-04d8-4b79-bbfe-cf9b6a187dbc",
              "title": "An alias is created automatically",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust doesn't allow the same name twice in one scope",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "33784aa0-d640-4f31-b53b-213f61538688",
          "title": "How do you add the external crate rand?",
          "answers": [
            {
              "id": "768bc2fe-c850-4e52-9253-29397ee134fe",
              "title": "use rand in Cargo.toml",
              "isCorrect": false
            },
            {
              "id": "ef3eb23f-843d-4528-bc18-c1aa00dbcbcb",
              "title": "rand = \"0.8\" in Cargo.toml",
              "isCorrect": true
            },
            {
              "id": "7b3a38a7-7b4e-4d11-9d85-59695e3ab6f0",
              "title": "mod rand",
              "isCorrect": false
            },
            {
              "id": "664e53af-4f92-4bdc-9c7b-8d982aa13ad1",
              "title": "extern rand",
              "isCorrect": false
            }
          ],
          "descriptionText": "External crates are added as dependencies in Cargo.toml",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6431b2c4-4afb-40da-b992-2b38c050d280",
          "title": "What is needed to use rand::thread_rng()?",
          "answers": [
            {
              "id": "6144ac28-91db-4d10-a7d4-07fab8ca63db",
              "title": "use rand::Rng",
              "isCorrect": true
            },
            {
              "id": "4f4b8b3a-6918-4f85-a10c-21525f475522",
              "title": "mod rand",
              "isCorrect": false
            },
            {
              "id": "51171356-1c5d-4130-8269-4ebd12d654b7",
              "title": "pub use rand",
              "isCorrect": false
            },
            {
              "id": "5f0b458d-9447-4afb-a23f-1b47635a3b28",
              "title": "extern crate rng",
              "isCorrect": false
            }
          ],
          "descriptionText": "You must import the traits for the methods to work",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "aafc9a29-21a9-4a54-a8b2-4a3896659f20",
          "title": "How is the standard library included?",
          "answers": [
            {
              "id": "9b0825aa-598a-4808-b9dc-b679899a35cc",
              "title": "Automatically",
              "isCorrect": true
            },
            {
              "id": "c9cf2065-9d1a-4bb1-9443-3f544dc8e821",
              "title": "Through Cargo.toml",
              "isCorrect": false
            },
            {
              "id": "f108d549-0c5e-43e3-a268-a6a027195b86",
              "title": "Via extern crate std",
              "isCorrect": false
            },
            {
              "id": "e7a7a472-b751-4f8b-b78d-3be17dd0d735",
              "title": "Via pub mod",
              "isCorrect": false
            }
          ],
          "descriptionText": "std is included automatically, but you must use items into scope",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "110706ab-b5c7-4d20-85ef-a8fc8d33e16a",
          "title": "Where is a crate's module structure stored?",
          "answers": [
            {
              "id": "802af14f-fa90-45a7-abcc-1954ecf1cc69",
              "title": "In Cargo.lock",
              "isCorrect": false
            },
            {
              "id": "6930e275-7f81-4b9c-b547-ee499d96ff8a",
              "title": "In the mod tree",
              "isCorrect": true
            },
            {
              "id": "2443bead-def4-4168-914a-64f90c1ca556",
              "title": "In Cargo.toml",
              "isCorrect": false
            },
            {
              "id": "f3572dc8-ab69-438a-9965-01b57c4fae01",
              "title": "In bin/",
              "isCorrect": false
            }
          ],
          "descriptionText": "The crate builds a module tree starting at the crate root",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fefe949d-f64d-4ba1-85df-9aeac312b889",
          "title": "What is a re-export?",
          "answers": [
            {
              "id": "9bdd2672-d749-475c-8865-02e40abf18de",
              "title": "A new crate",
              "isCorrect": false
            },
            {
              "id": "f02df0bf-1736-4928-8465-d085b2584561",
              "title": "pub use",
              "isCorrect": true
            },
            {
              "id": "86496f5e-677c-4960-a828-c9731eec110b",
              "title": "An alias",
              "isCorrect": false
            },
            {
              "id": "ccd45a95-41f7-4c46-85f6-a797e2946733",
              "title": "pub mod",
              "isCorrect": false
            }
          ],
          "descriptionText": "Re-exporting (pub use) simplifies a public API",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e6584559-0ee1-447c-be20-a15f7b638375",
          "title": "What's the idiomatic way to import a function?",
          "answers": [
            {
              "id": "c8158cd1-d3d3-4f34-b734-a0ac51f016ed",
              "title": "use path::to::func",
              "isCorrect": false
            },
            {
              "id": "87bb880c-7742-4b85-ab77-6452cebd8ff6",
              "title": "use path::to::module; module::func();",
              "isCorrect": true
            },
            {
              "id": "d93a9d53-4ad1-4993-96ff-095366c8f101",
              "title": "Always via *",
              "isCorrect": false
            },
            {
              "id": "e21a7061-91e0-4c88-a14b-079a5908f5a2",
              "title": "Via self",
              "isCorrect": false
            }
          ],
          "descriptionText": "Idiomatic Rust imports the module, then calls module::func()",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0952b52c-57a4-4bd5-9a96-005769683fa2",
          "title": "Where is a module file searched?",
          "answers": [
            {
              "id": "0c30ec86-2062-4680-8e02-49296cb667ca",
              "title": "Only mod.rs",
              "isCorrect": false
            },
            {
              "id": "29ce7931-07de-4a1f-9050-1add1efe85ef",
              "title": "file.rs or dir/mod.rs",
              "isCorrect": true
            },
            {
              "id": "e286d050-7ed1-4f8d-98c0-78b912a6c73c",
              "title": "Only in src/bin",
              "isCorrect": false
            },
            {
              "id": "6d03c76d-6c8f-4830-a12f-64495535b132",
              "title": "Only in Cargo.toml",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust supports both styles: file.rs and dir/mod.rs",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f74ca292-cd64-4c18-8196-83af4fd2dbdd",
          "title": "What if you create both file.rs and dir/mod.rs for the same module?",
          "answers": [
            {
              "id": "29655e2d-c873-443a-bfd1-6c7ac0d5e0f9",
              "title": "The first is used",
              "isCorrect": false
            },
            {
              "id": "aae9ccc2-c9e1-47cc-be71-408ab8ec8e31",
              "title": "Compile error",
              "isCorrect": true
            },
            {
              "id": "6578726d-b850-4da9-b045-4c8b660fbc15",
              "title": "Everything works",
              "isCorrect": false
            },
            {
              "id": "5b688cd9-1886-45d3-a31c-9d86afc8a0d4",
              "title": "Cargo chooses automatically",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust doesn't allow both variants for a single module",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5c4096cd-dd7f-48cb-a9c2-9538e2fcd050",
          "title": "Where is the module tree usually written?",
          "answers": [
            {
              "id": "6f9500d1-a93b-439d-84c1-60f2cdb799b1",
              "title": "In Cargo.lock",
              "isCorrect": false
            },
            {
              "id": "ac60068c-2ff4-411b-b89f-0e7a0bb93fd5",
              "title": "In lib.rs",
              "isCorrect": true
            },
            {
              "id": "9d26cf17-2b40-4ce2-bc4c-ecb1a6278fcb",
              "title": "In bin/",
              "isCorrect": false
            },
            {
              "id": "7ed23bde-9e73-4008-8419-0cd3774b4d82",
              "title": "In target/",
              "isCorrect": false
            }
          ],
          "descriptionText": "The module structure is declared in the crate root (lib.rs or main.rs)",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "21c1d8c2-ae87-455d-a997-b3d68b4b0f90",
          "title": "What does a use apply to by default?",
          "answers": [
            {
              "id": "66a38c25-e5b4-45ce-8aae-213ccd5f10c8",
              "title": "Works everywhere",
              "isCorrect": false
            },
            {
              "id": "638d2d07-625b-4790-a4f3-2a98d25ff8c0",
              "title": "Only within the current module",
              "isCorrect": true
            },
            {
              "id": "7bcf243e-dcc8-4609-992e-1222edd790c7",
              "title": "Automatically propagates",
              "isCorrect": false
            },
            {
              "id": "bcb5838d-4d17-42d1-972f-b8b298f4ebfe",
              "title": "Always global",
              "isCorrect": false
            }
          ],
          "descriptionText": "use is limited to the current scope",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "36fd9466-a1f0-4220-a265-7c280e684d2a",
          "title": "How does a workspace differ from a package?",
          "answers": [
            {
              "id": "420249a2-60e5-41ec-b05f-315685d9b6d4",
              "title": "A workspace is a set of packages",
              "isCorrect": true
            },
            {
              "id": "568821d2-9983-45cf-a18d-8a424967251a",
              "title": "A package is a set of workspaces",
              "isCorrect": false
            },
            {
              "id": "a5173227-f7af-4052-8bd4-152d267d0410",
              "title": "They're the same",
              "isCorrect": false
            },
            {
              "id": "0276b68a-e9f9-416c-bf3d-de891e9dcbdb",
              "title": "A workspace = binaries only",
              "isCorrect": false
            }
          ],
          "descriptionText": "A workspace is a collection of multiple packages",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e05355e2-e15e-4e0f-94a0-d906f0de5039",
          "title": "How do you create multiple binary crates in one package?",
          "answers": [
            {
              "id": "29dca47c-6ef2-4da5-b9ad-e4792f6a47c2",
              "title": "Put files in src/bin",
              "isCorrect": true
            },
            {
              "id": "947df21b-80c9-4a36-8e06-772b34792492",
              "title": "In Cargo.toml [bin]",
              "isCorrect": false
            },
            {
              "id": "5dc671ea-36fe-4de8-b36d-a23a3957bc8d",
              "title": "In lib.rs",
              "isCorrect": false
            },
            {
              "id": "fb39aa4e-a108-41db-9175-f2b4b88a7032",
              "title": "In Cargo.lock",
              "isCorrect": false
            }
          ],
          "descriptionText": "Each file in src/bin becomes a separate binary crate",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b2412f7d-dc2e-4c02-9699-837aa0767501",
          "title": "What does self mean in a path?",
          "answers": [
            {
              "id": "b3a01b76-90df-4cca-bddc-6ef577174eaf",
              "title": "Refers to the parent",
              "isCorrect": false
            },
            {
              "id": "75039e88-c285-4781-ae27-1f6cc785eded",
              "title": "Refers to the current module",
              "isCorrect": true
            },
            {
              "id": "3ad5d04e-0dda-4eb2-9f4e-2521875eefb5",
              "title": "Imports private items",
              "isCorrect": false
            },
            {
              "id": "62bcc144-786d-4d95-9885-7aa1ec2aa85a",
              "title": "Points to the crate",
              "isCorrect": false
            }
          ],
          "descriptionText": "self = the current module",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a7df1aa7-7f1e-42af-ac69-2bf48f812ea0",
          "title": "What's the default for pub enum?",
          "answers": [
            {
              "id": "9b805a54-9f77-45cc-8f71-8ec4cf1f19cf",
              "title": "Variants are private",
              "isCorrect": false
            },
            {
              "id": "e542470c-3ade-4869-84a0-70a97b39022b",
              "title": "All variants are public",
              "isCorrect": true
            },
            {
              "id": "33b22ed7-a533-4b3d-9775-829370bd4b39",
              "title": "Compile error",
              "isCorrect": false
            },
            {
              "id": "51da7936-bbe8-4bcf-812c-a74e6920de32",
              "title": "Nothing changes",
              "isCorrect": false
            }
          ],
          "descriptionText": "For an enum, making it pub makes all its variants public",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1783e121-a915-45a7-b14d-277259f54e2d",
          "title": "What is true about a struct?",
          "answers": [
            {
              "id": "023e0527-e3a9-4a28-ba29-ee2965292cf9",
              "title": "All fields are public",
              "isCorrect": false
            },
            {
              "id": "0f7346cf-e389-4cdd-97d5-5bc680c226c7",
              "title": "Fields are private by default",
              "isCorrect": true
            },
            {
              "id": "9fe136ba-0043-4df4-bc01-0e31de2dceca",
              "title": "Fields are always public",
              "isCorrect": false
            },
            {
              "id": "a8e97e91-9d20-4c9d-a7ff-f4a587c2414b",
              "title": "Fields are hidden only with mod",
              "isCorrect": false
            }
          ],
          "descriptionText": "Even with pub struct, fields are private unless marked pub",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "51a247cc-5690-4cc8-a177-e6d944b860b0",
          "title": "What's the idiomatic use for HashMap?",
          "answers": [
            {
              "id": "f192396c-bfcf-4025-978c-45dc5bb81b4d",
              "title": "use std; HashMap::new()",
              "isCorrect": false
            },
            {
              "id": "8b2042c1-dfd0-4437-9028-73b0d58890a8",
              "title": "use std::collections::HashMap",
              "isCorrect": true
            },
            {
              "id": "e2219141-0674-4823-85a2-8a9d66413457",
              "title": "use std::HashMap",
              "isCorrect": false
            },
            {
              "id": "5fed93c1-7a46-4e3d-a2db-e1d387ea195f",
              "title": "pub use std::HashMap",
              "isCorrect": false
            }
          ],
          "descriptionText": "Idiomatic is to import the full path to the type",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a5dc28ae-e50d-4292-8add-782faa4b32b9",
          "title": "What happens with use std::fmt::Result and use std::io::Result?",
          "answers": [
            {
              "id": "2f2f5f77-5434-4d76-806e-f80d838a583a",
              "title": "Compile error",
              "isCorrect": true
            },
            {
              "id": "632a3f56-3a0d-43ee-be07-53c130078b8f",
              "title": "The first is chosen",
              "isCorrect": false
            },
            {
              "id": "4250d745-54a1-4103-a2f5-19b8704382e0",
              "title": "The last is chosen",
              "isCorrect": false
            },
            {
              "id": "0e446e52-77a0-4152-9af7-88085bb9ae00",
              "title": "Automatic alias",
              "isCorrect": false
            }
          ],
          "descriptionText": "You can't import two items with the same name into one scope",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cf021692-1612-498d-9ae0-84cf1cfe6382",
          "title": "How to resolve the Result name conflict?",
          "answers": [
            {
              "id": "06c44da0-65d5-4933-8da4-3f6562135907",
              "title": "Use pub mod",
              "isCorrect": false
            },
            {
              "id": "8b0b283b-bb7e-4480-86a1-d4469b86d989",
              "title": "Use as for an alias",
              "isCorrect": true
            },
            {
              "id": "18c41a73-7ab5-464d-b0c5-5eca2ffb1f0d",
              "title": "Use only glob",
              "isCorrect": false
            },
            {
              "id": "f86ada5f-9889-4890-a23d-a59cf4f23878",
              "title": "Remove one import",
              "isCorrect": false
            }
          ],
          "descriptionText": "as lets you rename, e.g., IoResult",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0624b9d3-ae30-4462-ac0c-59591dbcdad1",
          "title": "What does pub use hosting; do?",
          "answers": [
            {
              "id": "f7a4491c-3b2c-4f24-b3fa-96bc1971e470",
              "title": "Imports only locally",
              "isCorrect": false
            },
            {
              "id": "db38d26a-04a9-4cc0-bded-11ae3bb089ff",
              "title": "Makes the name hosting available both internally and externally",
              "isCorrect": true
            },
            {
              "id": "b3d28973-31d1-4f88-bfe4-c34ee623e1b4",
              "title": "Deletes the hosting module",
              "isCorrect": false
            },
            {
              "id": "1f850077-e822-4140-87d6-0957d5669cf2",
              "title": "Duplicates hosting code",
              "isCorrect": false
            }
          ],
          "descriptionText": "Plain use is local; pub use re-exports, making it part of the public API",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "214d8d8a-f5ff-4cfb-aa19-3d1acf991cf1",
          "title": "What does pub use crate::front_of_house::hosting; do?",
          "answers": [
            {
              "id": "3ef5884a-b87c-485c-8574-6ee0fc0ad082",
              "title": "Makes hosting visible only in the current file",
              "isCorrect": false
            },
            {
              "id": "8827ba20-2fa7-47e9-b8c5-9e49af7e4026",
              "title": "Exports hosting outward as part of the public API",
              "isCorrect": true
            },
            {
              "id": "dabb62b9-f9f6-4ae8-b34d-822e610a8fda",
              "title": "Imports hosting for tests only",
              "isCorrect": false
            },
            {
              "id": "489ea5a7-ffc0-4d5e-9449-277554bb5298",
              "title": "Creates a new module",
              "isCorrect": false
            }
          ],
          "descriptionText": "pub use shortens the internal path and re-exports the name for external use",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "174c2a80-54b4-4e10-9c50-85e4c862dc16",
          "title": "What happens if lib.rs has mod garden; but there's no garden.rs or garden/mod.rs?",
          "answers": [
            {
              "id": "91c1f34e-b0e3-4b9c-a201-3c00b60f7771",
              "title": "Cargo creates an empty module",
              "isCorrect": false
            },
            {
              "id": "05d459b8-5ee3-4f46-8fb4-4302a8e8680f",
              "title": "Compile error",
              "isCorrect": true
            },
            {
              "id": "76970f49-1c7e-4f30-8376-2950274d4ec0",
              "title": "The module is private",
              "isCorrect": false
            },
            {
              "id": "4f426c94-1c44-4097-b2b0-7dfdbc72c06b",
              "title": "Rust ignores the module",
              "isCorrect": false
            }
          ],
          "descriptionText": "mod tells the compiler to find a file; if it's missing, that's an error",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4332e008-0ad7-4e74-b718-c45a397ea304",
          "title": "How do you properly move submodule hosting to a separate file?",
          "answers": [
            {
              "id": "915e5035-f7a4-4517-ad9e-88e8a6f3fa9a",
              "title": "src/hosting.rs",
              "isCorrect": false
            },
            {
              "id": "1572fbe8-f79e-41f4-824c-31e4886374fc",
              "title": "src/front_of_house/hosting.rs",
              "isCorrect": true
            },
            {
              "id": "7efbecf6-5db2-45e2-9ca3-f8d3847b67fe",
              "title": "src/bin/hosting.rs",
              "isCorrect": false
            },
            {
              "id": "819d9054-8c75-4c58-b9c1-98da44900aeb",
              "title": "lib/hosting.rs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Child modules must live under the directory of their parent module",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "21adf957-153c-4f91-8ae0-c5484dca825e",
          "title": "What about the mod.rs style?",
          "answers": [
            {
              "id": "82e0c981-ffd2-49b3-b214-7225621c47b9",
              "title": "Deprecated but still supported",
              "isCorrect": true
            },
            {
              "id": "83dfaca1-6698-4272-9741-696a3c6c0d4b",
              "title": "Mandatory in all projects",
              "isCorrect": false
            },
            {
              "id": "eb9c4f78-340f-426d-a398-a145e297bf13",
              "title": "Completely replaced garden.rs",
              "isCorrect": false
            },
            {
              "id": "6155e968-4e9d-419c-bb2a-1466bac0bd75",
              "title": "Works only in a workspace",
              "isCorrect": false
            }
          ],
          "descriptionText": "mod.rs (src/garden/mod.rs) is the older style and still supported",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b3f1aa88-9b93-4c0b-ac1f-5c4c2b121ab9",
          "title": "What if both garden.rs and garden/mod.rs exist?",
          "answers": [
            {
              "id": "87d09db7-2641-4b62-8aef-60763c18531b",
              "title": "Rust merges them",
              "isCorrect": false
            },
            {
              "id": "efaef986-3464-4394-8366-de949555b4ab",
              "title": "Compile error",
              "isCorrect": true
            },
            {
              "id": "b8fe83b4-562e-458d-9de7-337bd3a82e0e",
              "title": "Cargo chooses garden.rs",
              "isCorrect": false
            },
            {
              "id": "eaa41aa8-24b5-40ed-8129-d4bdd99abf29",
              "title": "Cargo chooses mod.rs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust forbids defining one module in two places",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4ddd8d08-240c-4025-8c74-73e02d3e5bfe",
          "title": "What does glob use std::collections::*; do?",
          "answers": [
            {
              "id": "cae31ca3-60a4-4614-beda-fe5191fb4ff1",
              "title": "Imports all public items from collections",
              "isCorrect": true
            },
            {
              "id": "ed6b4185-5fa6-4158-b420-0e439b32ee31",
              "title": "Imports only HashMap",
              "isCorrect": false
            },
            {
              "id": "08877801-5e24-4614-8d69-75b04aa6a7bb",
              "title": "Imports private items too",
              "isCorrect": false
            },
            {
              "id": "44cb454e-5b22-46be-a0cb-f445cd55bd09",
              "title": "Only enums",
              "isCorrect": false
            }
          ],
          "descriptionText": "* pulls in all public items of the module",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a4265541-9674-4107-9d40-7dc58758354c",
          "title": "When should you avoid glob (*)?",
          "answers": [
            {
              "id": "a6c7fa40-245e-424d-836a-e25d56863309",
              "title": "In small files",
              "isCorrect": false
            },
            {
              "id": "e37fab4f-d7e9-47ea-a35b-0870dc9e1797",
              "title": "When you need to see explicitly what's imported",
              "isCorrect": true
            },
            {
              "id": "81ee9e3d-8549-4399-81e6-d75e1c215907",
              "title": "When working with std",
              "isCorrect": false
            },
            {
              "id": "435890b5-2188-45e8-9b68-81a044e9c6fe",
              "title": "When there's no pub use",
              "isCorrect": false
            }
          ],
          "descriptionText": "glob can obscure which items are in scope",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ddfaabfc-fbaf-4a58-96c9-e3322c3de277",
          "title": "Where is glob most often used?",
          "answers": [
            {
              "id": "e021d932-a460-4b8e-9fe5-6d6bfa7ed264",
              "title": "In tests",
              "isCorrect": true
            },
            {
              "id": "51e0d549-e86f-45f1-89e3-0adf0b3ec998",
              "title": "In Cargo.toml",
              "isCorrect": false
            },
            {
              "id": "a9e51ea0-0a80-4711-9790-c0169bf93301",
              "title": "In a workspace",
              "isCorrect": false
            },
            {
              "id": "adc59d72-e734-4af4-85df-d1d95e2192e8",
              "title": "In bin",
              "isCorrect": false
            }
          ],
          "descriptionText": "It's commonly used in the tests module to import everything",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "881dd97c-9ca9-4d7d-8108-f5305146f6dc",
          "title": "Which statement best describes Rust's module system?",
          "answers": [
            {
              "id": "1e053a77-7a4c-40ce-9cf5-0512692b4b54",
              "title": "It's only about pub/private",
              "isCorrect": false
            },
            {
              "id": "82c72c89-b95c-4afa-bf66-934d663e84ac",
              "title": "It's the combination of packages, crates, modules, paths, and use",
              "isCorrect": true
            },
            {
              "id": "9d5f148b-7cdf-4e01-8a7a-e07cf472956d",
              "title": "It's an analog of C++ include",
              "isCorrect": false
            },
            {
              "id": "bcc8b206-d36a-4788-a60f-624ebf29951a",
              "title": "It's only about workspaces",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust's module system encompasses all code organization mechanisms: packages, crates, modules, pub/use, and paths",
          "descriptionLink": "managing_projects_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "11f55c89-12cf-4257-b322-84aab5053549",
      "theme": "Common Collections",
      "priority": 6,
      "questions": [
        {
          "id": "14b706d1-2b46-4e8c-bc6c-a93a5c9ae92c",
          "title": "What is Vec<T> in Rust?",
          "answers": [
            {
              "id": "27bff974-2f1b-482a-b157-31b4e5a1f65c",
              "title": "A fixed-size stack array",
              "isCorrect": false
            },
            {
              "id": "7b770c05-001b-4e0e-98e1-9bcfc411e7db",
              "title": "A dynamic heap array",
              "isCorrect": true
            },
            {
              "id": "ddc36eb1-9077-438d-8001-007f435d94e4",
              "title": "An associative array",
              "isCorrect": false
            },
            {
              "id": "ad15a40e-031a-4275-b1b0-d21d47931f58",
              "title": "A UTF-8 string",
              "isCorrect": false
            }
          ],
          "descriptionText": "Vec<T> stores data on the heap; its size can change at runtime",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f97044aa-e20c-4909-826e-968bdd75ea1b",
          "title": "How do you create an empty i32 vector?",
          "answers": [
            {
              "id": "080705ea-9640-427e-b740-4385057a6fd5",
              "title": "let v = Vec::new();",
              "isCorrect": true
            },
            {
              "id": "f60f89be-bf4c-4111-8fc3-e339e36d64bc",
              "title": "let v = [];",
              "isCorrect": false
            },
            {
              "id": "2ff17aa2-98c3-43a1-ba7b-d5b5f70e09b7",
              "title": "let v = vec::empty();",
              "isCorrect": false
            },
            {
              "id": "f6cd3560-5fb2-40bc-ac47-8613c43c6fc3",
              "title": "let v = array![];",
              "isCorrect": false
            }
          ],
          "descriptionText": "Vec::new() creates an empty vector; the type is via annotation or later inference",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "82e605ee-bfea-45d1-826b-e9c89330abe6",
          "title": "Macro to create a vector with elements:",
          "answers": [
            {
              "id": "6cf6e875-db72-4aef-83cd-f465ac4a93ee",
              "title": "vec![]",
              "isCorrect": true
            },
            {
              "id": "5ffb5134-f7bf-4c73-a575-c55330ab5fc7",
              "title": "array![]",
              "isCorrect": false
            },
            {
              "id": "4aac62b7-9eab-4564-912f-ab80ab1dec08",
              "title": "make_vec![]",
              "isCorrect": false
            },
            {
              "id": "4eb62a4f-5d30-42d7-9002-3238960e9f30",
              "title": "collection![]",
              "isCorrect": false
            }
          ],
          "descriptionText": "vec! is the built-in macro for vector literals",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7f7679fd-97b1-4275-bc7e-974c24aa1f5c",
          "title": "What does v[2] return if v = vec![1, 2, 3]?",
          "answers": [
            {
              "id": "046ce979-4513-41b3-997d-7c5e48075efc",
              "title": "Some(3)",
              "isCorrect": false
            },
            {
              "id": "be3f1b1f-f449-4a0f-86ef-3643ed450d99",
              "title": "&3",
              "isCorrect": true
            },
            {
              "id": "0dd36b9b-6fde-4c28-8e9d-1e57c83d03a1",
              "title": "3",
              "isCorrect": false
            },
            {
              "id": "6f43fb1b-9c84-4169-a323-5565c7ee333c",
              "title": "Option<i32>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Indexing with [] returns &T, not a value",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "aee80939-c34a-4846-8b4f-7b7ba085ca07",
          "title": "What does v.get(100) do if the index is out of bounds?",
          "answers": [
            {
              "id": "cfcea995-f1f4-40b0-ae16-d6e28aed836f",
              "title": "Panics",
              "isCorrect": false
            },
            {
              "id": "4beb3ff7-6799-43d7-b282-c1059f3bf089",
              "title": "Returns None",
              "isCorrect": true
            },
            {
              "id": "a2f572d2-9e99-4772-96d6-122401884595",
              "title": "Returns 0",
              "isCorrect": false
            },
            {
              "id": "2c30038e-f977-4f63-a067-a8454d4ee4e7",
              "title": "Returns a reference",
              "isCorrect": false
            }
          ],
          "descriptionText": "get is safe and always returns Option<&T>",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c38db066-6b48-4ec9-b465-c0948d7b168b",
          "title": "What happens with &v[100] if there are fewer elements?",
          "answers": [
            {
              "id": "a724a1a4-7c14-4d01-a4c5-b4462308a66a",
              "title": "Returns None",
              "isCorrect": false
            },
            {
              "id": "3859296a-74f3-452b-8a52-c42d9cf59a90",
              "title": "Panics",
              "isCorrect": true
            },
            {
              "id": "30753b18-e6e9-4ec9-99e4-290b2058d975",
              "title": "Returns 0",
              "isCorrect": false
            },
            {
              "id": "f400dba5-f8c4-4bf5-bcb9-9d44bf8f1550",
              "title": "Compile-time error",
              "isCorrect": false
            }
          ],
          "descriptionText": "[] indexing panics on out-of-bounds",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8f76faf6-b4ed-45ad-931e-24e5de33581a",
          "title": "Can you have &v[0] and call v.push(5) in the same scope?",
          "answers": [
            {
              "id": "c0b7dbc3-dcab-4e77-aa56-347fd7311909",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "886d7686-fb74-402a-a401-2e1ecca0e29c",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "884c4a51-f1a7-4ddb-86b7-0dcc451655fe",
              "title": "Only if push doesn't move the buffer",
              "isCorrect": false
            },
            {
              "id": "9c7f314e-9a02-4e06-ab38-1818da7d10d6",
              "title": "Always possible",
              "isCorrect": false
            }
          ],
          "descriptionText": "The borrow checker forbids this since push may reallocate, invalidating the reference",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ee406a3e-c4d2-45ab-ad23-ce04d6ee8ceb",
          "title": "How to iterate immutably over a vector?",
          "answers": [
            {
              "id": "117ab61f-b3de-4e5e-b1ad-8f363a8c319e",
              "title": "for i in v {}",
              "isCorrect": false
            },
            {
              "id": "cc6429f1-a58e-4c95-9324-ab74a7dd1ed9",
              "title": "for i in &v {}",
              "isCorrect": true
            },
            {
              "id": "5c310aa4-8d08-4d4c-a09f-c3e7db655c7b",
              "title": "for i in v.iter_mut()",
              "isCorrect": false
            },
            {
              "id": "bebd5543-2075-4ff9-b836-182996ec1260",
              "title": "for i in mut v",
              "isCorrect": false
            }
          ],
          "descriptionText": "&v yields &T",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "83e7d4b6-8135-4572-baf4-192d9a83fe9e",
          "title": "How to modify all elements in a vector?",
          "answers": [
            {
              "id": "aac73c27-6892-47f2-aa6b-355fd080f862",
              "title": "for i in v { *i += 1; }",
              "isCorrect": false
            },
            {
              "id": "9ada064d-60cc-4536-8484-4a5e3ede0db4",
              "title": "for i in &mut v { *i += 1; }",
              "isCorrect": true
            },
            {
              "id": "03437e2b-9fb4-4520-8cc1-a1160aab2107",
              "title": "for mut i in v { i += 1; }",
              "isCorrect": false
            },
            {
              "id": "f9739920-4320-43ab-b7c8-f0b3462694c8",
              "title": "v.map(|x| x + 1)",
              "isCorrect": false
            }
          ],
          "descriptionText": "&mut v yields &mut T; use * to mutate the value",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "16fee132-d9c4-4c48-a822-1ad8326c55ad",
          "title": "What if you need different types in a Vec?",
          "answers": [
            {
              "id": "6c5a176f-0458-4313-abea-1ec8a33571b3",
              "title": "You can't",
              "isCorrect": false
            },
            {
              "id": "97eed16e-196c-4cd5-aa00-63500ec587b8",
              "title": "Use an enum",
              "isCorrect": true
            },
            {
              "id": "36abac62-08b7-4a29-accd-91ba47882e07",
              "title": "Use a tuple",
              "isCorrect": false
            },
            {
              "id": "211f49f1-fbc2-464a-893c-6ec2a744ed11",
              "title": "Use Vec<dynamic>",
              "isCorrect": false
            }
          ],
          "descriptionText": "A vector is homogeneous; an enum unifies variants under one type",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bc137f49-7c26-47f8-a62f-2877ee289a3e",
          "title": "What happens to vector elements when it goes out of scope?",
          "answers": [
            {
              "id": "e90593e1-14fe-4752-8531-fcaa5a7cbdf9",
              "title": "They aren't freed",
              "isCorrect": false
            },
            {
              "id": "daf83b0e-a3c9-4de7-980e-a0904bf95ccd",
              "title": "Memory leak",
              "isCorrect": false
            },
            {
              "id": "274bd10a-e163-47e5-a3ed-07e8d064374c",
              "title": "All elements are dropped",
              "isCorrect": true
            },
            {
              "id": "a44b9a73-785c-445a-bf17-0d10d3d724aa",
              "title": "Only the first element is dropped",
              "isCorrect": false
            }
          ],
          "descriptionText": "Vec frees memory and calls drop for each element",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2fddba41-5557-4f15-8c81-27eaab117163",
          "title": "What is String?",
          "answers": [
            {
              "id": "dd97446a-c146-4ca1-8fbe-05c2927cfb44",
              "title": "A fixed-length string",
              "isCorrect": false
            },
            {
              "id": "64d68bfc-be49-4a6b-a67e-2423073cfb75",
              "title": "A wrapper around Vec<u8>",
              "isCorrect": true
            },
            {
              "id": "3016899c-d528-492b-ad77-3a490b4ed66e",
              "title": "A UTF-16 string",
              "isCorrect": false
            },
            {
              "id": "83e9b331-fe55-49c6-9bf4-144372565846",
              "title": "A bag of chars",
              "isCorrect": false
            }
          ],
          "descriptionText": "String is UTF-8 backed by Vec<u8>",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "866beb68-d052-4426-a06d-67b573334d41",
          "title": "How to create an empty string?",
          "answers": [
            {
              "id": "f4eacd83-9d78-4a83-bbd1-ccb3c6ab19bc",
              "title": "String::empty()",
              "isCorrect": false
            },
            {
              "id": "b950145d-5919-40e7-91e5-5d8c49aa6751",
              "title": "String::new()",
              "isCorrect": true
            },
            {
              "id": "135a2487-7de4-4f6f-9e43-0f9d3b813ff9",
              "title": "String::default()",
              "isCorrect": false
            },
            {
              "id": "af554b43-368c-42f7-960c-76f1b8bc3a3e",
              "title": "\"\"",
              "isCorrect": false
            }
          ],
          "descriptionText": "String::new() creates an empty String",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "437d380d-d031-4297-bbe8-a303814e097f",
          "title": "How to create a String from a literal?",
          "answers": [
            {
              "id": "dd5c3ebf-1a54-4038-92f2-16c4e159f781",
              "title": "\"hello\".clone()",
              "isCorrect": false
            },
            {
              "id": "b0866601-c521-4704-a874-68fe4fb93cd1",
              "title": "\"hello\".to_string()",
              "isCorrect": true
            },
            {
              "id": "2b7c31d8-2156-474b-ac21-3e3bb8be9315",
              "title": "String::literal(\"hello\")",
              "isCorrect": false
            },
            {
              "id": "a4dd6f78-2384-4e0f-aa51-aa4b54acbdfc",
              "title": "String::str(\"hello\")",
              "isCorrect": false
            }
          ],
          "descriptionText": "&str has .to_string()",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cfb6ca3c-4270-4ae0-9c8d-af60e2843f93",
          "title": "Difference between String::from(\"hi\") and \"hi\".to_string()?",
          "answers": [
            {
              "id": "f6ba1355-052b-4586-9f79-1e51c43d4af8",
              "title": "Different types",
              "isCorrect": false
            },
            {
              "id": "b2f8c265-bf59-4de8-b20a-4db3026f3dc4",
              "title": "No difference",
              "isCorrect": true
            },
            {
              "id": "a05a0ab8-8810-4773-8588-f32d24b615a7",
              "title": "The second is faster",
              "isCorrect": false
            },
            {
              "id": "fd0d1d5f-7317-4ccb-a209-b5c1e9f46eee",
              "title": "The first is forbidden",
              "isCorrect": false
            }
          ],
          "descriptionText": "Both create a String from a literal",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cc61acb7-729b-433f-bbe3-c4fda68884d5",
          "title": "What does push_str do?",
          "answers": [
            {
              "id": "11e616aa-4acb-48ed-abd9-e3285ef4ee01",
              "title": "Appends a char",
              "isCorrect": false
            },
            {
              "id": "5f59c990-f10c-4f06-9e06-0baa606fd5ff",
              "title": "Appends an &str",
              "isCorrect": true
            },
            {
              "id": "c14dee49-5bed-407a-a2ee-ca12f4052b31",
              "title": "Deletes the string",
              "isCorrect": false
            },
            {
              "id": "4f06f81c-c079-4d8e-8c68-51818dfe8009",
              "title": "Returns a copy",
              "isCorrect": false
            }
          ],
          "descriptionText": "push_str takes &str and appends it",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5c020ba1-9e46-4ead-b80d-78b53569d274",
          "title": "What does push do?",
          "answers": [
            {
              "id": "8baf0d0e-3297-4b2b-b28f-043da566259f",
              "title": "Appends an &str",
              "isCorrect": false
            },
            {
              "id": "a3c80d5c-d683-4b1d-a071-ab0af0f2f7a5",
              "title": "Appends a single char",
              "isCorrect": true
            },
            {
              "id": "a4f5e795-e44e-4841-b478-e58afeb167b1",
              "title": "Concatenates strings",
              "isCorrect": false
            },
            {
              "id": "724479e8-aa18-42af-bf45-60695dc907d2",
              "title": "Appends an array",
              "isCorrect": false
            }
          ],
          "descriptionText": "push accepts only a char",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2d26594f-af6e-43b8-90ff-9530167f4ac4",
          "title": "What happens with let s3 = s1 + &s2;?",
          "answers": [
            {
              "id": "eb700af6-6422-4648-bac2-2d02b7c3bde4",
              "title": "Both remain accessible",
              "isCorrect": false
            },
            {
              "id": "c2311311-d776-41b0-8fcf-381e451b8669",
              "title": "s1 is moved",
              "isCorrect": true
            },
            {
              "id": "ccf6ebff-fbcf-4d2e-a797-089e08a94d97",
              "title": "s2 is moved",
              "isCorrect": false
            },
            {
              "id": "63635fa5-e778-46a5-a1f4-524c54f327ad",
              "title": "Compile error",
              "isCorrect": false
            }
          ],
          "descriptionText": "+ is fn add(self, s: &str) -> String, so s1 is moved",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c18d16a4-2a6d-49e2-a0a0-363497fd0b07",
          "title": "Why is format! better than + for strings?",
          "answers": [
            {
              "id": "db355357-d121-4d68-afb0-bf2573f1a009",
              "title": "It's faster",
              "isCorrect": false
            },
            {
              "id": "45b1863c-501a-4c72-a000-2367594d8d59",
              "title": "Clearer and doesn't move arguments",
              "isCorrect": true
            },
            {
              "id": "4b75afc8-4a34-4659-a45d-50ebe01fa09e",
              "title": "Produces &str",
              "isCorrect": false
            },
            {
              "id": "554365a8-aa91-4789-b7ef-5048e949ce60",
              "title": "For printing only",
              "isCorrect": false
            }
          ],
          "descriptionText": "format! takes references; nothing is moved",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bd25e8f1-0e81-44b3-b4f1-e0b433e0e667",
          "title": "Why can't you index a string as s[0]?",
          "answers": [
            {
              "id": "1381bd73-a0ed-4538-b961-62bc8f9646a3",
              "title": "Arbitrary language choice",
              "isCorrect": false
            },
            {
              "id": "82dbc763-41db-4c81-bf20-ba45a9e55605",
              "title": "UTF-8 has variable width",
              "isCorrect": true
            },
            {
              "id": "e747a858-e5e2-4838-9a45-564831d6771d",
              "title": "Borrow checker issue",
              "isCorrect": false
            },
            {
              "id": "152eb130-b239-403c-9a09-4c8efa7ad57e",
              "title": "Only arrays support indexing",
              "isCorrect": false
            }
          ],
          "descriptionText": "One character can span multiple bytes; byte indexing isn't \"a character\"",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "06784ce2-86bc-492a-9495-14f260fe45b3",
          "title": "What does \"Здравствуйте\".len() return?",
          "answers": [
            {
              "id": "e1bc5c5d-1f1a-476d-ae67-1df7c9c7802c",
              "title": "12",
              "isCorrect": false
            },
            {
              "id": "99f81171-5164-4b6c-b1e5-82b54e633150",
              "title": "24",
              "isCorrect": true
            },
            {
              "id": "920570bb-8917-474c-8e7b-a93f5256acb6",
              "title": "Error",
              "isCorrect": false
            },
            {
              "id": "0baa1043-c2a8-4ec8-b4ef-21ff438895f4",
              "title": "0",
              "isCorrect": false
            }
          ],
          "descriptionText": "len() returns bytes; Cyrillic letters here are 2 bytes each",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1a6c5750-7f52-455a-afed-8ec9aa6e45b9",
          "title": "How to get a slice of the first 4 bytes of a string?",
          "answers": [
            {
              "id": "fdccc8b3-4a7b-4d3e-97ab-b7190f816f91",
              "title": "&s[0..2]",
              "isCorrect": false
            },
            {
              "id": "a16133c8-737f-4c6d-adc2-f00c630c0c13",
              "title": "&s[0..4]",
              "isCorrect": true
            },
            {
              "id": "ff22654b-8ea6-4ac0-a04b-2d338b74b757",
              "title": "s.slice(4)",
              "isCorrect": false
            },
            {
              "id": "346c006a-0057-4fd7-849c-330118040938",
              "title": "s.bytes(0..4)",
              "isCorrect": false
            }
          ],
          "descriptionText": "Range slicing yields &str, but only on valid char boundaries",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f83ccd6c-51db-48db-8902-c3c549d3c17f",
          "title": "What does \"Зд\".chars() do?",
          "answers": [
            {
              "id": "e79bcb32-2a2e-423c-aa8e-6a71acd07088",
              "title": "Bytes",
              "isCorrect": false
            },
            {
              "id": "6a876daa-3744-4184-9363-bf03b6eebc38",
              "title": "Unicode scalar chars",
              "isCorrect": true
            },
            {
              "id": "79987a04-adc8-4d8c-9fc5-262ed9c3124c",
              "title": "&str slices",
              "isCorrect": false
            },
            {
              "id": "6f018ed6-9cb3-46f2-bc96-5fd2b7614c32",
              "title": "Error",
              "isCorrect": false
            }
          ],
          "descriptionText": ".chars() iterates Unicode scalar values",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2b569970-e3af-43d0-9145-672af151cede",
          "title": "What does \"Зд\".bytes() do?",
          "answers": [
            {
              "id": "c235d9b9-6b4b-4d37-a6fb-6f6b0dc60769",
              "title": "Characters",
              "isCorrect": false
            },
            {
              "id": "17cef59f-e84f-4a1c-8bd9-049c7363c265",
              "title": "An array of char",
              "isCorrect": false
            },
            {
              "id": "72f4d7a8-5f9e-49bd-a313-3b89779ad6b6",
              "title": "UTF-8 bytes",
              "isCorrect": true
            },
            {
              "id": "3d137b97-239a-4ad1-9378-41b97b4691e5",
              "title": "Graphemes",
              "isCorrect": false
            }
          ],
          "descriptionText": ".bytes() yields u8",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "748ce03c-8af0-4ac4-a1ad-efa017243851",
          "title": "What doesn't the standard library provide for strings?",
          "answers": [
            {
              "id": "d9719330-2398-45b5-886e-9974a7322ff9",
              "title": "Bytes",
              "isCorrect": false
            },
            {
              "id": "ae032afa-9ec9-4cc5-a439-3fa1e9076146",
              "title": "Chars",
              "isCorrect": false
            },
            {
              "id": "fa664b76-66ee-4129-a695-20889386dc6b",
              "title": "Grapheme clusters",
              "isCorrect": true
            },
            {
              "id": "c158aec2-43d1-4857-8b2e-68ba4a75a903",
              "title": "Length",
              "isCorrect": false
            }
          ],
          "descriptionText": "Graphemes require external crates",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d577fd41-55ec-4e77-801f-65f9e0291efc",
          "title": "How to create a HashMap?",
          "answers": [
            {
              "id": "61aedda3-330a-4a0f-9e5f-4db1e0c0621d",
              "title": "let m = HashMap::new();",
              "isCorrect": true
            },
            {
              "id": "fb69c485-6b8d-437b-ba41-59573433f0ec",
              "title": "let m = map![];",
              "isCorrect": false
            },
            {
              "id": "c801d503-c4d8-4b45-a060-b04b29f67181",
              "title": "let m = {};",
              "isCorrect": false
            },
            {
              "id": "81fe723f-1e3a-4cd4-946c-1a6deca84a1c",
              "title": "let m = dictionary![];",
              "isCorrect": false
            }
          ],
          "descriptionText": "HashMap::new() is the standard way",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "aab2354f-1140-4d9a-9db3-0048d50a5a1e",
          "title": "Where is HashMap located?",
          "answers": [
            {
              "id": "edd94352-c61b-4b85-8158-0e4cd744dc90",
              "title": "std::hash",
              "isCorrect": false
            },
            {
              "id": "b66ef922-feb4-441b-9c4b-42cfd54aec1e",
              "title": "std::map",
              "isCorrect": false
            },
            {
              "id": "c5c7c417-4376-40da-8341-80997415ef78",
              "title": "std::collections",
              "isCorrect": true
            },
            {
              "id": "9cf953cf-8fdd-45c1-ad88-fbee61d4cad0",
              "title": "std::core",
              "isCorrect": false
            }
          ],
          "descriptionText": "HashMap lives in the collections module",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5714692b-dc8f-44d5-8541-2ca6276ead25",
          "title": "How to get a value from a HashMap?",
          "answers": [
            {
              "id": "ae3b5dd8-dcf5-44ab-a6f1-e6dfd1d7dc88",
              "title": "map[\"key\"]",
              "isCorrect": false
            },
            {
              "id": "fccf601e-8e16-46ce-ab66-2986c82b885d",
              "title": "map.get(\"key\")",
              "isCorrect": true
            },
            {
              "id": "937ce9e3-ab80-4e09-bcc1-a83ab6b792fa",
              "title": "map.value(\"key\")",
              "isCorrect": false
            },
            {
              "id": "32ee7c05-4635-47bf-a219-db11d0691581",
              "title": "map.find(\"key\")",
              "isCorrect": false
            }
          ],
          "descriptionText": "Use .get(), which returns Option<&V>",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "95642cda-93bd-45d0-a073-756f7f3006b2",
          "title": "What does the entry method do?",
          "answers": [
            {
              "id": "63b150ba-4c7f-42fe-b318-75d7e043bdf0",
              "title": "Checks key existence",
              "isCorrect": true
            },
            {
              "id": "1b65a611-9808-48b9-b1c2-8a930bb0e28e",
              "title": "Deletes an entry",
              "isCorrect": false
            },
            {
              "id": "768b2ecf-4a77-4867-a336-14fffba643aa",
              "title": "Overwrites a key",
              "isCorrect": false
            },
            {
              "id": "aad293d6-4fa9-4d2a-940e-a82499f9e1c0",
              "title": "Returns the list of keys",
              "isCorrect": false
            }
          ],
          "descriptionText": "entry returns an Entry, on which you can call or_insert",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "825061e5-eaf0-4775-8918-85f0c5963390",
          "title": "What does or_insert(50) do?",
          "answers": [
            {
              "id": "cbc4703e-33b5-4a6e-aaa1-af73fdeca5cb",
              "title": "Always inserts 50",
              "isCorrect": false
            },
            {
              "id": "9e88e387-39a3-47ea-b9c7-d034c203cf85",
              "title": "Inserts only if the key is absent",
              "isCorrect": true
            },
            {
              "id": "17b3dd6a-86f3-49cc-90cc-26196c25d521",
              "title": "Deletes the key",
              "isCorrect": false
            },
            {
              "id": "079741c5-3024-41a3-97c6-51bbfa2686d1",
              "title": "Returns an Option",
              "isCorrect": false
            }
          ],
          "descriptionText": "or_insert inserts when missing; otherwise it returns a mutable ref to the existing value",
          "descriptionLink": "common_collections_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "7481c7ae-bcba-43b0-b8a7-e1d74e074f0c",
      "theme": "Error Handling",
      "priority": 7,
      "questions": [
        {
          "id": "5628434a-bfce-4f82-b175-d52534154944",
          "title": "How do error kinds differ in Rust?",
          "answers": [
            {
              "id": "7674445d-d624-4e6b-a0f8-fc2e14607bff",
              "title": "Compile-time vs. runtime",
              "isCorrect": false
            },
            {
              "id": "5ead41fb-caaa-4e71-b3c1-a79f979ec453",
              "title": "Light vs. heavy",
              "isCorrect": false
            },
            {
              "id": "23ebc4f5-8440-4e00-b47c-aa50286742ef",
              "title": "Recoverable vs. unrecoverable",
              "isCorrect": true
            },
            {
              "id": "5e85eb5c-ef12-458a-be34-97be40aa359f",
              "title": "Syntactic vs. logical",
              "isCorrect": false
            }
          ],
          "descriptionText": "Recoverable → Result<T, E>, unrecoverable → panic!",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3bed7151-eea8-424d-95c6-56445ca0dbc1",
          "title": "What does panic! do?",
          "answers": [
            {
              "id": "8a1996b4-15cf-4391-8ff8-1fd954b9607e",
              "title": "Returns Err",
              "isCorrect": false
            },
            {
              "id": "c013b320-8402-4de5-bed3-2d9344b6d1a1",
              "title": "Prints a warning and continues",
              "isCorrect": false
            },
            {
              "id": "4de24610-7e76-4702-9118-ed7b0f85a6b3",
              "title": "Terminates the thread with stack unwinding by default",
              "isCorrect": true
            },
            {
              "id": "f9d1fae4-4ca9-41b7-ac71-3f35550e6bb1",
              "title": "Silently logs an error",
              "isCorrect": false
            }
          ],
          "descriptionText": "A panic stops execution; default behavior is unwinding",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c01bc8ad-636c-4a76-928b-298043ad4e92",
          "title": "How to switch panics to immediate abort?",
          "answers": [
            {
              "id": "01c23216-8ddb-4ae3-a762-06ee4bbf9dcb",
              "title": "RUST_PANIC=abort",
              "isCorrect": false
            },
            {
              "id": "2ce5c756-1017-4c7a-a4f7-0f71cdad78a2",
              "title": "In Cargo.toml: panic = 'abort' in the target profile",
              "isCorrect": true
            },
            {
              "id": "0d41a97e-4ddf-4e5e-a34b-ba057a74a257",
              "title": "Compiler flag --abort",
              "isCorrect": false
            },
            {
              "id": "2cd89884-aa8a-49a7-aace-cac83f8f40fc",
              "title": "Function std::panic::abort()",
              "isCorrect": false
            }
          ],
          "descriptionText": "The Cargo profile sets the strategy",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4263a1b5-cbed-495e-811b-172c353fa7aa",
          "title": "What does RUST_BACKTRACE=1 show?",
          "answers": [
            {
              "id": "49d36e1f-e458-40d7-b45a-729a4c538dcf",
              "title": "Error type",
              "isCorrect": false
            },
            {
              "id": "02b98700-1fda-4a9c-a4e5-194cb2c0d2dd",
              "title": "The call stack up to the panic site",
              "isCorrect": true
            },
            {
              "id": "aebad4df-1abc-45ab-8625-52d4e5cfba9e",
              "title": "Memory contents",
              "isCorrect": false
            },
            {
              "id": "94975f32-32ec-4a46-8486-c0be4a0408f3",
              "title": "Rust version",
              "isCorrect": false
            }
          ],
          "descriptionText": "Enables backtrace output",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6c0981d7-bbcc-41f9-b2e7-8494e653d070",
          "title": "Which type is used for recoverable errors?",
          "answers": [
            {
              "id": "97e7302d-f2c4-44f2-8e00-6226ef988bcc",
              "title": "Option<T>",
              "isCorrect": false
            },
            {
              "id": "97df6b47-1496-4495-9b23-ae34f143adbf",
              "title": "Result<T, E>",
              "isCorrect": true
            },
            {
              "id": "5000defe-9db1-4206-892c-43e695232d19",
              "title": "Try<T>",
              "isCorrect": false
            },
            {
              "id": "f09c6601-7c1d-41ae-a775-ba1193c311e0",
              "title": "Either<T, E>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Result encapsulates success/error",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "54f6e2d9-e8d9-45f9-bd21-5f0f6054c7bd",
          "title": "What does File::open(\"a.txt\") return?",
          "answers": [
            {
              "id": "0aa9ff26-dfe3-4780-9417-b828d0487df4",
              "title": "Option<File>",
              "isCorrect": false
            },
            {
              "id": "806ef7a8-e7d4-490e-958c-3de532f390f4",
              "title": "Result<File, io::Error>",
              "isCorrect": true
            },
            {
              "id": "09a636ff-6cbf-43ac-81a1-384f359a2683",
              "title": "Result<&File, &io::Error>",
              "isCorrect": false
            },
            {
              "id": "f83d5a8d-f693-4293-b809-fabb9b177527",
              "title": "File",
              "isCorrect": false
            }
          ],
          "descriptionText": "The operation can fail",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "401ac9d0-28c0-403a-a857-4d10a12e584b",
          "title": "What does unwrap() on a Result do?",
          "answers": [
            {
              "id": "e7ecd887-6f0e-40a4-bab2-0c287df85101",
              "title": "Always returns T",
              "isCorrect": false
            },
            {
              "id": "348d1de0-d59b-4be5-822e-b36926a51d6b",
              "title": "Returns T or panics",
              "isCorrect": true
            },
            {
              "id": "890c5804-53a3-42d5-ba77-56dc9c7a2cd3",
              "title": "Always panics",
              "isCorrect": false
            },
            {
              "id": "a3166cea-318a-465b-b940-f7226d97e8cd",
              "title": "Converts to Option",
              "isCorrect": false
            }
          ],
          "descriptionText": "Shortcut for \"Ok or panic\"",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "92cb1dba-25d0-4437-ae7e-436bf3d31ef1",
          "title": "How does expect() differ from unwrap()?",
          "answers": [
            {
              "id": "2cf4a661-7d09-4968-b857-d4de8b26ad24",
              "title": "Returns Option",
              "isCorrect": false
            },
            {
              "id": "4f9549f0-bb76-4ba2-a2bf-4276b4dce55d",
              "title": "Doesn't panic",
              "isCorrect": false
            },
            {
              "id": "b90efbef-2726-4219-a6cc-de3a6afcdb86",
              "title": "Lets you set a custom panic message",
              "isCorrect": true
            },
            {
              "id": "b6b5b455-d880-44c4-b7d6-0c77d9e9195c",
              "title": "Is 2× slower",
              "isCorrect": false
            }
          ],
          "descriptionText": "You provide your own message",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8b80c10a-7d5a-4532-b53f-ee9435acecb7",
          "title": "How to react differently to io::Error kinds?",
          "answers": [
            {
              "id": "d8fba3e1-63b7-41b2-8b9c-eb8f0d705f70",
              "title": "if error == NotFound",
              "isCorrect": false
            },
            {
              "id": "7486fc18-e7da-49a4-adf0-df73ff27774c",
              "title": "match error.kind()",
              "isCorrect": true
            },
            {
              "id": "2994270f-0e36-4287-8da7-9e6061102311",
              "title": "error.code()",
              "isCorrect": false
            },
            {
              "id": "71843dc5-8067-4f3e-9fbe-7c296b00a23b",
              "title": "You can't",
              "isCorrect": false
            }
          ],
          "descriptionText": "ErrorKind indicates the class of error",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "39e70777-ef26-4b7a-950d-2bff93aff3e1",
          "title": "What does unwrap_or_else(|e| { ... }) do?",
          "answers": [
            {
              "id": "c1f64168-020e-41f4-a364-08ef8f453511",
              "title": "Always uses a default value",
              "isCorrect": false
            },
            {
              "id": "95e74f44-9c6d-49f6-8dc5-5f2ddbda9bbb",
              "title": "Handles Ok",
              "isCorrect": false
            },
            {
              "id": "e72b70e4-b9ec-4965-91cf-d1d05d7037b0",
              "title": "Calls the closure only on Err",
              "isCorrect": true
            },
            {
              "id": "627e4ebb-ebcd-4fc5-bf73-e15bf1fe7158",
              "title": "Never called",
              "isCorrect": false
            }
          ],
          "descriptionText": "Lazily creates a value on error",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c9979c53-43cc-4cec-ac29-ae4733acece1",
          "title": "What is error propagation?",
          "answers": [
            {
              "id": "6058b955-bf22-4e5a-aa99-9172b06654f6",
              "title": "Logging and continuing",
              "isCorrect": false
            },
            {
              "id": "21226851-429e-48a0-9391-c7e99f644410",
              "title": "Converting to panic!",
              "isCorrect": false
            },
            {
              "id": "735091a1-c784-407b-8d0f-3fa7c59ea3e0",
              "title": "Returning the error to the caller",
              "isCorrect": true
            },
            {
              "id": "04424ec8-7526-48f3-ae07-c3b4b36b3ee2",
              "title": "Retrying",
              "isCorrect": false
            }
          ],
          "descriptionText": "\"Let the caller decide.\"",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "af10f004-1498-4b3f-963e-978ee3516b52",
          "title": "What does the ? operator do?",
          "answers": [
            {
              "id": "56c5936c-bbd9-49c9-8285-00ca2e9c61e3",
              "title": "Converts Result to Option",
              "isCorrect": false
            },
            {
              "id": "5de8884b-9d72-47f5-95a8-691985869daa",
              "title": "\"If Ok — unwrap; if Err — return from the function\"",
              "isCorrect": true
            },
            {
              "id": "c7004742-2320-475f-944d-89075602735c",
              "title": "Catches panics",
              "isCorrect": false
            },
            {
              "id": "8f2265e9-a63c-4e6b-8048-1ec164f9fc67",
              "title": "Hides the error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Sugar for match on Result",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "389bf886-735d-4ace-bf3c-87dc83fcfdaa",
          "title": "Where can you use ?",
          "answers": [
            {
              "id": "6b07efec-1daa-44aa-9652-4eaeacc32440",
              "title": "In any function",
              "isCorrect": false
            },
            {
              "id": "82b8117d-bbb8-44f5-a031-b01f4b683c65",
              "title": "Only in main",
              "isCorrect": false
            },
            {
              "id": "416c42a2-99d0-4b7a-84ed-ab4dfdf8d0e1",
              "title": "In functions whose return type is compatible (Result, Option, …)",
              "isCorrect": true
            },
            {
              "id": "a640a573-faa7-4ca3-ad6c-7b18cf81afb5",
              "title": "Only in async",
              "isCorrect": false
            }
          ],
          "descriptionText": "Early return must match the function's return type",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1589d982-c752-4ecd-9f19-d03f4fa36bdf",
          "title": "What does ? do on Option<T>?",
          "answers": [
            {
              "id": "2d48fab1-6300-4f52-89c9-04ebcfc067e0",
              "title": "Converts to Result",
              "isCorrect": false
            },
            {
              "id": "42f45230-912c-40fb-97cb-6704b42228c7",
              "title": "Returns None on None, otherwise unwraps Some",
              "isCorrect": true
            },
            {
              "id": "e69f4d44-433e-40b6-9210-afcb43a59f0f",
              "title": "Panics on None",
              "isCorrect": false
            },
            {
              "id": "d0cf3c78-a79b-4a37-a9e0-f8da29ebd119",
              "title": "Ignores None",
              "isCorrect": false
            }
          ],
          "descriptionText": "Same idea as Result, but for Option",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7ec9ed68-da8c-4f48-ae3d-5920023c635f",
          "title": "Can you use ? on a Result inside a function returning Option?",
          "answers": [
            {
              "id": "fa635cd1-6f26-4ffb-a045-5ea434b6f60d",
              "title": "Yes, automatically",
              "isCorrect": false
            },
            {
              "id": "647b58a1-28ab-46f8-bbcc-fb1d817eaa8b",
              "title": "No, you need explicit conversion (ok, ok_or)",
              "isCorrect": true
            },
            {
              "id": "18394d1b-94aa-4db2-b9ac-db83b04712a8",
              "title": "Yes, only on nightly",
              "isCorrect": false
            },
            {
              "id": "5049e41e-c524-485a-9376-ec30740caaef",
              "title": "Yes, if From is implemented",
              "isCorrect": false
            }
          ],
          "descriptionText": "Types are incompatible without conversion",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bc2fc65c-6888-4971-81dc-f83fd9b85ff8",
          "title": "What does From do in the context of ?",
          "answers": [
            {
              "id": "c2db4f86-f74a-4c6d-aded-227ad2fa118b",
              "title": "Writes to logs",
              "isCorrect": false
            },
            {
              "id": "739cdd50-e8ef-4ef8-9d74-542e80960172",
              "title": "Converts Ok into Err",
              "isCorrect": false
            },
            {
              "id": "687dd2f9-1ddd-4213-a579-90e0606d608d",
              "title": "Converts the error type into the function's error type",
              "isCorrect": true
            },
            {
              "id": "e6b8bce0-f833-4dfc-8c22-10771a2e081e",
              "title": "Suppresses the error",
              "isCorrect": false
            }
          ],
          "descriptionText": "? uses From::from(err) to coerce errors",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9f2c40e0-4662-4390-855f-f8a98a9f0ee4",
          "title": "Can you use ? in main?",
          "answers": [
            {
              "id": "2c0e460e-ee24-4c55-b0fb-63e9d2ddcaab",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "de8ab642-3e19-42a4-bdd3-2a4f71133703",
              "title": "Yes, if main returns Result<(), E>",
              "isCorrect": true
            },
            {
              "id": "efc3c96a-c30a-49c2-8a75-e5730ca2e3bf",
              "title": "Only with Box<dyn Error>",
              "isCorrect": false
            },
            {
              "id": "906eb254-c8cc-44e0-826b-6ad8048829f5",
              "title": "Only with io::Result<()>",
              "isCorrect": false
            }
          ],
          "descriptionText": "main can return Result, then ? is allowed",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9ae20ae6-9baa-49e8-add4-503ee15d9fce",
          "title": "What does Box<dyn Error> mean in main() -> Result<(), Box<dyn Error>>?",
          "answers": [
            {
              "id": "56acab59-c59f-46f2-94e1-77ddcef6d8b9",
              "title": "Forbids ?",
              "isCorrect": false
            },
            {
              "id": "c75b87e2-4e8d-496c-9b9d-6651f7ca329e",
              "title": "Allows \"any\" error type",
              "isCorrect": true
            },
            {
              "id": "cd408f86-21a7-4c95-a415-b0666ace5731",
              "title": "Hides the stack",
              "isCorrect": false
            },
            {
              "id": "59733ab2-30ab-4bb8-a853-097a95d45ba4",
              "title": "Panics on any error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Trait object for \"any Error\"",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0cd4e514-c985-49b3-9d0f-156083b3d358",
          "title": "Which is preferable in production: unwrap or expect?",
          "answers": [
            {
              "id": "5e642c2f-713d-458d-90b4-5d6e7dc9ac60",
              "title": "unwrap",
              "isCorrect": false
            },
            {
              "id": "c2bf6358-f013-4886-a2a8-080ba310fca5",
              "title": "expect with a clear message",
              "isCorrect": true
            },
            {
              "id": "a886fecf-c382-4833-b85a-b9b892749921",
              "title": "Neither",
              "isCorrect": false
            },
            {
              "id": "ad47f7f0-b7e5-4789-8771-4ae79f3ab909",
              "title": "No difference",
              "isCorrect": false
            }
          ],
          "descriptionText": "Gives context on failure",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7b8b8fc4-92d2-4c18-9be0-3f07c5fa1321",
          "title": "When is panicking appropriate?",
          "answers": [
            {
              "id": "83ae9807-4f5c-4fea-a8cd-72f8e76878d3",
              "title": "Always for any error",
              "isCorrect": false
            },
            {
              "id": "36157a5b-80b7-48df-a606-7a0e0fe7beab",
              "title": "In examples/prototypes/tests; on invariant violations; in unsafe states",
              "isCorrect": true
            },
            {
              "id": "c2aa66ea-dfeb-4290-88c2-5c9ac54595cd",
              "title": "Never",
              "isCorrect": false
            },
            {
              "id": "fabff2fc-61c9-4eac-9f7a-cea49461ffa1",
              "title": "Only in release",
              "isCorrect": false
            }
          ],
          "descriptionText": "Panic is for truly \"impossible/dangerous\" situations",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4cf5ef20-fcab-461b-828d-f8febaf89e8f",
          "title": "What is a \"bad state\"?",
          "answers": [
            {
              "id": "c102f5fb-b3ed-4499-9f86-ceb87cc499fe",
              "title": "Any input error",
              "isCorrect": false
            },
            {
              "id": "b68339fa-2a69-440e-9ed2-1b24f45b4c15",
              "title": "Contract/invariant violation; dangerous/inconsistent values",
              "isCorrect": true
            },
            {
              "id": "da18c22a-0f3d-4f8a-9226-3d03c94597ba",
              "title": "A zero value",
              "isCorrect": false
            },
            {
              "id": "6cb3cc3b-1a26-4a91-95b9-115b7f8095de",
              "title": "An empty file",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unsafe to continue afterwards",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "af20a350-e666-427d-87cc-5e75947390b6",
          "title": "For expected failures (e.g., API rate limit), what's better?",
          "answers": [
            {
              "id": "3931836c-44f1-4555-9f91-c251dddacb5e",
              "title": "panic!",
              "isCorrect": false
            },
            {
              "id": "35872ded-b838-4773-95f0-54276dda2596",
              "title": "Return Result",
              "isCorrect": true
            },
            {
              "id": "a3faf169-ab8c-431f-b344-ab52ffd668e2",
              "title": "Ignore it",
              "isCorrect": false
            },
            {
              "id": "9dc6dae0-acb2-43bb-a875-1b1ece419854",
              "title": "unwrap()",
              "isCorrect": false
            }
          ],
          "descriptionText": "Let the caller choose a recovery strategy",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3f38854f-4e7d-4c8a-a010-dd8b408e8553",
          "title": "How to \"bake in\" value validation into types?",
          "answers": [
            {
              "id": "65cc4389-1cc9-4d25-ab5c-5b6d647aeae1",
              "title": "Check with if in every function",
              "isCorrect": false
            },
            {
              "id": "a1d20032-1f1b-4584-b9e3-682a3f18120b",
              "title": "Create a new type and validate in its constructor",
              "isCorrect": true
            },
            {
              "id": "3376289e-5761-400b-b1eb-614d436181e8",
              "title": "Use a global variable",
              "isCorrect": false
            },
            {
              "id": "9c5f1ee3-98f0-4713-9502-97fa270b6c16",
              "title": "Rely on comments",
              "isCorrect": false
            }
          ],
          "descriptionText": "Encapsulation enforces correctness at the type level",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d0f2d018-b7bf-4a8f-84d4-a1067b60d9c2",
          "title": "Why make fields of a validating type private?",
          "answers": [
            {
              "id": "16e951bd-f07c-4c62-8d8d-ac98be16592c",
              "title": "For speed",
              "isCorrect": false
            },
            {
              "id": "95f3a0e2-f34e-4340-82fb-14eb2d35234c",
              "title": "To prevent bypassing constructor checks",
              "isCorrect": true
            },
            {
              "id": "c289fc7e-5056-4ccd-b19d-92e2fa6070fa",
              "title": "To make it compile",
              "isCorrect": false
            },
            {
              "id": "7638ff50-1fa7-406e-9fd2-97b7b8fffc19",
              "title": "For automatic Debug",
              "isCorrect": false
            }
          ],
          "descriptionText": "Otherwise invalid values could be assigned directly",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d0cd357f-da73-4026-b94c-db76d02deeff",
          "title": "What does fs::read_to_string(path) return?",
          "answers": [
            {
              "id": "827b4242-934c-42b8-9ee0-91d889d6a8a9",
              "title": "String or panic",
              "isCorrect": false
            },
            {
              "id": "9d9afcf0-d636-4fce-87a4-aef6ae592eed",
              "title": "Result<String, io::Error>",
              "isCorrect": true
            },
            {
              "id": "d8c9a69a-6692-49c6-bacf-1a06b3717361",
              "title": "&str",
              "isCorrect": false
            },
            {
              "id": "7477ac88-f6cf-4ffa-9f5f-14b3256736a0",
              "title": "Option<String>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Convenience function with its own error type",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0735e83c-09ef-4a1d-963c-f89d4eb12485",
          "title": "How does match on Result compare to ?",
          "answers": [
            {
              "id": "8b34ee1a-afdc-4f01-8864-8e4e767626ca",
              "title": "match is shorter",
              "isCorrect": false
            },
            {
              "id": "8c632d96-4e3c-4b47-b211-721b033b4966",
              "title": "? is shorter and does the same (unwrap Ok, return Err)",
              "isCorrect": true
            },
            {
              "id": "2b00ab6f-202b-4367-acc3-b6d0d7ce38e9",
              "title": "? is slower",
              "isCorrect": false
            },
            {
              "id": "f865ab18-81b8-4ad6-81fb-97c9feb0689d",
              "title": "match can't be used",
              "isCorrect": false
            }
          ],
          "descriptionText": "? is syntactic sugar",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c45f5cdc-8fa1-4a76-87b8-8baa2599dbec",
          "title": "What happens with v[99] if v is shorter?",
          "answers": [
            {
              "id": "796eccfe-0eaa-4901-9f87-6ab6fa72a050",
              "title": "Returns None",
              "isCorrect": false
            },
            {
              "id": "699180b8-80e6-40b0-b40d-e8439395c4d0",
              "title": "Panics due to out-of-bounds",
              "isCorrect": true
            },
            {
              "id": "df54e954-aa04-469e-b668-3a1d57b03d08",
              "title": "Returns Err",
              "isCorrect": false
            },
            {
              "id": "2ecf40e6-d6aa-4a94-96f7-56b177fb24b0",
              "title": "Nothing",
              "isCorrect": false
            }
          ],
          "descriptionText": "Bounds-checked indexing → panic",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dee7f321-6154-4827-b3e4-7bd458fe96c1",
          "title": "What does a vector's get method return?",
          "answers": [
            {
              "id": "08a7419c-4c8c-453c-a4b8-dfd04b520fca",
              "title": "Result<&T, OutOfBounds>",
              "isCorrect": false
            },
            {
              "id": "43320f3e-2b5c-4af2-81a9-286326435a0b",
              "title": "Option<&T>",
              "isCorrect": true
            },
            {
              "id": "65a1eec5-5667-445b-adc3-121e03a95098",
              "title": "&T",
              "isCorrect": false
            },
            {
              "id": "a879e27b-7c40-4468-8aca-e1958b44dc97",
              "title": "Option<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Safe access without panic",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "af6cfef7-1ab4-4ecd-99b1-348c444329c7",
          "title": "Shorter way to \"open a file and read it into a string\" using ?",
          "answers": [
            {
              "id": "9c77e57c-902d-4dc5-bb74-f903ed9d6138",
              "title": "File::open()?.read_to_string()? (with a buffer)",
              "isCorrect": false
            },
            {
              "id": "1d8590ce-f7ef-47e2-aae4-b775ca2f89d3",
              "title": "fs::read_to_string(\"hello.txt\")",
              "isCorrect": true
            },
            {
              "id": "b542d6c6-8103-4fc0-92e4-67de99dd5883",
              "title": "include_str!()",
              "isCorrect": false
            },
            {
              "id": "762ab683-40fa-4f66-83c8-0993493fe2f7",
              "title": "std::read_all()",
              "isCorrect": false
            }
          ],
          "descriptionText": "There's a ready-made std function",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ef83511d-5a37-46e3-87c2-7b3bc277f5c4",
          "title": "What does \"unwinding\" mean during a panic?",
          "answers": [
            {
              "id": "3496fbe0-412c-41e0-8695-6c8d852bfe1b",
              "title": "The GC cleans the heap",
              "isCorrect": false
            },
            {
              "id": "b4bba081-312a-4913-849c-9325b60bf37e",
              "title": "The stack is unwound and destructors (drop) are called",
              "isCorrect": true
            },
            {
              "id": "b4756e10-7639-4dc5-8913-c0fd76f68e4d",
              "title": "Threads migrate",
              "isCorrect": false
            },
            {
              "id": "8812e296-343d-4fb8-bcb2-b47ddb559231",
              "title": "Nothing",
              "isCorrect": false
            }
          ],
          "descriptionText": "Proper cleanup unless abort is chosen",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "41eb1946-e171-46de-956c-f437d3c5f60b",
          "title": "Why choose panic = 'abort' sometimes?",
          "answers": [
            {
              "id": "894ac111-cdfb-4ff9-bc5b-21c15f427d17",
              "title": "Smaller binary/simpler behavior in production",
              "isCorrect": true
            },
            {
              "id": "7b7a6cba-1588-4a3b-b3ea-66d85d2b3434",
              "title": "To catch errors",
              "isCorrect": false
            },
            {
              "id": "d8d87775-419f-40b7-a31c-93d22d729217",
              "title": "For debugging",
              "isCorrect": false
            },
            {
              "id": "53b7ed62-311f-4f63-af87-969dbb60f570",
              "title": "For faster compilation",
              "isCorrect": false
            }
          ],
          "descriptionText": "No unwinding code → smaller size",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e7824d60-bb2c-4378-8d17-c142df9a6fb7",
          "title": "What happens if you use ? in a function returning ()?",
          "answers": [
            {
              "id": "29518421-134d-4052-968d-ec9e90917d4b",
              "title": "It compiles",
              "isCorrect": false
            },
            {
              "id": "97ef2ecc-5fa5-488c-abe0-c4be9a8280e8",
              "title": "It doesn't compile — return type mismatch",
              "isCorrect": true
            },
            {
              "id": "340e2fa2-5d2d-4c25-81e6-3d15da8160bb",
              "title": "Automatically wraps in Result",
              "isCorrect": false
            },
            {
              "id": "ba52e989-4ba0-4f75-9aa2-b43652467f9d",
              "title": "Converts to a panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "? returns early with Err(...); the function must return a compatible type",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1ddf9485-7712-453f-b528-ac01a16fd4c3",
          "title": "Which code is valid with ? in main?",
          "answers": [
            {
              "id": "534525a5-56eb-4b0c-b7cb-5e1d914a6a50",
              "title": "fn main() { File::open(\"x\")?; }",
              "isCorrect": false
            },
            {
              "id": "8665fc32-1b4b-403d-9c2a-0b6c3d7db8cd",
              "title": "fn main() -> Result<(), Box<dyn std::error::Error>> { File::open(\"x\")?; Ok(()) }",
              "isCorrect": true
            },
            {
              "id": "1c93922d-d53a-48de-86dd-5a3d7cf5f100",
              "title": "fn main() -> Option<()> { File::open(\"x\")?; Some(()) }",
              "isCorrect": false
            },
            {
              "id": "b609b81d-9e28-41d4-8b26-e294c573485d",
              "title": "None",
              "isCorrect": false
            }
          ],
          "descriptionText": "main must return Result for ? on Result to be valid",
          "descriptionLink": "error_handling_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "793717ca-a07c-4f42-96b5-fb4649057ec3",
      "theme": "Generic Types, Traits, and Lifetimes",
      "priority": 8,
      "questions": [
        {
          "id": "8aa41d7c-b922-4baa-b939-034046b20f18",
          "title": "What are generics used for in Rust?",
          "answers": [
            {
              "id": "6f8412de-b71a-43c4-abb7-af46fe532c28",
              "title": "To reduce binary size",
              "isCorrect": false
            },
            {
              "id": "ab9edf5a-3286-4d12-8ff1-6dec1c3bc73f",
              "title": "To avoid code duplication",
              "isCorrect": true
            },
            {
              "id": "de55843e-9fd5-4490-bc17-324b857c952c",
              "title": "To speed up compilation",
              "isCorrect": false
            },
            {
              "id": "c0c10ac4-b99a-4a32-be17-ad9ec07f5414",
              "title": "To replace macros",
              "isCorrect": false
            }
          ],
          "descriptionText": "Generics allow writing abstract code for different types without copying logic",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "12eaab7a-09a4-4a37-9f58-378c7d8bec82",
          "title": "How is a type parameter denoted in Rust?",
          "answers": [
            {
              "id": "e989353c-a543-4d07-9062-c08eda3276ef",
              "title": "[T]",
              "isCorrect": false
            },
            {
              "id": "2276a9b6-fb19-445f-9b19-1a52b4eeb00b",
              "title": "{T}",
              "isCorrect": false
            },
            {
              "id": "e8c0c417-a20d-4071-bc63-3f2bd1843b01",
              "title": "<T>",
              "isCorrect": true
            },
            {
              "id": "168e4d0d-05a2-41fd-ba2c-7db6c73b4a6f",
              "title": "(T)",
              "isCorrect": false
            }
          ],
          "descriptionText": "Generics are written in angle brackets <T>",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0ec26e07-a8c7-42bc-82d7-28b304fcfd46",
          "title": "What does a function signature with generics look like?",
          "answers": [
            {
              "id": "b32bae0f-7cff-4d53-bce1-f2ba0b5e4f57",
              "title": "fn foo(T: i32) -> T",
              "isCorrect": false
            },
            {
              "id": "70e43beb-0fd2-42f4-83b7-3d237d7e4cd5",
              "title": "fn foo<T>(x: T) -> T",
              "isCorrect": true
            },
            {
              "id": "86085aa7-a896-4306-8c72-7db253b10942",
              "title": "fn foo(x: generic T)",
              "isCorrect": false
            },
            {
              "id": "2e1414f3-0ece-416c-b1a7-6b52b79187da",
              "title": "fn foo<T: T>(x: T)",
              "isCorrect": false
            }
          ],
          "descriptionText": "Generics are declared after the function name in <T>",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a327394c-3ed6-4cc5-9a76-ddabeacffdaa",
          "title": "What happens if you use the > operator in a generic function without constraints?",
          "answers": [
            {
              "id": "b0a2ae0f-91e5-4514-892b-af91cba42e1f",
              "title": "Always works",
              "isCorrect": false
            },
            {
              "id": "a9af1dc1-f675-4226-8b1d-ac850ec5af6f",
              "title": "Compilation error",
              "isCorrect": true
            },
            {
              "id": "5f3f2060-ae65-495c-a791-6c4c8993be8e",
              "title": "PartialOrd is automatically applied",
              "isCorrect": false
            },
            {
              "id": "9b067acb-5910-446b-a1cf-92e58b3a334b",
              "title": "Runtime panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "The > comparison requires the PartialOrd trait",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b6743062-4219-49d9-a040-f3e14e59c04d",
          "title": "How do you constrain a generic type in Rust?",
          "answers": [
            {
              "id": "d17018f0-b4f2-4180-9d90-1f529e0ac459",
              "title": "T",
              "isCorrect": false
            },
            {
              "id": "99718f26-1c43-4a40-b6df-14b1e2f68a71",
              "title": "where T: PartialOrd",
              "isCorrect": true
            },
            {
              "id": "92bc5d8f-7a54-4f9d-bf35-3c67db13cf1a",
              "title": "bound T = PartialOrd",
              "isCorrect": false
            },
            {
              "id": "daa8d301-0b0c-41af-919a-84e2857de3c1",
              "title": "impl PartialOrd for T",
              "isCorrect": false
            }
          ],
          "descriptionText": "Constraints (bounds) are written as T: Trait",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3720a5df-5288-4c3a-82af-1af815337ab5",
          "title": "What is a trait in Rust?",
          "answers": [
            {
              "id": "2e801b04-f2e9-4980-8cc0-68aaf7b4824a",
              "title": "A data type",
              "isCorrect": false
            },
            {
              "id": "ac23fc68-bce7-4d37-9597-7bfdaf4530b9",
              "title": "An interface",
              "isCorrect": true
            },
            {
              "id": "b8910661-3f80-4737-9af9-9137af4618a8",
              "title": "A macro",
              "isCorrect": false
            },
            {
              "id": "7247e153-99ec-43d7-a604-1c8476b0ea98",
              "title": "An attribute",
              "isCorrect": false
            }
          ],
          "descriptionText": "Trait describes common behavior, like interfaces in other languages",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2d87e0dc-3fae-4a2f-bcdd-238acbbce810",
          "title": "How do you declare a trait?",
          "answers": [
            {
              "id": "1d0ba00b-7b4b-470b-b95d-742681326313",
              "title": "interface Summary { … }",
              "isCorrect": false
            },
            {
              "id": "de108ddc-6b17-4345-a2ad-ed68dd03e0a0",
              "title": "trait Summary { … }",
              "isCorrect": true
            },
            {
              "id": "8e69245a-7908-4498-9e0e-4604cabad0c8",
              "title": "class Summary { … }",
              "isCorrect": false
            },
            {
              "id": "44aba01c-04de-441a-8990-6f5be4a1a17e",
              "title": "impl Summary { … }",
              "isCorrect": false
            }
          ],
          "descriptionText": "The trait keyword is used",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f8bdd20f-f864-4e84-ace7-1da479a1d2f7",
          "title": "How do you implement a trait for a struct?",
          "answers": [
            {
              "id": "6c63bef1-effb-480c-a134-01bb894077d7",
              "title": "impl Struct: Trait { … }",
              "isCorrect": false
            },
            {
              "id": "45957bf4-3d4c-4a71-8f79-20fe6bf07e09",
              "title": "impl Trait for Struct { … }",
              "isCorrect": true
            },
            {
              "id": "9098066f-9c40-4b5c-b1e5-6cb47d17493a",
              "title": "trait Struct impl { … }",
              "isCorrect": false
            },
            {
              "id": "67fbb255-a6dc-4901-8081-f8fff7219492",
              "title": "class Struct : Trait { … }",
              "isCorrect": false
            }
          ],
          "descriptionText": "Syntax is: impl Trait for Type",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e7f9559a-2bf6-46a6-a4c6-8c7281d07621",
          "title": "Can you implement an external trait for an external type?",
          "answers": [
            {
              "id": "5dadaad9-8f3b-409a-8542-a6c644e527ef",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "ad97f787-20db-4ba5-b73e-a2f93ff9a8e9",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "dc173e46-20ec-41cf-9a36-4c848299f005",
              "title": "Only with #[allow(external)] attribute",
              "isCorrect": false
            },
            {
              "id": "160e2e8a-da8d-4def-9979-837011540226",
              "title": "Only in main",
              "isCorrect": false
            }
          ],
          "descriptionText": "Prohibited by the orphan rule",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4c720262-017c-4ef4-b9de-e5e9cd0ad4bd",
          "title": "What is the orphan rule?",
          "answers": [
            {
              "id": "d7d99f88-bade-41ff-bdb8-8041b7b875b7",
              "title": "Traits cannot be inherited",
              "isCorrect": false
            },
            {
              "id": "daea2a9e-ca82-4854-b7c0-f0d8829669fd",
              "title": "Cannot implement an external trait for an external type",
              "isCorrect": true
            },
            {
              "id": "7ee6a55b-88fe-458d-a416-0e99a42e2d9c",
              "title": "Prohibits using static",
              "isCorrect": false
            },
            {
              "id": "dfc8fbdb-97fe-4de1-b8e5-cc01c1113402",
              "title": "Requires private fields",
              "isCorrect": false
            }
          ],
          "descriptionText": "Protects against implementation conflicts",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c70c9893-1d82-4272-ac90-5ca431953c90",
          "title": "How do you define a default method in a trait?",
          "answers": [
            {
              "id": "c26458d4-5a5a-4f8b-85d3-0ca89390942b",
              "title": "fn foo();",
              "isCorrect": false
            },
            {
              "id": "171d1f6f-9b04-40c4-8c30-33d49d09ccae",
              "title": "fn foo() { … }",
              "isCorrect": true
            },
            {
              "id": "f283585b-0ff2-4cb5-b431-5e9464bb7b20",
              "title": "default fn foo();",
              "isCorrect": false
            },
            {
              "id": "6b3804c5-5006-4828-b90d-74067a1d5367",
              "title": "impl fn foo()",
              "isCorrect": false
            }
          ],
          "descriptionText": "Implementation in the trait serves as the default",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "649e809b-4f6c-4604-8876-a85db7607dbe",
          "title": "Can you override a default method?",
          "answers": [
            {
              "id": "cb650f83-fac0-4a33-a6e7-a1e19b48c82e",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "4890f4f9-cc69-4a0e-b9ef-b56b75c08e47",
              "title": "Yes",
              "isCorrect": true
            },
            {
              "id": "bf8f096f-a7d9-4915-bedf-0da61703c31d",
              "title": "Only with #[override]",
              "isCorrect": false
            },
            {
              "id": "b6584691-eb00-45a6-86e4-a2bdfde9589b",
              "title": "Only for generics",
              "isCorrect": false
            }
          ],
          "descriptionText": "In impl you can override a method with any implementation",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e9b40afb-8004-4805-9c32-28067eac5c87",
          "title": "How do you use a trait as a function parameter?",
          "answers": [
            {
              "id": "97f0c13c-d06a-4bb3-88ba-1cc9742cb185",
              "title": "fn foo<T>(x: T) where T: Summary",
              "isCorrect": false
            },
            {
              "id": "068da8c5-dc01-44d8-a6b6-c74db30d0048",
              "title": "fn foo(x: impl Summary)",
              "isCorrect": true
            },
            {
              "id": "2142479b-86aa-432a-92ff-cb72d0325daf",
              "title": "fn foo(x: dyn Summary)",
              "isCorrect": false
            },
            {
              "id": "a65d5d82-67ab-46a6-a06e-2663d1b24622",
              "title": "fn foo<T: impl Summary>(x: T)",
              "isCorrect": false
            }
          ],
          "descriptionText": "impl Trait is the short syntax",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d6e7307d-80ad-4edb-a572-b5b5e53381ce",
          "title": "What's the difference between impl Trait and trait bound?",
          "answers": [
            {
              "id": "23ba4517-9bd6-411a-a80a-ffd98e394b19",
              "title": "They are different things",
              "isCorrect": false
            },
            {
              "id": "7a766148-4599-451f-ab97-22eea8828763",
              "title": "impl Trait is syntactic sugar for trait bound",
              "isCorrect": true
            },
            {
              "id": "075160dc-5ebd-48df-ad32-1ef20b4a9bb0",
              "title": "impl Trait works faster",
              "isCorrect": false
            },
            {
              "id": "5327a0ff-38b7-4681-b4a7-bc47310a84de",
              "title": "trait bound is forbidden",
              "isCorrect": false
            }
          ],
          "descriptionText": "Both express the same thing",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1d450e04-4082-4c6a-9aef-0d1f158c1696",
          "title": "How do you combine multiple trait bounds?",
          "answers": [
            {
              "id": "be965fcb-b781-48d0-864a-5f7cb47d9ae3",
              "title": "T: Trait1, Trait2",
              "isCorrect": false
            },
            {
              "id": "84b3dada-0da6-463e-a4e7-993955b93284",
              "title": "T: Trait1 + Trait2",
              "isCorrect": true
            },
            {
              "id": "90a6c430-5b78-43a2-b397-37fc852c2d83",
              "title": "T: [Trait1, Trait2]",
              "isCorrect": false
            },
            {
              "id": "8e6adc74-198d-4aa1-9beb-d4e2104d90ad",
              "title": "T: Trait1 & Trait2",
              "isCorrect": false
            }
          ],
          "descriptionText": "Multiple traits are specified with +",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "500a10f8-bc47-42ee-8747-eb9e79e1ed0e",
          "title": "Where is it more convenient to write complex bounds?",
          "answers": [
            {
              "id": "7a191e92-78b5-4cba-8ccb-6d9c137f8b58",
              "title": "In the signature",
              "isCorrect": false
            },
            {
              "id": "43948541-c9c4-432f-a108-cd80695f5741",
              "title": "In where",
              "isCorrect": true
            },
            {
              "id": "65b20933-8dc9-4723-8a9d-ac52f5eeb1e5",
              "title": "In impl only",
              "isCorrect": false
            },
            {
              "id": "8863d5bb-cabd-4073-800c-f11dbf2fe25a",
              "title": "In comments",
              "isCorrect": false
            }
          ],
          "descriptionText": "where makes the signature more readable",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f1978bd0-2166-40fa-8452-2b3df9eb305d",
          "title": "How do you return a type that implements a trait?",
          "answers": [
            {
              "id": "c75ea2d0-9c4e-420a-afd8-4efd45c74607",
              "title": "fn foo() -> impl Trait",
              "isCorrect": true
            },
            {
              "id": "12f435f8-a4f2-4336-beda-29a07b518c5d",
              "title": "fn foo() -> Trait",
              "isCorrect": false
            },
            {
              "id": "ad46dde4-b35e-4f12-9c00-17b95309b61f",
              "title": "fn foo<T: Trait>() -> T",
              "isCorrect": false
            },
            {
              "id": "04161a0e-c70e-4a30-a7d8-38fd7cd1e879",
              "title": "fn foo() -> dyn Trait",
              "isCorrect": false
            }
          ],
          "descriptionText": "impl Trait in return position",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "17a877cb-7e18-4d67-934c-2054c2230df1",
          "title": "Can you return different types through impl Trait?",
          "answers": [
            {
              "id": "50e04613-2f69-48e5-8f9c-8e0ca8dcbbbe",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "eb8f6757-5a50-4b6b-b7e6-849aae0b0ecb",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "965a912d-6963-46db-b192-f383a6459cf9",
              "title": "Only with #[dynamic]",
              "isCorrect": false
            },
            {
              "id": "91406dd5-27c7-4913-89c0-3453d36a1f92",
              "title": "Only with unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Only one concrete type is allowed",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c78bdd0e-f967-48be-bab8-fe717e799e77",
          "title": "What is a blanket implementation?",
          "answers": [
            {
              "id": "15e15e0b-2e12-414b-8cf5-dfc1094cb94c",
              "title": "Implementing a trait for all types with a constraint",
              "isCorrect": true
            },
            {
              "id": "3cea7f4f-a136-4b23-93b2-cfb9cd1ad10d",
              "title": "Automatic code generation",
              "isCorrect": false
            },
            {
              "id": "69fe8815-9bc6-4d20-87b1-dabc6981953f",
              "title": "A macro in std",
              "isCorrect": false
            },
            {
              "id": "e319dc5d-d8c2-4e00-a1ce-3dacb70b28cd",
              "title": "Duplication prohibition",
              "isCorrect": false
            }
          ],
          "descriptionText": "Example: impl<T: Display> ToString for T",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3d56af66-17f7-4458-aa96-b9f3e58c5ef7",
          "title": "What does monomorphization do?",
          "answers": [
            {
              "id": "1b74be0e-870a-4c8d-a7e5-c825e1004369",
              "title": "Generates code for each type",
              "isCorrect": true
            },
            {
              "id": "3e94b35f-0771-43ba-ba73-ab6dd1f6ecb0",
              "title": "Removes generics",
              "isCorrect": false
            },
            {
              "id": "a0e9ea32-5417-42b6-b995-c3811d0ec945",
              "title": "Optimizes code at runtime",
              "isCorrect": false
            },
            {
              "id": "6fa43104-45a7-42b8-ba46-6ba7bb9921db",
              "title": "Turns into trait object",
              "isCorrect": false
            }
          ],
          "descriptionText": "Generics are turned into concrete types at compile-time",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "588b3893-031f-424b-a8ea-5734bf74e27c",
          "title": "Is there runtime overhead with generics?",
          "answers": [
            {
              "id": "a42cc373-4d48-4737-8805-1d5a639b6ea7",
              "title": "Yes, due to virtual calls",
              "isCorrect": false
            },
            {
              "id": "1df8c619-a9b9-459d-ac62-223710010b78",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "0767a8f4-1b7b-42f3-b3e7-05de40c8222e",
              "title": "Sometimes",
              "isCorrect": false
            },
            {
              "id": "31348d3c-d781-42d3-be7b-1fa742c28011",
              "title": "Only in debug",
              "isCorrect": false
            }
          ],
          "descriptionText": "Thanks to monomorphization there's no overhead",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "12a1c8c1-f80c-4af0-b4b7-75476a514697",
          "title": "What is a lifetime?",
          "answers": [
            {
              "id": "1119375e-2ddb-47ae-93d7-679475a8752b",
              "title": "Variable lifetime",
              "isCorrect": false
            },
            {
              "id": "71e12e42-5119-478d-9f84-ac6c23bdf64b",
              "title": "Reference validity duration",
              "isCorrect": true
            },
            {
              "id": "e4e20593-1503-4854-8a57-67d304a5039e",
              "title": "Variable type",
              "isCorrect": false
            },
            {
              "id": "35135a02-ed04-4bb9-bb42-1a3e0feb4b37",
              "title": "Program execution time",
              "isCorrect": false
            }
          ],
          "descriptionText": "Lifetimes describe how long a reference lives",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d6772f38-258b-46e0-b49b-cf215e7b8b13",
          "title": "What are lifetime annotations for?",
          "answers": [
            {
              "id": "b5ef1b8d-d769-4718-aa7e-66869104007d",
              "title": "Speed up compilation",
              "isCorrect": false
            },
            {
              "id": "5571478e-b7b9-4668-bd20-79b2e4d8457b",
              "title": "Help the borrow checker understand relationships between references",
              "isCorrect": true
            },
            {
              "id": "3597ac41-98e3-4c3a-8389-c72545dbc033",
              "title": "Increase object lifetimes",
              "isCorrect": false
            },
            {
              "id": "d52c175f-0584-49a1-834f-feb819110023",
              "title": "Give access to static",
              "isCorrect": false
            }
          ],
          "descriptionText": "Lifetimes connect references and are checked at compile-time",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b9debeeb-bfd4-4210-908b-22fc9f013dae",
          "title": "How are lifetime parameters denoted?",
          "answers": [
            {
              "id": "d2052b65-9ddd-4063-864e-8ce4c4332bf4",
              "title": "^a",
              "isCorrect": false
            },
            {
              "id": "753464a2-8fe7-4cfb-96b8-4f7806252040",
              "title": "'a",
              "isCorrect": true
            },
            {
              "id": "493a68c2-e73f-4ff6-959d-4f802a9193f4",
              "title": "&a",
              "isCorrect": false
            },
            {
              "id": "6e60cf67-1c83-494b-916e-3e7a6645f957",
              "title": "#a",
              "isCorrect": false
            }
          ],
          "descriptionText": "Lifetimes always start with '",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "69a1f949-0d41-46ee-bb7b-3855922a0b56",
          "title": "Where are lifetime annotations written in functions?",
          "answers": [
            {
              "id": "1d786715-ff4e-4c76-8664-b35fe9b0dd73",
              "title": "Inside the body",
              "isCorrect": false
            },
            {
              "id": "0c8d2679-1483-400f-aeca-64818844bc87",
              "title": "In the signature",
              "isCorrect": true
            },
            {
              "id": "e1494dae-21aa-4077-8f16-3d7396ce31ec",
              "title": "Only in impl",
              "isCorrect": false
            },
            {
              "id": "f0389f0b-b9c3-488a-89c2-1160f0ba90ba",
              "title": "In comments",
              "isCorrect": false
            }
          ],
          "descriptionText": "Lifetimes are part of the function contract",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "146787ca-7148-49b3-8fdd-53632b515261",
          "title": "What happens if you return a reference to a local variable?",
          "answers": [
            {
              "id": "03944154-67d1-4ba6-91ea-845f13463940",
              "title": "Always works",
              "isCorrect": false
            },
            {
              "id": "49634cef-f64b-4b95-aa9c-15d0dda1ae08",
              "title": "Compilation error",
              "isCorrect": true
            },
            {
              "id": "956aef4e-d51b-4357-8407-1a93f90a5a02",
              "title": "Panic at runtime",
              "isCorrect": false
            },
            {
              "id": "19fc4497-72d8-4067-bdc3-072e11fcd132",
              "title": "Undefined behavior",
              "isCorrect": false
            }
          ],
          "descriptionText": "The compiler prohibits dangling references",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c91e3e76-f712-42ff-8750-0bea06ee25ff",
          "title": "What does the borrow checker do?",
          "answers": [
            {
              "id": "b6bbad70-45b2-4dd2-9653-7c619d146e5f",
              "title": "Checks type sizes",
              "isCorrect": false
            },
            {
              "id": "abecb61e-2ca6-49d5-9ca9-920d6e2401db",
              "title": "Checks that references live long enough",
              "isCorrect": true
            },
            {
              "id": "75d309af-f9f3-4dd3-850e-f0111059dfdc",
              "title": "Optimizes the heap",
              "isCorrect": false
            },
            {
              "id": "fc0019ef-cad8-4bcf-8218-07a088eaee69",
              "title": "Removes duplicates",
              "isCorrect": false
            }
          ],
          "descriptionText": "Guarantees no dangling references",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7b970954-a701-41ff-8707-36ee77819e15",
          "title": "What does the 'static lifetime mean?",
          "answers": [
            {
              "id": "0932ae5d-5735-4030-a975-f21ad00f3db4",
              "title": "Reference lives until the end of the program",
              "isCorrect": true
            },
            {
              "id": "89e37646-0216-4e7f-a727-04c64a06e1c4",
              "title": "Global variable",
              "isCorrect": false
            },
            {
              "id": "31340128-3782-4d77-a930-8445eb73870c",
              "title": "Only for const",
              "isCorrect": false
            },
            {
              "id": "23045029-8d75-4ee7-b481-ce83924959b5",
              "title": "Only for String",
              "isCorrect": false
            }
          ],
          "descriptionText": "String literals have 'static",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2dc4cf87-acb2-4c7e-a062-f20c6ddc1b09",
          "title": "What is lifetime elision?",
          "answers": [
            {
              "id": "5f508cf6-db67-4f82-8e36-3d81e5c51a11",
              "title": "Garbage collector",
              "isCorrect": false
            },
            {
              "id": "d21c6096-b329-4470-9d57-39f591c2ca2e",
              "title": "Rules that allow omitting lifetimes in simple cases",
              "isCorrect": true
            },
            {
              "id": "b099a557-5f32-4c45-9904-231930311fb5",
              "title": "Turning lifetimes into static",
              "isCorrect": false
            },
            {
              "id": "b42c0288-65ce-4360-bd81-9f93ae7a25ab",
              "title": "Panic on mismatch",
              "isCorrect": false
            }
          ],
          "descriptionText": "The compiler applies three rules for lifetime inference",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5f033265-0c4d-46d0-b808-34d648fac749",
          "title": "Which function falls under elision rules?",
          "answers": [
            {
              "id": "822a1468-d074-4e09-be0f-cdba1fe7e2cd",
              "title": "fn foo(x: &str) -> &str",
              "isCorrect": true
            },
            {
              "id": "19d3649e-d3d1-4888-b6f4-68b07c2b94db",
              "title": "fn foo(x: &str, y: &str) -> &str",
              "isCorrect": false
            },
            {
              "id": "6090e919-907f-4bf1-b910-53b7c4a5b511",
              "title": "fn foo(x: &str, y: &str) -> &String",
              "isCorrect": false
            },
            {
              "id": "d9a3e76a-2219-4c68-8756-286d2b65fd1d",
              "title": "fn foo<'a>(x: &'a str, y: &'a str) -> &'a str",
              "isCorrect": false
            }
          ],
          "descriptionText": "One input value → its lifetime is used as output",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b8159c5a-0aa6-4740-bdcc-989c25ecd85b",
          "title": "Why are lifetimes often not written in methods?",
          "answers": [
            {
              "id": "7dc7ed1d-82fa-47c2-9df2-96ca74810088",
              "title": "'static is automatically substituted",
              "isCorrect": false
            },
            {
              "id": "1a3992c8-73a3-4a7a-b302-690324d0bacb",
              "title": "The 3rd elision rule works (with &self)",
              "isCorrect": true
            },
            {
              "id": "b9d04101-77bc-46e9-baba-8c9736c51fad",
              "title": "Because impl hides them",
              "isCorrect": false
            },
            {
              "id": "f6a08149-4a28-48b0-bd5f-234d1499e3a6",
              "title": "The compiler ignores them",
              "isCorrect": false
            }
          ],
          "descriptionText": "If there's &self, the returned reference gets its lifetime",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d71d1acc-2ee7-428a-9d22-261b7997184c",
          "title": "Can you store a reference in a struct?",
          "answers": [
            {
              "id": "4d4204b1-402f-41f3-bc62-da06b2421b80",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "f0afe1a6-4f49-4b63-b71d-0b933d855139",
              "title": "Yes, with lifetime annotation",
              "isCorrect": true
            },
            {
              "id": "9d3b7685-0f63-42b4-918a-07e75d0a95ff",
              "title": "Yes, always",
              "isCorrect": false
            },
            {
              "id": "f8e88ee9-9793-4ecd-b500-5e534a2f964b",
              "title": "Only in enum",
              "isCorrect": false
            }
          ],
          "descriptionText": "A struct with &T requires 'a",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "86d7f31a-4746-4a60-8fc5-025b82a18b50",
          "title": "What happens if a struct lifetime parameter is not specified?",
          "answers": [
            {
              "id": "7a0dc23b-d1c6-4e8e-bb62-118c2661d590",
              "title": "Always works",
              "isCorrect": false
            },
            {
              "id": "e894139a-627e-492e-9b66-147da7c4ae83",
              "title": "Compilation error",
              "isCorrect": true
            },
            {
              "id": "b9d0f6ed-846b-4734-8332-5b8e77ad2994",
              "title": "Panic",
              "isCorrect": false
            },
            {
              "id": "2f8252d7-9804-4350-bbb4-d8f50823b5f0",
              "title": "Will be 'static",
              "isCorrect": false
            }
          ],
          "descriptionText": "References always require lifetimes",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "041ddf7b-ac40-4efa-ae49-f38f26183867",
          "title": "What unites generics, trait bounds, and lifetimes?",
          "answers": [
            {
              "id": "14be6428-60fa-42a5-906e-6ac285713459",
              "title": "All are data types",
              "isCorrect": false
            },
            {
              "id": "7fa10fa4-4871-484d-9668-88f91877bc33",
              "title": "All are compile-time generics",
              "isCorrect": true
            },
            {
              "id": "c742cef0-1f56-4881-ac6e-ed27718d0870",
              "title": "All are runtime abstractions",
              "isCorrect": false
            },
            {
              "id": "e0dad457-d16e-4fc5-aa26-0eac7a75737a",
              "title": "All are syntactic sugar",
              "isCorrect": false
            }
          ],
          "descriptionText": "They work at compile-time, describing different aspects of genericity",
          "descriptionLink": "generics_traits_lifetimes_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "c1a4ce9d-fae9-46d2-8f75-a80985e3aa81",
      "theme": "Writing Automated Tests",
      "priority": 9,
      "questions": [
        {
          "id": "a16aa996-6b21-4ade-a835-d4c7c090d58e",
          "title": "What does the #[test] attribute before a function do?",
          "answers": [
            {
              "id": "c803830c-169d-47d2-a90a-6662ba8ba43f",
              "title": "Makes the function public",
              "isCorrect": false
            },
            {
              "id": "6f2dea04-2f9c-4cf8-98f7-a1b99eb23cae",
              "title": "Marks the function as a test",
              "isCorrect": true
            },
            {
              "id": "206a44a4-e83f-4d54-98d9-8030931ac69a",
              "title": "Prohibits compilation",
              "isCorrect": false
            },
            {
              "id": "379614a3-29a3-41bd-bf45-4d097155fd6a",
              "title": "Makes the function private",
              "isCorrect": false
            }
          ],
          "descriptionText": "#[test] tells the test runner that this is a test",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f40f5d50-2aee-4eef-b89f-fe65340222ef",
          "title": "Which command runs tests in a Rust project?",
          "answers": [
            {
              "id": "bcb31e07-584b-48c9-aa38-7fb820187a0f",
              "title": "cargo run",
              "isCorrect": false
            },
            {
              "id": "82f159c9-2d33-419d-80ee-0a66848439ea",
              "title": "cargo build",
              "isCorrect": false
            },
            {
              "id": "5f95e236-b8c4-4638-9411-44aa93eeceb6",
              "title": "cargo test",
              "isCorrect": true
            },
            {
              "id": "0d2ad7bd-816e-4289-a181-39ebaa410c27",
              "title": "rustc test.rs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Tests are run with cargo test, which compiles and executes them",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fa227374-7c02-439b-9739-56d6b6bae8df",
          "title": "What happens if you call panic! in a test?",
          "answers": [
            {
              "id": "02e14d80-08e2-4a76-bfe2-c4a61fcb6d4e",
              "title": "The test completes successfully",
              "isCorrect": false
            },
            {
              "id": "7b519423-796d-4d43-bc15-25dc7b87a511",
              "title": "The test fails",
              "isCorrect": true
            },
            {
              "id": "8d7ff073-60aa-4fd1-838f-39b8eb07eecd",
              "title": "The compiler ignores it",
              "isCorrect": false
            },
            {
              "id": "ce8083da-e0f1-4e5a-8d65-91d7862942b1",
              "title": "Panic is hidden",
              "isCorrect": false
            }
          ],
          "descriptionText": "A test is considered failed if it panics",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "48bf2700-4fbc-4af8-8cff-ad2c1df95425",
          "title": "What does the assert! macro do?",
          "answers": [
            {
              "id": "b433e171-9681-40ee-8e11-02542e990504",
              "title": "Checks equality of two values",
              "isCorrect": false
            },
            {
              "id": "51b84a38-381b-4dcf-a87e-4d192d56f6cc",
              "title": "Checks a condition for true",
              "isCorrect": true
            },
            {
              "id": "0126dd7e-73c6-4cb0-a06b-4eacf2c86c50",
              "title": "Calls drop on a variable",
              "isCorrect": false
            },
            {
              "id": "492b5293-b5e0-4f5b-a76e-408b18d98bbf",
              "title": "Creates a log in stdout",
              "isCorrect": false
            }
          ],
          "descriptionText": "assert!(cond) checks a boolean condition, on false → panic",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8fbea352-cc13-4195-9686-24dc1fb56516",
          "title": "How does assert_eq! differ from assert!?",
          "answers": [
            {
              "id": "27a29368-8e2b-4705-a471-fa1618110bed",
              "title": "Works faster",
              "isCorrect": false
            },
            {
              "id": "6bfb4d1f-b602-448a-90c1-f0cd572adba1",
              "title": "Shows left/right values on error",
              "isCorrect": true
            },
            {
              "id": "9f5d0fae-2168-41da-a5b4-ef19cf50c18d",
              "title": "Uses unsafe",
              "isCorrect": false
            },
            {
              "id": "290d0f02-9639-4b50-bbd9-fcaddae3772a",
              "title": "Only works with numbers",
              "isCorrect": false
            }
          ],
          "descriptionText": "assert_eq! prints both values on mismatch",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "77ff75ab-517d-4a2b-8843-f18de88fe071",
          "title": "What does assert_ne! do?",
          "answers": [
            {
              "id": "88f77f05-fb29-4fbd-b4c0-7f10e6da59ee",
              "title": "Checks for equality",
              "isCorrect": false
            },
            {
              "id": "7408d886-bd3c-46d7-925f-79016c6c54bf",
              "title": "Checks for inequality",
              "isCorrect": true
            },
            {
              "id": "d637d195-ace0-4d2e-803b-40a1d484435d",
              "title": "Checks for Null",
              "isCorrect": false
            },
            {
              "id": "6a359536-c67e-464f-a633-546b8b488c23",
              "title": "Checks for Drop",
              "isCorrect": false
            }
          ],
          "descriptionText": "assert_ne! passes if values are different",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dcae3fd7-95bb-4b4e-acb6-e35d6f06f6a6",
          "title": "Which traits must types implement to use in assert_eq!?",
          "answers": [
            {
              "id": "657b0d59-58a8-4608-849d-06628d1fcd42",
              "title": "Clone and Copy",
              "isCorrect": false
            },
            {
              "id": "caceab62-feb5-4cc3-a2dd-6374f682ca2e",
              "title": "PartialEq and Debug",
              "isCorrect": true
            },
            {
              "id": "92633b85-c8f2-4b2f-9c59-7eb7aa4d0798",
              "title": "Sized and Send",
              "isCorrect": false
            },
            {
              "id": "6c770c80-fe2a-42e8-bc4f-151c3f3968bd",
              "title": "Drop and Default",
              "isCorrect": false
            }
          ],
          "descriptionText": "Comparison requires PartialEq, printing requires Debug",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1e81282b-5733-40e4-8817-7cadf823fad7",
          "title": "What does the #[should_panic] attribute do?",
          "answers": [
            {
              "id": "1a9dbc5f-7edd-408d-952d-f039f88f2be3",
              "title": "Prevents test failure",
              "isCorrect": false
            },
            {
              "id": "5047fb53-e513-4c2d-8333-29c2c1170c37",
              "title": "Expects the test to panic",
              "isCorrect": true
            },
            {
              "id": "a1a9e9bc-e323-4404-bfe9-14da8675f4a0",
              "title": "Sets the test to ignored",
              "isCorrect": false
            },
            {
              "id": "1c255d3c-e1bc-417a-b019-fb0138da7ba6",
              "title": "Disables borrow checker",
              "isCorrect": false
            }
          ],
          "descriptionText": "The test passes only if a panic occurred",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "699fee40-b88d-4953-a06f-b65163d8593d",
          "title": "What is the expected parameter used for in #[should_panic(expected=\"...\")]?",
          "answers": [
            {
              "id": "bccf6a86-76dc-4ad9-86f4-085ad05b6243",
              "title": "To specify the panic type",
              "isCorrect": false
            },
            {
              "id": "3c496a7b-d41e-46e5-8f7f-5147fe586fb1",
              "title": "To check that panic contains a substring",
              "isCorrect": true
            },
            {
              "id": "826b078d-5272-4775-8a27-a58a294fdb5b",
              "title": "To specify the return value",
              "isCorrect": false
            },
            {
              "id": "4dba6c58-9489-4360-b46b-7cd33bbe7653",
              "title": "To choose optimization level",
              "isCorrect": false
            }
          ],
          "descriptionText": "Helps verify that panic occurred for the right reason",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "aadccd49-4507-40d5-8a61-ce7ea0ccd17a",
          "title": "Can you use #[should_panic] with tests returning Result<T,E>?",
          "answers": [
            {
              "id": "97b2d11c-fee6-4040-8bc3-e3243ad5937c",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "a5d08889-3a07-409d-a0de-74e3ac897056",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "a01a5157-b71d-4ed4-86f0-0e593b09a230",
              "title": "Only with nightly",
              "isCorrect": false
            },
            {
              "id": "82d44305-7961-45e0-8f17-f135251bc5d1",
              "title": "Only for Err",
              "isCorrect": false
            }
          ],
          "descriptionText": "Tests with Result cannot be combined with #[should_panic]",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ba8ccbf6-37a0-42e7-96af-42db6de2520a",
          "title": "What does writing tests with Result<(), E> allow?",
          "answers": [
            {
              "id": "fbac57b7-df6d-4f6a-9325-a8f517b9db27",
              "title": "Using ? inside the test",
              "isCorrect": true
            },
            {
              "id": "fb00732d-70c0-4178-9bc2-d592e99bdc26",
              "title": "Disabling asserts",
              "isCorrect": false
            },
            {
              "id": "e77bd7f6-e8fd-45f9-81f6-ccaadab05fed",
              "title": "Turning errors into warnings",
              "isCorrect": false
            },
            {
              "id": "967e5507-cb94-4d50-a27d-fc4910263a3b",
              "title": "Skipping the test",
              "isCorrect": false
            }
          ],
          "descriptionText": "? is only available when returning Result",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1b95ca40-884e-470a-ba77-1afe1f08e863",
          "title": "How are tests run by default in Rust?",
          "answers": [
            {
              "id": "47b00225-ee5c-40d1-b7fa-759484c4c0de",
              "title": "Sequentially",
              "isCorrect": false
            },
            {
              "id": "32f0854c-d5f7-4b13-8a75-c1367eaeb8e1",
              "title": "In parallel",
              "isCorrect": true
            },
            {
              "id": "537870d3-be40-4003-a096-7801e89ee0f7",
              "title": "Only one",
              "isCorrect": false
            },
            {
              "id": "7880a01a-5d21-47b7-a770-4b2cd957fa5a",
              "title": "Through separate binary for each test",
              "isCorrect": false
            }
          ],
          "descriptionText": "Tests run in threads by default",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "65bab75d-9106-4da1-ad5b-5067a8f9f814",
          "title": "How do you limit the number of threads for tests?",
          "answers": [
            {
              "id": "625bb9e4-0910-4c75-8faa-12ae4c799569",
              "title": "cargo test --limit=N",
              "isCorrect": false
            },
            {
              "id": "745d28e4-c7ef-49f7-99c5-a92bd0408b4b",
              "title": "cargo test -- --test-threads=N",
              "isCorrect": true
            },
            {
              "id": "a41e3c62-070d-4907-a0d8-6af596e1b6df",
              "title": "cargo run --threads=N",
              "isCorrect": false
            },
            {
              "id": "08230aa1-c36b-40c0-9566-cefbc4c55c58",
              "title": "export TEST_THREADS=N",
              "isCorrect": false
            }
          ],
          "descriptionText": "The --test-threads flag sets the number",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fd1c8e54-98b1-4014-8802-30def2c63c92",
          "title": "Why can't tests sometimes be run in parallel?",
          "answers": [
            {
              "id": "bcedee14-e1de-4844-b2d1-cbd2ddb883cc",
              "title": "Because it's slower",
              "isCorrect": false
            },
            {
              "id": "d86fe94b-d6b0-43c1-bc6b-5d7e3837ded2",
              "title": "Due to shared state",
              "isCorrect": true
            },
            {
              "id": "e0e8ca68-e26b-4ece-bb13-8fe24f14006a",
              "title": "The compiler prohibits it",
              "isCorrect": false
            },
            {
              "id": "953d0403-4cee-4839-9819-0fd7680a40ea",
              "title": "Cargo doesn't know how",
              "isCorrect": false
            }
          ],
          "descriptionText": "Parallel tests can conflict through shared resources",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "da3ea98b-5cfc-4b81-a917-81e6ae6a479b",
          "title": "What does the --show-output flag do when running cargo test?",
          "answers": [
            {
              "id": "1390fa71-002d-46b5-89c3-539752f3b641",
              "title": "Shows output only for failed tests",
              "isCorrect": false
            },
            {
              "id": "4b9af444-4c20-4a59-8cf1-7ccd907abb86",
              "title": "Shows println! output even for passed tests",
              "isCorrect": true
            },
            {
              "id": "38d8bafa-2950-4eeb-9095-bdd2dc720578",
              "title": "Shows only the list of tests",
              "isCorrect": false
            },
            {
              "id": "991029e3-110a-4616-8447-2851f6077d7e",
              "title": "Disables stdout",
              "isCorrect": false
            }
          ],
          "descriptionText": "By default println! is hidden, --show-output always displays it",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "751cac1c-79e4-4a11-83c4-04f6483bfca3",
          "title": "How do you run only a test named foo_test?",
          "answers": [
            {
              "id": "49fdf0ef-ccb9-4f35-9b0a-1bb6855e6433",
              "title": "cargo run foo_test",
              "isCorrect": false
            },
            {
              "id": "e10a05b4-434b-494b-ad01-d47a98b2de47",
              "title": "cargo test foo_test",
              "isCorrect": true
            },
            {
              "id": "adcbd9ac-ab23-4b73-b438-b4319d3c030e",
              "title": "cargo test --name foo_test",
              "isCorrect": false
            },
            {
              "id": "344b3ba9-7c69-42f4-93cc-877306f5b930",
              "title": "cargo test-only foo_test",
              "isCorrect": false
            }
          ],
          "descriptionText": "Filtering by name works through the cargo test argument",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f762dee4-3ff1-4437-bfe5-99583919f394",
          "title": "What happens if you pass cargo test add?",
          "answers": [
            {
              "id": "790e9e55-2728-403a-8df6-1cbf39cec13f",
              "title": "Only one test runs",
              "isCorrect": false
            },
            {
              "id": "acc934d7-2285-45b8-83b5-02ba46d835d9",
              "title": "All tests with add in the name run",
              "isCorrect": true
            },
            {
              "id": "e9726da1-1052-4a0a-8884-b3082f52682f",
              "title": "All tests are ignored",
              "isCorrect": false
            },
            {
              "id": "a8e44c34-05fd-429c-a5fa-a3ac3780ffda",
              "title": "Compilation error",
              "isCorrect": false
            }
          ],
          "descriptionText": "Substring filters the test set",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1a85cfd5-fabb-4f82-bd66-541c3b0f1d7a",
          "title": "What is the #[ignore] attribute used for in a test?",
          "answers": [
            {
              "id": "f44c5453-f287-499e-a6ff-4cb01cd63e93",
              "title": "Completely removes the test",
              "isCorrect": false
            },
            {
              "id": "a05d4fef-9af0-4c84-8cb0-88dbfc9218a4",
              "title": "Skips the test during normal run",
              "isCorrect": true
            },
            {
              "id": "43adb905-5889-4852-9cc6-e1e98a466003",
              "title": "Makes the test private",
              "isCorrect": false
            },
            {
              "id": "d9f1d8d9-a6a3-4465-ba3d-3387dce25e91",
              "title": "Places the test first in the list",
              "isCorrect": false
            }
          ],
          "descriptionText": "#[ignore] excludes the test from default run",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "50746c95-4a52-4a3e-bf13-00497797e241",
          "title": "How do you run only ignored tests?",
          "answers": [
            {
              "id": "414a7989-8e89-480e-9359-1d5a05352506",
              "title": "cargo test --ignore",
              "isCorrect": false
            },
            {
              "id": "a0ed197a-379f-4828-96db-dc855daa1e4b",
              "title": "cargo test -- --ignored",
              "isCorrect": true
            },
            {
              "id": "38ce051a-f2bf-44a6-af14-c47474dc8c7b",
              "title": "cargo test --include=ignored",
              "isCorrect": false
            },
            {
              "id": "03989607-de44-4f1e-81fd-92991b60ac95",
              "title": "cargo test ignored-only",
              "isCorrect": false
            }
          ],
          "descriptionText": "The --ignored flag runs only tests with the #[ignore] attribute",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0815b705-47f6-4b5a-af53-2d921297f744",
          "title": "What's the difference between unit and integration tests?",
          "answers": [
            {
              "id": "67c47c6c-4467-49c5-90e4-42766cb50a32",
              "title": "Unit tests are always public, integration are private",
              "isCorrect": false
            },
            {
              "id": "9245e7be-e03d-43e9-8327-fb796e749e77",
              "title": "Unit tests are written inside src, integration in tests folder",
              "isCorrect": true
            },
            {
              "id": "79862938-3cf8-4ae5-b7dc-576720138659",
              "title": "Unit tests require Cargo.toml, integration don't",
              "isCorrect": false
            },
            {
              "id": "f39a6374-ca9e-4ef0-a892-b75ffb1c282d",
              "title": "Unit tests only run with nightly",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unit tests live in the same file, integration in separate tests/ directory",
          "descriptionLink": "automated_tests_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "653e4ad1-8121-4c35-a8aa-6cabadde614c",
      "theme": "Functional Language Features — Iterators and Closures",
      "priority": 10,
      "questions": [
        {
          "id": "a6e8d60a-dc53-47e7-810e-32d1a60eda9d",
          "title": "How does a closure differ from a regular function?",
          "answers": [
            {
              "id": "6afadb07-0a48-47c9-96df-7acad90fb383",
              "title": "Has no parameters",
              "isCorrect": false
            },
            {
              "id": "36cf9dac-8b78-4beb-b4b6-e4492ac85fb6",
              "title": "Can capture the environment",
              "isCorrect": true
            },
            {
              "id": "a35c82a3-57ef-48ad-bf07-844ffc23b7a2",
              "title": "Only works in main",
              "isCorrect": false
            },
            {
              "id": "fa8dab5c-2952-4d0f-88fe-3680c22c95ad",
              "title": "Always asynchronous",
              "isCorrect": false
            }
          ],
          "descriptionText": "Functions cannot capture values from their scope, closures can",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8d3b8622-1b13-4c40-ac01-867a1071bc81",
          "title": "How do you declare a closure without parameters?",
          "answers": [
            {
              "id": "b92e70b0-396a-4fe5-abb6-568ab27b2a1d",
              "title": "fn() {}",
              "isCorrect": false
            },
            {
              "id": "887d1797-6d40-4da2-b1f3-312dee9366cc",
              "title": "|| { … }",
              "isCorrect": true
            },
            {
              "id": "58e9c86e-1c43-4393-8450-83791c38cba6",
              "title": "[] { … }",
              "isCorrect": false
            },
            {
              "id": "02a33cde-131e-4a92-841b-bd3c02f6b934",
              "title": "{}",
              "isCorrect": false
            }
          ],
          "descriptionText": "Closure syntax uses vertical bars ||",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "acbc6a22-6c28-4dd2-b838-1536cc5ab9ed",
          "title": "What does the unwrap_or_else method do for Option?",
          "answers": [
            {
              "id": "b7dd706d-8da4-4c15-8c51-089351e82e72",
              "title": "Returns the value or panics",
              "isCorrect": false
            },
            {
              "id": "948c0ba5-31b0-4114-8fe6-e767fe028605",
              "title": "Returns the value or calls a closure",
              "isCorrect": true
            },
            {
              "id": "4df91dcf-33c4-4408-91fe-fc5b8ceb6def",
              "title": "Returns only None",
              "isCorrect": false
            },
            {
              "id": "10cd8478-eefa-472d-908c-e7ae8ee3dfe2",
              "title": "Returns a reference",
              "isCorrect": false
            }
          ],
          "descriptionText": "unwrap_or_else accepts a closure that executes on None",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5cd3d0c4-b565-4607-a7b2-e8aa0fefdfbd",
          "title": "What's the difference between unwrap_or and unwrap_or_else?",
          "answers": [
            {
              "id": "f2577825-7ea3-4a06-9476-31ec19d0b79f",
              "title": "First accepts a value, second accepts a closure",
              "isCorrect": true
            },
            {
              "id": "193c3cf3-8970-474a-b353-5ea6ce48bdec",
              "title": "First works faster",
              "isCorrect": false
            },
            {
              "id": "4e6445b2-2020-4bc1-bebe-96f8bcaafc87",
              "title": "Second doesn't work with Some",
              "isCorrect": false
            },
            {
              "id": "722a7c27-a4d9-4ca4-94a5-677532ffd691",
              "title": "First always panics",
              "isCorrect": false
            }
          ],
          "descriptionText": "unwrap_or_else lazily computes the value only if None",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9fb18a2e-11f4-4643-987c-c76d852ac215",
          "title": "How does a closure capture variables by default?",
          "answers": [
            {
              "id": "fac51c3f-2f7b-47ee-a391-491ee59341ba",
              "title": "Always by value",
              "isCorrect": false
            },
            {
              "id": "1f4db4bf-52f3-4f20-858a-fd427c3ada91",
              "title": "Decides itself: by reference, by &mut, or by move",
              "isCorrect": true
            },
            {
              "id": "0a81833e-42ef-4c18-baca-7c447497db6b",
              "title": "Always by &mut",
              "isCorrect": false
            },
            {
              "id": "303c698b-d67c-4382-915e-447c62eea42f",
              "title": "Cannot capture",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust chooses the capture strategy based on the closure body",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "080967c1-00dd-4c0b-b294-33b92628ac02",
          "title": "What does the move keyword do for a closure?",
          "answers": [
            {
              "id": "9bbe25df-6d85-47ca-8201-68bb382c8518",
              "title": "Prohibits capture",
              "isCorrect": false
            },
            {
              "id": "b8e5db88-f38c-40db-b320-e5beeda3ba4e",
              "title": "Captures variables by value",
              "isCorrect": true
            },
            {
              "id": "a8e48459-2ded-4fad-adb7-b810dd70fbe0",
              "title": "Makes the closure FnMut",
              "isCorrect": false
            },
            {
              "id": "782af4ed-ab51-4dc5-8b78-771c3c7c2f8b",
              "title": "Optimizes speed",
              "isCorrect": false
            }
          ],
          "descriptionText": "move forces ownership transfer into the closure",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a261acdd-5503-4de1-b0a0-10f2f3445fd0",
          "title": "Why do you need to use move in a closure for a new thread?",
          "answers": [
            {
              "id": "992d37a9-9234-4da2-9e31-a875c764fee6",
              "title": "Thread cannot reference parent data",
              "isCorrect": true
            },
            {
              "id": "91bcc3a5-3d49-4853-b76c-859d0515a8ae",
              "title": "It's faster",
              "isCorrect": false
            },
            {
              "id": "996d80c6-5be3-4396-8ea2-fc69494a7116",
              "title": "Without it, panic",
              "isCorrect": false
            },
            {
              "id": "e471127f-0328-42e5-bbd3-0c6f23d28583",
              "title": "Only for FnOnce",
              "isCorrect": false
            }
          ],
          "descriptionText": "Thread can outlive the parent, so ownership is required",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "783e232b-3846-41ad-84eb-c799638a940d",
          "title": "What are the three traits for closures?",
          "answers": [
            {
              "id": "7959ab66-47ec-4d49-89fc-d38aac733ead",
              "title": "Fn, FnMut, FnOnce",
              "isCorrect": true
            },
            {
              "id": "d88bb461-8e5e-40e9-9892-8d3dd3327e10",
              "title": "Fn, Func, Callable",
              "isCorrect": false
            },
            {
              "id": "17f63614-ca19-4a39-989f-67ac374b79f1",
              "title": "FnStatic, FnShared, FnOwned",
              "isCorrect": false
            },
            {
              "id": "b5d08c3e-6712-43b1-bc0a-50ea6b6f4ec2",
              "title": "Copy, Clone, Drop",
              "isCorrect": false
            }
          ],
          "descriptionText": "These three traits reflect capture methods",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f9ef5615-890a-4f33-a335-38aec5bbc0d2",
          "title": "Which Fn-trait does any closure implement?",
          "answers": [
            {
              "id": "cd964eda-8996-4480-b926-e1e7dc21c0a6",
              "title": "Fn",
              "isCorrect": false
            },
            {
              "id": "cd77a774-30a9-4c81-b7e1-9602bb0f2b9f",
              "title": "FnMut",
              "isCorrect": false
            },
            {
              "id": "1ebe8c6c-809b-4371-87ec-d8adcaf9d273",
              "title": "FnOnce",
              "isCorrect": true
            },
            {
              "id": "357bee5c-a06f-4716-bf7f-b2919f4006b2",
              "title": "None",
              "isCorrect": false
            }
          ],
          "descriptionText": "Any closure can be called at least once",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "39569397-cb27-498d-b03c-4da9f292ebd9",
          "title": "A closure that modifies an external variable implements:",
          "answers": [
            {
              "id": "977f1678-4f78-4d5a-a529-2260ed2517dc",
              "title": "Fn",
              "isCorrect": false
            },
            {
              "id": "4f8db2a6-f3b4-4596-acbb-db9e82c5e7e3",
              "title": "FnMut",
              "isCorrect": true
            },
            {
              "id": "b4fea018-2298-4387-8afb-3856f818dd9b",
              "title": "FnOnce",
              "isCorrect": false
            },
            {
              "id": "0612dff3-0dd5-4292-9ad3-e7a40eaf0c1a",
              "title": "Copy",
              "isCorrect": false
            }
          ],
          "descriptionText": "Modification requires &mut — that's FnMut",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "be69be4b-e10d-46a5-85cc-20ede914d48c",
          "title": "A closure that moves a value from the environment implements:",
          "answers": [
            {
              "id": "589dacc2-3980-4e0d-9b86-56f78b9f475a",
              "title": "Fn",
              "isCorrect": false
            },
            {
              "id": "8227b4cd-c004-4ca2-bf23-9895d5e1ce1b",
              "title": "FnMut",
              "isCorrect": false
            },
            {
              "id": "01fbdc12-7cc8-4090-be8d-17e25e2bcfb3",
              "title": "FnOnce",
              "isCorrect": true
            },
            {
              "id": "56682ca4-2f71-4205-9646-d639f31d1231",
              "title": "All three",
              "isCorrect": false
            }
          ],
          "descriptionText": "With move-operation, closure can only be called once",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d0236169-4604-4e18-b8fc-368855ed258e",
          "title": "How does function syntax differ from closure syntax?",
          "answers": [
            {
              "id": "5d33b9b6-bc59-4798-89c0-0b1b69b1648f",
              "title": "Function always with fn, closure with ||",
              "isCorrect": true
            },
            {
              "id": "4f83dccf-7fbe-4acf-8444-00e7df3d9830",
              "title": "Closure must have return",
              "isCorrect": false
            },
            {
              "id": "97552a4f-5c91-4cdf-8e04-6580187cf9e6",
              "title": "Closures have no body",
              "isCorrect": false
            },
            {
              "id": "5079ca19-01aa-4635-b475-06921d231292",
              "title": "Functions cannot accept parameters",
              "isCorrect": false
            }
          ],
          "descriptionText": "The difference is precisely in || and optional type annotations",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "61b6e456-ea4e-4b20-8e6e-95aa80644e35",
          "title": "Do you always need to specify types in a closure?",
          "answers": [
            {
              "id": "c4df4589-8ae4-4ab8-86d1-eb3dd7990649",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "bb2aa6b7-99be-4ac6-bcb0-7fcc1dd6d027",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "c4b2d53c-e3df-4d16-a54f-daedf57f335f",
              "title": "Only for FnMut",
              "isCorrect": false
            },
            {
              "id": "8c610a7c-d742-43c0-9327-01bb35e1684f",
              "title": "Only for return value",
              "isCorrect": false
            }
          ],
          "descriptionText": "Compiler usually infers types automatically",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4d038e4d-acd4-43df-8712-65f5b9d90cf3",
          "title": "When might explicit type annotation be needed in a closure?",
          "answers": [
            {
              "id": "1166f0b1-7e37-40be-9e34-87e1560462f3",
              "title": "When using multithreading",
              "isCorrect": false
            },
            {
              "id": "cdb9e5fe-4321-451b-b07c-4c7d99f5130d",
              "title": "When compiler cannot infer the type",
              "isCorrect": true
            },
            {
              "id": "4ca3dea0-ebef-4e29-bdfd-309721d45fa2",
              "title": "When closure is empty",
              "isCorrect": false
            },
            {
              "id": "8a89e7df-d240-47fb-b1c3-d539954efc9d",
              "title": "Always in release",
              "isCorrect": false
            }
          ],
          "descriptionText": "Closure types are inferred, but sometimes clarification is needed",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "934264e4-8d8f-4342-bc4c-898b8ce3a6f6",
          "title": "What happens if you call a closure first with a string, then with a number?",
          "answers": [
            {
              "id": "437d1fbb-7bf2-41ef-b6da-a538d50a9063",
              "title": "Will work",
              "isCorrect": false
            },
            {
              "id": "54158792-92ce-486e-b097-a59c196d1490",
              "title": "Type error",
              "isCorrect": true
            },
            {
              "id": "bed0f28e-2f96-4695-80f2-50baa816efbf",
              "title": "Automatic conversion",
              "isCorrect": false
            },
            {
              "id": "76bf63b4-5f94-47cb-b8e6-2077e5eddd05",
              "title": "Runtime panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "Closure type is fixed on first call",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "065aa28a-e841-43f9-b244-c7af3b422bcc",
          "title": "Which closure can be passed to sort_by_key?",
          "answers": [
            {
              "id": "cd2e9fcc-c1fc-4165-8af6-3bec34f5f64f",
              "title": "Only FnOnce",
              "isCorrect": false
            },
            {
              "id": "6d5688b1-e533-4196-87ca-b75be470c68f",
              "title": "FnMut",
              "isCorrect": true
            },
            {
              "id": "f732e390-2825-44f2-8d42-634a89e17a04",
              "title": "Fn",
              "isCorrect": false
            },
            {
              "id": "18be5ca4-41ac-44fb-b608-59df42b1be8c",
              "title": "Any",
              "isCorrect": false
            }
          ],
          "descriptionText": "sort_by_key calls the closure multiple times",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e6faa5b9-c34e-4c1a-892f-bbe19f0b537b",
          "title": "Which method must any iterator implement?",
          "answers": [
            {
              "id": "d68feb64-bc3c-4087-8a67-8b78e93d9a0a",
              "title": "for_each",
              "isCorrect": false
            },
            {
              "id": "635f9d50-dbc6-487c-afde-5bffaaf104ec",
              "title": "next",
              "isCorrect": true
            },
            {
              "id": "f4ff0f2c-61e6-4f59-a20e-bd91b955c90e",
              "title": "iter",
              "isCorrect": false
            },
            {
              "id": "a3979b4a-84c3-47e8-8d59-158b2e7c7b1e",
              "title": "map",
              "isCorrect": false
            }
          ],
          "descriptionText": "Iterator requires defining next()",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b885255b-1273-4712-a319-ca1f901cbb2d",
          "title": "What does the next() method return?",
          "answers": [
            {
              "id": "d83a86d4-c1a3-453d-927c-e7c686f5d1e6",
              "title": "Element directly",
              "isCorrect": false
            },
            {
              "id": "1287fd10-bc72-4e4d-9619-72bfb904620b",
              "title": "Option",
              "isCorrect": true
            },
            {
              "id": "9d3cdd95-c74a-46fa-b3c4-1e29412e6a22",
              "title": "Result<Item,Err>",
              "isCorrect": false
            },
            {
              "id": "f362ce0c-f540-450c-a3f9-576af5efd300",
              "title": "&Item",
              "isCorrect": false
            }
          ],
          "descriptionText": "next() returns Some(item) or None",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "21a924b2-0d5a-447b-b35d-70f914bd92d2",
          "title": "What happens if you call next() on an exhausted iterator?",
          "answers": [
            {
              "id": "715b81e0-cb58-43d7-9383-5475f1bbe1d6",
              "title": "Panic",
              "isCorrect": false
            },
            {
              "id": "b7c2f395-1a42-411f-9284-588b3a06d35e",
              "title": "None",
              "isCorrect": true
            },
            {
              "id": "65b8189d-58e1-4bb5-8491-0e8ea9e8d7b6",
              "title": "0",
              "isCorrect": false
            },
            {
              "id": "f0bf4a37-536a-46ac-b035-8e86d21a8df1",
              "title": "Compilation error",
              "isCorrect": false
            }
          ],
          "descriptionText": "After the end, iterator returns None",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "432db906-779a-4709-969f-a07e51341dce",
          "title": "Why is an iterator variable usually declared as mut?",
          "answers": [
            {
              "id": "89ba42f5-7693-4fed-add6-8cbde02d406c",
              "title": "Otherwise compiler always complains",
              "isCorrect": false
            },
            {
              "id": "7570f9bc-68d2-4f50-ab64-31ba1702d716",
              "title": "next modifies internal state",
              "isCorrect": true
            },
            {
              "id": "f1386df4-a1fa-4734-8d6a-e64eec4a2e22",
              "title": "Vector requires mut",
              "isCorrect": false
            },
            {
              "id": "db2489c3-1ad4-4062-bbd0-2d296a5fae25",
              "title": "collect requires mut",
              "isCorrect": false
            }
          ],
          "descriptionText": "next moves the iterator pointer",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cf8745e0-e8ad-4817-9a26-4a7f90393c3a",
          "title": "How do iter, into_iter, iter_mut methods differ for a vector?",
          "answers": [
            {
              "id": "3b5d1037-4a55-40e5-bc0d-41a820d82d35",
              "title": "All the same",
              "isCorrect": false
            },
            {
              "id": "162347f2-ae6f-4976-87dc-7993e3bed464",
              "title": "iter → &T, into_iter → T, iter_mut → &mut T",
              "isCorrect": true
            },
            {
              "id": "0bd30ce0-8f4d-4f1b-b45d-734c27b7ef44",
              "title": "iter → copies, into_iter → references",
              "isCorrect": false
            },
            {
              "id": "9c36e38d-ab6a-4ddf-a21f-47c4f2c2fc93",
              "title": "iter works faster",
              "isCorrect": false
            }
          ],
          "descriptionText": "These are three ways to traverse: by reference, ownership, and mutable reference",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "71576119-c6ab-4ff0-9b5c-8a16b9692481",
          "title": "What is iterator \"laziness\"?",
          "answers": [
            {
              "id": "3520fae9-9c48-48ad-b324-885a7ba1d86d",
              "title": "They don't compile until called",
              "isCorrect": false
            },
            {
              "id": "2ce5de67-72cd-4fee-ab4c-f9173db8ff87",
              "title": "They do nothing until consumed",
              "isCorrect": true
            },
            {
              "id": "6195c4bd-e856-4be0-93f5-312a42d88cc9",
              "title": "They are slow",
              "isCorrect": false
            },
            {
              "id": "8907a11e-cd8d-4ef4-bcee-2aaf7e343bad",
              "title": "They only work in release",
              "isCorrect": false
            }
          ],
          "descriptionText": "Iterators defer computation until a consuming method",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3606e203-a228-4e81-944c-786d1f254d2a",
          "title": "Example of a method that consumes an iterator:",
          "answers": [
            {
              "id": "0a622f05-adaf-4e40-be64-7b1fd459d0c0",
              "title": "map",
              "isCorrect": false
            },
            {
              "id": "47aacbc1-600d-4e3c-af78-df47cc765947",
              "title": "filter",
              "isCorrect": false
            },
            {
              "id": "c6fcecae-cbe5-4db1-a68b-e583b422f967",
              "title": "sum",
              "isCorrect": true
            },
            {
              "id": "cc4a99f8-80d6-43ca-9e5f-03ba94ebbe39",
              "title": "iter",
              "isCorrect": false
            }
          ],
          "descriptionText": "sum calls next until the end and takes the iterator",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f9680731-2cd6-4dbc-875f-8b3efdf45152",
          "title": "What happens to an iterator after calling sum()?",
          "answers": [
            {
              "id": "8951d2f7-4550-4c65-b040-3617bb5e9f86",
              "title": "Can be used again",
              "isCorrect": false
            },
            {
              "id": "4a7bd8fe-7725-4754-bef4-44145ed178a1",
              "title": "It's moved and no longer accessible",
              "isCorrect": true
            },
            {
              "id": "d15d2ae2-f898-4605-a2df-2a365ae32194",
              "title": "Returns empty",
              "isCorrect": false
            },
            {
              "id": "876e37b1-b524-4b69-bfa5-8b2a2a8ac9f4",
              "title": "It's cloned",
              "isCorrect": false
            }
          ],
          "descriptionText": "sum owns the iterator and exhausts it",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b5b99c9a-c5c0-496e-86bb-1832fce24984",
          "title": "Example of an adapter method (doesn't consume iterator):",
          "answers": [
            {
              "id": "80a6c6d4-d174-4d27-97d4-9e83be316577",
              "title": "map",
              "isCorrect": true
            },
            {
              "id": "318b47c1-30df-4d17-a844-cbbcbcbfc7c6",
              "title": "sum",
              "isCorrect": false
            },
            {
              "id": "c216124f-9c61-4d29-b2e9-aa22bed017e7",
              "title": "collect",
              "isCorrect": false
            },
            {
              "id": "d3430468-a14b-4ae9-b962-ccfe725f005a",
              "title": "next",
              "isCorrect": false
            }
          ],
          "descriptionText": "Adapter returns a new iterator without consuming the original",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "daedf770-bae2-4ca3-a6d4-de27569f9daf",
          "title": "What do you need to call to actually execute map?",
          "answers": [
            {
              "id": "b0dfa2d7-1a52-40d9-9349-150dd4a5caa1",
              "title": "collect",
              "isCorrect": true
            },
            {
              "id": "c5ca0372-cb4e-4e2e-8365-7e8ee36464d1",
              "title": "for_each",
              "isCorrect": false
            },
            {
              "id": "9dfb3726-47a6-42d4-ad81-58696327d6a8",
              "title": "next",
              "isCorrect": false
            },
            {
              "id": "c17b92e4-22ba-4d86-a357-cfa7203294e9",
              "title": "All above",
              "isCorrect": false
            }
          ],
          "descriptionText": "map is lazy, collect starts traversal",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d1da7c7e-3d57-419a-a3e4-b6a2339064bc",
          "title": "What will collect return from a map iterator?",
          "answers": [
            {
              "id": "960c0bf0-0706-447e-8a5d-c29407658c6a",
              "title": "Nothing",
              "isCorrect": false
            },
            {
              "id": "be90b2af-2517-42bd-a495-f1bc7bd5b5d2",
              "title": "Any collection",
              "isCorrect": true
            },
            {
              "id": "4954c4d1-ee53-4169-b5fd-d7f91885f3f9",
              "title": "Only Vec",
              "isCorrect": false
            },
            {
              "id": "406a2eff-6a79-446a-9bce-200a37a506c9",
              "title": "Only String",
              "isCorrect": false
            }
          ],
          "descriptionText": "collect can be parameterized into different collections",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9927fba3-a8a4-4012-ba1f-ec8cb53f12f9",
          "title": "How does filter work?",
          "answers": [
            {
              "id": "fd2b3dc5-86f8-4d2b-bb6c-ea9494e162a2",
              "title": "Removes None",
              "isCorrect": false
            },
            {
              "id": "2409bfd4-c5fe-4c65-a308-a2a93e3e8f5f",
              "title": "Keeps elements whose closure returns true",
              "isCorrect": true
            },
            {
              "id": "f3de7108-1151-449f-b067-cfa03e6fca32",
              "title": "Sorts elements",
              "isCorrect": false
            },
            {
              "id": "5ff9bcef-1020-4cf1-97ce-e5586fdccde4",
              "title": "Transforms type",
              "isCorrect": false
            }
          ],
          "descriptionText": "filter keeps only elements for which the condition is true",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "20abbdcd-33cd-4832-accc-0026f6a98e15",
          "title": "How does the filter closure receive elements?",
          "answers": [
            {
              "id": "414c5a89-96e4-4172-875e-ccac17492be2",
              "title": "By value",
              "isCorrect": false
            },
            {
              "id": "32b9819e-966c-441c-904a-bd7b49650bb6",
              "title": "By reference",
              "isCorrect": true
            },
            {
              "id": "ff45a5e6-c3a8-43ec-a919-5a6e650fee65",
              "title": "By copy",
              "isCorrect": false
            },
            {
              "id": "742cdccd-6f85-40fc-91a4-0a891e1c419e",
              "title": "Always through move",
              "isCorrect": false
            }
          ],
          "descriptionText": "filter calls the closure with a reference to the element",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "94b067ce-da25-404d-8078-3f69302b435f",
          "title": "What does the for_each method do for an iterator?",
          "answers": [
            {
              "id": "cb346293-8d69-47aa-b964-cbba3638adf5",
              "title": "Returns a new collection",
              "isCorrect": false
            },
            {
              "id": "b90001a7-61d1-49d4-9097-1dbc06ed76e5",
              "title": "Applies closure to each element",
              "isCorrect": true
            },
            {
              "id": "a095f4da-5356-40f4-b5ca-9be7f8d47c4c",
              "title": "Sorts",
              "isCorrect": false
            },
            {
              "id": "e33b06e0-42da-44f5-b5fa-8431dc9a8dbc",
              "title": "Zeros the iterator",
              "isCorrect": false
            }
          ],
          "descriptionText": "for_each calls the closure for each element",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "933c29e8-d581-4562-a35d-2976acf23542",
          "title": "How do you check if an iterator has an element satisfying a condition?",
          "answers": [
            {
              "id": "2fd51c46-3939-4f1d-85e4-26e16f450092",
              "title": "map",
              "isCorrect": false
            },
            {
              "id": "5b507ebe-53b5-4051-9ba1-396262b45ee8",
              "title": "any",
              "isCorrect": true
            },
            {
              "id": "edbd9fc8-4db8-4762-924f-9fcbc526ff7b",
              "title": "all",
              "isCorrect": false
            },
            {
              "id": "fb737ec8-4a8d-4757-9ccb-6e1644ac5a15",
              "title": "find",
              "isCorrect": false
            }
          ],
          "descriptionText": "any checks if the closure returns true at least once",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7467a416-90ab-4dd3-9cfd-d926467099ca",
          "title": "How does all differ from any?",
          "answers": [
            {
              "id": "45e14dfb-f864-4e3c-8b57-3c00a9e504cd",
              "title": "all requires true for all",
              "isCorrect": true
            },
            {
              "id": "0564a687-7dd6-409c-a38d-c8def87e1c6d",
              "title": "any requires true for all",
              "isCorrect": false
            },
            {
              "id": "79dbd2f8-b0fe-4939-96f3-ff7e8b0051ec",
              "title": "all only works with Vec",
              "isCorrect": false
            },
            {
              "id": "a4faa68d-bf25-458e-8f1b-c891f1d3e0bb",
              "title": "all is always faster",
              "isCorrect": false
            }
          ],
          "descriptionText": "all returns true if the condition holds for all elements",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ac15500d-ba65-4efa-91b1-d41c24331682",
          "title": "What does the find method return?",
          "answers": [
            {
              "id": "14265f51-1efd-49e0-8163-eb8fab58ab5e",
              "title": "bool",
              "isCorrect": false
            },
            {
              "id": "e8e24248-74a9-4117-8498-edd3d753848f",
              "title": "Option",
              "isCorrect": true
            },
            {
              "id": "b6dcb9f9-5e62-440e-96e0-7598d2df5e10",
              "title": "Result",
              "isCorrect": false
            },
            {
              "id": "a3df9ae8-a60b-4598-bb4a-5076d369d036",
              "title": "usize",
              "isCorrect": false
            }
          ],
          "descriptionText": "find returns Some(first element), or None",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2b2f5614-f4d9-4852-bdec-000a77301d7c",
          "title": "How do for loops and iterators differ?",
          "answers": [
            {
              "id": "880e4195-e816-4a6c-88ed-2bdfb517e212",
              "title": "for is always faster",
              "isCorrect": false
            },
            {
              "id": "7ad05661-8b34-4c10-a663-d17750967181",
              "title": "for is syntactic sugar for iterator",
              "isCorrect": true
            },
            {
              "id": "d57d9ba3-eb6e-4be1-b335-0296268c834e",
              "title": "Iterator only works with Vec",
              "isCorrect": false
            },
            {
              "id": "013b829e-112c-41d2-9f70-b6c5b89207f5",
              "title": "for uses pointers",
              "isCorrect": false
            }
          ],
          "descriptionText": "for internally creates and consumes an iterator",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "92c3c0b4-223d-4aa3-a360-0025095e541b",
          "title": "Why are iterators in Rust considered \"zero-cost abstraction\"?",
          "answers": [
            {
              "id": "7d114778-d105-4019-866a-71908e71e8a2",
              "title": "They're free",
              "isCorrect": false
            },
            {
              "id": "038eb7d0-be0a-4101-8a4d-709ea6f98b90",
              "title": "After compilation they add no overhead",
              "isCorrect": true
            },
            {
              "id": "3da073e7-58ee-4a39-8202-f0596a86edd0",
              "title": "They're always inlined",
              "isCorrect": false
            },
            {
              "id": "ccf0ada0-9421-47ad-a6ea-33a4d0b3cf4f",
              "title": "They only work in release",
              "isCorrect": false
            }
          ],
          "descriptionText": "Iterators compile to code at the level of manual loops",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a2a6275b-8372-4b2d-b9c6-b915e0eaa6ab",
          "title": "What does the enumerate() method do?",
          "answers": [
            {
              "id": "43ecbe29-a081-4065-a0f7-06501d988938",
              "title": "Numbers the collection in println",
              "isCorrect": false
            },
            {
              "id": "ee95f4a9-55fb-47bf-942a-73be7156859a",
              "title": "Adds an index to each element",
              "isCorrect": true
            },
            {
              "id": "4cb3253f-66d6-4846-ba5f-98344eb09e17",
              "title": "Sorts",
              "isCorrect": false
            },
            {
              "id": "b8017d28-e826-4c1a-ad5d-87fd01553f86",
              "title": "Returns usize",
              "isCorrect": false
            }
          ],
          "descriptionText": "enumerate returns pairs (index, element)",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "abc94c49-7e8d-4d8e-a64e-95cd5fa42ded",
          "title": "What does zip() do?",
          "answers": [
            {
              "id": "4148bebb-fe9d-4e6f-8b17-a648f7a300b2",
              "title": "Combines two iterators into tuples",
              "isCorrect": true
            },
            {
              "id": "849d7897-c424-419a-a58b-89ff076fb05b",
              "title": "Joins strings",
              "isCorrect": false
            },
            {
              "id": "3aebddad-0516-4de3-8a84-c5c117a29ca4",
              "title": "Removes duplicates",
              "isCorrect": false
            },
            {
              "id": "c392766c-d2e5-4bfe-a7e7-b7bb92ffa546",
              "title": "Does flatmap",
              "isCorrect": false
            }
          ],
          "descriptionText": "zip combines elements in pairs",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "23e732aa-b866-407b-8524-c15d7b49d2a5",
          "title": "What does the chain() method do?",
          "answers": [
            {
              "id": "92b1de26-70ce-4a14-96b2-b2d20bf44542",
              "title": "Joins two iterators sequentially",
              "isCorrect": true
            },
            {
              "id": "9b817a14-1791-470d-8ebd-7d7e4942b980",
              "title": "Does merge sort",
              "isCorrect": false
            },
            {
              "id": "fd0c55df-99a5-4ded-95a1-964098346cc8",
              "title": "Joins strings",
              "isCorrect": false
            },
            {
              "id": "7c2b0fdc-43fd-4412-ae4d-a57bf44fe123",
              "title": "Concatenates Vec",
              "isCorrect": false
            }
          ],
          "descriptionText": "chain creates one iterator from two",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ba4c8d18-10f4-47a1-b885-47940ab5087c",
          "title": "What does the take() method do?",
          "answers": [
            {
              "id": "17d220b6-018f-4014-bbf7-b83b541f1afd",
              "title": "Takes the first N elements",
              "isCorrect": true
            },
            {
              "id": "c87fb519-9700-43a6-a592-e002d4eaf4d0",
              "title": "Removes the first N elements",
              "isCorrect": false
            },
            {
              "id": "6db0f402-d367-4aae-a9d0-0f2462b34a87",
              "title": "Does clone",
              "isCorrect": false
            },
            {
              "id": "48523660-7ebe-4e1a-ab0e-a67b0cf2ac2a",
              "title": "Only works with Vec",
              "isCorrect": false
            }
          ],
          "descriptionText": "take limits the number of iterations",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fac14cae-c088-41b5-87c6-7ec41abc8d05",
          "title": "What does the skip() method do?",
          "answers": [
            {
              "id": "710afef0-cb93-48bf-a1d6-dab6be704324",
              "title": "Skips the first N elements",
              "isCorrect": true
            },
            {
              "id": "d58bc5e5-a22c-4d74-bc18-1e176d4b7e3e",
              "title": "Removes duplicates",
              "isCorrect": false
            },
            {
              "id": "32223077-b300-4c67-8132-be131002d608",
              "title": "Skips None",
              "isCorrect": false
            },
            {
              "id": "3a78bd4b-1fa1-4f6f-8212-04f57e7aa0e2",
              "title": "Sorts",
              "isCorrect": false
            }
          ],
          "descriptionText": "skip shifts the iteration start",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "24d7bc90-d68b-4282-a251-d6b9d2734430",
          "title": "What's the point of using iterators and closures in Rust?",
          "answers": [
            {
              "id": "3f0c28d8-2e86-4ce2-8c9a-6b556cbe92c4",
              "title": "They simplify syntax but slow down",
              "isCorrect": false
            },
            {
              "id": "cad13613-3425-4d5f-abda-124d9fd9c063",
              "title": "They make code declarative and fast",
              "isCorrect": true
            },
            {
              "id": "64c684ae-0946-4054-b26b-a73fd548f776",
              "title": "They only work in tests",
              "isCorrect": false
            },
            {
              "id": "ae3f42ea-4afb-48ec-8e68-8ab5b34c0db8",
              "title": "Should be avoided",
              "isCorrect": false
            }
          ],
          "descriptionText": "Iterators and closures provide readability and don't compromise performance compared to manual loops",
          "descriptionLink": "iterators_closures_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "21ae42b6-6411-46c2-a603-64a5e8b61fa5",
      "theme": "Smart Pointers",
      "priority": 11,
      "questions": [
        {
          "id": "5b7011ea-9730-41f0-893b-be51822475d4",
          "title": "What is a \"smart pointer\" in Rust?",
          "answers": [
            {
              "id": "17f9da42-a9af-400c-9934-3a823ba6c12f",
              "title": "Any variable with reference &T",
              "isCorrect": false
            },
            {
              "id": "0f96cb69-c9d9-41ec-a5db-47d399e99d3b",
              "title": "A struct that behaves like a pointer and has additional behavior",
              "isCorrect": true
            },
            {
              "id": "9a9989f2-8414-49e5-b1f8-d9039b6b8ed7",
              "title": "Any wrapper over Vec<T>",
              "isCorrect": false
            },
            {
              "id": "7a0011d7-0325-4b59-9db3-2539d092f743",
              "title": "Any type with Copy",
              "isCorrect": false
            }
          ],
          "descriptionText": "Smart pointer is a struct (usually struct) that mimics a pointer and implements traits like Deref/Drop",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3173a200-4748-46f1-bd72-78b84f986105",
          "title": "What does Box<T> do?",
          "answers": [
            {
              "id": "d6c007b4-23ff-4dd2-8233-8694fb7eddfb",
              "title": "Places value on the stack",
              "isCorrect": false
            },
            {
              "id": "34670a4c-b165-4e23-be1e-6d55f9d8c47a",
              "title": "Places value in static memory",
              "isCorrect": false
            },
            {
              "id": "e4d3a000-eae9-4d47-9656-365f87efd397",
              "title": "Places value on the heap",
              "isCorrect": true
            },
            {
              "id": "bd894d33-6d87-4dd5-8cfb-d0c59d925fda",
              "title": "Clones value on each access",
              "isCorrect": false
            }
          ],
          "descriptionText": "Box stores a \"thin\" pointer to a value on the heap",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "448119e0-1030-420d-8241-8659fe4a7fc8",
          "title": "When is it appropriate to use Box<T>?",
          "answers": [
            {
              "id": "a54c8fe1-ddcb-4bd2-9cdf-9ea229ad8538",
              "title": "Always for fixed-size values",
              "isCorrect": false
            },
            {
              "id": "534408b7-f509-4026-a4a1-26521baddb31",
              "title": "When you need a known-size type for a recursive structure",
              "isCorrect": true
            },
            {
              "id": "deebc918-e8a8-4b04-acfc-e5fa5507da86",
              "title": "To speed up cache line access",
              "isCorrect": false
            },
            {
              "id": "f2f9c383-5ffa-4fb9-a9ba-041285581409",
              "title": "To automatically share ownership",
              "isCorrect": false
            }
          ],
          "descriptionText": "Box breaks infinite recursion in size (e.g., in Cons(i32, Box<List>))",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7e90533d-9125-442b-8a71-24dc044b7564",
          "title": "What happens when Box<T> goes out of scope?",
          "answers": [
            {
              "id": "c4a4bb0b-c7ec-4038-8c9e-f6c70c7d14cf",
              "title": "Only the pointer on the stack is freed",
              "isCorrect": false
            },
            {
              "id": "f130cea8-9357-4bc9-8dc6-54bb72dcbb5e",
              "title": "Only the heap is freed",
              "isCorrect": false
            },
            {
              "id": "a76495ee-8b6f-49b7-83cb-894c29c3cc0d",
              "title": "Both the stack pointer and heap data are freed",
              "isCorrect": true
            },
            {
              "id": "a33e88ce-f2fd-4224-a741-41c0336303ec",
              "title": "Nothing, garbage collector frees later",
              "isCorrect": false
            }
          ],
          "descriptionText": "Drop is implemented to free both the \"box\" and stored data",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4286b1d2-7479-4e0d-b2a6-5e7b177bdf56",
          "title": "Why doesn't enum List { Cons(i32, List), Nil } compile?",
          "answers": [
            {
              "id": "8bf3ba26-da0f-4794-9b50-65d3d1b72b3f",
              "title": "Type error",
              "isCorrect": false
            },
            {
              "id": "8b14c854-ac45-4693-89d6-8908e5262bb8",
              "title": "Recursive type of infinite size",
              "isCorrect": true
            },
            {
              "id": "e6084200-e020-439a-acc1-8df4938b5bae",
              "title": "Cannot have Nil in enum",
              "isCorrect": false
            },
            {
              "id": "58997bd0-e171-41f0-b590-e116b5527564",
              "title": "Compiler doesn't support such enums",
              "isCorrect": false
            }
          ],
          "descriptionText": "List size cannot be computed — need indirection via pointer (Box, Rc, &)",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6cdc1a6b-9518-4639-95c4-f369b11e9b14",
          "title": "What does the Deref trait do?",
          "answers": [
            {
              "id": "24c3aa6d-815d-4795-9dcf-1d871b3d8bf1",
              "title": "Manages lifetimes",
              "isCorrect": false
            },
            {
              "id": "e797ae5a-6217-44f3-9404-e1075e02e190",
              "title": "Allows using * operator and reference coercions",
              "isCorrect": true
            },
            {
              "id": "45a5d91e-a186-4163-9b28-dde2f332b431",
              "title": "Allows copying without cloning",
              "isCorrect": false
            },
            {
              "id": "79b88829-0911-4b39-9dca-8e2cefe69688",
              "title": "Enables garbage collection",
              "isCorrect": false
            }
          ],
          "descriptionText": "Deref::deref(&self) -> &Target describes what the type dereferences to",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4ecfc02c-40a2-4cf7-8602-019215af0220",
          "title": "Why can't MyBox<T> without Deref be dereferenced with *y?",
          "answers": [
            {
              "id": "305eacbd-1576-44de-8808-bd02ea70d828",
              "title": "No Copy",
              "isCorrect": false
            },
            {
              "id": "426bc06b-fbce-46ca-af11-f73a21e7b5b1",
              "title": "Drop not implemented",
              "isCorrect": false
            },
            {
              "id": "f1e7ad53-ec40-422e-841b-a17491a3bdca",
              "title": "Deref not implemented",
              "isCorrect": true
            },
            {
              "id": "d851ccf0-108f-4c8e-83e9-e66ca46667e7",
              "title": "Type must be enum",
              "isCorrect": false
            }
          ],
          "descriptionText": "Dereferencing custom smart pointers requires Deref",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d11258de-1188-4152-bfd8-0e595d1a79fd",
          "title": "What is DerefMut for?",
          "answers": [
            {
              "id": "87261d24-1554-48db-87fc-83d0a8c29791",
              "title": "For coercion &T → &U",
              "isCorrect": false
            },
            {
              "id": "e8531f6d-78eb-4e0f-8c94-908626fcc538",
              "title": "For coercion &mut T → &mut U",
              "isCorrect": true
            },
            {
              "id": "f7be397b-bd24-44ce-8304-6c19e5fa867e",
              "title": "For default copying",
              "isCorrect": false
            },
            {
              "id": "4b653717-d8a8-4b2c-8523-13b86c99dc43",
              "title": "For resource cleanup",
              "isCorrect": false
            }
          ],
          "descriptionText": "DerefMut allows dereferencing/coercing mutable references",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b6713719-f70e-4493-a909-923da06a8cfa",
          "title": "What is the automatic conversion of references through Deref in function signatures called?",
          "answers": [
            {
              "id": "d8cdb9ea-0842-4c30-9e44-3741daa8a92a",
              "title": "Lifting",
              "isCorrect": false
            },
            {
              "id": "54f1b292-412b-42f1-9e95-e65986fc9123",
              "title": "Monomorphization",
              "isCorrect": false
            },
            {
              "id": "4a1c682f-f772-467c-89c9-774e78b6e970",
              "title": "Deref coercion",
              "isCorrect": true
            },
            {
              "id": "8f3e5e9b-0cd1-4045-8475-c7f22bd65f20",
              "title": "Copy elision",
              "isCorrect": false
            }
          ],
          "descriptionText": "Compiler automatically inserts deref calls to match expected reference type",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "09a71cbd-6de7-4036-ae50-35fe704afdca",
          "title": "What is true about deref-coercion?",
          "answers": [
            {
              "id": "0bb67503-ac24-4f9d-b3f0-1db922362c09",
              "title": "Only works for Box<T>",
              "isCorrect": false
            },
            {
              "id": "64ea9fe9-cdd6-43f9-b77f-28416861884b",
              "title": "Only works for methods, not functions",
              "isCorrect": false
            },
            {
              "id": "f11496a7-2d5e-4a8a-ab69-d596a2cec762",
              "title": "Works for types implementing Deref/DerefMut",
              "isCorrect": true
            },
            {
              "id": "ba88d4d6-f251-4084-b7dc-e2c7dd5a3ceb",
              "title": "Only works in nightly",
              "isCorrect": false
            }
          ],
          "descriptionText": "Conditions are having the corresponding trait implementations",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f2879f13-966b-40cf-a1ff-1ab733b342cb",
          "title": "Which coercion is allowed?",
          "answers": [
            {
              "id": "09b7e073-a694-49e0-854e-1130d86b5bae",
              "title": "&mut T → &T",
              "isCorrect": true
            },
            {
              "id": "0251f05c-5a9f-418b-8ae4-e03c2b5bcc29",
              "title": "&T → &mut T",
              "isCorrect": false
            },
            {
              "id": "3d99b77d-3de0-4a9a-9321-61bb59d156e4",
              "title": "&T → T",
              "isCorrect": false
            },
            {
              "id": "8afbe360-9773-445f-be9e-5c7155dd8ed9",
              "title": "T → &T always",
              "isCorrect": false
            }
          ],
          "descriptionText": "Mutable reference can be downgraded to immutable, reverse is forbidden by borrowing rules",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "45403992-6b93-468c-9b8f-f95985e31ac9",
          "title": "What is the Drop trait for?",
          "answers": [
            {
              "id": "c1bb26e4-d8df-45d5-a0ab-9fe2440da3af",
              "title": "Allows copying types by value",
              "isCorrect": false
            },
            {
              "id": "02f62acc-417d-4705-a0a4-f3c56851aad2",
              "title": "Defines behavior when going out of scope",
              "isCorrect": true
            },
            {
              "id": "0d4e2e2c-90c1-4b4e-b92f-dfb6c372bb6b",
              "title": "Speeds up memory deallocation",
              "isCorrect": false
            },
            {
              "id": "aa2b0c51-f62d-4f78-a472-69f7dc89e642",
              "title": "Replaces RAII",
              "isCorrect": false
            }
          ],
          "descriptionText": "drop(&mut self) is called automatically on destruction",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "984eb5bc-56b7-4af6-8124-695f519e6e60",
          "title": "Can you explicitly call the drop() method from Drop?",
          "answers": [
            {
              "id": "bcf3a993-baf6-4391-86a6-f5cffdfdfd3a",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "b0c1ffbc-4053-446d-afdf-4921f8c0960f",
              "title": "Yes, but only in unsafe",
              "isCorrect": false
            },
            {
              "id": "7d7d8a9f-94c6-4a95-aa21-d181e0f93138",
              "title": "No, need to use std::mem::drop(value)",
              "isCorrect": true
            },
            {
              "id": "61780384-805b-44c3-8b79-5a7e60e8ac0f",
              "title": "Can, but only for Box<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Direct call value.drop() is forbidden; use free function drop",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5dbc032a-237d-4c30-bf3b-b0378620fc92",
          "title": "Order of variable destruction in a block:",
          "answers": [
            {
              "id": "796196ce-67ad-44cc-b4ba-3b7737cd1f8d",
              "title": "In order of declaration",
              "isCorrect": false
            },
            {
              "id": "0f821acc-e3c3-4a3e-9da0-f3ab2d8a3961",
              "title": "In reverse order of declaration",
              "isCorrect": true
            },
            {
              "id": "d3983d9c-9ea1-4092-ace4-ff9075205ead",
              "title": "Random",
              "isCorrect": false
            },
            {
              "id": "0364a056-46ff-4145-ac0b-d39ae1aa2b1d",
              "title": "By name",
              "isCorrect": false
            }
          ],
          "descriptionText": "LIFO — last created, first destroyed",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "21404beb-e72d-4c89-93d0-47aec7755ea2",
          "title": "What is Rc<T> for?",
          "answers": [
            {
              "id": "e37bc1f7-8e6d-4611-8756-ce9f334c9d59",
              "title": "Single ownership",
              "isCorrect": false
            },
            {
              "id": "b2808fbc-d669-42e3-a80e-771d2f396f1c",
              "title": "Multiple ownership of one value in multithreaded context",
              "isCorrect": false
            },
            {
              "id": "48713eda-9f90-4877-806b-44566d58d911",
              "title": "Multiple ownership of one value in single-threaded context",
              "isCorrect": true
            },
            {
              "id": "97221070-a03f-49d2-843e-c5cb4880d280",
              "title": "Thread synchronization",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rc is reference counting, but only for single thread",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0274923e-64aa-4e45-9e8a-ce16a3008a40",
          "title": "What does Rc::clone do?",
          "answers": [
            {
              "id": "8f74724b-d6ef-482e-8d21-07d2cd00fc1c",
              "title": "Deep copies data",
              "isCorrect": false
            },
            {
              "id": "1e25065c-182a-4312-8ce9-568eb06bd602",
              "title": "Increments strong reference count",
              "isCorrect": true
            },
            {
              "id": "66427a25-377e-449d-953e-0929a0698ab8",
              "title": "Copies only header and data",
              "isCorrect": false
            },
            {
              "id": "e1957190-c917-4172-82ba-70d8924b9309",
              "title": "Moves data",
              "isCorrect": false
            }
          ],
          "descriptionText": "Fast increment of counter, data is not copied",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e61275b4-91f0-4510-99f1-65cbdc1d0022",
          "title": "Why is calling Rc::clone(&rc) instead of rc.clone() recommended?",
          "answers": [
            {
              "id": "08753ec2-a737-4795-b02a-bf2fd195fc7c",
              "title": "It's faster",
              "isCorrect": false
            },
            {
              "id": "286b298d-9e8c-411f-806a-1aa35d5ba287",
              "title": "It's the only way",
              "isCorrect": false
            },
            {
              "id": "8750d8e4-a694-4e2d-baec-41d223d34804",
              "title": "It's an idiom to explicitly denote \"cheap\" reference-cloning",
              "isCorrect": true
            },
            {
              "id": "b24668f5-1354-40b1-bd88-632267894ec1",
              "title": "Otherwise won't compile",
              "isCorrect": false
            }
          ],
          "descriptionText": "Signals to the reader that no deep copying occurs",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a1d3370d-1dd9-4612-a4d6-c29a75a35721",
          "title": "What does Rc::strong_count(&rc) show?",
          "answers": [
            {
              "id": "dc8fe12f-833a-4816-88b5-91c1a13a6553",
              "title": "Number of weak references",
              "isCorrect": false
            },
            {
              "id": "e433e4e3-d3fb-4eac-8325-8ca37f1eb35c",
              "title": "Number of all references",
              "isCorrect": false
            },
            {
              "id": "3cf2acf1-3c0c-43ed-9e7f-28aa17baab69",
              "title": "Number of strong references",
              "isCorrect": true
            },
            {
              "id": "4ca9baf7-c565-4a70-acd0-cf09c951f366",
              "title": "Shows nothing, deprecated",
              "isCorrect": false
            }
          ],
          "descriptionText": "Shows the count of strong references",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ac7a8c94-b72d-4131-a3cc-2d9c7a619f97",
          "title": "When will data inside Rc<T> be freed?",
          "answers": [
            {
              "id": "affa0906-99b2-4ebc-a496-f2fe7b779237",
              "title": "When strong_count == 0",
              "isCorrect": true
            },
            {
              "id": "ab858e40-2afb-4e29-be94-b0c0f8874016",
              "title": "When weak_count == 0",
              "isCorrect": false
            },
            {
              "id": "e6e553c2-4ddf-4073-9e26-1c8b2547091d",
              "title": "When strong_count == weak_count",
              "isCorrect": false
            },
            {
              "id": "6a8e4286-6ec7-45a8-afd5-cb5c84508d81",
              "title": "When both owner variables go out of scope",
              "isCorrect": false
            }
          ],
          "descriptionText": "Weak references don't prevent deallocation",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "721d61ef-ee6e-4933-b8ef-75047e3aea15",
          "title": "Can you modify data through Rc<T>?",
          "answers": [
            {
              "id": "d65d77ec-a7e6-4d5e-b768-fda4a3512b34",
              "title": "Yes, through mut rc",
              "isCorrect": false
            },
            {
              "id": "fc8e8401-62ad-4c03-b585-5bae66ef04ae",
              "title": "No, never",
              "isCorrect": false
            },
            {
              "id": "6562b865-ea08-4b5b-b56f-2ebc2bdd79c3",
              "title": "Yes, if you wrap data in RefCell<T> and use Rc<RefCell<T>>",
              "isCorrect": true
            },
            {
              "id": "c8110413-6968-4129-a4e5-2806e5019e3e",
              "title": "Yes, if you call Rc::get_mut",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rc<T> gives only immutable access; for mutation — interior mutability through RefCell",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3348cd5b-1f3d-476c-ad4a-ddc47192a2ff",
          "title": "When does Rc::get_mut(&mut rc) return Some(&mut T)?",
          "answers": [
            {
              "id": "0808b807-c689-45fc-ac37-ce1a91fdc108",
              "title": "Always",
              "isCorrect": false
            },
            {
              "id": "dfbdd373-47fd-48b2-8649-2067e42fe4bc",
              "title": "If strong references are exactly 1",
              "isCorrect": true
            },
            {
              "id": "f4764c54-e652-4085-97c8-729981c3bb05",
              "title": "If weak references are 0",
              "isCorrect": false
            },
            {
              "id": "c928c205-c281-4a50-a0c8-b277ae6f1a78",
              "title": "Never",
              "isCorrect": false
            }
          ],
          "descriptionText": "Safe mutation possible only with sole ownership",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "55b504ae-eded-4bfb-a65e-371cdbe89f47",
          "title": "What does RefCell<T> do?",
          "answers": [
            {
              "id": "3db8841f-ba75-4ecf-9de8-029bf2851a20",
              "title": "Moves borrow checking to runtime",
              "isCorrect": true
            },
            {
              "id": "9701a5a6-61cd-44a2-8acd-519fa2488237",
              "title": "Adds thread safety",
              "isCorrect": false
            },
            {
              "id": "ac09fae3-be7e-4053-a7cb-77ef0b171d65",
              "title": "Improves mutation performance",
              "isCorrect": false
            },
            {
              "id": "ff0fe647-7879-46f1-a5e0-86eb84cdc2ea",
              "title": "Guarantees no panics",
              "isCorrect": false
            }
          ],
          "descriptionText": "Compiler allows, but checks (number of Ref/RefMut) are performed at runtime",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "67efe8d9-0bf7-4ec9-aa5f-b8e56f1d8a7e",
          "title": "What will borrow() on RefCell<T> return?",
          "answers": [
            {
              "id": "313fe211-eadb-4521-b6df-5d955b8e8386",
              "title": "&T",
              "isCorrect": false
            },
            {
              "id": "6245574a-68c4-4ae9-8063-0c17700c1483",
              "title": "&mut T",
              "isCorrect": false
            },
            {
              "id": "525c3234-01b4-4258-98e6-6e54deb36614",
              "title": "Ref<T>",
              "isCorrect": true
            },
            {
              "id": "5840fc55-20cc-4a02-b309-9aaedcb089f3",
              "title": "RefMut<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "It's a smart pointer with Deref to &T",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "02457818-97e3-418a-b1b4-12928a7e9eaa",
          "title": "What will borrow_mut() return?",
          "answers": [
            {
              "id": "67b26cd5-200d-458d-bc67-a36351cde16c",
              "title": "&mut T",
              "isCorrect": false
            },
            {
              "id": "a7f4990c-ad77-49e4-9e65-3adb144a7f5e",
              "title": "RefMut<T>",
              "isCorrect": true
            },
            {
              "id": "7aa1d9dd-e3ff-4f82-819e-79c50a1dc4c4",
              "title": "Ref<T>",
              "isCorrect": false
            },
            {
              "id": "87cf0770-1afb-449c-93bf-58f879762d28",
              "title": "&T",
              "isCorrect": false
            }
          ],
          "descriptionText": "Smart pointer with DerefMut to &mut T",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b185ce18-7642-422a-906e-d4c2a326ad6f",
          "title": "What happens with two borrow_mut() in the same scope?",
          "answers": [
            {
              "id": "7b91512b-327f-4920-8f2e-aaddcb49c224",
              "title": "Compilation fails",
              "isCorrect": false
            },
            {
              "id": "a98a30c7-e51b-4633-9f9a-13a1a54b35dd",
              "title": "Program panics at runtime",
              "isCorrect": true
            },
            {
              "id": "e07e3f2b-551c-43f4-a44e-8f5b876b5b50",
              "title": "Second returns None",
              "isCorrect": false
            },
            {
              "id": "32181403-85a8-4860-813c-87833ab92c81",
              "title": "Everything's fine",
              "isCorrect": false
            }
          ],
          "descriptionText": "Violation of \"only one mutable reference\" rule — panic with BorrowMutError",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "40cde5ab-0566-4a83-8964-6c3fc102e1c5",
          "title": "Can you have borrow() and borrow_mut() active simultaneously?",
          "answers": [
            {
              "id": "7f53a87a-994d-46fd-9b1d-4508d2a16c3c",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "46341ba7-6df5-4a29-9801-f6b587bcd64f",
              "title": "Yes, if T: Sync",
              "isCorrect": false
            },
            {
              "id": "d919e9c7-426b-46b5-a91d-44d17b2f041c",
              "title": "No, leads to panic",
              "isCorrect": true
            },
            {
              "id": "523766e8-8f55-4afc-84b3-9be4716ec871",
              "title": "Depends on platform",
              "isCorrect": false
            }
          ],
          "descriptionText": "Either many Ref, or one RefMut",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "02d3df22-008c-4cb0-9fbc-f43906739a07",
          "title": "The Rc<RefCell<T>> combination provides:",
          "answers": [
            {
              "id": "b1daaa1e-8ee7-414e-b297-85a1a06f9e0e",
              "title": "Multiple owners of immutable data",
              "isCorrect": false
            },
            {
              "id": "40639f18-dcff-4437-a48b-34ee59d5b897",
              "title": "Multiple owners with mutation capability via interior mutability",
              "isCorrect": true
            },
            {
              "id": "4725537d-3cf9-47ad-b1d7-be815e33d864",
              "title": "Single owner and mutation",
              "isCorrect": false
            },
            {
              "id": "0c96c1db-6f00-4916-8b27-6a217ce8d779",
              "title": "Thread safety",
              "isCorrect": false
            }
          ],
          "descriptionText": "Combines multiple ownership with runtime-checked mutation",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d3f73963-0520-4615-8610-f2dab19fd9a4",
          "title": "What is \"interior mutability\"?",
          "answers": [
            {
              "id": "0601c8dc-7996-4205-a257-fa0bccc7d6a7",
              "title": "Mutation through unsafe always",
              "isCorrect": false
            },
            {
              "id": "9783be84-29e1-4f25-9628-8b97409cfc1b",
              "title": "Ability to change internal value with externally immutable container",
              "isCorrect": true
            },
            {
              "id": "8f7b1093-b641-4424-8032-f49e1765b77e",
              "title": "Mutation only in tests",
              "isCorrect": false
            },
            {
              "id": "2a7aba04-a8dc-41f8-afc7-511f6b6681da",
              "title": "Technique exclusively with Box<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Pattern for mutation through immutable reference",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "481e3ea2-19f9-44ed-8ae4-c6034cc49342",
          "title": "Why are \"reference cycles\" with Rc<T> dangerous?",
          "answers": [
            {
              "id": "a087c08f-9093-4185-92b1-e75c8424b7a9",
              "title": "Lead to data race",
              "isCorrect": false
            },
            {
              "id": "a649beca-7bac-458b-8d15-c05f58857a11",
              "title": "Lead to memory leak",
              "isCorrect": true
            },
            {
              "id": "cffad4e1-30e2-4c90-a42e-38bbc5217f18",
              "title": "Lead to UB",
              "isCorrect": false
            },
            {
              "id": "00b42629-34b1-47de-9fb8-2aedff0c57f4",
              "title": "Lead to double free",
              "isCorrect": false
            }
          ],
          "descriptionText": "Strong references don't drop to zero — Drop is not called",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "711b76ec-4c82-4067-aaeb-48151746e28c",
          "title": "How to avoid reference cycle in parent↔children tree?",
          "answers": [
            {
              "id": "aadc0e80-dd60-420a-b351-51af2f3815b3",
              "title": "Use Box<T>",
              "isCorrect": false
            },
            {
              "id": "72154911-7167-49c8-9b8b-7be56a0d5c44",
              "title": "Use Weak<T> for parent reference",
              "isCorrect": true
            },
            {
              "id": "25e77414-f4bd-49a3-bed2-e4baf58c35d3",
              "title": "Forbid parents",
              "isCorrect": false
            },
            {
              "id": "aaf431d6-84e7-4d27-ab89-97272d59ff6a",
              "title": "Use RefCell<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Weak reference doesn't increment strong_count",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "25bb5611-db85-4606-bc5a-04d7ad5f4714",
          "title": "What does Rc::downgrade(&rc) return?",
          "answers": [
            {
              "id": "daceb182-ee37-452f-bb2e-a1ff3901284b",
              "title": "Rc<T>",
              "isCorrect": false
            },
            {
              "id": "e9b749a9-0f00-4df6-903d-8fbfbb7f2140",
              "title": "&T",
              "isCorrect": false
            },
            {
              "id": "ceb4a133-1cd3-4c55-93aa-9639be5265ea",
              "title": "Weak<T>",
              "isCorrect": true
            },
            {
              "id": "8b99096f-7f36-429f-8548-e8e9e9036573",
              "title": "Option<Rc<T>>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Creates a weak reference",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4b27c932-31f8-4e75-bcea-5869f686572c",
          "title": "How to get Rc<T> from Weak<T>?",
          "answers": [
            {
              "id": "320cb4e3-2f64-475c-b0a1-3159d2889c3f",
              "title": "clone()",
              "isCorrect": false
            },
            {
              "id": "14f22e56-f27f-4d7e-94e1-2ae7df841231",
              "title": "upgrade()",
              "isCorrect": true
            },
            {
              "id": "ec6f794b-d033-4dc4-8727-c4cb2a0bfeaf",
              "title": "try_clone()",
              "isCorrect": false
            },
            {
              "id": "213bdf4e-735c-472a-b75e-72a89160fcae",
              "title": "as_rc()",
              "isCorrect": false
            }
          ],
          "descriptionText": "upgrade() → Option<Rc<T>>, if object still alive",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fc05d0f9-166f-4dca-917a-3fc88927b5ab",
          "title": "When does Weak<T> stop being a valid reference?",
          "answers": [
            {
              "id": "fa982e9c-3213-468f-8130-64fb15575fa9",
              "title": "When weak_count == 0",
              "isCorrect": false
            },
            {
              "id": "ef7f053c-ba29-4fac-ac41-fb2ccab83da9",
              "title": "When strong_count == 0",
              "isCorrect": true
            },
            {
              "id": "f5c110f7-0756-4dad-b953-cc6f3367c9e3",
              "title": "When both variables go out of scope",
              "isCorrect": false
            },
            {
              "id": "e20b87fc-c66c-4401-bf07-1833f462d4d7",
              "title": "Never",
              "isCorrect": false
            }
          ],
          "descriptionText": "When strong_count == 0 data is freed; upgrade() returns None",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a41227df-c5e4-4daa-9dce-b94fc9cc6009",
          "title": "What does Rc::weak_count(&rc) show?",
          "answers": [
            {
              "id": "a40e77e3-b692-4e8b-9fb5-969213e658ab",
              "title": "Number of weak references",
              "isCorrect": true
            },
            {
              "id": "28817575-cb0b-4954-95c2-370bb45c6aa0",
              "title": "Number of strong references",
              "isCorrect": false
            },
            {
              "id": "fdeff29a-478d-4f0c-987d-65e2fa23a98a",
              "title": "Total number of references",
              "isCorrect": false
            },
            {
              "id": "b3dc5baa-c78a-4f26-ab32-b5e19138b701",
              "title": "Not publicly available",
              "isCorrect": false
            }
          ],
          "descriptionText": "Shows weak reference count",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0bd00f36-dfb6-4795-8044-d0e567d62a48",
          "title": "Can Rc<T> be made thread-safe?",
          "answers": [
            {
              "id": "1b4b9074-510e-4546-ada8-68a231ccfc7a",
              "title": "Yes, with Mutex<T>",
              "isCorrect": false
            },
            {
              "id": "da121233-2558-4d9e-b64b-d00d9b12a9f3",
              "title": "Yes, by using Arc<T> instead of Rc<T>",
              "isCorrect": true
            },
            {
              "id": "00fbf506-fb2e-4f9b-b8ed-f4d8e75734d4",
              "title": "Yes, through RefCell<T>",
              "isCorrect": false
            },
            {
              "id": "a88332f9-973d-444c-9429-8c82a719bf2d",
              "title": "No",
              "isCorrect": false
            }
          ],
          "descriptionText": "For multithreading, Arc<T> is used (Chapter 16)",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "933348eb-0637-4416-bfda-4e5218876e78",
          "title": "Why couldn't Vec<String> be stored in mock object (Messenger example) without RefCell?",
          "answers": [
            {
              "id": "a317268d-f6b2-4782-a278-23fb05b4658c",
              "title": "Cannot allocate in tests",
              "isCorrect": false
            },
            {
              "id": "46b7c94b-eece-44c2-95e9-958ea9539f5f",
              "title": "Method send(&self, ...) takes &self, but mutation requires &mut self",
              "isCorrect": true
            },
            {
              "id": "f77a5467-14c2-4f45-a32c-056c92728cdd",
              "title": "Vec is not Send",
              "isCorrect": false
            },
            {
              "id": "3881034b-2846-43dc-a891-0183bb23b72b",
              "title": "Vec is not Sync",
              "isCorrect": false
            }
          ],
          "descriptionText": "Interior mutability through RefCell allows mutation with &self",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bc90951d-7689-439f-9905-1cf954ef507d",
          "title": "What happens if you call two borrow_mut() in a row in mock object?",
          "answers": [
            {
              "id": "fa9eae80-3970-4136-a905-3c4795f8379a",
              "title": "Compilation breaks",
              "isCorrect": false
            },
            {
              "id": "b0366369-a6d8-43ae-be8f-150aaf0929f8",
              "title": "panic! triggers",
              "isCorrect": true
            },
            {
              "id": "4c794c70-cbcd-40f3-8d48-f3edbf8d2559",
              "title": "Returns two independent RefMut",
              "isCorrect": false
            },
            {
              "id": "9d1063cb-ac1e-4c60-8d2a-44882aac68e5",
              "title": "Copies data",
              "isCorrect": false
            }
          ],
          "descriptionText": "Runtime borrowing rules violation",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3edbf37e-403f-4573-8921-0e0d367bcb72",
          "title": "Is Box<T> a \"thin\" pointer?",
          "answers": [
            {
              "id": "3b926750-332a-4865-bf75-29b467d66df0",
              "title": "Yes",
              "isCorrect": true
            },
            {
              "id": "0552e16d-1aa2-46fe-b3a3-2b8e07809a49",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "fa29c9fc-47b8-41ba-b6bd-6bfc4644e159",
              "title": "Depends on T",
              "isCorrect": false
            },
            {
              "id": "2c7a308f-42b8-47f7-be68-25276efe9deb",
              "title": "Only in nightly",
              "isCorrect": false
            }
          ],
          "descriptionText": "Stores only address (plus metadata for DST), size is known",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ce947b9e-48b9-44f3-af93-66b06177c30f",
          "title": "What is Box<dyn Trait> useful for?",
          "answers": [
            {
              "id": "7874c788-ce0a-4cb2-8385-0ddb159b1164",
              "title": "For generics",
              "isCorrect": false
            },
            {
              "id": "79bec931-e0f9-46ae-8a25-2e2b4e35c753",
              "title": "For storing values of concrete type",
              "isCorrect": false
            },
            {
              "id": "94d583dd-b72e-4bb0-89f8-79081804e1fb",
              "title": "For dynamic dispatch via trait object",
              "isCorrect": true
            },
            {
              "id": "53a8a001-c061-48b8-92dc-0f303741146c",
              "title": "To speed up compilation",
              "isCorrect": false
            }
          ],
          "descriptionText": "Enables trait objects for dynamic dispatch",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "df9c8ede-0e4f-4c75-892b-81b62188058c",
          "title": "Can you dereference Box<T> with * operator?",
          "answers": [
            {
              "id": "8c044244-a55f-4f0d-a27b-6e4615185584",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "ea7d9078-395a-42de-97fd-cd77939829d7",
              "title": "Yes, thanks to Deref",
              "isCorrect": true
            },
            {
              "id": "9090f140-02c1-4854-a848-6352bed1e223",
              "title": "Only if T: Copy",
              "isCorrect": false
            },
            {
              "id": "6531544e-07b7-47df-b0a2-252839ec9572",
              "title": "Only through unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Box implements Deref",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c36397f4-5c1b-40e3-8df9-6592b4b06f6a",
          "title": "What happens if you panic in Drop::drop?",
          "answers": [
            {
              "id": "23fdb8c2-d48b-4dbf-a2a6-90f6e2371cb3",
              "title": "Always UB",
              "isCorrect": false
            },
            {
              "id": "21886302-58a1-43cd-b964-02762a6107e2",
              "title": "Allowed, but may lead to double panic and abort",
              "isCorrect": true
            },
            {
              "id": "3e165a5e-3cb2-49f4-8893-c21f4bf6b57c",
              "title": "Ignored",
              "isCorrect": false
            },
            {
              "id": "47d15e44-e2df-4821-a25e-2fcd9c58a330",
              "title": "Forbidden by compiler",
              "isCorrect": false
            }
          ],
          "descriptionText": "Panic in drop is dangerous during ongoing panic (double panic)",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "80fafbde-7e90-4a54-b318-af1758f2176e",
          "title": "What doesn't RefCell<T> do?",
          "answers": [
            {
              "id": "df5ffb31-037b-49db-93b4-04f6fcb2c18d",
              "title": "Allows mutation with &self",
              "isCorrect": false
            },
            {
              "id": "007e4ce5-50f2-45f1-8fdd-f5fce5c024d7",
              "title": "Makes type thread-safe",
              "isCorrect": true
            },
            {
              "id": "f7cadcef-36b3-4429-ac73-0869c055d736",
              "title": "Checks borrows at runtime",
              "isCorrect": false
            },
            {
              "id": "74ac02ef-2f54-4f77-8d43-ab69e72f2de3",
              "title": "Returns Ref/RefMut",
              "isCorrect": false
            }
          ],
          "descriptionText": "RefCell is not thread-safe",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1d456b61-b2b7-44cf-8653-2673b5d183d5",
          "title": "Why can &String be coerced to &str?",
          "answers": [
            {
              "id": "90080a0e-5aca-41e7-871f-a70fff04ff37",
              "title": "Special compiler magic",
              "isCorrect": false
            },
            {
              "id": "b93fccf0-035e-483b-a868-54c5802b7480",
              "title": "Because String: Deref<Target = str>",
              "isCorrect": true
            },
            {
              "id": "2c9af1db-d954-4cb2-9a79-146f9f7dbb6e",
              "title": "Because str: Deref<String>",
              "isCorrect": false
            },
            {
              "id": "ad73fd8d-108e-4ac3-a44e-2ec3b7f4f401",
              "title": "Because String: AsRef<str> and it's automatic",
              "isCorrect": false
            }
          ],
          "descriptionText": "Deref coercion from String to str",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d69117d8-004d-49a5-a8a3-805dc7242a18",
          "title": "What is a \"recursive type with known size\"?",
          "answers": [
            {
              "id": "1c4440d1-1434-4510-8348-f83e3d344ddc",
              "title": "Type where all variants are equal in size",
              "isCorrect": false
            },
            {
              "id": "0e6353fd-b9a3-4672-8e7d-e0f8fa5ae78f",
              "title": "Recursive type where recursion goes through pointer (Box/Rc/&)",
              "isCorrect": true
            },
            {
              "id": "8397f6d4-9484-41c7-8691-fc43a176ec0e",
              "title": "Type that doesn't use Box",
              "isCorrect": false
            },
            {
              "id": "832fbf21-9d39-4d01-b59e-4f64e761bdbe",
              "title": "Type whose size is computed at runtime",
              "isCorrect": false
            }
          ],
          "descriptionText": "Indirection provides known size",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dee4381c-4884-47d6-bf53-e324d74f68d3",
          "title": "What happens when printing cyclic Rc structure without protection?",
          "answers": [
            {
              "id": "70ba8f7b-ad91-43f6-b275-42666237eda7",
              "title": "Everything prints",
              "isCorrect": false
            },
            {
              "id": "64c70ce4-df40-40a0-a586-99941ee31ce9",
              "title": "Compiler forbids",
              "isCorrect": false
            },
            {
              "id": "ee9a1b45-66dc-4bdb-b044-41654974bd14",
              "title": "Possible stack overflow (infinite recursion)",
              "isCorrect": true
            },
            {
              "id": "bdbda159-f18c-4f93-b332-df6819fac494",
              "title": "Returns None",
              "isCorrect": false
            }
          ],
          "descriptionText": "Infinite cycle causes stack overflow",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "197bd1b1-aee9-4cc7-b8e0-643524317903",
          "title": "When is it appropriate to call drop(x) manually?",
          "answers": [
            {
              "id": "591fa44a-3701-4fac-a56c-8db10a36c811",
              "title": "Never",
              "isCorrect": false
            },
            {
              "id": "97c867e4-822a-4402-83c9-3dd46405a443",
              "title": "When need to free resource before end of scope (e.g., mutex)",
              "isCorrect": true
            },
            {
              "id": "ceaba611-19ea-43aa-a458-c0a578a25076",
              "title": "To speed up program",
              "isCorrect": false
            },
            {
              "id": "45a1e897-599b-4307-9538-5d74c14cdd4e",
              "title": "To decrease Rc::strong_count",
              "isCorrect": false
            }
          ],
          "descriptionText": "Early cleanup when needed",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6c8c28f3-f65a-4d57-bbab-8231521e3638",
          "title": "What does Weak<T> store?",
          "answers": [
            {
              "id": "5f59b32d-3d47-44cc-a886-fad47f933c1a",
              "title": "Strong reference",
              "isCorrect": false
            },
            {
              "id": "eb4ac4d7-f4d9-435a-8272-77af5eb6ae1c",
              "title": "Weak reference, not preventing deallocation",
              "isCorrect": true
            },
            {
              "id": "a8bd4e39-6109-4716-ac64-3533382fea4e",
              "title": "Copy of data",
              "isCorrect": false
            },
            {
              "id": "8af6459b-93d2-4a8a-9a76-97b502498840",
              "title": "Offset for ZST",
              "isCorrect": false
            }
          ],
          "descriptionText": "Non-owning reference",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b88edddd-d0e3-4fe1-8fad-571df638a04a",
          "title": "How to check if object pointed to by Weak<T> is alive?",
          "answers": [
            {
              "id": "c1002034-e571-44eb-8d0d-d9cf0b73a436",
              "title": "is_alive()",
              "isCorrect": false
            },
            {
              "id": "62edb903-de53-4503-8f51-5d42903ef667",
              "title": "try()",
              "isCorrect": false
            },
            {
              "id": "9aab2fa9-1328-4247-b5d8-375d05288833",
              "title": "upgrade().is_some()",
              "isCorrect": true
            },
            {
              "id": "745c69f0-d281-45d4-a4f3-7bf300d98375",
              "title": "alive()",
              "isCorrect": false
            }
          ],
          "descriptionText": "upgrade() returns Option",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e75dca19-b22d-40c6-b84e-620e74b96295",
          "title": "How does Rc<T> differ from Box<T>?",
          "answers": [
            {
              "id": "29d02975-656d-4802-9a5e-aa4981cb62b9",
              "title": "Rc is single owner, Box is shared",
              "isCorrect": false
            },
            {
              "id": "febc5827-0f76-4fe4-891d-74cea696af66",
              "title": "Rc is shared owner, Box is single",
              "isCorrect": true
            },
            {
              "id": "a2b2161d-c893-4882-a78d-cb7f74ca5c3b",
              "title": "Both are shared owners",
              "isCorrect": false
            },
            {
              "id": "70cc4881-794c-46c5-807f-224c659de373",
              "title": "Both are single owners",
              "isCorrect": false
            }
          ],
          "descriptionText": "Different ownership models",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4506c015-24b1-4abf-82b6-48e7573f5326",
          "title": "What happens with RefMut<T> if you try to take borrow() in parallel?",
          "answers": [
            {
              "id": "b397b8e4-cbef-4246-944e-4c9b285580a3",
              "title": "Returns another RefMut",
              "isCorrect": false
            },
            {
              "id": "df993d76-4e1e-47d0-8645-dd826ede6cf4",
              "title": "Returns Ref",
              "isCorrect": false
            },
            {
              "id": "bbb38eda-e945-4314-8507-563c4845896a",
              "title": "Runtime panic",
              "isCorrect": true
            },
            {
              "id": "c97c0bd3-d04c-41d6-9177-14aa58846576",
              "title": "Compiles, but UB",
              "isCorrect": false
            }
          ],
          "descriptionText": "Borrowing rules enforced at runtime",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2a745a26-9146-4a2e-986d-12ceba6bc840",
          "title": "Why is RefCell<T> only for single-threaded code?",
          "answers": [
            {
              "id": "5f395667-7857-4f39-be9e-12670f845b76",
              "title": "Doesn't implement Sync/Send",
              "isCorrect": true
            },
            {
              "id": "c225d91c-06cc-40a2-9a23-61da17520b5f",
              "title": "Because it's slow",
              "isCorrect": false
            },
            {
              "id": "8699d260-058a-4380-922a-ac018570f61a",
              "title": "Requires unsafe",
              "isCorrect": false
            },
            {
              "id": "74f1b203-f6d3-40b9-bc52-56f85ac5a2c9",
              "title": "Because it's deprecated",
              "isCorrect": false
            }
          ],
          "descriptionText": "Not thread-safe by design",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a4a11bd4-637d-4d64-a223-dbcc1de425ad",
          "title": "What properties does Rc<RefCell<T>> provide?",
          "answers": [
            {
              "id": "5f29fa70-580e-4f60-bc8e-51f62816346d",
              "title": "Multiple mutation without checks",
              "isCorrect": false
            },
            {
              "id": "4c639797-ea0c-4428-a4f7-d21f0418524b",
              "title": "Multiple mutation with compile-time checks",
              "isCorrect": false
            },
            {
              "id": "a2e6a0e8-0f51-4445-8ded-3dc00dfcb8bc",
              "title": "Multiple ownership + runtime mutation checks",
              "isCorrect": true
            },
            {
              "id": "249c51d5-afd0-4116-a0f9-25a82982ae2e",
              "title": "Multiple ownership + thread safety",
              "isCorrect": false
            }
          ],
          "descriptionText": "Shared ownership with interior mutability",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1d20c380-90b7-4aa7-b7a9-2f34ea90b6dd",
          "title": "What happens if last Rc<T> is destroyed but Weak<T> remain?",
          "answers": [
            {
              "id": "cf3cec0a-aa49-46cc-aaa8-6c916d91d3bc",
              "title": "Data lives until last Weak",
              "isCorrect": false
            },
            {
              "id": "49631448-099f-4af2-8451-251a9a48c7e7",
              "title": "Data freed, Weak::upgrade() returns None",
              "isCorrect": true
            },
            {
              "id": "18bad1a8-dcc2-4a6a-8cf7-61ad34a5c370",
              "title": "Data not freed",
              "isCorrect": false
            },
            {
              "id": "8bac9322-4fe0-4c03-9e0d-fe1dfca6a85f",
              "title": "Panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "Weak doesn't prevent deallocation",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0ce69f4b-f02c-4015-8ca0-f6ab4d5ee360",
          "title": "Why are \"just references &T\" in recursive type inconvenient?",
          "answers": [
            {
              "id": "aa68bb92-16be-4225-b8c9-ef4bff3acc62",
              "title": "Always slower",
              "isCorrect": false
            },
            {
              "id": "da8f3db2-ccfe-48d2-9da5-296aeb67eae0",
              "title": "Require lifetimes and often don't express needed ownership",
              "isCorrect": true
            },
            {
              "id": "d5b2d71d-e7c6-4a2d-8e8d-bf910d811f2d",
              "title": "Forbidden in enum",
              "isCorrect": false
            },
            {
              "id": "6aa991c0-0de2-4e3b-a292-d9ba08326466",
              "title": "Don't work with Vec",
              "isCorrect": false
            }
          ],
          "descriptionText": "Lifetime and ownership complications",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2ab79164-d0bd-4de9-b19b-aaf3b8828efa",
          "title": "What is #[derive(Debug)] useful for in list/tree examples?",
          "answers": [
            {
              "id": "70a1af0e-74d9-4799-932c-07c8255f60b0",
              "title": "For cloning",
              "isCorrect": false
            },
            {
              "id": "5310dee7-7cd6-4da7-a0fb-6232faf718c2",
              "title": "For automatic Drop",
              "isCorrect": false
            },
            {
              "id": "ace7f76f-fe85-4d17-8c80-10cd49314118",
              "title": "For convenient debug printing of structures",
              "isCorrect": true
            },
            {
              "id": "b2a2d30c-dceb-4b6d-b88c-7eebee26d78f",
              "title": "For optimizations",
              "isCorrect": false
            }
          ],
          "descriptionText": "Enables debug formatting",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4e6459ab-2243-4417-a5dd-60da87c4ed0e",
          "title": "Why can Rc + RefCell lead to leaks?",
          "answers": [
            {
              "id": "b21a5feb-44bc-4e1d-97a9-5fc32596bcb1",
              "title": "Because of RefCell",
              "isCorrect": false
            },
            {
              "id": "3b4ae56d-d3f0-4634-816d-437c6b2570bb",
              "title": "Because of panics",
              "isCorrect": false
            },
            {
              "id": "615d1c30-db8f-4048-92b2-1f6db3ceaf91",
              "title": "Because of strong reference cycles in Rc",
              "isCorrect": true
            },
            {
              "id": "ceec1a7c-a30b-4f60-a394-ea4a128af973",
              "title": "Because of Deref",
              "isCorrect": false
            }
          ],
          "descriptionText": "Cycles prevent reference counts reaching zero",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d8c67868-bf9e-4d91-8e1c-8cf60fce4f42",
          "title": "How to break cycle in Rc-graph?",
          "answers": [
            {
              "id": "142d9f1c-a5f8-4cd4-814d-bebbd6d9cf26",
              "title": "Use Box instead of Rc",
              "isCorrect": false
            },
            {
              "id": "23ce21ab-0566-42cc-bc39-00aec0e59a7c",
              "title": "Use Weak in edges where ownership not required",
              "isCorrect": true
            },
            {
              "id": "f7f9bb67-7f48-4037-94ad-758c4d247fea",
              "title": "Switch to RefCell",
              "isCorrect": false
            },
            {
              "id": "1d7298c8-9eca-45ca-8795-0a4defda7efe",
              "title": "Forbidden in Rust",
              "isCorrect": false
            }
          ],
          "descriptionText": "Weak breaks ownership cycles",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bc7b7728-3280-4cf6-9216-bb89c9eb4a89",
          "title": "What's true about Box<T> and performance?",
          "answers": [
            {
              "id": "9b8486c8-c628-4b3d-a391-8d559969bdeb",
              "title": "Always faster than stack",
              "isCorrect": false
            },
            {
              "id": "7dc5b720-0de8-4d1c-8ee1-4ff736dd3f02",
              "title": "No overhead except heap indirection",
              "isCorrect": true
            },
            {
              "id": "d74d9211-0b27-4409-90c6-28a8df624393",
              "title": "10x slower everywhere",
              "isCorrect": false
            },
            {
              "id": "f37b6b37-5415-4664-b66b-1ce052e5db49",
              "title": "Significantly slows compilation",
              "isCorrect": false
            }
          ],
          "descriptionText": "Minimal overhead design",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9971f0ea-4f1b-464c-9f89-09efaef5ca11",
          "title": "Can you store unsized types (DST) in Box?",
          "answers": [
            {
              "id": "5938cea9-4cd5-47ca-ae31-da51a7f4f707",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "97a00cb3-2cda-4967-a3b0-814b06a11332",
              "title": "Yes, e.g. Box<str> or Box<[T]>",
              "isCorrect": true
            },
            {
              "id": "b5ecdf72-31d4-4796-bde4-f73cae4b97ba",
              "title": "Only in nightly",
              "isCorrect": false
            },
            {
              "id": "e5b08bf6-ae11-4341-b6df-488d8f8508c0",
              "title": "Only through unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Box supports dynamically sized types",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "741dc24f-11cc-40d1-b1dc-f77c03e08289",
          "title": "Why shouldn't you call drop in Drop::drop on same object?",
          "answers": [
            {
              "id": "bde6365e-b08d-44ec-9265-b2ebcc56f769",
              "title": "It speeds up",
              "isCorrect": false
            },
            {
              "id": "efa694fe-df69-44df-a55b-f8d79fc89156",
              "title": "Leads to double destruction/panic",
              "isCorrect": true
            },
            {
              "id": "793d87bd-80e3-456c-b284-8a592e84a066",
              "title": "Requires unsafe",
              "isCorrect": false
            },
            {
              "id": "8a843f84-3d00-4cc7-902f-224cd32e0de7",
              "title": "Meaningless — no such API",
              "isCorrect": false
            }
          ],
          "descriptionText": "Double free prevention",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3d3bae0a-ef5e-4176-9a69-3c08611ff892",
          "title": "What makes Ref<T> useful?",
          "answers": [
            {
              "id": "589848b5-2a34-4cc9-a8a1-1c793c423b27",
              "title": "It's &T with borrow counting",
              "isCorrect": true
            },
            {
              "id": "a1101602-bedc-4edf-9b37-75b40b5a3906",
              "title": "It's Rc<T>",
              "isCorrect": false
            },
            {
              "id": "5c1cbf98-c5ee-4076-8831-d379cb4853f1",
              "title": "It's Box<T>",
              "isCorrect": false
            },
            {
              "id": "0bda5408-f574-4a5b-8ac5-77a3f6658d0d",
              "title": "It's Weak<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Runtime-checked reference",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "696bab81-689d-48c0-bf89-a17c7924a362",
          "title": "What if Ref<T> hasn't left scope and we take borrow_mut()?",
          "answers": [
            {
              "id": "54aeb932-2623-4523-a55f-5513ddbf2c0b",
              "title": "Returns Some",
              "isCorrect": false
            },
            {
              "id": "4cd15cf4-f2be-4cc0-a4b1-f22d1b7a3c12",
              "title": "Will panic! with BorrowMutError",
              "isCorrect": true
            },
            {
              "id": "bbda8b48-357c-4d7c-a336-ddee5e26c257",
              "title": "Compilation fails",
              "isCorrect": false
            },
            {
              "id": "40efcb7d-0b58-4e43-ab04-48253f104f83",
              "title": "Implicit drop occurs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Runtime borrow check violation",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f24d5c1d-e7c4-4638-862a-4c6dc42899de",
          "title": "Why doesn't Rc<T> have method to always get &mut T?",
          "answers": [
            {
              "id": "2e5c23a2-907f-4d47-aafa-5d9c960d8bfb",
              "title": "There is — as_mut()",
              "isCorrect": false
            },
            {
              "id": "39e1fb9a-620e-4a7e-9dbb-338435da6214",
              "title": "There is — get_unchecked_mut",
              "isCorrect": false
            },
            {
              "id": "6d08b832-c09b-4e27-8450-cf8039cdc81a",
              "title": "Because there can be multiple owners, and unique mutation isn't safe",
              "isCorrect": true
            },
            {
              "id": "96ad02bc-cbea-484e-afa2-cc591cfc1d4d",
              "title": "Because T may not be Copy",
              "isCorrect": false
            }
          ],
          "descriptionText": "Shared ownership prevents exclusive mutation",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f6aa6215-7e40-4232-88b1-1f64231256da",
          "title": "What does Cons(Rc<RefCell<i32>>, Rc<List>) mean for mutation?",
          "answers": [
            {
              "id": "62baa66e-9eaa-4117-8ddf-d95fa5e67ee5",
              "title": "Cannot mutate",
              "isCorrect": false
            },
            {
              "id": "1d14bab3-4205-4264-8652-4c4793d75a2e",
              "title": "Can only mutate tail",
              "isCorrect": false
            },
            {
              "id": "54c9ff79-5664-4c22-9983-9568f9347ce7",
              "title": "Can mutate number inside list via borrow_mut()",
              "isCorrect": true
            },
            {
              "id": "a0f243b3-18be-4478-9ac5-d3a4c6e697ad",
              "title": "Can only mutate through unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Interior mutability pattern in action",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "74cf0c49-97c3-4774-8224-f1b1f2ef2462",
          "title": "What's the main advantage of smart pointers in Rust?",
          "answers": [
            {
              "id": "d16b10b4-b0ce-402b-ad18-d6aa67657bd6",
              "title": "Garbage collector",
              "isCorrect": false
            },
            {
              "id": "faa2cd00-8348-4c51-b7f3-f7b1b8046ff3",
              "title": "Zero-cost abstractions when used correctly",
              "isCorrect": true
            },
            {
              "id": "a253c969-8f1e-4295-95a8-bf5d9ae6184e",
              "title": "Automatic unsafe",
              "isCorrect": false
            },
            {
              "id": "4a2dcd4c-5f62-4dda-befb-fecaa8f511bc",
              "title": "Ability to bypass borrow checker everywhere",
              "isCorrect": false
            }
          ],
          "descriptionText": "For example, iterators/Box/Rc when properly applied don't add overhead beyond necessary",
          "descriptionLink": "smart_pointers_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "f2b103cf-6476-4024-90ee-51ff8198620f",
      "theme": "Fearless Concurrency",
      "priority": 12,
      "questions": [
        {
          "id": "1e5ce079-8955-43f0-ae23-23a29b504768",
          "title": "What is a \"thread\" in the context of Rust (standard library)?",
          "answers": [
            {
              "id": "5178dcb8-47a9-4e3f-a7e9-aead50e93980",
              "title": "Lightweight green thread of runtime",
              "isCorrect": false
            },
            {
              "id": "4b5bd868-35e2-4b6a-94db-1ae1faa51ac3",
              "title": "1:1 correspondence with OS thread",
              "isCorrect": true
            },
            {
              "id": "9e566916-745c-48f5-86a8-916f09529f90",
              "title": "OS process",
              "isCorrect": false
            },
            {
              "id": "e1933486-9f00-4be7-a9c7-52f4572ec11b",
              "title": "Asynchronous task",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust standard library uses 1:1 model (OS thread per thread)",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cd0653e1-3b7f-4e72-aaab-0781b0dcff45",
          "title": "What does thread::spawn do?",
          "answers": [
            {
              "id": "1a1fe6c4-9f85-42c8-af1a-d06a113d0906",
              "title": "Starts a new process",
              "isCorrect": false
            },
            {
              "id": "c5101670-d23c-4382-b10f-63ef47b89546",
              "title": "Creates a new thread and returns JoinHandle<T>",
              "isCorrect": true
            },
            {
              "id": "ef8a3d26-8b99-49bf-9442-f60135b1f451",
              "title": "Blocks current thread",
              "isCorrect": false
            },
            {
              "id": "91dae75a-c7d4-48d3-b17e-1e0f17a1ada7",
              "title": "Returns Result",
              "isCorrect": false
            }
          ],
          "descriptionText": "spawn accepts a closure and returns a handle for joining",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "175db9fb-39a1-414e-822e-a296a9f3d23b",
          "title": "What is JoinHandle::join for?",
          "answers": [
            {
              "id": "aafb0ffa-c3fe-41f0-89e4-72d34f68d07d",
              "title": "To kill the thread",
              "isCorrect": false
            },
            {
              "id": "46787142-4ece-48a2-ad79-ff43024eeb84",
              "title": "To wait for thread completion and get result",
              "isCorrect": true
            },
            {
              "id": "84fd6454-50f5-48ef-b97e-f48ed3a92e63",
              "title": "To \"detach\" the thread",
              "isCorrect": false
            },
            {
              "id": "c30e0065-c82a-4244-9479-123d42bf1254",
              "title": "To increase thread priority",
              "isCorrect": false
            }
          ],
          "descriptionText": "join() blocks calling thread until spawned one finishes",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e575dfbf-a182-4ad7-bf2b-bd06cc8c3784",
          "title": "What happens to child threads if main thread exits?",
          "answers": [
            {
              "id": "e9731c0a-9758-4f40-94b0-f83fb6a30670",
              "title": "They continue running",
              "isCorrect": false
            },
            {
              "id": "652d390a-5540-4289-8f83-ac5782ff6be3",
              "title": "Runtime takes over their work",
              "isCorrect": false
            },
            {
              "id": "59c12b7f-8de3-4646-9d8a-fcd355c448fa",
              "title": "They are terminated prematurely",
              "isCorrect": true
            },
            {
              "id": "f6d5fa28-ab63-405e-bb17-d9a33875fedb",
              "title": "Nothing, behavior is undefined",
              "isCorrect": false
            }
          ],
          "descriptionText": "Child threads are terminated when main exits",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "90a7aaf5-8be6-4ead-b88a-db85b5561dbc",
          "title": "Why is the move keyword often used in closures passed to spawn?",
          "answers": [
            {
              "id": "82fc0dcc-4a84-4827-bdc5-f0c94a4aecff",
              "title": "To speed up execution",
              "isCorrect": false
            },
            {
              "id": "733c60c5-037d-4681-a048-14339beb97f8",
              "title": "To make closure capture values by reference",
              "isCorrect": false
            },
            {
              "id": "9d421421-9cca-4eaf-851e-e9fcdc89a0d2",
              "title": "To make closure move ownership of captured values into thread",
              "isCorrect": true
            },
            {
              "id": "2c41322a-27c5-48e9-99fa-8b2490cc1b86",
              "title": "To make closure FnMut",
              "isCorrect": false
            }
          ],
          "descriptionText": "move transfers ownership into the thread",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "716e9464-9996-44e8-8910-5c717148a38b",
          "title": "Why might code using borrows from outer scope without move not compile?",
          "answers": [
            {
              "id": "ff2bd87b-2528-4d3a-a184-8bc6fa81a9e9",
              "title": "Compiler doesn't support references in threads",
              "isCorrect": false
            },
            {
              "id": "9980ef00-d816-4706-8705-5ea2bb630e2c",
              "title": "'static is required for data used by thread",
              "isCorrect": true
            },
            {
              "id": "4a2ad5bc-518e-4a85-b5a8-3a3c46224d47",
              "title": "Always need Arc",
              "isCorrect": false
            },
            {
              "id": "da79a3d5-f3a1-48ac-84f7-9adb1a92b197",
              "title": "References are forbidden in Rust",
              "isCorrect": false
            }
          ],
          "descriptionText": "Thread can outlive current scope, so captured data must be 'static or moved inside",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2c721f02-4646-4346-bc32-2c6b7965a005",
          "title": "Channels std::sync::mpsc are:",
          "answers": [
            {
              "id": "fc0ee09f-ba16-454c-9bef-96dec034006e",
              "title": "Multiple consumer, single producer",
              "isCorrect": false
            },
            {
              "id": "8fdbf13b-c1b1-4425-b2a1-1428fd96a627",
              "title": "Single consumer, multiple producers",
              "isCorrect": true
            },
            {
              "id": "e9e1fb56-cab0-4af7-9bfd-d5f5a35af467",
              "title": "Multiple consumer, multiple producer",
              "isCorrect": false
            },
            {
              "id": "8cc91412-0157-4833-8ee7-34775a54bf16",
              "title": "Only single producer and consumer",
              "isCorrect": false
            }
          ],
          "descriptionText": "mpsc stands for multiple producer, single consumer",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5aff838b-73b0-47f6-b84d-445a6099ca16",
          "title": "What does mpsc::channel() return?",
          "answers": [
            {
              "id": "a8096d02-db30-42ce-8a33-6f4dac212e6b",
              "title": "(Sender<T>, Receiver<T>)",
              "isCorrect": true
            },
            {
              "id": "d7263331-bfb9-4155-b7dd-f0485777b96e",
              "title": "Result<(Sender<T>, Receiver<T>)>",
              "isCorrect": false
            },
            {
              "id": "c5f79a67-f86c-4de4-b073-7e3973ea7fec",
              "title": "Arc<Mutex<T>>",
              "isCorrect": false
            },
            {
              "id": "a40b13ed-ac91-40e5-ba17-ec6d01a70363",
              "title": "JoinHandle<(Sender<T>, Receiver<T>)>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Returns tuple of sender and receiver",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "988ee3bd-c949-4b8f-9a6a-6ab73b804cc6",
          "title": "What does Sender::send(value) do in terms of ownership?",
          "answers": [
            {
              "id": "05606433-a474-47c5-a38b-496179084f32",
              "title": "Copies the value",
              "isCorrect": false
            },
            {
              "id": "357ae074-9661-462e-a147-bffacb353d98",
              "title": "Moves the value to another thread",
              "isCorrect": true
            },
            {
              "id": "4b5cd763-cb2c-47fc-b894-ff4f51e54f73",
              "title": "Borrows the value",
              "isCorrect": false
            },
            {
              "id": "64d7adfc-60e0-49e6-a581-5fd3790ff049",
              "title": "None of these",
              "isCorrect": false
            }
          ],
          "descriptionText": "send transfers ownership across threads",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "93901d65-226f-46d1-bcdc-13e3248f00ba",
          "title": "How does recv() differ from try_recv() on Receiver?",
          "answers": [
            {
              "id": "94557838-7818-45e7-996c-8823f8662f14",
              "title": "recv is non-blocking, try_recv is blocking",
              "isCorrect": false
            },
            {
              "id": "2979ff04-c439-45a0-b10a-25930c7a8c6b",
              "title": "Both block",
              "isCorrect": false
            },
            {
              "id": "f28cc53e-3c79-4578-a909-3b67048688d4",
              "title": "recv blocks, try_recv returns immediately",
              "isCorrect": true
            },
            {
              "id": "b56de67a-e0ba-48a5-865d-9a6298ff1c86",
              "title": "Both are non-blocking",
              "isCorrect": false
            }
          ],
          "descriptionText": "recv waits, try_recv doesn't",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "297a621a-d133-4a0b-99df-3d918b38841a",
          "title": "Can you have multiple senders (Sender) for one receiver (Receiver)?",
          "answers": [
            {
              "id": "d4579121-c686-414d-a6ed-6d80f53c10d6",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "6ccf4a42-3157-4757-81f5-2d9579708a22",
              "title": "Yes, via clone() of sender",
              "isCorrect": true
            },
            {
              "id": "feb10a72-1332-43a0-81c0-e0430b4335ae",
              "title": "Only through Arc<Sender<_>>",
              "isCorrect": false
            },
            {
              "id": "15a6e5a2-241d-4883-9aa8-b0f4cf26d647",
              "title": "Only in nightly",
              "isCorrect": false
            }
          ],
          "descriptionText": "Clone sender for multiple producers",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "55edc162-b0a1-4da4-9b7e-f4366fc89aee",
          "title": "What happens when sending on a channel if receiver is already closed?",
          "answers": [
            {
              "id": "6ecba7b2-a322-4c83-a989-68f755551ff2",
              "title": "Blocks forever",
              "isCorrect": false
            },
            {
              "id": "43067137-c32a-45a5-a10c-05b16ef26e9f",
              "title": "Process crashes",
              "isCorrect": false
            },
            {
              "id": "e8b176bd-e0dc-4bdf-92ca-88e4b5cb36ae",
              "title": "send returns error",
              "isCorrect": true
            },
            {
              "id": "006cb1ec-13c1-4147-ab77-3c6a4a5fcbbb",
              "title": "Message is lost without error",
              "isCorrect": false
            }
          ],
          "descriptionText": "send returns Err when receiver dropped",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "68f8e6d2-a73f-4aa3-ba66-27794d68608a",
          "title": "How does the message-passing approach slogan sound?",
          "answers": [
            {
              "id": "9eb447af-d869-4320-b4cc-5bbb169b8c20",
              "title": "\"Communicate by sharing memory\"",
              "isCorrect": false
            },
            {
              "id": "c34e890f-78f7-4eda-b4dd-bbd86869295f",
              "title": "\"Don't share memory to communicate; communicate to share memory\"",
              "isCorrect": true
            },
            {
              "id": "29537ec6-2008-45c7-a905-aa459984b8f4",
              "title": "\"Use global variables\"",
              "isCorrect": false
            },
            {
              "id": "01301599-e89f-4405-b74c-5cef82a1e342",
              "title": "\"Only mutexes — only hardcore\"",
              "isCorrect": false
            }
          ],
          "descriptionText": "Classic concurrency philosophy",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "78b590ae-1403-4d1c-9083-08e55c7c0956",
          "title": "What is Mutex<T>?",
          "answers": [
            {
              "id": "4b8d0c20-4276-465c-b237-b8a7f64ae6d8",
              "title": "Primitive allowing only one thread to own T at any moment",
              "isCorrect": true
            },
            {
              "id": "05392735-18ce-4f7b-bcef-232d7f8b6f0d",
              "title": "Asynchronous queue",
              "isCorrect": false
            },
            {
              "id": "e0cc590b-ce79-4d77-ab31-cb7cd2bc83b4",
              "title": "Atomic counter",
              "isCorrect": false
            },
            {
              "id": "2b81ec4c-b7a1-46b1-8e1b-b80e98e2eb75",
              "title": "Read/write lock",
              "isCorrect": false
            }
          ],
          "descriptionText": "Mutual exclusion lock",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4cc50c54-723e-4f94-8c20-ffb564e7fc02",
          "title": "What does Mutex::lock() return on success?",
          "answers": [
            {
              "id": "132b5a7a-cb80-4ad1-92d6-6478dd6ac792",
              "title": "&mut T",
              "isCorrect": false
            },
            {
              "id": "1e9a65ea-4f8f-4db2-a9fa-925bb40cbb0c",
              "title": "MutexGuard<T>",
              "isCorrect": true
            },
            {
              "id": "b5c3c888-b665-4b86-9b87-70b651e17dcf",
              "title": "Arc<T>",
              "isCorrect": false
            },
            {
              "id": "e0dd39ea-bb83-486d-a3c4-05fc1e5e5c30",
              "title": "Option<&mut T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "MutexGuard implements Deref/DerefMut and releases lock in Drop",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "165ded9a-45b8-4e36-bfef-b2745abc90fd",
          "title": "When is Mutex lock released?",
          "answers": [
            {
              "id": "73e5bb14-25c5-4c10-aa27-5d384f041fe4",
              "title": "On explicit unlock()",
              "isCorrect": false
            },
            {
              "id": "a9acfc1b-6592-4518-8a8a-a45eacc2ab91",
              "title": "When MutexGuard goes out of scope (Drop)",
              "isCorrect": true
            },
            {
              "id": "c792b202-b460-4fdb-a64c-bebbe0c3425d",
              "title": "On calling mem::drop(mutex)",
              "isCorrect": false
            },
            {
              "id": "12430345-2c3f-4489-a06f-d75d4738d506",
              "title": "When all threads finish",
              "isCorrect": false
            }
          ],
          "descriptionText": "RAII pattern via Drop",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "76665815-db04-4c13-92cd-a721cf414ffd",
          "title": "Why can't Rc<T> be used between threads?",
          "answers": [
            {
              "id": "6cc57939-009f-4ff8-89f7-e0040319588b",
              "title": "Because it's slow",
              "isCorrect": false
            },
            {
              "id": "79dd61a8-48b1-402e-9d98-d79e07084acc",
              "title": "Because Rc<T> is not Send",
              "isCorrect": true
            },
            {
              "id": "41a414c2-7f1b-4844-8e45-01fc86be0a90",
              "title": "Because Rc<T> is not Clone",
              "isCorrect": false
            },
            {
              "id": "4dd024b4-5fb6-4bcd-81c2-c6f079465aca",
              "title": "Because Rc<T> is not Sync and has no Drop",
              "isCorrect": false
            }
          ],
          "descriptionText": "Reference count modification in Rc is not thread-safe",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fc8ea3cc-f9ad-416f-8508-4f1dabc0b0d9",
          "title": "How does Arc<T> differ from Rc<T>?",
          "answers": [
            {
              "id": "f61f91b5-5a36-4368-a81a-c5031b4582d0",
              "title": "Nothing",
              "isCorrect": false
            },
            {
              "id": "fb1a7ff5-fbeb-497c-9424-83ccaf2d26f4",
              "title": "Arc<T> is thread-safe (atomic counter), Rc<T> is not",
              "isCorrect": true
            },
            {
              "id": "bd05d8df-0747-47d9-b147-d0b27ab05cce",
              "title": "Arc<T> cannot be cloned",
              "isCorrect": false
            },
            {
              "id": "0b078db2-ca77-4373-9bcf-6d37163504d0",
              "title": "Arc<T> is slower and forbidden",
              "isCorrect": false
            }
          ],
          "descriptionText": "Arc uses atomic operations for thread safety",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f84a5495-6081-4ba3-94b3-75ce6cb7e56a",
          "title": "How to organize \"many owners + mutation\" in multithreaded code?",
          "answers": [
            {
              "id": "cc2b2132-111f-459c-9d10-da1d5e6c42ca",
              "title": "Rc<T> + RefCell<T>",
              "isCorrect": false
            },
            {
              "id": "431d9a70-c0e7-414b-8a9e-8f13c52ec295",
              "title": "Arc<T> + RefCell<T>",
              "isCorrect": false
            },
            {
              "id": "b6f4cd82-4dc3-430c-aec3-eb5511cb2e64",
              "title": "Arc<T> + Mutex<T>",
              "isCorrect": true
            },
            {
              "id": "de177bb6-4191-4918-ade0-86af6179995f",
              "title": "Box<T> + Mutex<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Thread-safe shared ownership with mutation",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b5931d1d-3023-4068-a443-f02035d5343f",
          "title": "What logic defect is common with Mutex<T>?",
          "answers": [
            {
              "id": "92989d5b-5233-485a-9412-b0cb5287bce0",
              "title": "Memory leak always",
              "isCorrect": false
            },
            {
              "id": "ae208192-b96e-43f5-a6d3-7f45447f079a",
              "title": "Data race",
              "isCorrect": false
            },
            {
              "id": "f0526590-2f1a-493a-b708-3c631782580d",
              "title": "Deadlock (mutual blocking)",
              "isCorrect": true
            },
            {
              "id": "b32ff947-2c13-42f6-9462-9348e650029b",
              "title": "Impossible to compile",
              "isCorrect": false
            }
          ],
          "descriptionText": "Deadlocks can occur with multiple locks",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "653b9a01-d576-469e-b8bd-3b2348555cbf",
          "title": "What does the marker trait Send mean?",
          "answers": [
            {
              "id": "0ad2d279-85bc-4783-b16c-0dc6aeb851e3",
              "title": "Type can be safely passed between threads by reference",
              "isCorrect": false
            },
            {
              "id": "1489f053-e2cd-4cf0-b8fa-8bac9c65d442",
              "title": "Ownership of type's value can be transferred between threads",
              "isCorrect": true
            },
            {
              "id": "f6a69616-b0ea-4215-b9ac-0165f404786d",
              "title": "Type is thread-safe for concurrent reading",
              "isCorrect": false
            },
            {
              "id": "e678f28b-aa5f-4938-af74-74ffd2a4aed5",
              "title": "Type cannot be passed between threads",
              "isCorrect": false
            }
          ],
          "descriptionText": "Send allows ownership transfer across threads",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f4e3bd9b-1384-40de-af67-4f88d7ef5d43",
          "title": "What does the marker trait Sync mean?",
          "answers": [
            {
              "id": "5ec35372-233e-42fc-ae84-a2659f6a3efc",
              "title": "Type can be copied",
              "isCorrect": false
            },
            {
              "id": "625a03fb-bcbf-4cfa-95f0-02c0b847905e",
              "title": "Type can be moved",
              "isCorrect": false
            },
            {
              "id": "f2fdb80b-f0e0-4027-b4fa-bc8fe9f2c528",
              "title": "&T can be safely shared between threads",
              "isCorrect": true
            },
            {
              "id": "4430c396-3376-4860-8af8-e83838d6a093",
              "title": "&mut T can be shared between threads",
              "isCorrect": false
            }
          ],
          "descriptionText": "Sync allows sharing references across threads",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b061b2eb-f296-4991-92cc-c0a7227056c0",
          "title": "Is Send/Sync automatically (derived) implemented?",
          "answers": [
            {
              "id": "ddbf3a65-29ac-4ddc-811e-e302efe16eec",
              "title": "No, only manually",
              "isCorrect": false
            },
            {
              "id": "650d388f-ed83-4813-8169-b1d86d2903ea",
              "title": "Yes, if all component types are also Send/Sync",
              "isCorrect": true
            },
            {
              "id": "18e22199-b81e-40c2-8c94-d2dcbb555b5d",
              "title": "Only for primitives",
              "isCorrect": false
            },
            {
              "id": "8067fda8-69ea-4872-ac1d-e049f30c7847",
              "title": "Only in nightly",
              "isCorrect": false
            }
          ],
          "descriptionText": "Auto-implemented when safe",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e187e7d9-d46f-40e5-9d69-c6876854be61",
          "title": "Can Send/Sync be implemented manually?",
          "answers": [
            {
              "id": "933b341c-a1c9-44c8-8c54-7192d67154c0",
              "title": "Yes, it's always safe",
              "isCorrect": false
            },
            {
              "id": "750e1ba1-69d6-4b97-b5e1-c2f053497589",
              "title": "Yes, but it's unsafe and requires great care",
              "isCorrect": true
            },
            {
              "id": "aca68f64-8d92-421d-a87e-e9beb7a3e9f4",
              "title": "No, forbidden",
              "isCorrect": false
            },
            {
              "id": "223f9fff-b448-4059-8a61-6f2ea3989477",
              "title": "Only Send can be",
              "isCorrect": false
            }
          ],
          "descriptionText": "Requires unsafe implementation",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "662ea2e8-cf51-4b63-91fb-3b3084b2b3c9",
          "title": "Why is RefCell<T> not Sync?",
          "answers": [
            {
              "id": "540d48f6-c580-46d9-83f9-685b770f6e9f",
              "title": "Because it's expensive",
              "isCorrect": false
            },
            {
              "id": "a85db2c2-d2f1-4054-9f02-7b705d0afa9a",
              "title": "Because it checks borrows at runtime, which is not thread-safe",
              "isCorrect": true
            },
            {
              "id": "27075e80-5daa-4471-a37b-9eb759f80194",
              "title": "Because it has no Drop",
              "isCorrect": false
            },
            {
              "id": "255f7e93-d53c-4b0c-afcb-72c89f017701",
              "title": "Because it's not Clone",
              "isCorrect": false
            }
          ],
          "descriptionText": "Runtime borrow checking isn't thread-safe",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3cb7edc1-d76e-42c3-963c-a54f22d35e14",
          "title": "How to get result from thread launched with spawn?",
          "answers": [
            {
              "id": "b273e71e-1f9e-481f-b569-cc2c9894c9df",
              "title": "Global variable",
              "isCorrect": false
            },
            {
              "id": "3aff8e03-2624-4b78-8707-f77f861b7e78",
              "title": "mpsc channel",
              "isCorrect": false
            },
            {
              "id": "d07efc58-8633-4acd-9f0b-42dd76570f6d",
              "title": "Via return value from closure and join()",
              "isCorrect": true
            },
            {
              "id": "89e8098c-cd05-4f74-bbc3-6d29f4a9ece8",
              "title": "No way",
              "isCorrect": false
            }
          ],
          "descriptionText": "join() returns the closure's result",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "aeddd6c6-ff1b-4007-94c2-82a205085f7f",
          "title": "What happens if you try to use a value after send(val)?",
          "answers": [
            {
              "id": "df4bafef-ea65-4741-985f-0c2798eeb261",
              "title": "Compiles and copies value",
              "isCorrect": false
            },
            {
              "id": "3280b43a-2045-4fa7-9182-4b7051195bd3",
              "title": "Compilation error: value was moved",
              "isCorrect": true
            },
            {
              "id": "393d1054-4d2d-4f09-85ac-25c61de29de2",
              "title": "Runtime panic",
              "isCorrect": false
            },
            {
              "id": "334c6b74-0aa7-4660-8e4b-c4e9936e00b6",
              "title": "UB",
              "isCorrect": false
            }
          ],
          "descriptionText": "send moves the value",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cd5e9ed1-8d1f-445a-bc0c-b5cb21ec851b",
          "title": "Why does output order from threads differ between runs?",
          "answers": [
            {
              "id": "f0edeef6-fb8b-4a52-a411-6726b884388f",
              "title": "Due to undefined behavior",
              "isCorrect": false
            },
            {
              "id": "e37bf343-435d-45dd-b4dc-9edaa088f97f",
              "title": "Due to OS scheduler and lack of execution order guarantees",
              "isCorrect": true
            },
            {
              "id": "fe59ffaf-d7eb-406e-85c0-f329cf230a4a",
              "title": "Due to println!",
              "isCorrect": false
            },
            {
              "id": "d691f9fd-6acb-4d20-b06c-651ae8b7a085",
              "title": "Designed that way, but always deterministic",
              "isCorrect": false
            }
          ],
          "descriptionText": "Non-deterministic scheduling",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c2aa0da1-620f-4db4-b433-b8a890f96833",
          "title": "What does thread::sleep(Duration) do?",
          "answers": [
            {
              "id": "9d0bb479-0067-4a8e-9888-7f91c2b587b1",
              "title": "Blocks all process threads",
              "isCorrect": false
            },
            {
              "id": "c3039a9b-9d23-4532-b7d4-5ae9b786c778",
              "title": "Puts current thread to sleep, giving others a chance",
              "isCorrect": true
            },
            {
              "id": "a06519dd-2ecf-4f77-9371-26eeb6d07905",
              "title": "Switches context to specified thread",
              "isCorrect": false
            },
            {
              "id": "be78b38b-a75b-46b8-a9e5-cbc21a9dc487",
              "title": "Speeds up execution",
              "isCorrect": false
            }
          ],
          "descriptionText": "Yields to other threads",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0879adac-0126-497d-bc21-dfeea1457626",
          "title": "Can you iterate over Receiver as an iterator?",
          "answers": [
            {
              "id": "28bbefd0-dd73-44d1-8e00-edb1fe5303d3",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "d8adf6e8-a1b8-4b36-a0be-08a6f4f1ec72",
              "title": "Yes, while channel is not closed",
              "isCorrect": true
            },
            {
              "id": "dfde8996-ca0c-4e66-8605-e6c22e813e30",
              "title": "Yes, but only once",
              "isCorrect": false
            },
            {
              "id": "47a880ea-1536-4d7e-804e-065f6bd12c1c",
              "title": "Only through try_iter in nightly",
              "isCorrect": false
            }
          ],
          "descriptionText": "Receiver implements Iterator",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3109ec24-9938-4ef1-bfc0-4f990665b25f",
          "title": "What happens if join() is called before main thread does its work?",
          "answers": [
            {
              "id": "31b3b1d3-f5ac-435a-984f-e702eddee2f6",
              "title": "Nothing",
              "isCorrect": false
            },
            {
              "id": "778d2622-9181-4cc8-8a9e-b81350fa5d0a",
              "title": "There will be interleaving",
              "isCorrect": false
            },
            {
              "id": "48b932cb-9195-48fc-8b03-eb5db7ceebd1",
              "title": "Main thread waits, then executes its work (no interleaving)",
              "isCorrect": true
            },
            {
              "id": "0c54b86d-69c9-4d7a-8be0-8a04ad121457",
              "title": "Thread exits with error",
              "isCorrect": false
            }
          ],
          "descriptionText": "join() blocks until completion",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b253002a-7c4c-44a1-827e-13c5002cbc19",
          "title": "What primitive is simpler and faster for simple numeric counters in multithreading?",
          "answers": [
            {
              "id": "70b199fa-1197-4012-91ae-e86afc00a364",
              "title": "Arc<Mutex<i32>>",
              "isCorrect": false
            },
            {
              "id": "402b77b9-31fc-40ae-a035-beddcaed73c4",
              "title": "std::sync::atomic::{AtomicI32, ...}",
              "isCorrect": true
            },
            {
              "id": "72d8573f-ac51-417f-ac3a-510be6fd1768",
              "title": "Rc<Cell<i32>>",
              "isCorrect": false
            },
            {
              "id": "a55166e4-c842-4c06-a487-11632367d72d",
              "title": "Box<i32>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Atomic types for lock-free operations",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "df7a4aa8-1ae4-4027-aad5-346497d646df",
          "title": "What does \"fearless concurrency\" mean in Rust?",
          "answers": [
            {
              "id": "75ebd272-3e8e-4aa6-aa2b-2c6aced32ec6",
              "title": "Complete absence of errors",
              "isCorrect": false
            },
            {
              "id": "64599485-2954-4f10-8c61-0cc90caa3d0b",
              "title": "Concurrent code without locks",
              "isCorrect": false
            },
            {
              "id": "73f82355-b07d-4bf2-90da-14b4a90a3186",
              "title": "Most concurrency errors become compile errors thanks to ownership system and types",
              "isCorrect": true
            },
            {
              "id": "60fa973c-7af3-4c96-b0e4-ba50aa6b2d80",
              "title": "Universal green threads",
              "isCorrect": false
            }
          ],
          "descriptionText": "Type system catches concurrency bugs",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "21323b15-ce7f-484d-901f-afb25e0fc074",
          "title": "What's the key difference between \"messaging\" vs \"shared-state\"?",
          "answers": [
            {
              "id": "0587c5f0-8693-48cb-b5b1-521f0e8fdae4",
              "title": "Messages are slower, shared-state is faster",
              "isCorrect": false
            },
            {
              "id": "9345767b-e782-4cf3-b7c4-988ca9a42d5f",
              "title": "Messages transfer ownership; shared-state shares memory between threads",
              "isCorrect": true
            },
            {
              "id": "e7fd19fe-3524-49c9-95ef-fbc53a8df2c4",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "1583b3e9-edd0-4537-9a88-6412f08135b4",
              "title": "Messages require unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Different concurrency paradigms",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f16fa24e-47e9-4d21-9506-b90fea712099",
          "title": "What happens if thread with captured MutexGuard panics?",
          "answers": [
            {
              "id": "d1f1163e-0d48-4dd1-9487-34b492eff573",
              "title": "Lock is always released via Drop of MutexGuard",
              "isCorrect": true
            },
            {
              "id": "dda8769a-68cc-4e83-9e58-f56ea759bb3c",
              "title": "Lock remains forever",
              "isCorrect": false
            },
            {
              "id": "63380b93-8486-43cf-a194-6cab412c9827",
              "title": "Leak occurs",
              "isCorrect": false
            },
            {
              "id": "19f6e203-156c-47ab-a214-304690ff0651",
              "title": "UB",
              "isCorrect": false
            }
          ],
          "descriptionText": "Drop ensures cleanup even on panic",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6d0c0c54-e3b4-408c-89b4-e7ff692d488f",
          "title": "Is it true: Arc<T> itself provides mutation of T?",
          "answers": [
            {
              "id": "aceff9c0-8cee-4fbb-bc32-09832b97168f",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "8f0094dc-c946-4d08-98d3-084717d46320",
              "title": "No, need additional primitive (Mutex/RwLock) for safe mutation",
              "isCorrect": true
            },
            {
              "id": "24ae4c6f-bba2-4029-8554-8f6636e2b0e7",
              "title": "Yes, if T: Sync",
              "isCorrect": false
            },
            {
              "id": "1692cacb-348e-470c-a855-6a5195e529be",
              "title": "Yes, if T: Send",
              "isCorrect": false
            }
          ],
          "descriptionText": "Arc only provides shared ownership",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7714ae4c-4ad6-47d3-b52a-c2f7d9ed0c9a",
          "title": "Why does join() return Result<T, Box<Any + Send>> (simplified)?",
          "answers": [
            {
              "id": "d685e09e-1018-43cf-88e3-f57c55b4eb59",
              "title": "To return lock status",
              "isCorrect": false
            },
            {
              "id": "c8a6f749-3d14-407e-9dd5-72f65fe39ba3",
              "title": "To signal panic in child thread",
              "isCorrect": true
            },
            {
              "id": "d00559e4-f084-48b5-a78d-a7aaf34208a1",
              "title": "To return Sender",
              "isCorrect": false
            },
            {
              "id": "963fa53a-ebb7-4599-bd20-66a30617a85e",
              "title": "To convert to Option",
              "isCorrect": false
            }
          ],
          "descriptionText": "Captures thread panic",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "92c59d36-d1a6-41d5-8df3-187fb8bb4530",
          "title": "Can you use move-closure and then use the moved variable in main thread?",
          "answers": [
            {
              "id": "9a4d70a2-d422-41f2-a1a5-c39d259104db",
              "title": "Yes",
              "isCorrect": false
            },
            {
              "id": "e4d6ce42-72e7-4baf-8a00-1a78b05ddb41",
              "title": "No, variable was moved, use leads to compilation error",
              "isCorrect": true
            },
            {
              "id": "7fa5f2de-9f43-490e-949e-e5b05206787d",
              "title": "Yes, but only if Copy",
              "isCorrect": false
            },
            {
              "id": "462cedee-6fc8-4f6c-a5ee-b0b08ea6ceea",
              "title": "Yes, but only through unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Ownership transferred to closure",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d1cf4004-5bb8-47bd-98aa-ccecc4ee94f9",
          "title": "How to correctly organize a \"counter\" from 10 threads, each incrementing shared counter?",
          "answers": [
            {
              "id": "6ff1725a-6310-4586-a9c8-1658fb9d8f3b",
              "title": "Rc<RefCell<i32>>",
              "isCorrect": false
            },
            {
              "id": "49564d40-be5f-47ff-90cd-d33a9e1b9cc5",
              "title": "Rc<Mutex<i32>>",
              "isCorrect": false
            },
            {
              "id": "d2ef43b2-d0be-4759-a544-b7093261d886",
              "title": "Arc<Mutex<i32>> and Arc::clone to each thread",
              "isCorrect": true
            },
            {
              "id": "4fa4bddb-56b3-4b08-a4cd-159a9ba78537",
              "title": "Box<i32>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Thread-safe shared counter pattern",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6dfcad92-a69b-483f-9717-47bfa814446a",
          "title": "Why is Mutex<T> also considered an implementation of \"interior mutability\"?",
          "answers": [
            {
              "id": "a8c42838-f10a-44a4-af6b-c917f52256fe",
              "title": "Because Mutex<T> is always mut",
              "isCorrect": false
            },
            {
              "id": "d6f7b320-2df8-4d45-aa9c-f1a8f6c4bd0a",
              "title": "Because it allows changing T through immutable wrapper Arc<Mutex<T>> while following locking protocol",
              "isCorrect": true
            },
            {
              "id": "28465708-e077-4222-89fa-37105e460dc9",
              "title": "Because it uses RefCell",
              "isCorrect": false
            },
            {
              "id": "61ab1c03-661b-4ea9-8142-45050b711507",
              "title": "Because it implements Copy",
              "isCorrect": false
            }
          ],
          "descriptionText": "Mutation through shared reference with runtime checks",
          "descriptionLink": "fearless_concurrency_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "eba0e26d-7c5b-487b-a4fb-7d2195e40069",
      "theme": "Fundamentals of Asynchronous Programming in Rust",
      "priority": 13,
      "questions": [
        {
          "id": "1113222b-1e9f-40b5-a977-bb19afe71beb",
          "title": "What is a Future in Rust?",
          "answers": [
            {
              "id": "4ff8a444-dd64-40f9-81cb-88547badf451",
              "title": "A function that runs immediately",
              "isCorrect": false
            },
            {
              "id": "103e1164-09f3-4c3e-b047-68408dba8ddf",
              "title": "A value that may not be ready now but will be ready in the future",
              "isCorrect": true
            },
            {
              "id": "0cbcd9ca-a56d-440e-a846-eba11a043bf5",
              "title": "A data type for working with dates",
              "isCorrect": false
            },
            {
              "id": "76d8794a-6951-4c19-b5d2-3354d7b39914",
              "title": "A synonym for Thread",
              "isCorrect": false
            }
          ],
          "descriptionText": "A Future represents a value that might be unavailable now but will become available later",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "33640dfa-689c-4fe1-92c2-b0672a687946",
          "title": "Which keyword defines an asynchronous function?",
          "answers": [
            {
              "id": "d31403b7-4eac-4178-ba5e-0eb156c7f24f",
              "title": "future",
              "isCorrect": false
            },
            {
              "id": "7c4046ee-b52b-439b-838b-faf4458a3d9c",
              "title": "await",
              "isCorrect": false
            },
            {
              "id": "3ef5d403-0cbb-4a64-be3f-668b073f52c0",
              "title": "async",
              "isCorrect": true
            },
            {
              "id": "2a84ec79-7f90-4dab-8c5c-1b495b406202",
              "title": "defer",
              "isCorrect": false
            }
          ],
          "descriptionText": "Placing async before fn or a block makes it asynchronous",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "21ae75ab-0751-4493-8a32-e8a8b9b67dae",
          "title": "What does the await keyword do?",
          "answers": [
            {
              "id": "6af1cc50-eed7-4d5a-92e2-fb6e8b1748ad",
              "title": "Blocks the thread until the operation finishes",
              "isCorrect": false
            },
            {
              "id": "226e8e42-2d75-4e53-8031-f95dcd289b9b",
              "title": "Suspends the future and yields control to the runtime",
              "isCorrect": true
            },
            {
              "id": "f2f7725c-45cb-439c-9ce3-14eb6a1e79ef",
              "title": "Deletes the future from memory",
              "isCorrect": false
            },
            {
              "id": "f248703b-e4a6-4b6f-bbdf-2e56ca7a914d",
              "title": "Creates a new thread",
              "isCorrect": false
            }
          ],
          "descriptionText": "await pauses a future and lets the runtime schedule other tasks",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a634a222-7d20-4b53-966a-9140ec94d5a4",
          "title": "How do parallelism and concurrency differ?",
          "answers": [
            {
              "id": "6150470c-ef3f-4c53-9e95-89e7e69f25d2",
              "title": "Parallelism = executing tasks at the same time on different cores; concurrency = switching between tasks",
              "isCorrect": true
            },
            {
              "id": "e94cce9d-d304-4dcc-8db8-a57e5654cef4",
              "title": "They are synonyms",
              "isCorrect": false
            },
            {
              "id": "230e6903-4b35-4f10-9dcc-6df08d88323a",
              "title": "Parallelism works only with async",
              "isCorrect": false
            },
            {
              "id": "4d616845-93e8-49dc-a5c1-2eb982315bac",
              "title": "Concurrency requires multithreading",
              "isCorrect": false
            }
          ],
          "descriptionText": "Parallelism is simultaneous execution; concurrency is coordinated interleaving",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e06b2b04-e2da-42e6-871c-72a40c15f16f",
          "title": "Which method on the Future trait checks readiness?",
          "answers": [
            {
              "id": "6802f66a-6cd9-42b6-a63c-7de906e83a03",
              "title": "check()",
              "isCorrect": false
            },
            {
              "id": "74afce87-56c6-45b3-aeee-dad1b99b3b27",
              "title": "ready()",
              "isCorrect": false
            },
            {
              "id": "a2902db8-4bd0-4fef-89a5-e85967ef6253",
              "title": "poll()",
              "isCorrect": true
            },
            {
              "id": "230c6b88-64ae-4542-bc71-8d2fe18fc2f2",
              "title": "await()",
              "isCorrect": false
            }
          ],
          "descriptionText": "poll returns Poll::Ready or Poll::Pending",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d4a960f1-287e-4309-927c-bde2940fd687",
          "title": "What does poll return for a Future?",
          "answers": [
            {
              "id": "5a4f25a2-3604-4cba-bdcd-4f3a74a39860",
              "title": "bool",
              "isCorrect": false
            },
            {
              "id": "8067786b-a4ad-4b86-99ac-12c28c97676d",
              "title": "Option<T>",
              "isCorrect": false
            },
            {
              "id": "7b4c99ab-ca1b-4bda-8b57-e3857aa534fc",
              "title": "Poll<Self::Output>",
              "isCorrect": true
            },
            {
              "id": "7b15e5fc-6f04-4d88-899b-749426f089b8",
              "title": "Result<T, E>",
              "isCorrect": false
            }
          ],
          "descriptionText": "poll returns Poll<Self::Output>: either Ready(T) or Pending",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "567d5aa3-dd61-494f-87f7-1d1be56bfacf",
          "title": "Are Rust futures lazy?",
          "answers": [
            {
              "id": "decd62d9-89f3-45a6-8226-6d55e78331b9",
              "title": "No, they run immediately",
              "isCorrect": false
            },
            {
              "id": "6a736579-61bd-4fd2-b286-bb95043950d7",
              "title": "Yes, they do nothing until await",
              "isCorrect": true
            },
            {
              "id": "e74bf4e1-aae1-486a-b560-c21d6cc758a5",
              "title": "Only if explicitly specified",
              "isCorrect": false
            },
            {
              "id": "34972435-8076-45b1-b933-fe2ab1132863",
              "title": "Depends on the runtime",
              "isCorrect": false
            }
          ],
          "descriptionText": "Futures are lazy—they start progressing only when awaited/polled",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e3d8b1ce-b7f3-479b-9fea-626cf72b9dfd",
          "title": "What is an async runtime?",
          "answers": [
            {
              "id": "4a54cd83-ae36-4f5d-b97d-84cab970ce06",
              "title": "The Rust compiler",
              "isCorrect": false
            },
            {
              "id": "cfc0dea4-b8ed-46a6-9834-4e0cc9edbe67",
              "title": "A library that orchestrates asynchronous code",
              "isCorrect": true
            },
            {
              "id": "135b16b5-ddc6-45ab-8604-0e44dec5752e",
              "title": "The operating system",
              "isCorrect": false
            },
            {
              "id": "ad7ce8db-857f-4bc6-82f0-95e1e83cab86",
              "title": "A data type",
              "isCorrect": false
            }
          ],
          "descriptionText": "The runtime schedules tasks and provides async I/O primitives",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cf641f51-7427-4a7f-9d0c-dea292c06c78",
          "title": "Why isn't main async by default?",
          "answers": [
            {
              "id": "34771a52-685c-4f58-9c42-dfc88230e4f3",
              "title": "It's forbidden by syntax",
              "isCorrect": false
            },
            {
              "id": "1a8c4d4e-036d-4eb2-b8f7-2c50df9c65dc",
              "title": "main should initialize the runtime rather than be part of it",
              "isCorrect": true
            },
            {
              "id": "c98c8336-8a0a-4884-8098-e1f61922baec",
              "title": "Async functions can't return values",
              "isCorrect": false
            },
            {
              "id": "4834b176-c1ec-4b0f-86f5-7130f9cc10d2",
              "title": "OS limitation",
              "isCorrect": false
            }
          ],
          "descriptionText": "main sets up the runtime that runs async code",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d456276c-9b85-4215-9ec5-16f20615f9c9",
          "title": "What does trpl::run do?",
          "answers": [
            {
              "id": "7edb4bbd-3bb0-4d12-b4c4-b73addac0c93",
              "title": "Compiles async code",
              "isCorrect": false
            },
            {
              "id": "e090ad01-416e-4f89-9c8b-a8a1939b6370",
              "title": "Creates a new thread",
              "isCorrect": false
            },
            {
              "id": "5f0849af-5f10-4b88-ab16-b4f3e5b27a4f",
              "title": "Sets up a runtime and runs a future to completion",
              "isCorrect": true
            },
            {
              "id": "3e4628d1-b399-4006-9da5-54bff552a776",
              "title": "Converts async to sync",
              "isCorrect": false
            }
          ],
          "descriptionText": "trpl::run configures a runtime and executes the given future",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4cba775b-5d80-48e6-9e6c-523b9081b6d6",
          "title": "Where does await appear relative to the expression?",
          "answers": [
            {
              "id": "c7a110b4-b00c-4b4d-bbb3-53fbaf174364",
              "title": "Before the expression",
              "isCorrect": false
            },
            {
              "id": "d8e19fca-2c12-451d-b8a9-46b716ee9758",
              "title": "After the expression (postfix)",
              "isCorrect": true
            },
            {
              "id": "dd08e082-df11-41a1-8adf-cac65fe96f04",
              "title": "Anywhere",
              "isCorrect": false
            },
            {
              "id": "88cd90a4-9388-45f7-9d1a-274c17b95f6b",
              "title": "On a separate line",
              "isCorrect": false
            }
          ],
          "descriptionText": "In Rust, await is postfix: future.await",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "05957628-dddb-4b2a-890b-e6b6015a5b3f",
          "title": "What happens when an async block is compiled?",
          "answers": [
            {
              "id": "05dfc88d-4350-4e7b-bbcb-7f0297d0d5f7",
              "title": "It's removed from the code",
              "isCorrect": false
            },
            {
              "id": "ce25db22-84ea-4136-b2b1-781b70781d0f",
              "title": "An anonymous type implementing Future is created",
              "isCorrect": true
            },
            {
              "id": "d8606ade-a9b5-44bd-bb68-bab532fe0081",
              "title": "It becomes a regular function",
              "isCorrect": false
            },
            {
              "id": "ccbace2c-c7aa-4b0c-8036-ff66be4fb612",
              "title": "A new thread is generated",
              "isCorrect": false
            }
          ],
          "descriptionText": "The compiler generates a unique state-machine type implementing Future",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "77df52a0-9ad5-405e-b9ff-07b66e137a3f",
          "title": "What does async fn function_name() -> T return?",
          "answers": [
            {
              "id": "2390c2a7-9d1a-433b-84ed-b848acccbce3",
              "title": "T",
              "isCorrect": false
            },
            {
              "id": "73685d5d-9838-4b8d-9cdd-e20942c4e8be",
              "title": "Future<T>",
              "isCorrect": false
            },
            {
              "id": "55cea10a-6135-45b3-a486-af281cee5159",
              "title": "impl Future<Output = T>",
              "isCorrect": true
            },
            {
              "id": "7b6ea805-3f8d-4208-8d38-845b9e47be10",
              "title": "Task<T>",
              "isCorrect": false
            }
          ],
          "descriptionText": "An async function returns a type implementing Future with Output = T",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e855c6c5-eb2b-4ab3-9e65-e869721f34be",
          "title": "What does trpl::race do?",
          "answers": [
            {
              "id": "45ab10c0-fa1f-4d06-95e2-7ad33757f5f5",
              "title": "Runs futures in parallel",
              "isCorrect": false
            },
            {
              "id": "ef35b323-fcff-4080-9e3e-afdad8eaa7a3",
              "title": "Returns the result of the first future to complete",
              "isCorrect": true
            },
            {
              "id": "cbf64ba3-6938-4250-94d8-25278273ca55",
              "title": "Cancels all futures except one",
              "isCorrect": false
            },
            {
              "id": "9cf6645d-50dc-4c46-a35a-d523b2469e7c",
              "title": "Checks execution speed",
              "isCorrect": false
            }
          ],
          "descriptionText": "race resolves with whichever future finishes first",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f096c60a-e47a-4b5b-9bc1-ba45202a5ff7",
          "title": "What type does trpl::race return?",
          "answers": [
            {
              "id": "d2b85ea2-8a44-4f39-8f7f-e112c99e5352",
              "title": "Result<T, E>",
              "isCorrect": false
            },
            {
              "id": "6a8b8c39-f811-46d5-ba6d-9dce4b0f4b6b",
              "title": "Option<T>",
              "isCorrect": false
            },
            {
              "id": "6d7d8717-e8e7-4275-a6aa-5a5bfd363dbd",
              "title": "Either<A, B>",
              "isCorrect": true
            },
            {
              "id": "bf51046c-26be-42e0-9a49-d415f2f9079e",
              "title": "A tuple (A, B)",
              "isCorrect": false
            }
          ],
          "descriptionText": "It returns Either::Left or Either::Right based on which future wins",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bd23fab1-aa03-45b2-8b8d-0740bcde99af",
          "title": "What is an \"await point\"?",
          "answers": [
            {
              "id": "0774aa83-70de-4c78-97d7-6e583f560114",
              "title": "Where the program ends",
              "isCorrect": false
            },
            {
              "id": "7dc38734-3b4d-41fd-be67-907e32771640",
              "title": "A point where a future may be suspended and later resumed",
              "isCorrect": true
            },
            {
              "id": "a7c82088-8f9c-4f2b-ad85-95f3459ca026",
              "title": "The entry point into an async function",
              "isCorrect": false
            },
            {
              "id": "d874d721-9eed-4fa6-85dd-214b5fa00683",
              "title": "Where the future is created",
              "isCorrect": false
            }
          ],
          "descriptionText": "At each await, the runtime can pause the task and switch to others",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6823d490-2e19-4b11-9669-3c0a1dd1c5c0",
          "title": "What is a state machine in the async context?",
          "answers": [
            {
              "id": "2ab4a76c-8e3d-4282-87e2-ec9592ee094a",
              "title": "A physical device",
              "isCorrect": false
            },
            {
              "id": "7ba7bbf0-b67a-481b-b3c7-9bd915db8158",
              "title": "A data structure the compiler generates to track async block state",
              "isCorrect": true
            },
            {
              "id": "d07bec1a-ca0b-4f5b-a9ae-3b979ddeb33b",
              "title": "A database type",
              "isCorrect": false
            },
            {
              "id": "0e582f76-718b-4854-ba1c-87328f900a1f",
              "title": "A sorting algorithm",
              "isCorrect": false
            }
          ],
          "descriptionText": "Async code is transformed into a state machine spanning await points",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a73f3d3b-3d3f-4db7-bf20-41a797bd049e",
          "title": "What does trpl::spawn_task do?",
          "answers": [
            {
              "id": "be762ca8-629e-44b3-ad0e-a4eb92b02b01",
              "title": "Creates a new OS thread",
              "isCorrect": false
            },
            {
              "id": "0e39d3b1-1541-4acb-9b3d-cd2eeaa63c30",
              "title": "Spawns a new task in the async runtime",
              "isCorrect": true
            },
            {
              "id": "8f334991-c794-401f-9326-709f02ca0e5f",
              "title": "Blocks the current task",
              "isCorrect": false
            },
            {
              "id": "32adf2e3-76a0-4ae3-a42a-5ddb6bebd10e",
              "title": "Deletes a task",
              "isCorrect": false
            }
          ],
          "descriptionText": "It spawns a runtime-managed task (not an OS thread)",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3b1b64c2-ce00-41c0-84a2-8ba620be9bc2",
          "title": "What does spawn_task return?",
          "answers": [
            {
              "id": "81676a03-cf3f-4f01-b8fa-fc98dcabdaca",
              "title": "A Future",
              "isCorrect": false
            },
            {
              "id": "2615491e-f199-4337-90b8-718573c26f01",
              "title": "A thread handle",
              "isCorrect": false
            },
            {
              "id": "d89bfa63-9272-44d9-ad9a-747ce2d2dbbe",
              "title": "A task JoinHandle",
              "isCorrect": true
            },
            {
              "id": "56c108d0-6052-4389-ba67-68320bdca317",
              "title": "A task ID",
              "isCorrect": false
            }
          ],
          "descriptionText": "A handle you can await to get the task's result",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d2695598-5a44-41d3-a66c-52b04479d0df",
          "title": "How does trpl::sleep differ from thread::sleep?",
          "answers": [
            {
              "id": "c0f72159-be5e-4bb2-94b1-5d4a75d17fd0",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "9de3a509-eb9a-4f12-b938-9e94f6a252bc",
              "title": "trpl::sleep is async and returns a future",
              "isCorrect": true
            },
            {
              "id": "314ee147-338a-4a97-ad6f-b58612ccc1d3",
              "title": "trpl::sleep is faster",
              "isCorrect": false
            },
            {
              "id": "20e7ae6d-2d51-4c3e-b72e-9807eff0f64b",
              "title": "thread::sleep works only in async",
              "isCorrect": false
            }
          ],
          "descriptionText": "trpl::sleep doesn't block a thread; you await its future",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0e3b6c7f-9743-4c53-a97b-e033cca8c284",
          "title": "What does trpl::join do?",
          "answers": [
            {
              "id": "da654217-9043-4003-a3a3-21618062f076",
              "title": "Joins two threads",
              "isCorrect": false
            },
            {
              "id": "ceabf225-f91e-44e9-b7a2-f367462e21f4",
              "title": "Awaits both futures and returns a tuple of results",
              "isCorrect": true
            },
            {
              "id": "2e31b697-6331-4e33-82e1-034d826cdc91",
              "title": "Merges futures into one",
              "isCorrect": false
            },
            {
              "id": "a9ccc389-268c-4a86-b671-9c16f6ef1977",
              "title": "Cancels futures",
              "isCorrect": false
            }
          ],
          "descriptionText": "It waits for all given futures and returns all results",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0ad6e081-3e9f-4c8b-b299-8a48ee1f676d",
          "title": "Is trpl::join fair?",
          "answers": [
            {
              "id": "14148750-b07a-4ed9-b0a7-76c0c436f191",
              "title": "No, it polls futures in argument order",
              "isCorrect": false
            },
            {
              "id": "7c9a7731-c372-4f71-ba99-733486fc0b39",
              "title": "Yes, it alternates polling fairly",
              "isCorrect": true
            },
            {
              "id": "e9721929-e70b-446f-9150-ac77c38543bd",
              "title": "Depends on the runtime",
              "isCorrect": false
            },
            {
              "id": "f9cf23e5-4721-4427-9e4f-58d6dc26b693",
              "title": "Fairness doesn't apply to join",
              "isCorrect": false
            }
          ],
          "descriptionText": "It alternates so one future can't starve the other",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1dd81d57-f96b-4045-8537-2d2321d02b42",
          "title": "What is an async channel?",
          "answers": [
            {
              "id": "46800cec-25aa-4240-9e52-9b6edae29709",
              "title": "A regular thread channel",
              "isCorrect": false
            },
            {
              "id": "6f6f17de-8cd2-4991-b0be-b15c85345912",
              "title": "A channel for asynchronous message passing between futures",
              "isCorrect": true
            },
            {
              "id": "7cf104f8-a61f-4013-9cd7-3aaa28058c74",
              "title": "A network connection",
              "isCorrect": false
            },
            {
              "id": "3c0ffd2b-59ed-4bcf-8587-481e1ef1bf55",
              "title": "A storage type",
              "isCorrect": false
            }
          ],
          "descriptionText": "It passes messages between futures asynchronously",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f40a952c-c1b3-4f6f-90de-f79eee2da5cd",
          "title": "How does recv in an async channel differ from a sync channel?",
          "answers": [
            {
              "id": "83657fdc-0cba-4cf3-85f9-ad2b52dfd97d",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "0a810452-405a-4d52-9b52-87c2c2a132e8",
              "title": "Async recv returns a future you must await",
              "isCorrect": true
            },
            {
              "id": "8c1ceed1-8f4b-49d5-9065-029c79bcd17b",
              "title": "Async recv is faster",
              "isCorrect": false
            },
            {
              "id": "8d6987ed-c5fc-4f7a-ae2e-21c55bb1c022",
              "title": "Sync recv doesn't exist",
              "isCorrect": false
            }
          ],
          "descriptionText": "Async recv is nonblocking and yields a future",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "872127e8-9afb-46dd-a331-a9a73211e19f",
          "title": "Why use async move for async blocks?",
          "answers": [
            {
              "id": "a35fd3c6-b408-47c7-84bf-78e3cc2509a5",
              "title": "For speed",
              "isCorrect": false
            },
            {
              "id": "8f6c10b9-9ac5-4f17-b592-b6684b739eff",
              "title": "To transfer ownership of captured variables into the block",
              "isCorrect": true
            },
            {
              "id": "76327c77-5385-4e06-acf0-ac49c69bc308",
              "title": "It's required for all async blocks",
              "isCorrect": false
            },
            {
              "id": "a29adac6-cfcf-4139-95ee-78a753b270e7",
              "title": "To create a new thread",
              "isCorrect": false
            }
          ],
          "descriptionText": "Like closures, move captures by value for later use",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2548fbec-4166-4231-9d7e-32a669443e89",
          "title": "What does the trpl::join! macro do?",
          "answers": [
            {
              "id": "05aea2b5-b0ee-418e-8864-69722a1b9ffe",
              "title": "Accepts only 2 futures",
              "isCorrect": false
            },
            {
              "id": "67db2c45-ccd9-4e02-bccf-0048a5ab3737",
              "title": "Accepts an arbitrary number of futures",
              "isCorrect": true
            },
            {
              "id": "19205471-8317-4af2-8b19-59579492eb4a",
              "title": "Works with one type only",
              "isCorrect": false
            },
            {
              "id": "7f129d92-4bae-425b-b85c-29642ff9f958",
              "title": "Creates new futures",
              "isCorrect": false
            }
          ],
          "descriptionText": "join! can take any number of futures as arguments",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1d9b6943-90a3-4e91-8a98-fa79dd2a36a2",
          "title": "What does trpl::join_all do?",
          "answers": [
            {
              "id": "620d8e5f-d799-4c95-b8ca-1df5433f7f85",
              "title": "Waits for all futures in a collection",
              "isCorrect": true
            },
            {
              "id": "de7a08e0-aef2-4973-a952-8b49fcd4b7fc",
              "title": "Combines futures into one",
              "isCorrect": false
            },
            {
              "id": "b7fc14b2-8bd9-4030-ade3-e85a779829eb",
              "title": "Cancels all futures",
              "isCorrect": false
            },
            {
              "id": "57a61bab-9eff-481b-8579-9ad2b4a00793",
              "title": "Checks types of futures",
              "isCorrect": false
            }
          ],
          "descriptionText": "It takes an iterator of futures and completes when all are done",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4618d7df-fabf-4020-baf8-adc252c6058c",
          "title": "What requirement applies to futures in join_all?",
          "answers": [
            {
              "id": "ec2de677-cb50-47cb-acb5-ead9977f5c28",
              "title": "They must be of different types",
              "isCorrect": false
            },
            {
              "id": "a1a1855d-ab3c-4385-ad91-2ddcaef0f5f5",
              "title": "They must be of the same type",
              "isCorrect": true
            },
            {
              "id": "d4458110-9442-481c-bd6e-445cec91f322",
              "title": "They must finish simultaneously",
              "isCorrect": false
            },
            {
              "id": "e6e161a6-28ec-4df6-8372-ad364ff6e792",
              "title": "They must not be pinned",
              "isCorrect": false
            }
          ],
          "descriptionText": "join_all requires uniform output types",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fe3d8015-c05e-49ac-a2c2-4d1bb50e0118",
          "title": "What is a trait object in async contexts?",
          "answers": [
            {
              "id": "acfd52ee-a379-47fb-b6a8-04b1d61ab066",
              "title": "An OOP class",
              "isCorrect": false
            },
            {
              "id": "15936b6a-4b53-49b8-992c-a16f09302e52",
              "title": "A dynamic type enabling heterogeneous types via a common trait",
              "isCorrect": true
            },
            {
              "id": "263009a6-07a9-462d-b4a4-490a259fc788",
              "title": "An asynchronous object",
              "isCorrect": false
            },
            {
              "id": "7263cbfc-23f5-466e-bec9-e19b0141f653",
              "title": "A function pointer",
              "isCorrect": false
            }
          ],
          "descriptionText": "dyn Trait lets you work through a shared interface",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "db99793c-c355-4300-9ea6-338d857c2c72",
          "title": "Why is Pin needed in async Rust?",
          "answers": [
            {
              "id": "1fe0006b-e5a4-4441-90e8-5742ab1e137b",
              "title": "To speed up code",
              "isCorrect": false
            },
            {
              "id": "d7f2c5d1-f6c2-4e93-8291-ef704925aeab",
              "title": "To guarantee a value won't be moved in memory",
              "isCorrect": true
            },
            {
              "id": "b6c096b1-ab7c-4e7d-be79-b66b5edcdf75",
              "title": "To create pointers",
              "isCorrect": false
            },
            {
              "id": "f4590b57-064c-4293-94ac-9368d3a3efd4",
              "title": "It's deprecated",
              "isCorrect": false
            }
          ],
          "descriptionText": "Pin protects self-referential structures used by futures",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "13c7524c-9f96-4322-a7bf-bb34145c6910",
          "title": "What is the Unpin trait?",
          "answers": [
            {
              "id": "dcf19542-c265-4df4-b6c9-b71b1ecb8216",
              "title": "The opposite of Pin",
              "isCorrect": false
            },
            {
              "id": "4575cd62-b612-467f-ab39-00c759807989",
              "title": "A marker that a type can be safely moved even when pinned",
              "isCorrect": true
            },
            {
              "id": "e7099350-0110-4cc9-a115-a66f90505405",
              "title": "A trait for removing Pin",
              "isCorrect": false
            },
            {
              "id": "91b35aae-9d1f-44be-87d4-bfa50aababec",
              "title": "An alternative to Future",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unpin indicates moving the type is safe",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "379fb7b4-298e-4228-b860-a08d40333e1e",
          "title": "Do most types implement Unpin automatically?",
          "answers": [
            {
              "id": "2653cdf9-054d-4f59-bcc0-1fd35999d812",
              "title": "No, you must implement it manually",
              "isCorrect": false
            },
            {
              "id": "972050b8-8f36-4400-8df4-c67eefb49946",
              "title": "Yes, except for special cases",
              "isCorrect": true
            },
            {
              "id": "d60da6ba-a8f5-4258-ae86-c055d78069a3",
              "title": "Only primitive types",
              "isCorrect": false
            },
            {
              "id": "15f67ccd-c934-41b0-b84c-b208a8a71889",
              "title": "Depends on the runtime",
              "isCorrect": false
            }
          ],
          "descriptionText": "The compiler auto-derives Unpin when safe",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6e1b35c1-8aac-4824-8a07-4f753053b193",
          "title": "When should you use Box::pin?",
          "answers": [
            {
              "id": "98b608cf-1c0c-4afe-bb41-9fa1eead8034",
              "title": "Always for futures",
              "isCorrect": false
            },
            {
              "id": "339c544e-b09a-4b80-bbb2-983ec297437a",
              "title": "When you need a pinned future on the heap",
              "isCorrect": true
            },
            {
              "id": "2fcc86b2-319e-4c7b-aade-958d3626a7f6",
              "title": "Only for large structs",
              "isCorrect": false
            },
            {
              "id": "521cc11a-38b9-4b80-8cb3-537cd0ac0df3",
              "title": "Never; it's obsolete",
              "isCorrect": false
            }
          ],
          "descriptionText": "Box::pin produces a pinned heap allocation, useful for dynamic futures",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "24356cd1-0f82-4ff7-9c11-7dfbad1dab16",
          "title": "What is a Stream in async Rust?",
          "answers": [
            {
              "id": "c4f77d48-4b66-4b67-ab8f-c24eb5fe2624",
              "title": "A network connection",
              "isCorrect": false
            },
            {
              "id": "99a01555-1243-4fb1-af21-5e3ce4ba2790",
              "title": "An asynchronous iterator",
              "isCorrect": true
            },
            {
              "id": "54568f79-a14c-4b53-9bf8-8cb44af17c0d",
              "title": "A data flow type",
              "isCorrect": false
            },
            {
              "id": "467c1a73-1e61-4bbf-a465-f1ec6a954884",
              "title": "An alternative to Future",
              "isCorrect": false
            }
          ],
          "descriptionText": "Stream is the async counterpart to Iterator",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9e79241a-aa80-4d1c-8eb5-6cc03cabbd3f",
          "title": "Which method does the Stream trait define?",
          "answers": [
            {
              "id": "9374e77d-17d0-48fe-b308-71be590b884f",
              "title": "next()",
              "isCorrect": false
            },
            {
              "id": "1478467c-823a-4388-9a05-a75acf4a889e",
              "title": "poll()",
              "isCorrect": false
            },
            {
              "id": "f5fddc8d-ee58-4340-abc0-7d07954211ba",
              "title": "poll_next()",
              "isCorrect": true
            },
            {
              "id": "326db9ad-9d94-473c-90ee-83f243e8cacb",
              "title": "stream()",
              "isCorrect": false
            }
          ],
          "descriptionText": "poll_next merges Future::poll with Iterator::next",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ee390b14-5c53-445c-930e-1fe257325386",
          "title": "What does poll_next return?",
          "answers": [
            {
              "id": "1fc83f79-8d7b-4194-8bfd-e73d7a08d4a3",
              "title": "Option<T>",
              "isCorrect": false
            },
            {
              "id": "273c4cf5-5990-4b29-af4f-59aa6cc9fef9",
              "title": "Poll<T>",
              "isCorrect": false
            },
            {
              "id": "6bee0e26-a122-4698-a96c-58ff9b670124",
              "title": "Poll<Option<T>>",
              "isCorrect": true
            },
            {
              "id": "49f38f06-1a6c-4666-9447-d99159a9eaf1",
              "title": "Result<T, E>",
              "isCorrect": false
            }
          ],
          "descriptionText": "Poll for readiness, Option for sequence items",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4e32636b-0c9a-4eb7-a9d2-608ff54f9f2c",
          "title": "What is StreamExt?",
          "answers": [
            {
              "id": "9b2d1f2b-3522-4001-af74-608e3546f078",
              "title": "A file extension",
              "isCorrect": false
            },
            {
              "id": "9eb9cecd-4079-4c2e-a607-4ddce612bf12",
              "title": "A trait with extra utility methods for Stream",
              "isCorrect": true
            },
            {
              "id": "88714381-ad8e-4279-9eb7-115cf5dd405a",
              "title": "An alternative Stream",
              "isCorrect": false
            },
            {
              "id": "7d75e192-af19-4c80-ad9b-1fca993b93e5",
              "title": "A data type",
              "isCorrect": false
            }
          ],
          "descriptionText": "StreamExt adds helpers like next, filter, map, etc",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5c08140f-8dc5-40cd-8c71-dbfdd5f963a5",
          "title": "What does a timeout method on a stream do?",
          "answers": [
            {
              "id": "b3c44ac5-23d9-45b0-92c4-7a125a459e5f",
              "title": "Stops the stream",
              "isCorrect": false
            },
            {
              "id": "b8dd58fb-4223-4fb8-9154-502267396a1e",
              "title": "Sets a time limit for receiving each item",
              "isCorrect": true
            },
            {
              "id": "edcf4a64-d7fc-4bcc-91d7-cefb237ec90e",
              "title": "Speeds up the stream",
              "isCorrect": false
            },
            {
              "id": "60322a01-9bff-4874-874e-3c85eb0a4870",
              "title": "Creates a timer",
              "isCorrect": false
            }
          ],
          "descriptionText": "It wraps the stream and errors if an item is late",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "19e6f7f1-b460-4e39-9988-1d76eb81b020",
          "title": "What does throttle do on a stream?",
          "answers": [
            {
              "id": "f2dd4096-b263-4814-803b-3ab568be3867",
              "title": "Increases speed",
              "isCorrect": false
            },
            {
              "id": "c65c4531-8020-4c78-975c-0798a5b72f7e",
              "title": "Limits the rate of receiving items",
              "isCorrect": true
            },
            {
              "id": "d2029f9c-6a03-4c30-ba9d-c50798e6ac0b",
              "title": "Stops the stream",
              "isCorrect": false
            },
            {
              "id": "17539ac3-d8ba-4389-8915-c3cc5c7cd222",
              "title": "Filters items",
              "isCorrect": false
            }
          ],
          "descriptionText": "throttle controls how often the stream is polled",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6034f100-a17d-449f-9603-57e61823764d",
          "title": "What does merge do with streams?",
          "answers": [
            {
              "id": "9b90ffbe-5398-4906-a06a-f80abdd06773",
              "title": "Combines data into a single item",
              "isCorrect": false
            },
            {
              "id": "0f6508fa-c12f-4bf4-9136-5d67d3182bb2",
              "title": "Combines multiple streams into one, yielding items as they arrive",
              "isCorrect": true
            },
            {
              "id": "ea30843d-cf1e-42f3-acfb-6972170eca60",
              "title": "Removes duplicates",
              "isCorrect": false
            },
            {
              "id": "2c9cde77-c8e5-4ac8-950a-0638ab955c3f",
              "title": "Sorts items",
              "isCorrect": false
            }
          ],
          "descriptionText": "It emits items from several source streams",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "487ec96a-1833-400f-b7d6-7ae439aa5df9",
          "title": "What does take do on a stream?",
          "answers": [
            {
              "id": "4d5af9a8-1df2-495a-949e-7410e2b6c6f4",
              "title": "Removes items",
              "isCorrect": false
            },
            {
              "id": "b76e3519-01e4-4fdc-94a6-44b7c0efbec8",
              "title": "Limits the number of items produced",
              "isCorrect": true
            },
            {
              "id": "919c487e-7dd5-430b-a631-526a941488e5",
              "title": "Captures ownership",
              "isCorrect": false
            },
            {
              "id": "23e4411a-15de-4773-a9f8-09f6f81d4089",
              "title": "Creates a copy",
              "isCorrect": false
            }
          ],
          "descriptionText": "take(n) yields at most n items",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "77484eb9-b054-4bfb-92c0-e7831cf03b94",
          "title": "What is yield_now?",
          "answers": [
            {
              "id": "3fdc343c-5ea9-4394-840f-520d5d4621d9",
              "title": "Returns a value from a function",
              "isCorrect": false
            },
            {
              "id": "dcfb7a9c-e26b-482a-80bd-9eb108bb8c0d",
              "title": "Explicitly yields control to the runtime",
              "isCorrect": true
            },
            {
              "id": "233668c8-7f1d-4349-97d6-0ed5e99094ff",
              "title": "Creates a new task",
              "isCorrect": false
            },
            {
              "id": "e0be7aa6-1ebf-4c2b-b5e3-70d0d4bac7a6",
              "title": "Stops the program",
              "isCorrect": false
            }
          ],
          "descriptionText": "yield_now creates an await point to let the runtime run others",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d55d50d0-f955-4795-883d-4e0c51efbaa8",
          "title": "What's the difference between CPU-bound and IO-bound operations?",
          "answers": [
            {
              "id": "2e10d07a-8b7f-4745-b632-f9f44e07f01d",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "043ecd01-a8a8-40c8-9199-4aab784727df",
              "title": "CPU-bound are limited by compute; IO-bound by I/O speed",
              "isCorrect": true
            },
            {
              "id": "9858b524-964c-435d-8d6a-f235378ee1fc",
              "title": "CPU-bound are faster",
              "isCorrect": false
            },
            {
              "id": "a76dde32-6c64-469c-b37e-329e1ea86d48",
              "title": "IO-bound require more memory",
              "isCorrect": false
            }
          ],
          "descriptionText": "CPU-bound saturate the CPU; IO-bound wait on I/O",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "508d5d00-b889-4506-8bd9-4d70087026f7",
          "title": "Is async useful for CPU-bound tasks?",
          "answers": [
            {
              "id": "7c16c47a-7e27-4921-9e1a-7ecad1f1a203",
              "title": "No, only for IO-bound",
              "isCorrect": false
            },
            {
              "id": "36a92cc8-2e08-4e20-9e96-c4ecaa49cd63",
              "title": "Yes, for structuring relationships between parts of a program",
              "isCorrect": true
            },
            {
              "id": "2dbfe823-fac3-40c2-9e98-5c13ed25e863",
              "title": "Only with multithreading",
              "isCorrect": false
            },
            {
              "id": "4c120a5e-551a-44ff-a516-92652f2ae26f",
              "title": "Never",
              "isCorrect": false
            }
          ],
          "descriptionText": "Async can structure cooperative multitasking even for CPU-bound workflows",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5cf8ae2a-7112-4298-ba74-9a78365f7b46",
          "title": "What is a task in async Rust?",
          "answers": [
            {
              "id": "ee9ac5cc-89f7-4899-84f3-b89921738d06",
              "title": "The same as a thread",
              "isCorrect": false
            },
            {
              "id": "e7b4ddd5-d6a2-4e46-b773-2661aadddc4c",
              "title": "A unit of concurrency managed by the runtime",
              "isCorrect": true
            },
            {
              "id": "5dda9066-e771-4659-881a-719185b5cbba",
              "title": "A synonym for Future",
              "isCorrect": false
            },
            {
              "id": "6ac4dea4-fcfe-49e4-aa6c-bc5af47cd904",
              "title": "A data type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Tasks are lightweight units scheduled by the runtime",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7dcdf229-59cc-4e66-95d4-6dbf2600a1c6",
          "title": "Can tasks move between threads?",
          "answers": [
            {
              "id": "2457b78a-c866-459e-b312-5826c756d2f5",
              "title": "No, never",
              "isCorrect": false
            },
            {
              "id": "72c4e1ec-3259-44c0-863c-cdfdbfc38340",
              "title": "Yes, some runtimes support work stealing",
              "isCorrect": true
            },
            {
              "id": "cec7304e-6495-4840-8dd1-74f0e0845116",
              "title": "Only manually",
              "isCorrect": false
            },
            {
              "id": "30236797-73f4-473c-8772-a2b6824d3823",
              "title": "It's forbidden",
              "isCorrect": false
            }
          ],
          "descriptionText": "Many runtimes rebalance tasks across threads",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "eae2ba4d-bf43-4f46-8c4b-701f0972b132",
          "title": "When are threads preferable to async?",
          "answers": [
            {
              "id": "d9cbde09-c014-49fe-a260-b4cf58ae4d82",
              "title": "Never",
              "isCorrect": false
            },
            {
              "id": "34a68bdd-a5c8-42d3-9be1-df8738c7221b",
              "title": "For highly parallelizable work",
              "isCorrect": true
            },
            {
              "id": "f91c6500-7dfa-4e30-aac0-b33f6ac22a6d",
              "title": "For network I/O",
              "isCorrect": false
            },
            {
              "id": "17ace450-9eb6-47f5-b663-2472296f829c",
              "title": "For GUIs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Threads suit compute-heavy parallel workloads",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "55382970-8a46-4229-90de-b201a7c071fb",
          "title": "When is async preferable to threads?",
          "answers": [
            {
              "id": "a339bf18-574f-4336-aa0d-257ffde03f71",
              "title": "Always",
              "isCorrect": false
            },
            {
              "id": "df1e547e-b0b5-47dd-b803-a9f8a4bf99ae",
              "title": "For highly concurrent workloads with many sources",
              "isCorrect": true
            },
            {
              "id": "b33fd043-4f85-43b4-838a-8cdfc363067c",
              "title": "For math-heavy computation",
              "isCorrect": false
            },
            {
              "id": "69481190-0c3c-4272-b0ec-d4bb306a0b39",
              "title": "For file I/O",
              "isCorrect": false
            }
          ],
          "descriptionText": "Async shines for handling many concurrent events",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "99042093-d548-4129-9b82-8d94c565b5a1",
          "title": "Can you combine threads and async?",
          "answers": [
            {
              "id": "e3023519-c589-458f-90a1-162f859d232e",
              "title": "No, they conflict",
              "isCorrect": false
            },
            {
              "id": "f56e2030-f23d-4992-8d08-60ab37d4815d",
              "title": "Yes, they complement each other well",
              "isCorrect": true
            },
            {
              "id": "90e0d911-f285-4f5b-8526-4adcd451f28f",
              "title": "Only with a special runtime",
              "isCorrect": false
            },
            {
              "id": "0577b38a-5e31-43f2-b07c-569422f3936d",
              "title": "This approach is deprecated",
              "isCorrect": false
            }
          ],
          "descriptionText": "Mix them to leverage each approach's strengths",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "741bb8fa-2903-4463-a769-68d57286dd85",
          "title": "What is work stealing in an async runtime?",
          "answers": [
            {
              "id": "233cd9f6-fccb-4d72-82ef-f6ddfd27b9d9",
              "title": "Stealing data between tasks",
              "isCorrect": false
            },
            {
              "id": "f999ff23-fde2-43a5-bdaa-d08ede87edb8",
              "title": "A load-balancing mechanism that moves tasks between threads for performance",
              "isCorrect": true
            },
            {
              "id": "dc693c9d-a80a-4c15-8dda-eab6c038ce66",
              "title": "An attack type",
              "isCorrect": false
            },
            {
              "id": "2cfd5452-059d-4db9-aa9f-6fc7e80366d0",
              "title": "A way to cancel tasks",
              "isCorrect": false
            }
          ],
          "descriptionText": "The runtime redistributes tasks to optimize load",
          "descriptionLink": "async_await_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "bbeb9d3a-64ba-4bc0-a5e0-1e37aad50c80",
      "theme": "Object-Oriented Programming in Rust",
      "priority": 14,
      "questions": [
        {
          "id": "ecc39465-225e-4458-9592-0342bba7307f",
          "title": "According to the \"Gang of Four\" definition, what is an object?",
          "answers": [
            {
              "id": "e74e2af6-5166-4bcd-b7e4-16d840bf825d",
              "title": "Only data",
              "isCorrect": false
            },
            {
              "id": "42ffce8b-ee82-4984-8c22-0a141427dbaf",
              "title": "Only methods",
              "isCorrect": false
            },
            {
              "id": "2784d519-2aca-4295-88d4-5e832f813145",
              "title": "A package of data and procedures operating on that data",
              "isCorrect": true
            },
            {
              "id": "6b8a2589-4dd9-4c57-95f2-2cf84adb6479",
              "title": "A class with inheritance",
              "isCorrect": false
            }
          ],
          "descriptionText": "An object combines data and procedures (methods/operations) that work with that data",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "748a300f-8703-45c1-b2d0-fefcce0c476d",
          "title": "Are struct and enum in Rust objects according to Gang of Four definition?",
          "answers": [
            {
              "id": "4ec02f75-5509-420c-8f2b-36dd3c6db5e1",
              "title": "No, they are not objects",
              "isCorrect": false
            },
            {
              "id": "8a362d13-3749-43ae-8514-4a2efe522d1f",
              "title": "Yes, they provide the same functionality",
              "isCorrect": true
            },
            {
              "id": "b418e37a-49c9-40c8-aed6-07f29342867e",
              "title": "Only struct are objects",
              "isCorrect": false
            },
            {
              "id": "e9714c7d-04ec-4df5-8ce1-277ef7847ffe",
              "title": "Only enum are objects",
              "isCorrect": false
            }
          ],
          "descriptionText": "Struct and enum with methods in impl blocks provide the same functionality as objects",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6285c81c-3bf2-4b7c-b8d4-6c470b0a067b",
          "title": "What is encapsulation?",
          "answers": [
            {
              "id": "79779411-2cf9-484d-b2b2-7a40a7577fc2",
              "title": "Data inheritance",
              "isCorrect": false
            },
            {
              "id": "12312e09-6e0a-4288-a6a8-04a6b01247b7",
              "title": "Hiding implementation details of an object",
              "isCorrect": true
            },
            {
              "id": "884aab19-c06e-410d-81c2-b06f9a55ae20",
              "title": "Polymorphism",
              "isCorrect": false
            },
            {
              "id": "f1bfc0d0-9fdb-435f-9ee2-1fdbdd4c2a64",
              "title": "Dynamic dispatch",
              "isCorrect": false
            }
          ],
          "descriptionText": "Encapsulation means implementation details are not accessible to code using the object",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1554ac1c-cd1b-4c74-aa6e-1a6d487956e8",
          "title": "How is encapsulation controlled in Rust?",
          "answers": [
            {
              "id": "1381bf71-6460-4305-85ea-f2d24cc78cca",
              "title": "Through classes",
              "isCorrect": false
            },
            {
              "id": "fbfdd2fc-638c-455a-b06c-0bb95454f41e",
              "title": "Through the pub keyword",
              "isCorrect": true
            },
            {
              "id": "1d045e9d-30d6-4937-96af-eb1d9072bb74",
              "title": "Through inheritance",
              "isCorrect": false
            },
            {
              "id": "a7404f23-ba6f-4885-b374-b17ba0624896",
              "title": "Automatically",
              "isCorrect": false
            }
          ],
          "descriptionText": "The pub keyword defines what is public, by default everything is private",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ac622038-aff4-4d6c-ab64-ac1f9ec2a049",
          "title": "Which fields in struct AveragedCollection are private?",
          "answers": [
            {
              "id": "214b23cc-47a2-4fd1-8b4c-6ed606dd333a",
              "title": "Only list",
              "isCorrect": false
            },
            {
              "id": "e19c159d-4787-4055-938b-4c1e4c9c1022",
              "title": "Only average",
              "isCorrect": false
            },
            {
              "id": "dae28a31-a8bb-4f2d-abca-ed7e3da6c725",
              "title": "list and average",
              "isCorrect": true
            },
            {
              "id": "9c3c9205-7d5c-4a27-84d1-cdf683e5745c",
              "title": "All fields are public",
              "isCorrect": false
            }
          ],
          "descriptionText": "Both fields list and average are private to guarantee correctness of the average value",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a9bd1aaf-17f7-4f65-b9ab-21badc4acceb",
          "title": "Why is the update_average method private?",
          "answers": [
            {
              "id": "f244ab6c-6410-4cb9-a2a1-18be8e2742f7",
              "title": "For speed",
              "isCorrect": false
            },
            {
              "id": "85249183-83d7-4b4d-85ab-7bd55cb181ae",
              "title": "It's an internal implementation detail",
              "isCorrect": true
            },
            {
              "id": "a68d8299-bff2-47a7-8b9f-118c055dd484",
              "title": "Due to compiler limitation",
              "isCorrect": false
            },
            {
              "id": "59be50b8-2ea6-41be-beb9-ce9b61317c61",
              "title": "To avoid type errors",
              "isCorrect": false
            }
          ],
          "descriptionText": "update_average is an internal implementation detail that doesn't require public access",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e7e655bf-c23f-4a58-a33c-bdb919c49ddf",
          "title": "Does Rust support inheritance in the traditional sense?",
          "answers": [
            {
              "id": "1523b2f1-61bf-4b5c-a56d-0e64081db01c",
              "title": "Yes, fully",
              "isCorrect": false
            },
            {
              "id": "65db3e69-42e1-4c74-9173-4d38f1057643",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "303710f4-4f48-48ce-ac17-7b30d37f5251",
              "title": "Only for struct",
              "isCorrect": false
            },
            {
              "id": "602a5c15-5bcf-4a97-bdfa-163220c28e7d",
              "title": "Only through macros",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust has no way to define a struct that inherits fields and methods from a parent struct",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "96be1506-b973-43fe-ba2e-8a89f6cb5350",
          "title": "How can code be reused in Rust instead of inheritance?",
          "answers": [
            {
              "id": "715e8a0d-ea8b-4a37-a404-09f246e6a6aa",
              "title": "Only through copying",
              "isCorrect": false
            },
            {
              "id": "8f805e6f-a921-4bf7-9fcb-f791e1a55128",
              "title": "Through default trait method implementations",
              "isCorrect": true
            },
            {
              "id": "95aa6f6f-5bf8-4f59-a530-f3e32bc56f69",
              "title": "Through macros",
              "isCorrect": false
            },
            {
              "id": "bef43ce5-e0ae-4272-b628-f2920c1f80d6",
              "title": "Through global functions",
              "isCorrect": false
            }
          ],
          "descriptionText": "Default trait method implementations allow code reuse",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "41c275b6-098b-425b-944c-65281e4af1e4",
          "title": "What is polymorphism?",
          "answers": [
            {
              "id": "1816eda6-83f8-4876-a1b9-f5b12958a2df",
              "title": "Multiple inheritance",
              "isCorrect": false
            },
            {
              "id": "baa40afb-ff3f-433a-8449-896021bd925b",
              "title": "Code that works with data of multiple types",
              "isCorrect": true
            },
            {
              "id": "d9121ffd-e884-44ae-9bda-ddc9383ad528",
              "title": "Dynamic typing",
              "isCorrect": false
            },
            {
              "id": "4fc6778f-62f2-4171-8b1b-99e71fdd6573",
              "title": "Encapsulation",
              "isCorrect": false
            }
          ],
          "descriptionText": "Polymorphism is code capable of working with data of various types",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0a6b99ec-73e9-4be4-b0c4-9a3c432c061a",
          "title": "How does Rust implement polymorphism?",
          "answers": [
            {
              "id": "5ee56de5-fe9d-48bf-9da6-399dd3d75dfa",
              "title": "Through inheritance",
              "isCorrect": false
            },
            {
              "id": "520cc922-341d-49b5-a16f-0ff1325891e7",
              "title": "Through generics and trait bounds",
              "isCorrect": true
            },
            {
              "id": "42fae8d7-f163-46ad-8414-ed09d37c0aa0",
              "title": "Through classes",
              "isCorrect": false
            },
            {
              "id": "4494ac08-c7a5-4304-b0ff-1fcda69108b8",
              "title": "Through interfaces",
              "isCorrect": false
            }
          ],
          "descriptionText": "Rust uses generics for abstraction over types and trait bounds for constraints",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fb1ab994-8e02-4ef6-a183-6810f9c23ee7",
          "title": "What is a trait object?",
          "answers": [
            {
              "id": "1dbce097-97a2-4e75-bb45-491708ec30dd",
              "title": "An instance of struct",
              "isCorrect": false
            },
            {
              "id": "e464bbbd-0077-4e34-9f86-b403b9c04728",
              "title": "A pointer to a type implementing a trait, with a method table",
              "isCorrect": true
            },
            {
              "id": "029c1bea-f108-44c3-bb23-34f0102f3c21",
              "title": "A generic type",
              "isCorrect": false
            },
            {
              "id": "612d7d78-d0b6-4af0-b88e-483824d0e430",
              "title": "An enum variant",
              "isCorrect": false
            }
          ],
          "descriptionText": "A trait object contains a pointer to the instance and a table for trait method lookup",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d9c7a328-6bba-4474-b258-b6e6a19be150",
          "title": "How do you create a trait object?",
          "answers": [
            {
              "id": "1f5495fe-d889-4647-a5eb-98dd71ba7139",
              "title": "Only through Box<T>",
              "isCorrect": false
            },
            {
              "id": "8b47feeb-0efb-4139-b418-6586dceccc66",
              "title": "Through pointer + dyn keyword + trait",
              "isCorrect": true
            },
            {
              "id": "fbbd0d36-ed34-4cb6-b66c-65f2a8b06bca",
              "title": "Through impl keyword",
              "isCorrect": false
            },
            {
              "id": "00cd464e-d556-4bce-90c2-939467e5ec7f",
              "title": "Through new keyword",
              "isCorrect": false
            }
          ],
          "descriptionText": "Trait object is created with a pointer (& or Box), the dyn keyword, and trait name",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e30e7551-eabc-49ea-9b48-84e7c46870af",
          "title": "What does Box<dyn Draw> mean?",
          "answers": [
            {
              "id": "45a7228c-c9ae-4cbf-a682-8083d6934245",
              "title": "Generic type",
              "isCorrect": false
            },
            {
              "id": "a5266a10-144b-4f53-bce8-cac9d36b3005",
              "title": "Trait object for any type implementing Draw",
              "isCorrect": true
            },
            {
              "id": "692e8c40-1eac-4604-a359-5a02fd7b3819",
              "title": "Concrete type Draw",
              "isCorrect": false
            },
            {
              "id": "4ce5bacb-c6c4-437d-8e9c-12d5d05b5d0d",
              "title": "Abstract class",
              "isCorrect": false
            }
          ],
          "descriptionText": "Box<dyn Draw> is a trait object for any type in Box implementing Draw",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "11185519-0461-4bba-ad23-145917ce372d",
          "title": "What's the difference between generic with trait bound and trait object?",
          "answers": [
            {
              "id": "fde58bba-0b35-4f50-8be8-bd4665b46f6b",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "3e76e558-32f1-4a0e-9745-6eeec5c8ffac",
              "title": "Generic is replaced by one type, trait object allows different types at runtime",
              "isCorrect": true
            },
            {
              "id": "f271b4c6-7962-4d55-b741-07bf33bce302",
              "title": "Generic is slower",
              "isCorrect": false
            },
            {
              "id": "885992d9-764b-46b5-a627-d9e75a5d7b09",
              "title": "Trait object only works with Box",
              "isCorrect": false
            }
          ],
          "descriptionText": "Generic can only be one concrete type, trait objects allow different types",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0c11e0ae-1587-4df0-bc9b-f486acf5f1d1",
          "title": "What is duck typing?",
          "answers": [
            {
              "id": "de33de4f-7b0e-490c-88a9-a1665c236f72",
              "title": "Duck type in a program",
              "isCorrect": false
            },
            {
              "id": "de8e4456-2128-455f-b894-2188462f6188",
              "title": "Type checking based on behavior, not concrete type",
              "isCorrect": true
            },
            {
              "id": "50b5ba13-dd5a-4f73-becc-5d76f6fa44bf",
              "title": "Dynamic typing",
              "isCorrect": false
            },
            {
              "id": "a5d14f8f-30cb-4287-a822-d1e91e62c610",
              "title": "Static typing",
              "isCorrect": false
            }
          ],
          "descriptionText": "\"If it walks like a duck and quacks like a duck, it's a duck\" — checking by behavior",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8a1fa7b1-b340-475f-b72e-8c9c2cd1cb32",
          "title": "What is static dispatch?",
          "answers": [
            {
              "id": "e88bd56d-a420-4fce-91b1-ce6e11493b8e",
              "title": "Compiler doesn't know method at compile time",
              "isCorrect": false
            },
            {
              "id": "ef0faae9-76bd-4436-b138-6be97afbf8b5",
              "title": "Compiler knows called method at compile time",
              "isCorrect": true
            },
            {
              "id": "c21a28e5-5566-43a2-af29-c36319b1a385",
              "title": "Runtime determines method",
              "isCorrect": false
            },
            {
              "id": "fe9a10f8-3248-4ee6-ba7d-c122effaad28",
              "title": "Dynamic dispatch",
              "isCorrect": false
            }
          ],
          "descriptionText": "Static dispatch — compiler knows which method is called at compile time",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "efd4f3df-968c-4abe-99b4-e2049ae00194",
          "title": "What is dynamic dispatch?",
          "answers": [
            {
              "id": "488ceb19-96dc-4fba-aa3a-07a393f02477",
              "title": "Compiler knows method at compile time",
              "isCorrect": false
            },
            {
              "id": "0f620069-e8e7-48db-86a7-86542581814d",
              "title": "Runtime determines which method to call",
              "isCorrect": true
            },
            {
              "id": "8d1f5749-ea52-467e-a947-cfc3e77baffe",
              "title": "Static dispatch",
              "isCorrect": false
            },
            {
              "id": "abad6684-c06f-4941-a902-4e387a1648dc",
              "title": "Only works with generics",
              "isCorrect": false
            }
          ],
          "descriptionText": "Dynamic dispatch — method selection happens at runtime via pointers in trait object",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c988db0f-16a0-4d05-a655-02af5cbacb74",
          "title": "What's the disadvantage of dynamic dispatch?",
          "answers": [
            {
              "id": "ec1e47ae-5e65-4236-8f8e-a50281dad2c0",
              "title": "Uses more memory",
              "isCorrect": false
            },
            {
              "id": "3956a769-11d8-4c8a-b7fd-c61519b26a88",
              "title": "Has runtime overhead and prevents some optimizations",
              "isCorrect": true
            },
            {
              "id": "00830a49-5d69-4f8d-ab10-fb8fe5ae1571",
              "title": "Always slower than static dispatch",
              "isCorrect": false
            },
            {
              "id": "b5691666-5ea7-4e14-aa9e-947a665159d5",
              "title": "Cannot be used",
              "isCorrect": false
            }
          ],
          "descriptionText": "Dynamic dispatch has runtime cost and prevents inline optimizations",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7cc314e2-2ae2-4d74-aba9-71326aafed5a",
          "title": "What is the state pattern?",
          "answers": [
            {
              "id": "e924a5ab-b1d7-4281-a6c4-93e38e9f1b79",
              "title": "Pattern for memory management",
              "isCorrect": false
            },
            {
              "id": "c1fac267-4fdf-4595-b62c-235b1088d55d",
              "title": "Pattern where object's behavior changes based on its state",
              "isCorrect": true
            },
            {
              "id": "fae33e55-8816-4411-b516-cacc02377fd8",
              "title": "Pattern for multithreading",
              "isCorrect": false
            },
            {
              "id": "ec647a73-aa3f-4e0a-b090-f29a8da5f3ad",
              "title": "Pattern for database work",
              "isCorrect": false
            }
          ],
          "descriptionText": "State pattern — object changes behavior based on internal state",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b9d85f9d-5bda-4122-b9a6-bbf37206e04a",
          "title": "Why does Post use Option<Box<dyn State>>?",
          "answers": [
            {
              "id": "e2455e41-39e8-42f0-9b7f-8e1c3578ba45",
              "title": "For performance",
              "isCorrect": false
            },
            {
              "id": "76403eb1-cccd-4bab-b5ff-1dbbe22724a4",
              "title": "To extract value with take() method",
              "isCorrect": true
            },
            {
              "id": "be04df75-4f6f-4b4d-8a25-160fbe0728a9",
              "title": "For type safety",
              "isCorrect": false
            },
            {
              "id": "b314fc68-f214-4995-921b-3535d9674e43",
              "title": "Compiler requirement",
              "isCorrect": false
            }
          ],
          "descriptionText": "Option allows using take() to move the state value, leaving None",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4be61118-3afd-4b9d-8ce3-ba6c749cd22d",
          "title": "What does the take() method do on Option?",
          "answers": [
            {
              "id": "ae1311fa-9a0e-46c0-8f39-b352cca4753d",
              "title": "Deletes the value",
              "isCorrect": false
            },
            {
              "id": "6c653468-24f0-4ae7-bd6e-5b6a4e654830",
              "title": "Extracts Some value, leaving None",
              "isCorrect": true
            },
            {
              "id": "ccb72164-8d7a-4893-9d04-e008a1016846",
              "title": "Clones the value",
              "isCorrect": false
            },
            {
              "id": "87f57ac3-debb-4af9-85e3-dbc38f4185f0",
              "title": "Checks for value presence",
              "isCorrect": false
            }
          ],
          "descriptionText": "take() moves value from Some, leaving None in its place",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bd08a66f-ddc9-4eee-a197-fea32116b77e",
          "title": "Why does request_review take self: Box<Self>?",
          "answers": [
            {
              "id": "4f211834-931a-4a1d-b0b9-5ba19e212e58",
              "title": "For speed",
              "isCorrect": false
            },
            {
              "id": "8c3dbbc4-be3c-4e94-b07b-74ac37b8ca7c",
              "title": "So method consumes old state and returns new one",
              "isCorrect": true
            },
            {
              "id": "2a0721f9-e5fb-4670-9564-54c8a8fc57db",
              "title": "For heap work",
              "isCorrect": false
            },
            {
              "id": "bc049300-0982-4b81-9e34-a56ce05f1859",
              "title": "It's a syntax error",
              "isCorrect": false
            }
          ],
          "descriptionText": "This signature takes ownership of Box, consuming the old state",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "38c2f9e8-76de-4f0a-8d11-3eb8b9638767",
          "title": "Why doesn't DraftPost have a content method in alternative implementation?",
          "answers": [
            {
              "id": "82e6770c-89d0-462d-966b-5a2c9824e080",
              "title": "It's an error",
              "isCorrect": false
            },
            {
              "id": "cbc5daa2-6c25-4e76-a1e7-50569e308dae",
              "title": "To make showing draft impossible — compilation error",
              "isCorrect": true
            },
            {
              "id": "e91f72a9-d433-4e3f-9227-701af7e38d08",
              "title": "For performance",
              "isCorrect": false
            },
            {
              "id": "edd8909f-32d3-4569-b187-5f77ef95d923",
              "title": "Because drafts are empty",
              "isCorrect": false
            }
          ],
          "descriptionText": "Missing method makes displaying draft impossible — error at compile time",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "0e33f072-178d-40aa-ae2d-cb8ccc384b32",
          "title": "How do request_review and approve methods in type-oriented version work with self?",
          "answers": [
            {
              "id": "e8ccdb55-90ce-4dcd-b584-4e7e6006e7cd",
              "title": "Take &self",
              "isCorrect": false
            },
            {
              "id": "818d2065-1c3c-4f5d-84c1-adc4f403e5e3",
              "title": "Consume self and return new type",
              "isCorrect": true
            },
            {
              "id": "4ab652e8-c903-4af5-a58c-ff804f3dc183",
              "title": "Take &mut self",
              "isCorrect": false
            },
            {
              "id": "1d73c6e7-91a8-4fcc-a3ba-a76d464d4ce7",
              "title": "Clone self",
              "isCorrect": false
            }
          ],
          "descriptionText": "Methods take ownership of self, transforming instance into new type",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b33a4b2b-12e9-4f29-a105-d49e7930332a",
          "title": "What's the advantage of encoding states in types instead of state pattern?",
          "answers": [
            {
              "id": "bc9f1dfc-199f-4636-85de-d26b44959caf",
              "title": "Code is shorter",
              "isCorrect": false
            },
            {
              "id": "50164bfe-00ef-45bf-ae41-276bb2a2c6fe",
              "title": "Invalid states become compilation errors",
              "isCorrect": true
            },
            {
              "id": "8b258dab-3792-4924-9742-ac6cbeec5e85",
              "title": "Runs faster",
              "isCorrect": false
            },
            {
              "id": "d602b620-93c3-40ba-b35e-9529bbd50c33",
              "title": "Easier to read",
              "isCorrect": false
            }
          ],
          "descriptionText": "Encoding states in type system prevents some bugs at compile time",
          "descriptionLink": "oop_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "95f9a252-0b36-4f87-ae0e-ecbf03fa8e90",
      "theme": "Patterns and Matching in Rust",
      "priority": 15,
      "questions": [
        {
          "id": "b4c4a38b-a050-4cf6-8bb3-4ec30d3920d0",
          "title": "Where can patterns be used in Rust?",
          "answers": [
            {
              "id": "30f03ebd-54ca-4354-84cc-5e149738d8e3",
              "title": "Only in match expressions",
              "isCorrect": false
            },
            {
              "id": "e4ac50cb-bb91-4f7c-8d23-365719fbd6d9",
              "title": "In match, if let, while let, for, let, and function parameters",
              "isCorrect": true
            },
            {
              "id": "fed1310c-0e96-49fa-9352-c9a03ff9cb33",
              "title": "Only in let expressions",
              "isCorrect": false
            },
            {
              "id": "a75558e8-3a8e-4e5f-b91d-23dc174e2579",
              "title": "Only in loops",
              "isCorrect": false
            }
          ],
          "descriptionText": "Patterns can be used in match, if let, while let, for loops, let expressions, and function parameters",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c374f755-5ac7-43a1-b475-8ff4cc5540fb",
          "title": "Must match expressions be exhaustive?",
          "answers": [
            {
              "id": "9f2037a5-795f-48b5-a0d6-a71cc9763b13",
              "title": "No, it's optional",
              "isCorrect": false
            },
            {
              "id": "70c7dd33-afd1-462d-a5cf-b73973d1042e",
              "title": "Yes, must cover all possible values",
              "isCorrect": true
            },
            {
              "id": "b46a06b0-ba1b-4fd9-8ccf-6f2c95b75a4e",
              "title": "Only for Option and Result",
              "isCorrect": false
            },
            {
              "id": "f8a01cc2-4233-4e63-8adf-f6f141663c58",
              "title": "Depends on data type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Match expressions must be exhaustive — covering all possible values",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "abb151df-037e-4532-94a0-91af35fd0062",
          "title": "What does the _ pattern do in match?",
          "answers": [
            {
              "id": "4b7c54ee-5c77-4f47-8bfe-530f4d4154e5",
              "title": "Creates a variable named _",
              "isCorrect": false
            },
            {
              "id": "06cbfbc4-0d51-45e3-bb20-a7229ca09ca0",
              "title": "Matches any value but doesn't bind it",
              "isCorrect": true
            },
            {
              "id": "565be93d-6ad2-4fe7-b29e-61c79e7ffdcc",
              "title": "Causes compilation error",
              "isCorrect": false
            },
            {
              "id": "bec44d7e-e9cb-45da-92a9-1a264d59583d",
              "title": "Skips checking",
              "isCorrect": false
            }
          ],
          "descriptionText": "_ is a wildcard pattern that matches any value but doesn't bind it to a variable",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "41ca8712-a7f6-4431-a504-498f4dcee85a",
          "title": "Can you mix if let, else if, and else if let?",
          "answers": [
            {
              "id": "eefd24a7-6391-4377-bc11-b2a083ce2c0c",
              "title": "No, it's a syntax error",
              "isCorrect": false
            },
            {
              "id": "ec21cde7-5655-4bdc-a442-2ed3df9e26c4",
              "title": "Yes, this gives more flexibility than match",
              "isCorrect": true
            },
            {
              "id": "857ed2f0-438b-41e6-a6e3-e413c139f804",
              "title": "Only if let and else",
              "isCorrect": false
            },
            {
              "id": "59f472d9-6fbe-4a41-bef4-8752298c0ebd",
              "title": "Only with Option types",
              "isCorrect": false
            }
          ],
          "descriptionText": "You can combine if let, else if, and else if let for greater flexibility",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "5532800e-6688-4661-a736-fa05374d15c9",
          "title": "Does the compiler check exhaustiveness in if let expressions?",
          "answers": [
            {
              "id": "0d268f65-cc27-4c2b-8a24-96269b702154",
              "title": "Yes, always",
              "isCorrect": false
            },
            {
              "id": "0011cc71-ea63-4081-9164-711067f98295",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "ecfb46f4-74d3-4dda-b260-3a9d0f26c9ad",
              "title": "Only for Some variants",
              "isCorrect": false
            },
            {
              "id": "d5cd1fd0-31f7-40ec-afec-49baf728f555",
              "title": "Only with else block",
              "isCorrect": false
            }
          ],
          "descriptionText": "Compiler doesn't check exhaustiveness for if let, unlike match",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "53ff5b7f-6afa-4d20-b4a9-aaf2300f3f99",
          "title": "What does while let do?",
          "answers": [
            {
              "id": "d9d85414-4676-4b82-a1db-931d2d9bb5d2",
              "title": "Creates infinite loop",
              "isCorrect": false
            },
            {
              "id": "d3370af5-ecd8-450a-8f02-d994cd8df9f8",
              "title": "Executes loop while pattern continues to match",
              "isCorrect": true
            },
            {
              "id": "d1362f3b-6e6d-42d4-850e-be3207706473",
              "title": "Executes once",
              "isCorrect": false
            },
            {
              "id": "e6d56ea0-bcae-4dad-a897-57f805424039",
              "title": "Equivalent to for loop",
              "isCorrect": false
            }
          ],
          "descriptionText": "while let executes loop while pattern continues to match the value",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cd27a024-59ea-4be5-a5b0-ce69469592d8",
          "title": "Is x in for x in y a pattern?",
          "answers": [
            {
              "id": "cf088a9f-d2ce-4be4-aad6-699a12081bf2",
              "title": "No, it's just a variable",
              "isCorrect": false
            },
            {
              "id": "21b87621-f8a7-407f-8fc0-638fd62e17aa",
              "title": "Yes",
              "isCorrect": true
            },
            {
              "id": "7e15afb5-9f82-46cb-a87c-ad4625b221a9",
              "title": "Only if it's a tuple",
              "isCorrect": false
            },
            {
              "id": "9f790aab-e325-419d-81ab-447190df6332",
              "title": "Depends on type of y",
              "isCorrect": false
            }
          ],
          "descriptionText": "The value after for is a pattern that can destructure values",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7abf3880-c5ea-4f47-8c45-2e931286c7dc",
          "title": "What is an irrefutable pattern?",
          "answers": [
            {
              "id": "d7b0c718-8479-47ea-909e-5191f25ea667",
              "title": "Pattern that might not match",
              "isCorrect": false
            },
            {
              "id": "88613bd9-462d-41f6-b7e9-6372c567eec5",
              "title": "Pattern that will always match",
              "isCorrect": true
            },
            {
              "id": "ef1f3e9f-6daa-45c1-ba68-670d153188cb",
              "title": "Complex pattern",
              "isCorrect": false
            },
            {
              "id": "b7f3e7e3-1f76-4acb-baf6-2ea50cffea3b",
              "title": "Pattern with condition",
              "isCorrect": false
            }
          ],
          "descriptionText": "Irrefutable pattern always matches any possible value",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "fee1a531-7895-45fd-9735-ef72ebda7de4",
          "title": "What is a refutable pattern?",
          "answers": [
            {
              "id": "d8a6bcc5-482f-4089-87f3-702aa8f71f10",
              "title": "Pattern that always matches",
              "isCorrect": false
            },
            {
              "id": "15ec6f56-f977-45d7-a033-26af722b3e51",
              "title": "Pattern that might not match for some values",
              "isCorrect": true
            },
            {
              "id": "6c0d3a85-e12c-4b27-b111-8cc80ac4ef44",
              "title": "Pattern with variables",
              "isCorrect": false
            },
            {
              "id": "8f630327-5806-449e-bc75-24101f39cf07",
              "title": "Pattern in match",
              "isCorrect": false
            }
          ],
          "descriptionText": "Refutable pattern might not match for some possible values",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cbe30158-5fcd-469a-9763-3f652e84ca49",
          "title": "Where can only irrefutable patterns be used?",
          "answers": [
            {
              "id": "4c87c11b-53e0-44b3-b15d-f3f084b6a4d4",
              "title": "In match expressions",
              "isCorrect": false
            },
            {
              "id": "80c694f2-2945-4a24-b7f7-e1ed377e86d8",
              "title": "In let, for, and function parameters",
              "isCorrect": true
            },
            {
              "id": "6554ecdd-505d-4172-a391-bfe6f33d0fdb",
              "title": "In if let",
              "isCorrect": false
            },
            {
              "id": "ac1bbbad-c392-4ac6-9c55-4c9a6ea6228f",
              "title": "Everywhere",
              "isCorrect": false
            }
          ],
          "descriptionText": "Let, for, and function parameters require irrefutable patterns",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7f2f9b9f-05d1-42e0-ae22-087e8432ef71",
          "title": "Is Some(x) in let Some(x) = value refutable or irrefutable?",
          "answers": [
            {
              "id": "ca2072f3-76af-4807-a078-14f1a7a8c8cb",
              "title": "Irrefutable",
              "isCorrect": false
            },
            {
              "id": "b57b7670-4d7f-4687-be0d-92ce501e138a",
              "title": "Refutable",
              "isCorrect": true
            },
            {
              "id": "61d84ce2-8c7b-416a-a0af-1368213fab01",
              "title": "Depends on value",
              "isCorrect": false
            },
            {
              "id": "1b6bff82-17d2-4c5d-8434-286ee1721ec7",
              "title": "Not a pattern",
              "isCorrect": false
            }
          ],
          "descriptionText": "Some(x) is refutable because the value could be None",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b3961573-0d3c-4cde-9390-cace6728e8d9",
          "title": "How to fix using a refutable pattern in let?",
          "answers": [
            {
              "id": "904602eb-2eeb-4c56-a84e-7c6eab0b9959",
              "title": "Use match",
              "isCorrect": false
            },
            {
              "id": "4c5acc89-7ce3-43ac-9f30-fc3826927f52",
              "title": "Use if let or let...else",
              "isCorrect": true
            },
            {
              "id": "aeea78b3-1542-4b39-8893-c90db510bfe1",
              "title": "Remove the pattern",
              "isCorrect": false
            },
            {
              "id": "c458ab2b-78a2-48cf-b0da-1fa4b491ec4a",
              "title": "Cannot be fixed",
              "isCorrect": false
            }
          ],
          "descriptionText": "For refutable patterns, use if let or let...else instead of plain let",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a9389ad3-c4b2-4c13-a4d6-df605e772304",
          "title": "What does the | operator do in patterns?",
          "answers": [
            {
              "id": "dee7ed37-bf4d-4079-a318-258f509f2715",
              "title": "Logical OR — matches any of the patterns",
              "isCorrect": true
            },
            {
              "id": "8518bf9f-212b-4b48-afa4-5574561375b4",
              "title": "Logical AND",
              "isCorrect": false
            },
            {
              "id": "413fc764-19e8-489a-af5f-dd639293f244",
              "title": "Bitwise OR",
              "isCorrect": false
            },
            {
              "id": "b32778d3-efc0-46b9-9feb-b5e9494360cd",
              "title": "Creates tuple",
              "isCorrect": false
            }
          ],
          "descriptionText": "| is the \"or\" operator for patterns, matches any of the specified patterns",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "f7a45ce6-f8b1-4fc8-b468-ca13d8a1df02",
          "title": "What does ..= syntax mean in patterns?",
          "answers": [
            {
              "id": "1a08d11a-2cac-4b5b-84ee-7a7e5c63ca95",
              "title": "Exclusive range",
              "isCorrect": false
            },
            {
              "id": "9101e2e4-9b1b-4d8a-8051-006982899e46",
              "title": "Inclusive range of values",
              "isCorrect": true
            },
            {
              "id": "65a23eb5-d618-413d-a60b-af4e873338cd",
              "title": "Infinite range",
              "isCorrect": false
            },
            {
              "id": "676d3a0e-351e-409d-85ed-21ebf9b932b4",
              "title": "Rest of values",
              "isCorrect": false
            }
          ],
          "descriptionText": "..= creates an inclusive range (e.g., 1..=5 includes 5)",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "01e13c4a-d02e-4b48-ad5e-e53458e55e13",
          "title": "With what types can ranges be used in patterns?",
          "answers": [
            {
              "id": "220eb021-0779-46f2-aca8-5727d64c75d6",
              "title": "With any types",
              "isCorrect": false
            },
            {
              "id": "8f7bad19-47ec-429f-ae06-bcce5d7905e1",
              "title": "Only with numbers",
              "isCorrect": false
            },
            {
              "id": "201e10af-664a-448b-9ffd-9d19a5f9ab77",
              "title": "Only with char and numbers",
              "isCorrect": true
            },
            {
              "id": "257e9b64-8767-4820-9d3d-5ea2e234e06a",
              "title": "Only with i32",
              "isCorrect": false
            }
          ],
          "descriptionText": "Ranges in patterns only work with char and numeric types",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "eaab5116-4019-4dc8-8bb7-0d49c2aa7791",
          "title": "What does struct destructuring do in a pattern?",
          "answers": [
            {
              "id": "5a03c1fd-421d-48cd-85ab-d87f825f2e0d",
              "title": "Deletes the struct",
              "isCorrect": false
            },
            {
              "id": "d5a10792-f024-406f-94e6-fd46e3ab288e",
              "title": "Breaks struct into separate variables",
              "isCorrect": true
            },
            {
              "id": "610a1966-20c9-4633-b555-bee6adfaa587",
              "title": "Clones the struct",
              "isCorrect": false
            },
            {
              "id": "e15546fb-4127-42f8-9b3f-0ee212ac36d1",
              "title": "Checks the type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Destructuring extracts struct fields into separate variables",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cc44f4cb-3f7c-4a57-8ce8-53d29afaff94",
          "title": "What is the shorthand syntax for struct destructuring?",
          "answers": [
            {
              "id": "481e3c41-2d59-45fc-8814-357fe318d622",
              "title": "Point { x: x, y: y }",
              "isCorrect": false
            },
            {
              "id": "85ef997b-e422-4d0c-b69f-91f653018597",
              "title": "Point { x, y }",
              "isCorrect": true
            },
            {
              "id": "1068d27f-51c0-4bc7-8715-da7bc9d1281a",
              "title": "Point(x, y)",
              "isCorrect": false
            },
            {
              "id": "b81a0985-96be-4932-93d4-6c26b6c56e71",
              "title": "Point[x, y]",
              "isCorrect": false
            }
          ],
          "descriptionText": "If variable names match fields, you can write Point { x, y } instead of Point { x: x, y: y }",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "97cf52f4-c940-4378-baae-fad467c3ef45",
          "title": "What's the difference between _x and _?",
          "answers": [
            {
              "id": "3381c645-4895-4871-9f1c-e7290fc2b320",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "a1844ee3-2a05-4dcf-9eb5-18097bb8dcc9",
              "title": "_x binds value (can take ownership), _ doesn't bind",
              "isCorrect": true
            },
            {
              "id": "2c6a57ea-052b-4e85-80e6-2019f0701b21",
              "title": "_ is faster",
              "isCorrect": false
            },
            {
              "id": "1559c897-a3aa-455d-b3c9-9226f961dc69",
              "title": "_x is a compilation error",
              "isCorrect": false
            }
          ],
          "descriptionText": "_x binds the value and can take ownership, _ doesn't bind at all",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b05a8a5c-a812-4ba7-8a84-51dee8f60773",
          "title": "What does .. do in patterns?",
          "answers": [
            {
              "id": "0f79865a-f435-4e91-9e07-f02453b3016a",
              "title": "Creates range",
              "isCorrect": false
            },
            {
              "id": "37bd826b-2501-45d1-b507-15a3ec7b09f2",
              "title": "Ignores remaining parts of value",
              "isCorrect": true
            },
            {
              "id": "ffb1a0a5-1c67-410a-8c91-d14db59e5c9f",
              "title": "Creates array",
              "isCorrect": false
            },
            {
              "id": "10591765-54c7-447c-8b58-af2076c327ab",
              "title": "It's a syntax error",
              "isCorrect": false
            }
          ],
          "descriptionText": ".. ignores remaining parts of value that weren't explicitly matched",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2e86e176-6286-4185-896d-6c0e78da237e",
          "title": "What is a match guard?",
          "answers": [
            {
              "id": "5ddc2344-a65f-457d-9c67-33b1c41d1f92",
              "title": "Error protection",
              "isCorrect": false
            },
            {
              "id": "66202e02-571d-4ae7-adb9-9c274955454d",
              "title": "Additional if condition after pattern in match",
              "isCorrect": true
            },
            {
              "id": "f649bd00-54b5-456d-9d2b-2ce2f22a0b77",
              "title": "Type checking",
              "isCorrect": false
            },
            {
              "id": "095d2388-72ef-477c-87ea-5ffa956c7432",
              "title": "Error handler",
              "isCorrect": false
            }
          ],
          "descriptionText": "Match guard is an additional if condition after a pattern for more complex checks",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e5148b46-7fa3-4bae-ad88-56f6cccb6921",
          "title": "Does compiler check exhaustiveness with match guards?",
          "answers": [
            {
              "id": "1f697464-1b0a-4976-98b8-9f908b27186f",
              "title": "Yes, always",
              "isCorrect": false
            },
            {
              "id": "4d5ba112-7882-4e43-abdd-59f259feff0a",
              "title": "No",
              "isCorrect": true
            },
            {
              "id": "ddbec369-fc46-419b-babd-4acf9ae666b8",
              "title": "Only for simple conditions",
              "isCorrect": false
            },
            {
              "id": "bbd02e2a-3e72-4e01-8b26-095fc7fcab67",
              "title": "Only for Option",
              "isCorrect": false
            }
          ],
          "descriptionText": "Compiler doesn't check exhaustiveness when using match guards",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c41b8893-2be8-411a-a82a-2bb8ea2d7b1e",
          "title": "What does the @ operator do in patterns?",
          "answers": [
            {
              "id": "815191ef-2a55-4cb2-a5fc-7bcae16c497d",
              "title": "Creates reference",
              "isCorrect": false
            },
            {
              "id": "0c1386f2-a539-4c0b-8e18-0bab8a4f5409",
              "title": "Binds value to variable while testing pattern",
              "isCorrect": true
            },
            {
              "id": "8f91234f-8cb2-4ed7-a1f9-04a19552e78b",
              "title": "Checks type",
              "isCorrect": false
            },
            {
              "id": "bba86154-d7d7-4dd3-85ec-9bd6a87932d4",
              "title": "Creates copy",
              "isCorrect": false
            }
          ],
          "descriptionText": "@ allows binding value to variable while simultaneously checking pattern",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7c622192-46e9-4dd6-b217-5bf7a98cdd8d",
          "title": "In what order is match guard applied with |?",
          "answers": [
            {
              "id": "87a235b4-d7cc-4063-97fe-089b7dc02ac4",
              "title": "Only to last value",
              "isCorrect": false
            },
            {
              "id": "4e519cfa-10c1-4761-9f3f-1553e2457bc5",
              "title": "To all patterns in the group",
              "isCorrect": true
            },
            {
              "id": "a37f85c5-2250-48be-b8f2-1cca4d38f9a9",
              "title": "To first value",
              "isCorrect": false
            },
            {
              "id": "dd56327d-ba66-49c1-8f41-e8d1b1b85ef9",
              "title": "Doesn't work with |",
              "isCorrect": false
            }
          ],
          "descriptionText": "Match guard applies to entire pattern: (4 | 5 | 6) if y, not 4 | 5 | (6 if y)",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9875323e-981c-4402-809d-aba1d3cf828f",
          "title": "Can .. be used twice in one tuple pattern?",
          "answers": [
            {
              "id": "5050a79a-763b-44cc-b464-03c6947fe73e",
              "title": "Yes, without restrictions",
              "isCorrect": false
            },
            {
              "id": "00c459fa-e4ff-4d0c-a9aa-85576217e195",
              "title": "No, it's ambiguous",
              "isCorrect": true
            },
            {
              "id": "5071b612-93f2-442d-b780-e617b501ea31",
              "title": "Only at start and end",
              "isCorrect": false
            },
            {
              "id": "e53e915c-adc5-4d95-9ba0-a46a4984b1cd",
              "title": "Only with explicit types",
              "isCorrect": false
            }
          ],
          "descriptionText": "Using .. twice creates ambiguity — unclear how many elements to ignore",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c7054d83-140c-4b99-8c85-9ece6f024e58",
          "title": "Can nested enum and struct be destructured?",
          "answers": [
            {
              "id": "90a9b82b-55fd-463f-b8e9-9b84e7abe0fa",
              "title": "No, only one level",
              "isCorrect": false
            },
            {
              "id": "dbc57e65-2355-4aba-b15f-bccd629c3a95",
              "title": "Yes, patterns can be nested",
              "isCorrect": true
            },
            {
              "id": "c6406936-d8c8-4605-ba26-990965475e2c",
              "title": "Only with Box",
              "isCorrect": false
            },
            {
              "id": "abba6b67-4a76-48e8-9b6e-7068d263e763",
              "title": "Only enum",
              "isCorrect": false
            }
          ],
          "descriptionText": "Patterns can be nested to destructure complex structures of any depth",
          "descriptionLink": "patterns_matching_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    },
    {
      "id": "e1c1af99-ad82-4ece-ab40-1c8b941dc2d5",
      "theme": "Advanced Features in Rust",
      "priority": 16,
      "questions": [
        {
          "id": "311a7370-b819-4561-99df-9da15fe6b70e",
          "title": "What is unsafe Rust?",
          "answers": [
            {
              "id": "565ac62f-58ed-4fee-bf31-006fb52be7a4",
              "title": "Dangerous code that cannot be used",
              "isCorrect": false
            },
            {
              "id": "9c45f637-0b29-4f74-a9af-624108e7b0e4",
              "title": "Second language inside Rust without memory safety guarantees",
              "isCorrect": true
            },
            {
              "id": "09d01ab0-29af-46ad-83ce-fe450daa4d4c",
              "title": "Deprecated feature",
              "isCorrect": false
            },
            {
              "id": "6a984cef-9cbc-4d79-b726-da00403adb1c",
              "title": "Code with errors",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unsafe Rust is part of the language that doesn't enforce memory safety guarantees, giving programmers more control",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1f7fb940-74a8-4c3e-84af-1f22a33133cf",
          "title": "How many \"superpowers\" does unsafe give?",
          "answers": [
            {
              "id": "9c240d40-c801-4c65-b3b6-86137375f2ed",
              "title": "Three",
              "isCorrect": false
            },
            {
              "id": "a1340d98-8659-47d9-bac1-8e9ab6c8ab4a",
              "title": "Four",
              "isCorrect": false
            },
            {
              "id": "92fb90bb-abcc-4a35-8bcd-6a1e6c3c539f",
              "title": "Five",
              "isCorrect": true
            },
            {
              "id": "cfee8e37-57f9-4788-9b29-61aa476f963c",
              "title": "Unlimited",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unsafe gives five abilities: dereferencing raw pointers, calling unsafe functions, accessing mutable static, implementing unsafe trait, and accessing union fields",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4c427cee-e213-4a4e-9376-c65991672783",
          "title": "Does unsafe disable the borrow checker?",
          "answers": [
            {
              "id": "65cee2cd-7879-40bd-bb1a-84a502971bc7",
              "title": "Yes, completely",
              "isCorrect": false
            },
            {
              "id": "3ab7adde-d719-450d-aad7-604505a02ed7",
              "title": "No, it continues working",
              "isCorrect": true
            },
            {
              "id": "86ea4081-64fe-423d-a5f2-19ca8d18b2dd",
              "title": "Partially",
              "isCorrect": false
            },
            {
              "id": "9773f665-6a80-4123-aa30-549bb5a2d412",
              "title": "Depends on context",
              "isCorrect": false
            }
          ],
          "descriptionText": "unsafe doesn't disable the borrow checker and other Rust safety checks",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "dc805370-7885-4d7f-a161-63b3f3622f2a",
          "title": "How are raw pointers created?",
          "answers": [
            {
              "id": "9b203940-cc7a-4dec-9c78-4164c2445dac",
              "title": "Only in unsafe blocks",
              "isCorrect": false
            },
            {
              "id": "915551e7-0c63-414a-ad23-0320b503324c",
              "title": "With &raw const and &raw mut operators",
              "isCorrect": true
            },
            {
              "id": "69851aca-6360-46c1-808c-54c2771c767d",
              "title": "Through new keyword",
              "isCorrect": false
            },
            {
              "id": "a2faa7e4-417f-4f24-952f-7986dddc7608",
              "title": "Automatically by compiler",
              "isCorrect": false
            }
          ],
          "descriptionText": "Raw pointers are created with &raw const for *const T and &raw mut for *mut T",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e2229e19-0877-4811-a3d7-b2ef966ded6b",
          "title": "Can raw pointers be created in safe code?",
          "answers": [
            {
              "id": "bd0b2e53-fb7e-4a1f-9166-12768c793548",
              "title": "No, only in unsafe",
              "isCorrect": false
            },
            {
              "id": "8737850f-b324-452f-bd7e-6a23f328c397",
              "title": "Yes, but dereferencing requires unsafe",
              "isCorrect": true
            },
            {
              "id": "557af510-5d57-45e1-9974-db3dd28c92b3",
              "title": "Only on stack",
              "isCorrect": false
            },
            {
              "id": "c360a15c-a9a5-4140-8492-f5531ea09b31",
              "title": "Only with compiler permission",
              "isCorrect": false
            }
          ],
          "descriptionText": "Creating raw pointers is safe, but dereferencing requires unsafe block",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a67f4f79-58b4-49ef-97c5-83478f15b2ef",
          "title": "What borrowing rules do raw pointers ignore?",
          "answers": [
            {
              "id": "ab934d3b-e139-4dc5-9f2d-3297245c6190",
              "title": "None",
              "isCorrect": false
            },
            {
              "id": "447867ab-c898-473d-a9c2-2161de9c7868",
              "title": "Can have simultaneous immutable and mutable pointers to same location",
              "isCorrect": true
            },
            {
              "id": "b11800ee-090d-42ed-ac41-7ad6fe99cdc3",
              "title": "Only lifetime rules",
              "isCorrect": false
            },
            {
              "id": "8129da94-a76d-4ff1-9891-cfe8b061b042",
              "title": "All rules automatically",
              "isCorrect": false
            }
          ],
          "descriptionText": "Raw pointers can ignore borrowing rules, allowing multiple mutable pointers",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "cdcd5d06-7afa-4df3-b202-477727db2036",
          "title": "How to call an unsafe function?",
          "answers": [
            {
              "id": "85dfea7e-f033-43e6-b12f-9613dda6d121",
              "title": "Directly from anywhere",
              "isCorrect": false
            },
            {
              "id": "76f10bde-3a3b-42dc-a775-c76abf2e97d1",
              "title": "Only inside unsafe block",
              "isCorrect": true
            },
            {
              "id": "f87fc6ad-608d-4714-94ea-d5f74c172296",
              "title": "With special compiler flag",
              "isCorrect": false
            },
            {
              "id": "2f8a2669-4a62-4577-82cd-307eac9fe22b",
              "title": "Through wrapper",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unsafe functions must be called inside unsafe block",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e16c025b-3f21-4bb0-aa36-34a12415cd4b",
          "title": "Is unsafe block needed inside unsafe function for unsafe operations?",
          "answers": [
            {
              "id": "991e6452-524e-4c98-955b-b77f296cbea4",
              "title": "No, function is already unsafe",
              "isCorrect": false
            },
            {
              "id": "b8b5a4cc-cde7-4dfc-86aa-6705d4fb4a32",
              "title": "Yes, compiler will warn if forgotten",
              "isCorrect": true
            },
            {
              "id": "73701535-6c47-48cd-9bb0-f3bcf5c17703",
              "title": "Depends on operation",
              "isCorrect": false
            },
            {
              "id": "6f425818-fb80-4000-8e7e-deb24e8605ec",
              "title": "Only for raw pointers",
              "isCorrect": false
            }
          ],
          "descriptionText": "Even inside unsafe function, unsafe blocks are needed for unsafe operations",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "29d2a069-1adb-42b0-948c-fa0f5d3909f3",
          "title": "What is a safe abstraction?",
          "answers": [
            {
              "id": "cf3f4766-86a8-4b05-973e-92054af42bc6",
              "title": "Abstract type",
              "isCorrect": false
            },
            {
              "id": "dcaf24d4-bc65-4e90-93f6-12c29d8668a4",
              "title": "Safe wrapper around unsafe code",
              "isCorrect": true
            },
            {
              "id": "701b6a5d-20b7-4400-a43e-171a766f20b1",
              "title": "Type without unsafe",
              "isCorrect": false
            },
            {
              "id": "ad23ea84-efc2-450e-bbec-f6698e6bccb8",
              "title": "Abstract function",
              "isCorrect": false
            }
          ],
          "descriptionText": "Safe abstraction is a safe interface over unsafe code",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "99113a41-55fb-4dbf-8b33-f9b9b375db1c",
          "title": "What does extern \"C\" do?",
          "answers": [
            {
              "id": "38e83598-c2d7-4b43-89b9-d64544f69e99",
              "title": "Imports C code",
              "isCorrect": false
            },
            {
              "id": "44f37fe6-0763-4d7f-8152-6fe050e02fc8",
              "title": "Defines ABI for interacting with external code",
              "isCorrect": true
            },
            {
              "id": "24c5c0c7-aa71-411d-b396-8c697f132848",
              "title": "Compiles to C",
              "isCorrect": false
            },
            {
              "id": "4e11b586-2058-4438-bf27-246a0488bcb3",
              "title": "Creates C library",
              "isCorrect": false
            }
          ],
          "descriptionText": "extern \"C\" defines ABI (Application Binary Interface) for calling functions from other languages",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b363a32c-50d6-4ec2-a56d-173ed2ac2e94",
          "title": "Must extern block be unsafe?",
          "answers": [
            {
              "id": "d80409f0-91d7-48ec-8e89-f1a4dac2d6ca",
              "title": "No, never",
              "isCorrect": false
            },
            {
              "id": "c912765d-9f86-4e33-8d03-990f7ec59728",
              "title": "Yes, always",
              "isCorrect": true
            },
            {
              "id": "445da1ae-274b-4570-9b53-74e71d4cb650",
              "title": "Only for some functions",
              "isCorrect": false
            },
            {
              "id": "9e77dcef-7222-42d7-b1a1-1f2357949976",
              "title": "Depends on language",
              "isCorrect": false
            }
          ],
          "descriptionText": "Extern blocks must be unsafe since Rust cannot verify external code",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "62e8d942-af44-4dcd-ad4f-0e5413b6ba83",
          "title": "Can individual function in extern block be marked as safe?",
          "answers": [
            {
              "id": "1a0ac81b-fc80-4238-9c3e-bb1432fb2fde",
              "title": "No, all must be unsafe",
              "isCorrect": false
            },
            {
              "id": "c1e54598-a0d7-46a4-934c-c3b6918fe792",
              "title": "Yes, with safe keyword",
              "isCorrect": true
            },
            {
              "id": "8503cc71-f3b0-4b20-921a-dad97f52f2b8",
              "title": "Only for C functions",
              "isCorrect": false
            },
            {
              "id": "3a47185a-19ea-438c-873c-e545000e0a68",
              "title": "Automatically for some functions",
              "isCorrect": false
            }
          ],
          "descriptionText": "safe can be used for functions in unsafe extern blocks that are safe to call",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "78e0f970-fecb-4f36-a206-7abbe5cf6f49",
          "title": "How do static variables differ from constants?",
          "answers": [
            {
              "id": "11caf5f9-f19d-4ca1-9a22-0e8cfb20f79f",
              "title": "Nothing",
              "isCorrect": false
            },
            {
              "id": "6af7324f-bfd4-4805-b793-2b3b6a5f2c8a",
              "title": "Static have fixed address in memory",
              "isCorrect": true
            },
            {
              "id": "a571a966-de56-49b0-893e-c7a97b0361dc",
              "title": "Static are faster",
              "isCorrect": false
            },
            {
              "id": "67cfcd0c-31f0-4f70-984c-786eb9340418",
              "title": "Constants can be modified",
              "isCorrect": false
            }
          ],
          "descriptionText": "Static variables have fixed memory address, unlike constants",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "8116ef4a-217a-4925-b057-1f446b7a4302",
          "title": "Is accessing immutable static variable safe?",
          "answers": [
            {
              "id": "d9e63007-00e6-4869-aea2-01f7c48ce53c",
              "title": "No, always unsafe",
              "isCorrect": false
            },
            {
              "id": "1ecd8ebc-995e-42c7-bb7e-3f2355423a4d",
              "title": "Yes, it's safe",
              "isCorrect": true
            },
            {
              "id": "16a8586a-98c4-4752-a472-bff880703ed5",
              "title": "Depends on type",
              "isCorrect": false
            },
            {
              "id": "710910ea-d433-4d55-ab18-264b34c558e7",
              "title": "Only for reading",
              "isCorrect": false
            }
          ],
          "descriptionText": "Accessing immutable static variable is safe",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e6c0729f-f134-4beb-98f6-1b5f47fbb1f3",
          "title": "Why is accessing mutable static unsafe?",
          "answers": [
            {
              "id": "cdcecad6-dea2-4ece-844a-7657f7d87fa7",
              "title": "It's slow",
              "isCorrect": false
            },
            {
              "id": "2436638c-ee04-4ef1-9f60-4ed53dee91f5",
              "title": "Can cause data race in multithreading",
              "isCorrect": true
            },
            {
              "id": "f8d83f3b-1ac9-4525-bb45-d6809123cabb",
              "title": "Takes much memory",
              "isCorrect": false
            },
            {
              "id": "587e47b9-f45e-4c72-b394-221fb1bd18d7",
              "title": "It's deprecated",
              "isCorrect": false
            }
          ],
          "descriptionText": "Mutable static can be accessed from different threads, creating data race risk",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7d69cdeb-f91a-44ff-8d81-d98fa2e20696",
          "title": "What is an unsafe trait?",
          "answers": [
            {
              "id": "6d597a51-d714-4e5f-96c2-54f10a24d6a2",
              "title": "Trait with errors",
              "isCorrect": false
            },
            {
              "id": "0ce219f4-9835-4e14-8518-058c1a02257b",
              "title": "Trait with invariants compiler cannot verify",
              "isCorrect": true
            },
            {
              "id": "298c3f38-40f2-4c4d-a720-febeadf7306c",
              "title": "Deprecated trait",
              "isCorrect": false
            },
            {
              "id": "d95ba66e-1aa7-4dce-b9c8-a16856a3b486",
              "title": "Trait for systems programming",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unsafe trait has requirements that compiler cannot automatically verify",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2151f867-c63c-4a4f-a2f3-e0e6ca6e9990",
          "title": "How to declare unsafe trait?",
          "answers": [
            {
              "id": "99ff9737-4819-4d4b-8515-076e3a11e91d",
              "title": "trait Foo { unsafe fn ... }",
              "isCorrect": false
            },
            {
              "id": "8b1b2188-4281-46de-b8df-7b3b6eddfae6",
              "title": "unsafe trait Foo { ... }",
              "isCorrect": true
            },
            {
              "id": "72115449-2db8-4669-b828-4849363e7b69",
              "title": "#[unsafe] trait Foo { ... }",
              "isCorrect": false
            },
            {
              "id": "d7e877f1-84e0-4664-8a31-674ab56883bf",
              "title": "Cannot declare",
              "isCorrect": false
            }
          ],
          "descriptionText": "Unsafe trait is declared with unsafe keyword before trait",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ab719320-ab65-4710-b072-ae6abbf575c7",
          "title": "How to implement unsafe trait?",
          "answers": [
            {
              "id": "8219fef4-68e6-4f8b-84a0-6f1e68798a9c",
              "title": "Regular impl",
              "isCorrect": false
            },
            {
              "id": "fe394a8e-9dfe-4631-af5a-12b8e7f61153",
              "title": "unsafe impl",
              "isCorrect": true
            },
            {
              "id": "7920dec1-f845-4e6b-9332-7c00d93e4209",
              "title": "impl unsafe",
              "isCorrect": false
            },
            {
              "id": "d2af26ef-e4fb-4486-9e7c-0e38548d0ae0",
              "title": "With compiler flag",
              "isCorrect": false
            }
          ],
          "descriptionText": "Implementing unsafe trait requires unsafe impl",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c60301b9-99d6-4c6e-9a65-daf83ade8b29",
          "title": "What is Miri?",
          "answers": [
            {
              "id": "b3c7e84c-9047-44fc-82ce-216aae4ebc77",
              "title": "Rust compiler",
              "isCorrect": false
            },
            {
              "id": "c3060955-78d5-4224-9600-3c4a7ffc139c",
              "title": "Tool for detecting undefined behavior",
              "isCorrect": true
            },
            {
              "id": "7eb6930b-bbd9-42cd-8d21-338fd8af968d",
              "title": "Library for unsafe",
              "isCorrect": false
            },
            {
              "id": "b50c91fa-8bcb-4d10-a299-d12284ccb6d9",
              "title": "Runtime for async",
              "isCorrect": false
            }
          ],
          "descriptionText": "Miri is official Rust tool for detecting undefined behavior at runtime",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "2155187f-6eac-40e9-af4f-1e504a8910e4",
          "title": "What is an associated type in trait?",
          "answers": [
            {
              "id": "14b2ccb9-9ce5-4f41-aa90-f5205b39c880",
              "title": "Struct field type",
              "isCorrect": false
            },
            {
              "id": "7d4e670a-8ec6-4e27-94ee-1316fdc49e27",
              "title": "Placeholder for type determined during trait implementation",
              "isCorrect": true
            },
            {
              "id": "9a3213c5-dbf1-4e9a-a18d-40c6c20ed659",
              "title": "Generic type",
              "isCorrect": false
            },
            {
              "id": "45325cfb-8769-4179-9606-1fff069eb351",
              "title": "Method return type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Associated type is a placeholder that implementor specifies with concrete type",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "60298b51-d033-4a2a-86df-00259a6ff97e",
          "title": "What's the difference between associated type and generic for trait?",
          "answers": [
            {
              "id": "8ce17579-85e9-4fcb-9c63-b3ac8127aa89",
              "title": "No difference",
              "isCorrect": false
            },
            {
              "id": "7a6bd5d4-b30b-4b08-8f8e-256cdc3e0a2c",
              "title": "Associated type can only be specified once per type",
              "isCorrect": true
            },
            {
              "id": "fe8926ec-8e03-4ca3-a978-664ef30d4a76",
              "title": "Generic is faster",
              "isCorrect": false
            },
            {
              "id": "4a162cd8-e12c-48ac-914b-9b81898a05c2",
              "title": "Associated type only for Iterator",
              "isCorrect": false
            }
          ],
          "descriptionText": "With associated type, trait can be implemented only once per type; with generics — multiple times",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e2ea88c3-7738-49ed-9454-2deac7d0e467",
          "title": "What is a default type parameter?",
          "answers": [
            {
              "id": "61978ba2-3826-4429-af5c-645f9f28275f",
              "title": "Required parameter",
              "isCorrect": false
            },
            {
              "id": "b953ef5d-4304-4ee0-bb63-23ea2fd624db",
              "title": "Default type for generic parameter",
              "isCorrect": true
            },
            {
              "id": "c726365f-6652-44f2-9c8b-da1123af2978",
              "title": "First function parameter",
              "isCorrect": false
            },
            {
              "id": "ea8f91dc-fd25-43ca-95f5-7054af8ee293",
              "title": "Type from standard library",
              "isCorrect": false
            }
          ],
          "descriptionText": "Default type parameter is specified with syntax <PlaceholderType=ConcreteType>",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "441aec18-377b-4c37-bd00-7a03e6ea0459",
          "title": "What is fully qualified syntax?",
          "answers": [
            {
              "id": "fa0415f9-6333-45e7-99f7-596227013a95",
              "title": "Full module name",
              "isCorrect": false
            },
            {
              "id": "7143b325-adc7-438a-9443-eaebf48090b5",
              "title": "Syntax to explicitly specify which trait implementation to use",
              "isCorrect": true
            },
            {
              "id": "b05ad10d-0d27-41dd-a45b-c8a2b4527265",
              "title": "Generic syntax",
              "isCorrect": false
            },
            {
              "id": "c751f508-6b4d-4af0-99ed-8a50d84cb617",
              "title": "Full file path",
              "isCorrect": false
            }
          ],
          "descriptionText": "Fully qualified syntax: <Type as Trait>::function() for disambiguation",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "681a790f-4fcd-41fe-9da3-5f30175d0061",
          "title": "What is a supertrait?",
          "answers": [
            {
              "id": "da58f3ca-b464-4d0d-86ec-8099e65e8e7d",
              "title": "Most important trait",
              "isCorrect": false
            },
            {
              "id": "9ff71926-bf39-4bc8-8905-2c13e9c45bc6",
              "title": "Trait that another trait depends on",
              "isCorrect": true
            },
            {
              "id": "a869b124-2bab-480e-8cfc-56a99dded741",
              "title": "Base trait in hierarchy",
              "isCorrect": false
            },
            {
              "id": "ca7bbcd2-3759-4a2d-a228-595a37d0aa26",
              "title": "Trait from standard library",
              "isCorrect": false
            }
          ],
          "descriptionText": "Supertrait is a trait that must be implemented to implement dependent trait",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "3e51a10e-725f-441f-b0ab-3d57e7753787",
          "title": "How to specify supertrait?",
          "answers": [
            {
              "id": "339aa549-f7b8-4d8b-9f92-5fe6dbe09c9a",
              "title": "trait A: B { ... }",
              "isCorrect": true
            },
            {
              "id": "3ec9d27c-da4a-46b4-878b-b28a650d0e50",
              "title": "trait A extends B { ... }",
              "isCorrect": false
            },
            {
              "id": "2b76fc21-2742-47b5-93bd-2436b116860a",
              "title": "trait A -> B { ... }",
              "isCorrect": false
            },
            {
              "id": "0510c2a1-85b9-4ba9-92f0-fb5b97a6589a",
              "title": "trait A inherits B { ... }",
              "isCorrect": false
            }
          ],
          "descriptionText": "Supertrait is specified with syntax trait OutlinePrint: Display { ... }",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "bbef4683-94c3-46a7-ac44-96153d8eaa88",
          "title": "What is the newtype pattern?",
          "answers": [
            {
              "id": "7f186763-d4ae-49d1-9d06-60f040f410d0",
              "title": "New primitive type",
              "isCorrect": false
            },
            {
              "id": "25e34e88-9a66-4e80-a7af-1425d50b5cb3",
              "title": "Wrapping existing type in tuple struct",
              "isCorrect": true
            },
            {
              "id": "feab107d-bc2c-4ba8-a455-64c54a35e422",
              "title": "Generic type",
              "isCorrect": false
            },
            {
              "id": "a0b06df2-858b-4099-8270-e68a2d48d011",
              "title": "Enum variant",
              "isCorrect": false
            }
          ],
          "descriptionText": "Newtype pattern creates new type by wrapping in tuple struct with one field",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c46b7084-950c-42b3-bc39-58e4941d6d0b",
          "title": "Why is newtype pattern needed?",
          "answers": [
            {
              "id": "c5d2b958-6921-43d3-b065-908e330786b3",
              "title": "For speed",
              "isCorrect": false
            },
            {
              "id": "a889d702-6117-4e8d-b65e-1a2c39c6e095",
              "title": "Bypass orphan rule and type safety",
              "isCorrect": true
            },
            {
              "id": "15c21111-a7d1-4a7b-be15-3d0a38f79761",
              "title": "For code beauty",
              "isCorrect": false
            },
            {
              "id": "a973bc55-7f00-451d-8ca9-cec0c581eb6c",
              "title": "Mandatory requirement",
              "isCorrect": false
            }
          ],
          "descriptionText": "Newtype allows bypassing orphan rule and ensures type safety",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b757476a-ab4c-400e-9ee7-f4ea3cbe7b97",
          "title": "What is a type alias?",
          "answers": [
            {
              "id": "ca926d07-d16b-41dd-8e21-d71a8a2941b5",
              "title": "Type copy",
              "isCorrect": false
            },
            {
              "id": "51d64be3-a3d7-4505-a9e7-46883e404393",
              "title": "Synonym for existing type",
              "isCorrect": true
            },
            {
              "id": "91ebd1b4-15e2-4bce-8abf-1d66422582e1",
              "title": "New type",
              "isCorrect": false
            },
            {
              "id": "8dd9660c-2259-49f0-8aba-283038e9b261",
              "title": "Generic type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Type alias is created with type Kilometers = i32, it's a synonym, not new type",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "ffc856ce-3c2e-4e38-8be6-27f508d9b303",
          "title": "Does type alias provide type safety like newtype?",
          "answers": [
            {
              "id": "3507582d-2aa7-4a22-b7f1-a9d34eae05f7",
              "title": "Yes, completely",
              "isCorrect": false
            },
            {
              "id": "abfd39e1-afc9-4768-80c2-866166775714",
              "title": "No, it's just a synonym",
              "isCorrect": true
            },
            {
              "id": "2a9557ec-94c5-493f-99f0-ed03ca4e221d",
              "title": "Partially",
              "isCorrect": false
            },
            {
              "id": "a2c683ae-e855-4b34-a16c-484b52d012f6",
              "title": "Depends on type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Type alias doesn't create new type, so doesn't provide additional type safety",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c8ca8951-7923-4aa1-8595-13d1bf1a130d",
          "title": "What is the never type (!)?",
          "answers": [
            {
              "id": "324edb55-3a78-4d1f-bd78-6e1c9f1179a1",
              "title": "Error type",
              "isCorrect": false
            },
            {
              "id": "84c9e55b-0cb2-40cd-b871-46532dc9ec4d",
              "title": "Type for functions that never return",
              "isCorrect": true
            },
            {
              "id": "e5d96a93-cac9-4600-ba66-94e6f295c793",
              "title": "Empty enum",
              "isCorrect": false
            },
            {
              "id": "2eca435e-1464-4480-b71d-46aa81845fe8",
              "title": "Type for panic",
              "isCorrect": false
            }
          ],
          "descriptionText": "Never type ! is used for functions that never return a value",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c3db5ab1-253a-46bc-a077-6b7335a55ce2",
          "title": "What functions return never type?",
          "answers": [
            {
              "id": "8a30977a-8de5-47f9-9108-9e34c443e3fe",
              "title": "Functions with errors",
              "isCorrect": false
            },
            {
              "id": "8097f5ff-d203-4b75-8ec2-09a45a708b90",
              "title": "Diverging functions (e.g., with infinite loop or panic)",
              "isCorrect": true
            },
            {
              "id": "ab2dcddf-37a1-4001-9809-300db83d5b05",
              "title": "Async functions",
              "isCorrect": false
            },
            {
              "id": "6a681779-5aed-4347-b3b4-41ed3d7ee0ad",
              "title": "Generic functions",
              "isCorrect": false
            }
          ],
          "descriptionText": "Functions with ! are called diverging — they never return control",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e27e800f-2a89-4f61-bce0-5599ebdc153d",
          "title": "What is DST (Dynamically Sized Type)?",
          "answers": [
            {
              "id": "8a12b38a-33c6-4d10-8359-e2d6f196e59f",
              "title": "Fixed-size type",
              "isCorrect": false
            },
            {
              "id": "3892631a-1a4c-45a5-a67e-c59f52e54bb2",
              "title": "Type whose size is only known at runtime",
              "isCorrect": true
            },
            {
              "id": "e36e4d20-16be-4606-8d3b-6755c0e0f0b9",
              "title": "Generic type",
              "isCorrect": false
            },
            {
              "id": "683a6147-07ef-4f5f-8ff4-c19b49a408ff",
              "title": "Type for dynamic memory",
              "isCorrect": false
            }
          ],
          "descriptionText": "DST is a type whose size can only be known at runtime",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1032ae66-27aa-4ac9-ab20-76d7c5afe11e",
          "title": "Is str (without &) a DST?",
          "answers": [
            {
              "id": "c5b7c48f-6a23-452f-b937-1c52fd98bf54",
              "title": "No, it's regular type",
              "isCorrect": false
            },
            {
              "id": "6ced81ed-c122-4fa6-8d23-cbba1238b083",
              "title": "Yes",
              "isCorrect": true
            },
            {
              "id": "e186bee6-3495-4c31-b42a-81e34749653b",
              "title": "Depends on context",
              "isCorrect": false
            },
            {
              "id": "03ab321e-01ca-4ca2-8ce0-7c860d78d9d2",
              "title": "Only in unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "str without reference is a DST since string length is only known at runtime",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "4d0b33f0-f7c3-4bdd-8b69-5ab4c7612a21",
          "title": "How to work with DST?",
          "answers": [
            {
              "id": "9feebfcb-1fd0-41c7-9cc3-dcd14391a41c",
              "title": "Directly",
              "isCorrect": false
            },
            {
              "id": "98db656d-42b9-47e2-820f-421f7ecfb236",
              "title": "Through pointer (reference or Box)",
              "isCorrect": true
            },
            {
              "id": "bfb4aeb7-3608-4afa-bb58-73f063e2875f",
              "title": "Only in unsafe",
              "isCorrect": false
            },
            {
              "id": "2daa76c0-0f74-4348-b7e6-959dbc5b540d",
              "title": "Cannot work",
              "isCorrect": false
            }
          ],
          "descriptionText": "DST must be used through pointer: &str, Box<str>, &dyn Trait, etc",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9aec2842-176d-47d7-9070-d4d6c4fb4c18",
          "title": "What is the Sized trait?",
          "answers": [
            {
              "id": "9addce98-0ca7-4aef-b828-f3d5451d58e1",
              "title": "Trait for large types",
              "isCorrect": false
            },
            {
              "id": "a246538d-43a1-4fb5-80b4-d645881924f9",
              "title": "Automatic trait for types with known size at compile time",
              "isCorrect": true
            },
            {
              "id": "cb092973-e918-48cb-a0bd-6308cd006b3c",
              "title": "Trait for DST",
              "isCorrect": false
            },
            {
              "id": "5878cc1d-d300-41e6-8aeb-41d94aa0e663",
              "title": "Trait for optimization",
              "isCorrect": false
            }
          ],
          "descriptionText": "Sized is automatically implemented for types with known size at compile time",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "b59e9c96-bbb5-4b24-9060-1b1008a8f765",
          "title": "What does ?Sized mean in trait bound?",
          "answers": [
            {
              "id": "5a3edda0-dbad-4016-9cea-3577ffa4b71c",
              "title": "Type must be Sized",
              "isCorrect": false
            },
            {
              "id": "68d16acd-7053-4ab7-85b2-bde4297a6eb0",
              "title": "Type may or may not be Sized",
              "isCorrect": true
            },
            {
              "id": "1fd0c027-838a-446d-b285-a2ad9b52a1d2",
              "title": "Type must not be Sized",
              "isCorrect": false
            },
            {
              "id": "07f161da-5c3d-4f34-933d-8b12e8936a2e",
              "title": "Syntax error",
              "isCorrect": false
            }
          ],
          "descriptionText": "?Sized means type may or may not be Sized, relaxing default requirement",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7952946f-fb10-40df-8ecd-e714dba4b10f",
          "title": "What is a function pointer (fn)?",
          "answers": [
            {
              "id": "2d443cfc-207f-42a9-a5d6-fe506dda7cd7",
              "title": "Pointer to any function",
              "isCorrect": false
            },
            {
              "id": "8d746942-b2fa-461c-b4b4-32a205833347",
              "title": "Type for passing functions as values",
              "isCorrect": true
            },
            {
              "id": "37529577-df2b-448e-ba76-0f1a94fb9079",
              "title": "Closure",
              "isCorrect": false
            },
            {
              "id": "7b6833bd-c3f1-42cf-aa8a-3943a9d32304",
              "title": "Trait for functions",
              "isCorrect": false
            }
          ],
          "descriptionText": "fn is function pointer type for passing functions as values",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "20d93baf-6f26-4edc-a099-f1612d889fe5",
          "title": "Do function pointers implement closure traits?",
          "answers": [
            {
              "id": "26493436-e83a-49c8-a0d7-96c45b8c2a32",
              "title": "No",
              "isCorrect": false
            },
            {
              "id": "a034e8fb-c221-416f-abf0-a0c5f51a8053",
              "title": "Yes, all three (Fn, FnMut, FnOnce)",
              "isCorrect": true
            },
            {
              "id": "f9446a3f-9bac-46bf-b80d-7c3b07615328",
              "title": "Only Fn",
              "isCorrect": false
            },
            {
              "id": "01b72750-f9ac-4068-a7d4-03d4d7eadeab",
              "title": "Depends on function",
              "isCorrect": false
            }
          ],
          "descriptionText": "Function pointers implement all three closure traits",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c450d362-ab82-44d0-8e94-750327dcb01d",
          "title": "How to return closure from function?",
          "answers": [
            {
              "id": "f6e12e32-d80f-4ef9-90ec-0982b798d580",
              "title": "fn() -> Fn",
              "isCorrect": false
            },
            {
              "id": "013bd42e-87af-44a8-8d85-c4464fec8f44",
              "title": "fn() -> impl Fn",
              "isCorrect": true
            },
            {
              "id": "e10cc042-9d30-4e04-ac41-8bd95ea4df44",
              "title": "fn() -> closure",
              "isCorrect": false
            },
            {
              "id": "9248c150-4c97-42d9-983f-de2ecc05c9a4",
              "title": "Cannot return",
              "isCorrect": false
            }
          ],
          "descriptionText": "Closures are returned via impl Trait syntax",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "7cbd791d-d699-4ea9-8806-3f6acdf0ff06",
          "title": "When is Box<dyn Fn> needed for returning closure?",
          "answers": [
            {
              "id": "76e305ff-3a8c-4f45-a999-0a8c64ea581b",
              "title": "Always",
              "isCorrect": false
            },
            {
              "id": "f81a4ade-d5c3-4b64-9819-da020748d3de",
              "title": "When need to return different closure types from one collection",
              "isCorrect": true
            },
            {
              "id": "d02392f5-6626-44a1-beb1-efeb8a6df735",
              "title": "Never",
              "isCorrect": false
            },
            {
              "id": "e33d4f29-f25f-44eb-a0c5-f55cdcfc5e73",
              "title": "Only in unsafe",
              "isCorrect": false
            }
          ],
          "descriptionText": "Box<dyn Fn> is needed to work with different closures of one trait as one type",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "c2362935-2d3b-4a13-8cde-34539c844c4a",
          "title": "What is metaprogramming?",
          "answers": [
            {
              "id": "0ade9fe3-43fc-4c9b-9b32-305286e25a0a",
              "title": "AI programming",
              "isCorrect": false
            },
            {
              "id": "782616fa-df62-4000-a45d-7232839e17f0",
              "title": "Code that writes other code",
              "isCorrect": true
            },
            {
              "id": "bd655e44-0671-4210-a4f8-3d1f50c06bae",
              "title": "Parallel programming",
              "isCorrect": false
            },
            {
              "id": "e64035a3-4592-4041-82cd-c9fd24dbe615",
              "title": "Low-level programming",
              "isCorrect": false
            }
          ],
          "descriptionText": "Metaprogramming is writing code that generates other code",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "e3e3f2a5-74d0-4f1b-9322-ed38ac79a250",
          "title": "How do macros differ from functions?",
          "answers": [
            {
              "id": "c87b4753-d027-47e2-bc02-6654fa8dfe3a",
              "title": "Nothing",
              "isCorrect": false
            },
            {
              "id": "d7ccd772-03ed-4b0d-819c-50d6cfd769cd",
              "title": "Macros expand before compilation and can take variable arguments",
              "isCorrect": true
            },
            {
              "id": "d0ae0936-3e21-4a98-a8e1-0c11ae3c8554",
              "title": "Macros are faster",
              "isCorrect": false
            },
            {
              "id": "815ceaad-4043-4364-ac6a-246c647be003",
              "title": "Functions are deprecated",
              "isCorrect": false
            }
          ],
          "descriptionText": "Macros expand before compilation and are more flexible than functions",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "973d6f7f-2de7-4d88-9aa3-afa5bf343cc6",
          "title": "What is a declarative macro?",
          "answers": [
            {
              "id": "9aef995c-c9be-465b-8938-b777bcb2a7bb",
              "title": "Macro with declaration",
              "isCorrect": false
            },
            {
              "id": "d80c49cc-d791-4378-aca3-55d5c29aefe8",
              "title": "Macro with macro_rules!, working via pattern matching",
              "isCorrect": true
            },
            {
              "id": "e6a0dc08-d597-475f-acae-e96f4981b69d",
              "title": "Procedural macro",
              "isCorrect": false
            },
            {
              "id": "51094515-6486-4ea1-8831-01af3669f2d4",
              "title": "Deprecated macro type",
              "isCorrect": false
            }
          ],
          "descriptionText": "Declarative macros are created with macro_rules! and use pattern matching",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "d10f0803-ab19-4982-90de-13f8bd9441c0",
          "title": "How many types of procedural macros exist?",
          "answers": [
            {
              "id": "3fa9b0af-6e21-4270-8c41-ff8b6dfcf975",
              "title": "One",
              "isCorrect": false
            },
            {
              "id": "481e6ca1-cb98-4104-9d73-6b722b44a167",
              "title": "Two",
              "isCorrect": false
            },
            {
              "id": "2a357932-2e65-49b7-9685-cace05a995bb",
              "title": "Three",
              "isCorrect": true
            },
            {
              "id": "28f15f79-cc45-451c-b5b3-d7930784b2be",
              "title": "Four",
              "isCorrect": false
            }
          ],
          "descriptionText": "Three types: custom derive, attribute-like, and function-like macros",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6454e8f1-1a18-497c-a863-3bd6fb21b6d2",
          "title": "What is a custom derive macro?",
          "answers": [
            {
              "id": "4cd11257-4941-49f8-8022-071b86682706",
              "title": "Macro for deriving",
              "isCorrect": false
            },
            {
              "id": "67f28ff9-2e5c-4f00-8d63-d343fbcf6081",
              "title": "Macro generating code with #[derive] attribute",
              "isCorrect": true
            },
            {
              "id": "849c22c2-d66c-4144-8194-1c1bdd6e9d54",
              "title": "Macro for structs",
              "isCorrect": false
            },
            {
              "id": "9c8af8f3-ee6b-4af3-817c-abb6b387adb4",
              "title": "Macro for traits",
              "isCorrect": false
            }
          ],
          "descriptionText": "Custom derive macros generate code when using #[derive(YourMacro)]",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "a0e2d744-7efc-475a-9154-f4808e62d327",
          "title": "What does procedural macro accept and return?",
          "answers": [
            {
              "id": "eb47bba8-5524-419a-b134-9d85e8bd0af9",
              "title": "String and String",
              "isCorrect": false
            },
            {
              "id": "df917dc8-27f3-48dd-b2e4-355180592f05",
              "title": "TokenStream and TokenStream",
              "isCorrect": true
            },
            {
              "id": "89cc5e47-e0a5-404e-a9b9-1f0f61b35f9a",
              "title": "AST and AST",
              "isCorrect": false
            },
            {
              "id": "90fd2b43-0507-4476-97f0-0c98dba8c337",
              "title": "Code and Code",
              "isCorrect": false
            }
          ],
          "descriptionText": "Procedural macros work with TokenStream as input and output",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "9ce56730-4a3f-49b0-a7c4-5a133301f315",
          "title": "What does #[macro_export] attribute do?",
          "answers": [
            {
              "id": "d9aeaef2-4843-4322-892d-1c9d0fe2b741",
              "title": "Exports macro to file",
              "isCorrect": false
            },
            {
              "id": "69f11ae5-4d57-409e-ba11-bc0a67ebc62e",
              "title": "Makes macro available when importing crate",
              "isCorrect": true
            },
            {
              "id": "38231c49-2ed7-4430-954e-206ea4bc7e45",
              "title": "Compiles macro",
              "isCorrect": false
            },
            {
              "id": "15e60f4e-5a8e-4dc7-944a-250e2ee4f373",
              "title": "Removes macro",
              "isCorrect": false
            }
          ],
          "descriptionText": "#[macro_export] makes macro public when importing crate",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "09775e76-cd49-462e-a46c-96877ffc66f5",
          "title": "Where must procedural macros be located?",
          "answers": [
            {
              "id": "2949bb8e-165f-4d3d-a675-2ce91d3b4035",
              "title": "Anywhere",
              "isCorrect": false
            },
            {
              "id": "1589dd66-6fe9-42c8-8645-0875b2a30bfc",
              "title": "In separate crate with special type",
              "isCorrect": true
            },
            {
              "id": "ddd88857-0504-4d02-8229-1f3b514cfd50",
              "title": "In main.rs",
              "isCorrect": false
            },
            {
              "id": "2a4c590b-2310-4093-939a-fe907523ec49",
              "title": "In lib.rs",
              "isCorrect": false
            }
          ],
          "descriptionText": "Procedural macros require separate crate with type proc-macro = true",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "12e7845d-8d98-458b-82c1-614dec02b1b3",
          "title": "What does the syn crate do?",
          "answers": [
            {
              "id": "15ae1d71-1db6-474c-bd1d-3e9a0d153d0c",
              "title": "Synchronizes code",
              "isCorrect": false
            },
            {
              "id": "929ce6ed-9553-4969-9b97-074a8554a575",
              "title": "Parses Rust code from string into data structure",
              "isCorrect": true
            },
            {
              "id": "a2b6e451-ed65-4ae6-a86f-47ce5b0cc186",
              "title": "Compiles macros",
              "isCorrect": false
            },
            {
              "id": "9225e41e-8a4f-4be3-8f2e-9f5cd961a4d6",
              "title": "Checks syntax",
              "isCorrect": false
            }
          ],
          "descriptionText": "syn parses Rust code into data structure for manipulation",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "6dd96637-df6f-4c47-8b3f-99dd357725d6",
          "title": "What does the quote crate do?",
          "answers": [
            {
              "id": "3a9ed62a-4b53-4448-b0d6-9bdefa9bde33",
              "title": "Quotes code",
              "isCorrect": false
            },
            {
              "id": "76ed825d-0559-4717-8f32-18340bfbe5b0",
              "title": "Converts data structures back to Rust code",
              "isCorrect": true
            },
            {
              "id": "3b8461aa-f856-4993-a3c6-8fdf148483f9",
              "title": "Parses code",
              "isCorrect": false
            },
            {
              "id": "47b83900-9ff0-4b01-9aa3-e4cb28b02988",
              "title": "Documents macros",
              "isCorrect": false
            }
          ],
          "descriptionText": "quote converts syntax structures back to Rust code",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        },
        {
          "id": "1cdf41d4-8523-49dd-9faa-151675d72bf7",
          "title": "What is an attribute-like macro?",
          "answers": [
            {
              "id": "cf48276a-2116-4aa0-a595-ab789cf1daad",
              "title": "Macro for attributes",
              "isCorrect": false
            },
            {
              "id": "0012d0d4-9b6b-4531-b924-a63a6db20ccc",
              "title": "Macro creating new attributes for any elements",
              "isCorrect": true
            },
            {
              "id": "71e8d666-0400-4a71-b5c4-f95ac03f4eda",
              "title": "Derive macro",
              "isCorrect": false
            },
            {
              "id": "165e9023-71ad-4db6-828e-fc51a6fc9eb2",
              "title": "Function macro",
              "isCorrect": false
            }
          ],
          "descriptionText": "Attribute-like macros allow creating custom attributes for functions, struct, and other elements",
          "descriptionLink": "advanced_features_link",
          "hasUserAnswered": false,
          "isUserAnswerCorrect": false
        }
      ]
    }
  ]
}


